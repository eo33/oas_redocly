var l=function(o,d,e,i){function s(n){return n instanceof e?n:new e(function(u){u(n)})}return new(e||(e=Promise))(function(n,u){function f(t){try{r(i.next(t))}catch(c){u(c)}}function a(t){try{r(i.throw(t))}catch(c){u(c)}}function r(t){t.done?n(t.value):s(t.value).then(f,a)}r((i=i.apply(o,d||[])).next())})};import{REDOCLY_TEAMS_RBAC as v}from"@redocly/config";import{fromCurrentDir as m,PUBLIC_RBAC_SCOPE_ITEM as p}from"./copied-utils.js";function C(){return{id:"mock-server",processContent:o=>l(this,void 0,void 0,function*(){o.createRequestHandler("mock-server",m(import.meta.url,"./mock-server-request-handler.js"))}),afterRoutesCreated:(o,d)=>l(this,void 0,void 0,function*(){var e;const i=yield d.getConfig(),s=yield o.loadOpenApiDefinitions(d);for(const{relativePath:n,definition:u}of s){const f=(e=o.getRouteByFsPath(n))===null||e===void 0?void 0:e.slug;if(!f)continue;const a=`/_mock${f}`;o.addApiRoute({slug:a,isWildcard:!0,requestHandlerId:"mock-server",[v]:p,getStaticData:()=>l(this,void 0,void 0,function*(){var r,t,c;return{props:{definition:u,config:(c=(r=i.mockServer)!==null&&r!==void 0?r:(t=i.theme)===null||t===void 0?void 0:t.mockServer)!==null&&c!==void 0?c:{}}}})})}})}}export{C as default};
