"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.normalizeShowExtensions=normalizeShowExtensions,exports.normalizeScrollYOffset=normalizeScrollYOffset;const dom_1=require("../../utils/dom"),helpers_1=require("../../utils/helpers");function normalizeShowExtensions(e){if(void 0===e)return!1;if(""===e)return!0;if("string"!=typeof e)return e;switch(e){case"true":return!0;case"false":return!1;default:return e.split(",").map((e=>e.trim()))}}function normalizeScrollYOffset(e){if("string"==typeof e&&!(0,helpers_1.isNumeric)(e)){const r=(0,dom_1.querySelector)(e);r||console.warn("scrollYOffset value is a selector to non-existing element. Using offset 0 by default");const t=r&&r.getBoundingClientRect().bottom||0;return()=>t}return"number"==typeof e||(0,helpers_1.isNumeric)(e)?()=>"number"==typeof e?e:parseFloat(e):"function"==typeof e?()=>{const r=e();return"number"!=typeof r&&console.warn(`scrollYOffset should return number but returned value "${r}" of type ${typeof r}`),r}:(void 0!==e&&console.warn("Wrong value for scrollYOffset ReDoc option: should be string, number or function"),()=>0)}
//# sourceMappingURL=helpers.js.map