export declare const originalOptions: {
    withImports: boolean;
    withComments: boolean;
    skipOptionalParameters: boolean;
    withOAuth2Call: boolean;
    spec: {
        openapi: string;
        servers: {
            url: string;
            description: string;
        }[];
        info: {
            description: string;
            version: string;
            title: string;
            termsOfService: string;
            contact: {
                name: string;
                email: string;
                url: string;
            };
            'x-logo': {
                url: string;
                altText: string;
            };
            license: {
                name: string;
                url: string;
            };
        };
        externalDocs: {
            description: string;
            url: string;
        };
        tags: ({
            name: string;
            description: string;
            'x-displayName'?: undefined;
        } | {
            name: string;
            description?: undefined;
            'x-displayName'?: undefined;
        } | {
            name: string;
            'x-displayName': string;
            description: string;
        })[];
        'x-tagGroups': {
            name: string;
            tags: string[];
        }[];
        paths: {
            '/pet': {
                parameters: ({
                    name: string;
                    in: string;
                    description: string;
                    example: string;
                    required: boolean;
                    schema: {
                        type: string;
                        default: string;
                        format?: undefined;
                    };
                } | {
                    name: string;
                    in: string;
                    description: string;
                    required: boolean;
                    schema: {
                        type: string;
                        format: string;
                        default?: undefined;
                    };
                    example?: undefined;
                })[];
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    'x-codeSamples': {
                        lang: string;
                        source: string;
                    }[];
                    requestBody: {
                        $ref: string;
                    };
                };
                put: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    'x-codeSamples': {
                        lang: string;
                        source: string;
                    }[];
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/pet/{petId}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        deprecated: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                    security: {
                        api_key: never[];
                    }[];
                };
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/x-www-form-urlencoded': {
                                schema: {
                                    type: string;
                                    properties: {
                                        name: {
                                            description: string;
                                            type: string;
                                        };
                                        status: {
                                            description: string;
                                            type: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: ({
                        name: string;
                        in: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format?: undefined;
                        };
                        example: string;
                        description?: undefined;
                    } | {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                        example?: undefined;
                    })[];
                    responses: {
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/pet/{petId}/uploadImage': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/octet-stream': {
                                schema: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
            '/pet/{petId}/uploadImage/{data}': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/octet-stream': {
                                schema: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
            '/pet/findByStatus': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        style: string;
                        schema: {
                            type: string;
                            minItems: number;
                            maxItems: number;
                            items: {
                                type: string;
                                enum: string[];
                                default: string;
                            };
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/pet/findByTags': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    deprecated: boolean;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        style: string;
                        schema: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/store/inventory': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        additionalProperties: {
                                            type: string;
                                            format: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        api_key: never[];
                    }[];
                };
            };
            '/store/order': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                            content: {
                                'application/json': {
                                    example: {
                                        status: number;
                                        message: string;
                                    };
                                };
                            };
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
            };
            '/store/order/{orderId}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                            minimum: number;
                            maximum: number;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            minimum: number;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
            };
            '/store/subscribe': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    type: string;
                                    properties: {
                                        callbackUrl: {
                                            type: string;
                                            format: string;
                                            description: string;
                                            example: string;
                                        };
                                        eventName: {
                                            type: string;
                                            description: string;
                                            enum: string[];
                                            example: string;
                                        };
                                    };
                                    required: string[];
                                };
                            };
                        };
                    };
                    responses: {
                        '201': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        properties: {
                                            subscriptionId: {
                                                type: string;
                                                example: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    callbacks: {
                        orderInProgress: {
                            '{$request.body#/callbackUrl}?event={$request.body#/eventName}': {
                                servers: {
                                    url: string;
                                    description: string;
                                }[];
                                post: {
                                    summary: string;
                                    description: string;
                                    externalDocs: {
                                        description: string;
                                        url: string;
                                    };
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                            'application/xml': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                                example: string;
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                            content: {
                                                'application/json': {
                                                    schema: {
                                                        type: string;
                                                        properties: {
                                                            someProp: {
                                                                type: string;
                                                                example: string;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        '299': {
                                            description: string;
                                        };
                                        '500': {
                                            description: string;
                                        };
                                    };
                                    'x-codeSamples': {
                                        lang: string;
                                        source: string;
                                    }[];
                                };
                                put: {
                                    description: string;
                                    servers: {
                                        url: string;
                                        description: string;
                                    }[];
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                            'application/xml': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                                example: string;
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                            content: {
                                                'application/json': {
                                                    schema: {
                                                        type: string;
                                                        properties: {
                                                            someProp: {
                                                                type: string;
                                                                example: string;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        orderShipped: {
                            '{$request.body#/callbackUrl}?event={$request.body#/eventName}': {
                                post: {
                                    description: string;
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        estimatedDeliveryDate: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                        orderDelivered: {
                            'http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}': {
                                post: {
                                    deprecated: boolean;
                                    summary: string;
                                    description: string;
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            '/user': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
            };
            '/user/{username}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
                put: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
            };
            '/user/createWithArray': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/user/createWithList': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/user/login': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            headers: {
                                'X-Rate-Limit': {
                                    description: string;
                                    schema: {
                                        type: string;
                                        format: string;
                                    };
                                };
                                'X-Expires-After': {
                                    description: string;
                                    schema: {
                                        type: string;
                                        format: string;
                                    };
                                };
                            };
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                    };
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                    };
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                                'text/plain': {
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                };
            };
            '/user/logout': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                };
            };
        };
        components: {
            schemas: {
                ApiResponse: {
                    type: string;
                    properties: {
                        code: {
                            type: string;
                            format: string;
                        };
                        type: {
                            type: string;
                        };
                        message: {
                            type: string;
                        };
                    };
                };
                Cat: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            huntingSkill: {
                                type: string;
                                description: string;
                                default: string;
                                example: string;
                                enum: string[];
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                Category: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            minLength: number;
                        };
                        sub: {
                            description: string;
                            type: string;
                            properties: {
                                prop1: {
                                    type: string;
                                    description: string;
                                };
                            };
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Dog: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            packSize: {
                                type: string;
                                format: string;
                                description: string;
                                default: number;
                                minimum: number;
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                HoneyBee: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            honeyPerDay: {
                                type: string;
                                description: string;
                                example: number;
                                multipleOf: number;
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                Id: {
                    type: string;
                    format: string;
                    readOnly: boolean;
                };
                Order: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        petId: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        quantity: {
                            type: string;
                            format: string;
                            minimum: number;
                            default: number;
                        };
                        shipDate: {
                            description: string;
                            type: string;
                            format: string;
                        };
                        status: {
                            type: string;
                            description: string;
                            enum: string[];
                        };
                        complete: {
                            description: string;
                            type: string;
                            default: boolean;
                            readOnly: boolean;
                        };
                        requestId: {
                            description: string;
                            type: string;
                            writeOnly: boolean;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Pet: {
                    type: string;
                    required: string[];
                    discriminator: {
                        propertyName: string;
                        mapping: {
                            cat: string;
                            dog: string;
                            bee: string;
                        };
                    };
                    properties: {
                        id: {
                            externalDocs: {
                                description: string;
                                url: string;
                            };
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        category: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            example: string;
                        };
                        photoUrls: {
                            description: string;
                            type: string;
                            maxItems: number;
                            xml: {
                                name: string;
                                wrapped: boolean;
                            };
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                        friend: {
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        tags: {
                            description: string;
                            type: string;
                            minItems: number;
                            xml: {
                                name: string;
                                wrapped: boolean;
                            };
                            items: {
                                $ref: string;
                            };
                        };
                        status: {
                            type: string;
                            description: string;
                            enum: string[];
                        };
                        petType: {
                            description: string;
                            type: string;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Tag: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            minLength: number;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                User: {
                    type: string;
                    properties: {
                        id: {
                            $ref: string;
                        };
                        pet: {
                            oneOf: {
                                $ref: string;
                            }[];
                        };
                        username: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        firstName: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        lastName: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        email: {
                            description: string;
                            type: string;
                            format: string;
                            example: string;
                        };
                        password: {
                            type: string;
                            description: string;
                            format: string;
                            minLength: number;
                            pattern: string;
                            example: string;
                        };
                        phone: {
                            description: string;
                            type: string;
                            pattern: string;
                            example: string;
                        };
                        userStatus: {
                            description: string;
                            type: string;
                            format: string;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
            };
            requestBodies: {
                Pet: {
                    content: {
                        'application/json': {
                            schema: {
                                allOf: ({
                                    description: string;
                                    title: string;
                                    $ref?: undefined;
                                } | {
                                    $ref: string;
                                    description?: undefined;
                                    title?: undefined;
                                })[];
                            };
                        };
                        'application/xml': {
                            schema: {
                                type: string;
                                properties: {
                                    name: {
                                        type: string;
                                        description: string;
                                    };
                                };
                            };
                        };
                    };
                    description: string;
                    required: boolean;
                };
                UserArray: {
                    content: {
                        'application/json': {
                            schema: {
                                type: string;
                                items: {
                                    $ref: string;
                                };
                            };
                        };
                    };
                    description: string;
                    required: boolean;
                };
            };
            securitySchemes: {
                petstore_auth: {
                    description: string;
                    type: string;
                    flows: {
                        clientCredentials: {
                            tokenUrl: string;
                            scopes: {
                                'write:pets': string;
                                'read:pets': string;
                            };
                        };
                    };
                };
                api_key: {
                    description: string;
                    type: string;
                    name: string;
                    in: string;
                };
            };
            examples: {
                Order: {
                    value: {
                        quantity: number;
                        shipDate: string;
                        status: string;
                        complete: boolean;
                    };
                };
            };
        };
        'x-webhooks': {
            newPet: {
                post: {
                    summary: string;
                    description: string;
                    operationId: string;
                    tags: string[];
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                    };
                    responses: {
                        '200': {
                            description: string;
                        };
                    };
                };
            };
        };
    };
};
export declare const source: {
    "POST http://petstore.swagger.io/v2/pet": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: {
            name: string;
            value: string;
        }[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: never[];
        postData: {
            mimeType: string;
            text: string;
            params: never[];
            jsonObj: {
                category: {
                    name: string;
                    sub: {
                        prop1: string;
                    };
                };
                name: string;
                photoUrls: string[];
                friend: {};
                tags: {
                    name: string;
                }[];
                status: string;
                petType: string;
                huntingSkill: string;
            };
        };
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: {
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: never[];
            postData: {
                mimeType: string;
                text: string;
                params: {
                    name: string;
                    value: string;
                }[];
            };
            cookies: never[];
            headersSize: number;
            bodySize: number;
            securityOAuth2ExtraCalls: never[];
        }[];
        pathParameters: {};
        serverVariables: {};
        queryObj: {};
        headersObj: {
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        cookiesObj: {
            cookieParam: string;
        };
        allHeaders: {
            cookie: string;
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "POST http://petstore.swagger.io/v2/pet/{petId}/uploadImage/{data}": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: never[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: never[];
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: {
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: never[];
            postData: {
                mimeType: string;
                text: string;
                params: {
                    name: string;
                    value: string;
                }[];
            };
            cookies: never[];
            headersSize: number;
            bodySize: number;
            securityOAuth2ExtraCalls: never[];
        }[];
        pathParameters: {
            petId: string;
            data: string;
        };
        serverVariables: {};
        queryObj: {};
        headersObj: {
            'Content-Type': string;
            Authorization: string;
        };
        cookiesObj: {};
        allHeaders: {
            'Content-Type': string;
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "PUT http://petstore.swagger.io/v2/pet": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: {
            name: string;
            value: string;
        }[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: never[];
        postData: {
            mimeType: string;
            text: string;
            params: never[];
            jsonObj: {
                category: {
                    name: string;
                    sub: {
                        prop1: string;
                    };
                };
                name: string;
                photoUrls: string[];
                friend: {};
                tags: {
                    name: string;
                }[];
                status: string;
                petType: string;
                huntingSkill: string;
            };
        };
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: {
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: never[];
            postData: {
                mimeType: string;
                text: string;
                params: {
                    name: string;
                    value: string;
                }[];
            };
            cookies: never[];
            headersSize: number;
            bodySize: number;
            securityOAuth2ExtraCalls: never[];
        }[];
        pathParameters: {};
        serverVariables: {};
        queryObj: {};
        headersObj: {
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        cookiesObj: {
            cookieParam: string;
        };
        allHeaders: {
            cookie: string;
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "POST http://petstore.swagger.io/v2/pet/{petId}/uploadImage": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: never[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: never[];
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: {
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: never[];
            postData: {
                mimeType: string;
                text: string;
                params: {
                    name: string;
                    value: string;
                }[];
            };
            cookies: never[];
            headersSize: number;
            bodySize: number;
            securityOAuth2ExtraCalls: never[];
        }[];
        pathParameters: {
            petId: string;
        };
        serverVariables: {};
        queryObj: {};
        headersObj: {
            'Content-Type': string;
            Authorization: string;
        };
        cookiesObj: {};
        allHeaders: {
            'Content-Type': string;
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "GET http://petstore.swagger.io/v2/pet/findByStatus/{id}": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: never[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: {
            name: string;
            value: string;
        }[];
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: {
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: never[];
            postData: {
                mimeType: string;
                text: string;
                params: {
                    name: string;
                    value: string;
                }[];
            };
            cookies: never[];
            headersSize: number;
            bodySize: number;
            securityOAuth2ExtraCalls: never[];
        }[];
        pathParameters: {
            id: string;
        };
        serverVariables: {};
        queryObj: {
            status: string;
        };
        headersObj: {
            Authorization: string;
        };
        cookiesObj: {};
        allHeaders: {
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {
                status: string;
            };
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "POST https://{customerId}.saas-app.com:{port}/v2": {
        method: string;
        url: string;
        httpVersion: string;
        cookies: {
            name: string;
            value: string;
        }[];
        headers: {
            name: string;
            value: string;
        }[];
        queryString: never[];
        postData: {
            mimeType: string;
            text: string;
            params: never[];
            jsonObj: {
                category: {
                    name: string;
                    sub: {
                        prop1: string;
                    };
                };
                name: string;
                photoUrls: string[];
                friend: {};
                tags: {
                    name: string;
                }[];
                cvv_check: string;
                status: string;
                petType: string;
                huntingSkill: string;
            };
        };
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: never[];
        pathParameters: {};
        serverVariables: {
            customerId: string;
            port: string;
        };
        queryObj: {};
        headersObj: {
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        cookiesObj: {
            cookieParam: string;
        };
        allHeaders: {
            cookie: string;
            'Content-Type': string;
            'Accept-Language': string;
            Authorization: string;
        };
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "POST http://petstore.swagger.io/login": {
        method: string;
        url: string;
        httpVersion: string;
        headers: never[];
        queryString: never[];
        postData: {
            mimeType: string;
            text: string;
            params: never[];
            jsonObj: {};
        };
        basicAuth: {
            username: string;
            password: string;
        };
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: never[];
        pathParameters: {};
        queryObj: {};
        headersObj: {};
        cookiesObj: {};
        allHeaders: {};
        serverVariables: {};
        cookies: {
            name: string;
            value: string;
        }[];
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
    };
    "POST http://petstore.swagger.io/v2/uploadImage": {
        httpVersion: string;
        queryString: never[];
        basicAuth: {
            username: string;
            password: string;
        };
        headersSize: number;
        bodySize: number;
        securityOAuth2ExtraCalls: never[];
        pathParameters: {};
        queryObj: {};
        headersObj: {};
        cookiesObj: {};
        allHeaders: {};
        serverVariables: {};
        cookies: {
            name: string;
            value: string;
        }[];
        uriObj: {
            protocol: string;
            slashes: boolean;
            auth: null;
            host: string;
            port: null;
            hostname: string;
            hash: null;
            search: string;
            query: {};
            pathname: string;
            path: string;
            href: string;
        };
        fullUrl: string;
        method: string;
        url: string;
        headers: never[];
        postData: {
            mimeType: string;
            params: {
                name: string;
                value: string;
            }[];
        };
    };
};
export declare const serverVariablesOptions: {
    withImports: boolean;
    withComments: boolean;
    skipOptionalParameters: boolean;
    withOAuth2Call: boolean;
    spec: {
        servers: {
            url: string;
            variables: {
                customerId: {
                    default: string;
                    description: string;
                };
                port: {
                    enum: string[];
                    default: string;
                };
            };
        }[];
        openapi: string;
        info: {
            description: string;
            version: string;
            title: string;
            termsOfService: string;
            contact: {
                name: string;
                email: string;
                url: string;
            };
            'x-logo': {
                url: string;
                altText: string;
            };
            license: {
                name: string;
                url: string;
            };
        };
        externalDocs: {
            description: string;
            url: string;
        };
        tags: ({
            name: string;
            description: string;
            'x-displayName'?: undefined;
        } | {
            name: string;
            description?: undefined;
            'x-displayName'?: undefined;
        } | {
            name: string;
            'x-displayName': string;
            description: string;
        })[];
        'x-tagGroups': {
            name: string;
            tags: string[];
        }[];
        paths: {
            '/pet': {
                parameters: ({
                    name: string;
                    in: string;
                    description: string;
                    example: string;
                    required: boolean;
                    schema: {
                        type: string;
                        default: string;
                        format?: undefined;
                    };
                } | {
                    name: string;
                    in: string;
                    description: string;
                    required: boolean;
                    schema: {
                        type: string;
                        format: string;
                        default?: undefined;
                    };
                    example?: undefined;
                })[];
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    'x-codeSamples': {
                        lang: string;
                        source: string;
                    }[];
                    requestBody: {
                        $ref: string;
                    };
                };
                put: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    'x-codeSamples': {
                        lang: string;
                        source: string;
                    }[];
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/pet/{petId}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        deprecated: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                    security: {
                        api_key: never[];
                    }[];
                };
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '405': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/x-www-form-urlencoded': {
                                schema: {
                                    type: string;
                                    properties: {
                                        name: {
                                            description: string;
                                            type: string;
                                        };
                                        status: {
                                            description: string;
                                            type: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: ({
                        name: string;
                        in: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format?: undefined;
                        };
                        example: string;
                        description?: undefined;
                    } | {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                        example?: undefined;
                    })[];
                    responses: {
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/pet/{petId}/uploadImage': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/octet-stream': {
                                schema: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
            '/pet/{petId}/uploadImage/{data}': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                    requestBody: {
                        content: {
                            'application/octet-stream': {
                                schema: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
            '/pet/findByStatus': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        style: string;
                        schema: {
                            type: string;
                            minItems: number;
                            maxItems: number;
                            items: {
                                type: string;
                                enum: string[];
                                default: string;
                            };
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/pet/findByTags': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    deprecated: boolean;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        style: string;
                        schema: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                        items: {
                                            $ref: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                    security: {
                        petstore_auth: string[];
                    }[];
                };
            };
            '/store/inventory': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        additionalProperties: {
                                            type: string;
                                            format: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                    security: {
                        api_key: never[];
                    }[];
                };
            };
            '/store/order': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                            content: {
                                'application/json': {
                                    example: {
                                        status: number;
                                        message: string;
                                    };
                                };
                            };
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
            };
            '/store/order/{orderId}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            format: string;
                            minimum: number;
                            maximum: number;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                            minimum: number;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
            };
            '/store/subscribe': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    type: string;
                                    properties: {
                                        callbackUrl: {
                                            type: string;
                                            format: string;
                                            description: string;
                                            example: string;
                                        };
                                        eventName: {
                                            type: string;
                                            description: string;
                                            enum: string[];
                                            example: string;
                                        };
                                    };
                                    required: string[];
                                };
                            };
                        };
                    };
                    responses: {
                        '201': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                        properties: {
                                            subscriptionId: {
                                                type: string;
                                                example: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    callbacks: {
                        orderInProgress: {
                            '{$request.body#/callbackUrl}?event={$request.body#/eventName}': {
                                servers: {
                                    url: string;
                                    description: string;
                                }[];
                                post: {
                                    summary: string;
                                    description: string;
                                    externalDocs: {
                                        description: string;
                                        url: string;
                                    };
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                            'application/xml': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                                example: string;
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                            content: {
                                                'application/json': {
                                                    schema: {
                                                        type: string;
                                                        properties: {
                                                            someProp: {
                                                                type: string;
                                                                example: string;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        '299': {
                                            description: string;
                                        };
                                        '500': {
                                            description: string;
                                        };
                                    };
                                    'x-codeSamples': {
                                        lang: string;
                                        source: string;
                                    }[];
                                };
                                put: {
                                    description: string;
                                    servers: {
                                        url: string;
                                        description: string;
                                    }[];
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                            'application/xml': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                                example: string;
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                            content: {
                                                'application/json': {
                                                    schema: {
                                                        type: string;
                                                        properties: {
                                                            someProp: {
                                                                type: string;
                                                                example: string;
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        orderShipped: {
                            '{$request.body#/callbackUrl}?event={$request.body#/eventName}': {
                                post: {
                                    description: string;
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                        estimatedDeliveryDate: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                        orderDelivered: {
                            'http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}': {
                                post: {
                                    deprecated: boolean;
                                    summary: string;
                                    description: string;
                                    requestBody: {
                                        content: {
                                            'application/json': {
                                                schema: {
                                                    type: string;
                                                    properties: {
                                                        orderId: {
                                                            type: string;
                                                            example: string;
                                                        };
                                                        timestamp: {
                                                            type: string;
                                                            format: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    responses: {
                                        '200': {
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            '/user': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
            };
            '/user/{username}': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        $ref: string;
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
                put: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                        description: string;
                        required: boolean;
                    };
                };
                delete: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '400': {
                            description: string;
                        };
                        '404': {
                            description: string;
                        };
                    };
                };
            };
            '/user/createWithArray': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/user/createWithList': {
                post: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                    requestBody: {
                        $ref: string;
                    };
                };
            };
            '/user/login': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    parameters: {
                        name: string;
                        in: string;
                        description: string;
                        required: boolean;
                        schema: {
                            type: string;
                        };
                    }[];
                    responses: {
                        '200': {
                            description: string;
                            headers: {
                                'X-Rate-Limit': {
                                    description: string;
                                    schema: {
                                        type: string;
                                        format: string;
                                    };
                                };
                                'X-Expires-After': {
                                    description: string;
                                    schema: {
                                        type: string;
                                        format: string;
                                    };
                                };
                            };
                            content: {
                                'application/json': {
                                    schema: {
                                        type: string;
                                    };
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                                'application/xml': {
                                    schema: {
                                        type: string;
                                    };
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                                'text/plain': {
                                    examples: {
                                        response: {
                                            value: string;
                                        };
                                    };
                                };
                            };
                        };
                        '400': {
                            description: string;
                        };
                    };
                };
            };
            '/user/logout': {
                get: {
                    tags: string[];
                    summary: string;
                    description: string;
                    operationId: string;
                    responses: {
                        default: {
                            description: string;
                        };
                    };
                };
            };
        };
        components: {
            schemas: {
                ApiResponse: {
                    type: string;
                    properties: {
                        code: {
                            type: string;
                            format: string;
                        };
                        type: {
                            type: string;
                        };
                        message: {
                            type: string;
                        };
                    };
                };
                Cat: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            huntingSkill: {
                                type: string;
                                description: string;
                                default: string;
                                example: string;
                                enum: string[];
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                Category: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            minLength: number;
                        };
                        sub: {
                            description: string;
                            type: string;
                            properties: {
                                prop1: {
                                    type: string;
                                    description: string;
                                };
                            };
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Dog: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            packSize: {
                                type: string;
                                format: string;
                                description: string;
                                default: number;
                                minimum: number;
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                HoneyBee: {
                    description: string;
                    allOf: ({
                        $ref: string;
                        type?: undefined;
                        properties?: undefined;
                        required?: undefined;
                    } | {
                        type: string;
                        properties: {
                            honeyPerDay: {
                                type: string;
                                description: string;
                                example: number;
                                multipleOf: number;
                            };
                        };
                        required: string[];
                        $ref?: undefined;
                    })[];
                };
                Id: {
                    type: string;
                    format: string;
                    readOnly: boolean;
                };
                Order: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        petId: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        quantity: {
                            type: string;
                            format: string;
                            minimum: number;
                            default: number;
                        };
                        shipDate: {
                            description: string;
                            type: string;
                            format: string;
                        };
                        status: {
                            type: string;
                            description: string;
                            enum: string[];
                        };
                        complete: {
                            description: string;
                            type: string;
                            default: boolean;
                            readOnly: boolean;
                        };
                        requestId: {
                            description: string;
                            type: string;
                            writeOnly: boolean;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Pet: {
                    type: string;
                    required: string[];
                    discriminator: {
                        propertyName: string;
                        mapping: {
                            cat: string;
                            dog: string;
                            bee: string;
                        };
                    };
                    properties: {
                        id: {
                            externalDocs: {
                                description: string;
                                url: string;
                            };
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        category: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            example: string;
                        };
                        photoUrls: {
                            description: string;
                            type: string;
                            maxItems: number;
                            xml: {
                                name: string;
                                wrapped: boolean;
                            };
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                        friend: {
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        tags: {
                            description: string;
                            type: string;
                            minItems: number;
                            xml: {
                                name: string;
                                wrapped: boolean;
                            };
                            items: {
                                $ref: string;
                            };
                        };
                        status: {
                            type: string;
                            description: string;
                            enum: string[];
                        };
                        petType: {
                            description: string;
                            type: string;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                Tag: {
                    type: string;
                    properties: {
                        id: {
                            description: string;
                            allOf: {
                                $ref: string;
                            }[];
                        };
                        name: {
                            description: string;
                            type: string;
                            minLength: number;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
                User: {
                    type: string;
                    properties: {
                        id: {
                            $ref: string;
                        };
                        pet: {
                            oneOf: {
                                $ref: string;
                            }[];
                        };
                        username: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        firstName: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        lastName: {
                            description: string;
                            type: string;
                            minLength: number;
                            example: string;
                        };
                        email: {
                            description: string;
                            type: string;
                            format: string;
                            example: string;
                        };
                        password: {
                            type: string;
                            description: string;
                            format: string;
                            minLength: number;
                            pattern: string;
                            example: string;
                        };
                        phone: {
                            description: string;
                            type: string;
                            pattern: string;
                            example: string;
                        };
                        userStatus: {
                            description: string;
                            type: string;
                            format: string;
                        };
                    };
                    xml: {
                        name: string;
                    };
                };
            };
            requestBodies: {
                Pet: {
                    content: {
                        'application/json': {
                            schema: {
                                allOf: ({
                                    description: string;
                                    title: string;
                                    $ref?: undefined;
                                } | {
                                    $ref: string;
                                    description?: undefined;
                                    title?: undefined;
                                })[];
                            };
                        };
                        'application/xml': {
                            schema: {
                                type: string;
                                properties: {
                                    name: {
                                        type: string;
                                        description: string;
                                    };
                                };
                            };
                        };
                    };
                    description: string;
                    required: boolean;
                };
                UserArray: {
                    content: {
                        'application/json': {
                            schema: {
                                type: string;
                                items: {
                                    $ref: string;
                                };
                            };
                        };
                    };
                    description: string;
                    required: boolean;
                };
            };
            securitySchemes: {
                petstore_auth: {
                    description: string;
                    type: string;
                    flows: {
                        clientCredentials: {
                            tokenUrl: string;
                            scopes: {
                                'write:pets': string;
                                'read:pets': string;
                            };
                        };
                    };
                };
                api_key: {
                    description: string;
                    type: string;
                    name: string;
                    in: string;
                };
            };
            examples: {
                Order: {
                    value: {
                        quantity: number;
                        shipDate: string;
                        status: string;
                        complete: boolean;
                    };
                };
            };
        };
        'x-webhooks': {
            newPet: {
                post: {
                    summary: string;
                    description: string;
                    operationId: string;
                    tags: string[];
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: string;
                                };
                            };
                        };
                    };
                    responses: {
                        '200': {
                            description: string;
                        };
                    };
                };
            };
        };
    };
};
