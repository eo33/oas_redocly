"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MockIntersectionObserver=void 0;class MockIntersectionObserver{constructor(e,t){Object.defineProperty(this,"root",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"rootMargin",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"thresholds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"viewPort",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"entries",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"callback",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"intersect",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.entries.map((e=>{e.isIntersecting=this.isInViewPort(e.target)})),this.callback(this.entries,this)}}),this.viewPort=(null==t?void 0:t.root)?t.root:window,this.entries=[],this.root=null,this.rootMargin="0px",this.thresholds=[1],this.callback=e,this.viewPort.addEventListener("scroll",this.intersect)}isInViewPort(e){return"toc-0"!==e.id}observe(e){this.entries.push({isIntersecting:!1,target:e})}unobserve(e){this.entries=this.entries.filter((t=>t.target!==e))}disconnect(){this.viewPort.removeEventListener("scroll",this.intersect),this.entries=[]}takeRecords(){return this.entries}}exports.MockIntersectionObserver=MockIntersectionObserver;
//# sourceMappingURL=mock-intersection-observer.js.map