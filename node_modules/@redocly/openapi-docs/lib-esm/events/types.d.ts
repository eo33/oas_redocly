import type { OperationModel, Sample } from '../models';
export interface LanguageSwitchProps {
    operation: OperationModel;
    sample: Sample;
}
export interface PanelToggleProps {
    operation: OperationModel;
    isExpanded: boolean;
    panelType: PanelToggleEvent['panelType'];
}
export interface CodeSampleCopyProps {
    operation: OperationModel;
    lang?: string;
    label?: string;
    type: 'request' | 'response';
    exampleId?: string;
}
export interface TargetServerSwitchProps {
    operation: OperationModel;
    serverUrl: string;
}
export declare enum AnalyticsEventType {
    CodeSampleLanguageSwitched = "CodeSampleLanguageSwitched",
    CodeSampleCopied = "CodeSampleCopied",
    OperationServerExpanded = "OperationServerExpanded",
    PanelToggle = "PanelToggle",
    TargetServerSwitched = "TargetServerSwitched"
}
export interface AnalyticsEvent {
    eventType: AnalyticsEventType;
    resource: 'Redocly_CodeSample' | 'Redocly_Operation';
    action: 'LanguageSwitched' | 'PanelToggled' | 'Opened' | 'Closed' | 'NavigatedOverrideLink' | 'Sent' | 'ValidationFailed' | 'CodeSampleCopied' | 'TargetServerSwitched';
    operationId?: string;
    operationPath: string;
    operationHttpVerb: string;
    operationSummary?: string | GenericObject;
}
export interface CodeSamplesLanguageSwitchedEvent extends AnalyticsEvent {
    lang: string;
    label: string;
    exampleId?: string;
}
export interface CodeSamplesCopiedEvent extends AnalyticsEvent {
    lang: string;
    label: string;
    type: 'request' | 'response';
    exampleId?: string;
    exampleMimeType?: string;
}
export interface PanelToggleEvent extends AnalyticsEvent {
    panelType: 'request' | 'responses' | 'request-samples' | 'response-samples';
    state: 'expanded' | 'collapsed';
    operationId: string;
    operationPath: string;
    operationHttpVerb: string;
    operationSummary?: string | GenericObject;
}
export interface TargetServerSwitchedEvent extends AnalyticsEvent {
    serverUrl: string;
}
export type Events = {
    codeSamplesLanguageSwitch?: (event: CodeSamplesLanguageSwitchedEvent) => void;
    codeSamplesCopy?: (event: CodeSamplesCopiedEvent) => void;
    panelToggle?: (event: PanelToggleEvent) => void;
    targetServerSwitch?: (event: TargetServerSwitchedEvent) => void;
};
