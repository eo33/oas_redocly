import * as React from 'react';
import styled from 'styled-components';

import type { CatalogItem } from '@redocly/theme/core/types';

import { slug, capitalize, getScorecardColorVariable } from '@redocly/theme/core/utils';
import { useThemeHooks } from '@redocly/theme/core/hooks';
import { ArrowRightIcon } from '@redocly/theme/icons/ArrowRightIcon/ArrowRightIcon';
import { Link } from '@redocly/theme/components/Link/Link';
import { Tag } from '@redocly/theme/components/Tag/Tag';
import { CatalogHighlight } from '@redocly/theme/components/Catalog/CatalogHighlight';
import { Button } from '@redocly/theme/components/Button/Button';

export type CatalogCardProps = {
  item: CatalogItem;
};

export function CatalogCard({ item }: CatalogCardProps): JSX.Element {
  const { useTelemetry } = useThemeHooks();
  const telemetry = useTelemetry();
  return (
    <Link key={item.docsLink || item.link} to={item.docsLink || item.link}>
      <StyledCard
        data-component-name="Catalog/CatalogCard"
        onClick={() => telemetry.send('catalog_item_clicked', {})}
      >
        <CardContent>
          <CardTitleWrapper>
            <CardTitle>
              <CatalogHighlight>{item.title}</CatalogHighlight>
            </CardTitle>
          </CardTitleWrapper>
          <CardDescription>
            <CatalogHighlight>{item.summary ?? item.description ?? ''}</CatalogHighlight>
          </CardDescription>
        </CardContent>
        <CardFooter>
          <CardTags>
            {((item.tags as string[]) || []).map((tag, index) => (
              <CardTag key={tag + index} color={slug(tag)}>
                <CatalogHighlight>{capitalize(tag)}</CatalogHighlight>
              </CardTag>
            ))}
            {(item.scorecardLevel && (
              <Tag
                borderless
                withStatusDot
                statusDotColor={`var(${getScorecardColorVariable(
                  item.scorecardLevelIdx || 0,
                  Object.keys(item.scorecardLevels || {}).length,
                )})`}
              >
                <CatalogHighlight>{item.scorecardLevel}</CatalogHighlight>
              </Tag>
            )) ||
              null}
          </CardTags>
          <SelectButton size="medium" variant="secondary" icon={<ArrowRightIcon />} />
        </CardFooter>
      </StyledCard>
    </Link>
  );
}

const SelectButton = styled(Button)`
  border-radius: 100%;
  transition: all 0.2s ease-in-out;
`;

const StyledCard = styled.div`
  min-height: var(--catalog-card-min-height);
  height: 100%;
  color: var(--catalog-card-text-color);
  font-size: var(--catalog-card-font-size);
  font-weight: var(--catalog-card-font-weight);
  background-color: var(--catalog-card-bg-color);
  border: var(--catalog-card-border-width) var(--catalog-card-border-style)
    var(--catalog-card-border-color);
  transition: all 0.2s ease-in-out;
  border-radius: var(--catalog-card-border-radius);
  cursor: pointer;
  display: flex;
  gap: var(--catalog-card-gap);
  padding: var(--catalog-card-padding-vertical) var(--catalog-card-padding-horizontal);
  flex-direction: column;

  &:hover ${SelectButton} {
    transform: rotate(-45deg);
  }
`;

const CardTitleWrapper = styled.div`
  display: flex;
  align-items: center;
  min-height: var(--catalog-card-title-min-height);
`;

const CardTitle = styled.div`
  display: -webkit-box;
  -webkit-line-clamp: var(--catalog-card-title-line-clamp);
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;

  color: var(--catalog-card-title-color);
  font-size: var(--catalog-card-title-font-size);
  font-weight: var(--catalog-card-title-font-weight);
  line-height: var(--catalog-card-title-line-height);
  margin: 0;
`;

const CardDescription = styled.div`
  display: -webkit-box;
  -webkit-line-clamp: var(--catalog-card-description-line-clamp);
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  color: var(--catalog-card-description-color);
  font-size: var(--catalog-card-description-font-size);
  font-weight: var(--catalog-card-description-font-weight);
  line-height: var(--catalog-card-description-line-height);
`;

const CardContent = styled.div`
  flex: 1;
  display: flex;
  gap: var(--catalog-card-content-gap);
  flex-direction: column;
`;

const CardFooter = styled.div`
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
`;

const CardTags = styled.div`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: var(--spacing-xs);
  min-height: var(--spacing-xl);
`;

const CardTag = styled(Tag)`
  text-transform: inherit;
  margin: 0;
  background-color: var(--catalog-card-tag-bg);
`;
