import React, { memo } from 'react';

import type { TooltipProps } from '@redocly/theme/components/Tooltip/Tooltip';
import type { ControlItemType } from '@redocly/theme/components/CodeBlock/CodeBlockControls';

import { ClipboardService } from '@redocly/theme/core/utils';
import { useThemeHooks, useControl } from '@redocly/theme/core/hooks';
import { Button } from '@redocly/theme/components/Button/Button';
import { CopyIcon } from '@redocly/theme/icons/CopyIcon/CopyIcon';
import { Tooltip } from '@redocly/theme/components/Tooltip/Tooltip';

export type CopyButtonProps = {
  data: unknown;
  type?: ControlItemType;
  toasterPlacement?: TooltipProps['placement'];
  toasterText?: string;
  toasterDuration?: number;
  buttonText?: string;
  onCopyClick?: (e: React.MouseEvent<HTMLElement>) => void;
  dataTestId?: string;
  className?: string;
  variant?: string;
};

function CopyButtonComponent({
  data,
  type = 'icon',
  toasterPlacement = 'top',
  toasterText,
  toasterDuration,
  buttonText,
  onCopyClick,
  dataTestId = 'copy-button',
  className,
  variant = 'text',
}: CopyButtonProps): JSX.Element {
  const { useTranslate } = useThemeHooks();
  const tooltip = useControl();
  const { translate } = useTranslate();

  const showTooltip = (duration: number = 1500): void => {
    tooltip.handleOpen();

    setTimeout(() => {
      tooltip.handleClose();
    }, duration);
  };

  const copy = (e: React.MouseEvent<HTMLElement>, duration?: number): void => {
    const content = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
    ClipboardService.copyCustom(content);
    showTooltip(duration);
    onCopyClick?.(e);
  };

  return (
    <Tooltip
      className={`copy-button ${className ? className : ''}`}
      tip={translate('codeSnippet.copy.buttonText', toasterText || 'Copied!')}
      isOpen={tooltip.isOpened}
      placement={toasterPlacement}
    >
      <Button
        data-component-name="Buttons/CopyButton"
        onClick={(e) => copy(e, toasterDuration)}
        data-testid={dataTestId}
        icon={type === 'icon' ? <CopyIcon /> : undefined}
        size="small"
        variant={variant}
      >
        {type !== 'icon' && translate('codeSnippet.copy.toasterText', buttonText || 'Copy')}
      </Button>
    </Tooltip>
  );
}

export const CopyButton = memo<CopyButtonProps>(CopyButtonComponent);
