import React from 'react';
import styled from 'styled-components';

import type { SearchFacet, SearchFacetCount } from '@redocly/theme/core/types';

import { Tag, type TagProps } from '@redocly/theme/components/Tag/Tag';

type SearchFilterFieldTagsProps = {
  className?: string;
  facet: SearchFacet;
  selectedValues: string[];
  onChange: (value: string | string[]) => void;
};

export function SearchFilterFieldTags({
  className,
  facet,
  selectedValues,
  onChange,
}: SearchFilterFieldTagsProps) {
  return (
    <FilterTagsWrapper
      data-component-name="Search/FilterFields/SearchFilterFieldTags"
      className={className}
    >
      {facet.values.map((facetCount, index) => {
        const { value, count, isCounterVisible } = facetCount as SearchFacetCount;
        const active = selectedValues.includes(value);
        return (
          <FilterTagWrapper
            key={`${count}-${index}`}
            color={value}
            onClick={() => {
              const values = active
                ? selectedValues.filter((item) => item !== value)
                : [...selectedValues, value];
              onChange(values);
            }}
            active={active}
            borderless
          >
            {value} {isCounterVisible && <span>{count}</span>}
          </FilterTagWrapper>
        );
      })}
    </FilterTagsWrapper>
  );
}

const FilterTagsWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: var(--search-filter-field-tags-gap);
`;

const FilterTagWrapper = styled(Tag)<{ color: TagProps['color'] }>`
  text-transform: uppercase;
  cursor: pointer;
  ${({ color }) => color && `background-color: var(--tag-operation-bg-color-${color});`}
  margin: var(--search-filter-field-tags-tag-margin);
`;
