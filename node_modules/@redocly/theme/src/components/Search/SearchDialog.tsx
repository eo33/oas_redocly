import React, { Fragment, useRef, useState } from 'react';
import styled from 'styled-components';

import type { MouseEvent } from 'react';
import type { SearchFacetCount, SearchItemData } from '@redocly/theme/core/types';

import { SearchInput } from '@redocly/theme/components/Search/SearchInput';
import { SearchShortcut } from '@redocly/theme/components/Search/SearchShortcut';
import { SearchAiResponse } from '@redocly/theme/components/Search/SearchAiResponse';
import { Button } from '@redocly/theme/components/Button/Button';
import { breakpoints, concatClassNames } from '@redocly/theme/core/utils';
import { SearchItem } from '@redocly/theme/components/Search/SearchItem';
import { SearchRecent } from '@redocly/theme/components/Search/SearchRecent';
import { SearchSuggestedPages } from '@redocly/theme/components/Search/SearchSuggestedPages';
import { useThemeHooks, useDialogHotKeys, useSearchFilter } from '@redocly/theme/core/hooks';
import { Tag } from '@redocly/theme/components/Tag/Tag';
import { CloseIcon } from '@redocly/theme/icons/CloseIcon/CloseIcon';
import { SearchFilter } from '@redocly/theme/components/Search/SearchFilter';
import { SearchGroups } from '@redocly/theme/components/Search/SearchGroups';
import { SpinnerLoader } from '@redocly/theme/components/Loaders/SpinnerLoader';
import { SettingsIcon } from '@redocly/theme/icons/SettingsIcon/SettingsIcon';
import { AiStarsIcon } from '@redocly/theme/icons/AiStarsIcon/AiStarsIcon';

export type SearchDialogProps = {
  onClose: () => void;
  className?: string;
};

export function SearchDialog({ onClose, className }: SearchDialogProps): JSX.Element {
  const { useTranslate, useCurrentProduct, useSearch, useProducts, useAiSearch } = useThemeHooks();
  const products = useProducts();
  const currentProduct = useCurrentProduct();
  const [product, setProduct] = useState(currentProduct);
  const [mode, setMode] = useState<'search' | 'ai-dialog'>('search');
  const autoSearchDisabled = mode !== 'search';
  const {
    query,
    setQuery,
    filter,
    setFilter,
    items,
    isSearchLoading,
    facets,
    setLoadMore,
    advancedSearch,
    askAi,
  } = useSearch(product?.name, autoSearchDisabled);
  const {
    isFilterOpen,
    onFilterToggle,
    onFilterChange,
    onFilterReset,
    onFacetReset,
    onTopFacetsReset,
  } = useSearchFilter(filter, setFilter);
  const aiSearch = useAiSearch({ filter });

  const modalRef = useRef<HTMLDivElement>(null);
  const { translate } = useTranslate();

  useDialogHotKeys(modalRef, onClose);

  const handleOverlayClick = (event: MouseEvent<HTMLElement>) => {
    const target = event.target as HTMLElement;
    if (typeof target.className !== 'string') return;
    if (target.className?.includes(' overlay')) {
      onClose();
    }
  };

  const mapItem = (item: SearchItemData, index: number) => {
    let itemProduct;
    if (!product && item.document.product) {
      const resolvedProduct = products.find((product) =>
        product.slug.match(`/${item.document.product?.folder}/`),
      );
      itemProduct = resolvedProduct
        ? { name: resolvedProduct.name, icon: resolvedProduct.icon }
        : undefined;
    }
    return <SearchItem key={`${index}-${item.document.id}`} item={item} product={itemProduct} />;
  };

  const showLoadMore = (groupKey: string, currentCount: number = 0) => {
    const topFacet = facets.find((facet) => facet.isTop);
    let needLoadMore = false;
    if (topFacet) {
      const groupValue = topFacet.values.find((value) => {
        if (typeof value === 'object') {
          return value.value === groupKey;
        } else return false;
      }) as SearchFacetCount;
      needLoadMore = groupValue ? groupValue.count > currentCount : false;
    }
    return needLoadMore;
  };

  const showResults = !!((filter && filter.length) || query);
  const showSearchFilterButton = advancedSearch && mode === 'search';
  const showAiSearchButton = askAi && mode === 'search';
  const showHeaderButtons = showSearchFilterButton || showAiSearchButton;

  return (
    <SearchOverlay
      data-component-name="Search/SearchDialog"
      ref={modalRef}
      onClick={handleOverlayClick}
      className={concatClassNames('overlay', className)}
    >
      <SearchDialogWrapper className="scroll-lock" role="dialog">
        <SearchDialogHeader>
          {product && (
            <>
              <SearchProductTag color="product">
                {product.name}
                <CloseIcon onClick={() => setProduct(undefined)} color="--icon-color-additional" />
              </SearchProductTag>
            </>
          )}
          <SearchInput
            value={query}
            onChange={setQuery}
            placeholder={
              mode === 'search'
                ? translate('search.label', 'Search docs...')
                : translate('search.ai.label', 'Ask a follow up question')
            }
            isLoading={isSearchLoading}
            showReturnButton={mode === 'ai-dialog'}
            onReturn={() => setMode('search')}
            onSubmit={
              mode === 'ai-dialog'
                ? () => {
                    setQuery('');
                    aiSearch.askQuestion(query);
                  }
                : undefined
            }
            data-translation-key={mode === 'search' ? 'search.label' : 'search.ai.label'}
          />
          {showHeaderButtons && (
            <SearchHeaderButtons>
              {showAiSearchButton ? (
                <SearchAiButton
                  disabled={!query.trim()}
                  icon={<AiStarsIcon />}
                  onClick={() => {
                    setMode('ai-dialog');
                    setQuery('');
                    aiSearch.askQuestion(query);
                  }}
                >
                  {translate('search.aiButton', 'Search with AI')}
                </SearchAiButton>
              ) : null}
              {showSearchFilterButton && (
                <SearchFilterToggleButton icon={<SettingsIcon />} onClick={onFilterToggle} />
              )}
            </SearchHeaderButtons>
          )}
        </SearchDialogHeader>

        <SearchDialogBody>
          {mode === 'search' ? (
            <>
              <SearchDialogBodyMainView>
                <SearchGroups
                  facets={facets}
                  searchFilter={filter}
                  onFilterChange={onFilterChange}
                  onTopFacetsReset={onTopFacetsReset}
                />
                {showResults ? (
                  items && Object.keys(items).some((key) => items[key]?.length) ? (
                    Object.keys(items).map((key) =>
                      items[key]?.length ? (
                        <Fragment key={key}>
                          <SearchGroupTitle>{key}</SearchGroupTitle>
                          {items[key]?.map(mapItem)}
                          {showLoadMore(key, items[key]?.length || 0) && (
                            <SearchGroupFooter
                              data-translation-key="search.showMore"
                              onClick={() =>
                                setLoadMore({ groupKey: key, offset: items[key]?.length || 0 })
                              }
                            >
                              {translate('search.showMore', 'Show more')}
                            </SearchGroupFooter>
                          )}
                        </Fragment>
                      ) : null,
                    )
                  ) : isSearchLoading ? (
                    <SearchMessage>
                      <SpinnerLoader size="26px" color="var(--search-input-icon-color)" />
                      {translate('search.loading', 'Loading...')}
                    </SearchMessage>
                  ) : (
                    <SearchMessage data-translation-key="search.noResults">
                      <b>{translate('search.noResults.title', 'No results')}</b>
                    </SearchMessage>
                  )
                ) : (
                  <>
                    <SearchRecent onSelect={setQuery} />
                    <SearchSuggestedPages />
                  </>
                )}
              </SearchDialogBodyMainView>
              {advancedSearch && mode === 'search' && isFilterOpen && (
                <SearchDialogBodyFilterView>
                  <SearchFilter
                    facets={facets}
                    filter={filter}
                    query={query}
                    onFilterChange={onFilterChange}
                    onFilterReset={onFilterReset}
                    onFacetReset={onFacetReset}
                  />
                </SearchDialogBodyFilterView>
              )}
            </>
          ) : (
            <SearchAiResponse
              question={aiSearch.question}
              isGeneratingResponse={aiSearch.isGeneratingResponse}
              response={aiSearch.response}
              resources={aiSearch.resources}
            />
          )}
        </SearchDialogBody>
        {mode === 'search' && (
          <SearchDialogFooter>
            <SearchShortcuts>
              <SearchShortcut
                data-translation-key="search.keys.navigate"
                combination="Tab"
                text={translate('search.keys.navigate', 'to navigate')}
              />
              <SearchShortcut
                data-translation-key="search.keys.select"
                combination="⏎"
                text={translate('search.keys.select', 'to select')}
              />
              <SearchShortcut
                data-translation-key="search.keys.exit"
                combination="Esc"
                text={translate('search.keys.exit', 'to exit')}
              />
            </SearchShortcuts>
            {isSearchLoading && (
              <SearchLoading>
                <SpinnerLoader size="16px" color="var(--search-input-icon-color)" />
                {translate('search.loading', 'Loading...')}
              </SearchLoading>
            )}
            <SearchCancelButton
              data-translation-key="search.cancel"
              variant="secondary"
              size="small"
              onClick={onClose}
            >
              {translate('search.cancel', 'Cancel')}
            </SearchCancelButton>
          </SearchDialogFooter>
        )}
      </SearchDialogWrapper>
    </SearchOverlay>
  );
}

const SearchOverlay = styled.div`
  position: fixed;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: var(--bg-color-modal-overlay);
  z-index: var(--z-index-overlay);
`;

const SearchDialogWrapper = styled.div`
  display: flex;
  flex-direction: column;
  overflow: auto;
  width: 100vw;
  height: 100vh;
  background: var(--search-modal-bg-color);
  box-shadow: var(--search-modal-box-shadow);
  border-radius: 0;

  @media screen and (max-width: ${breakpoints.small}) {
    /* Ignore resize on mobile */
    width: 100vw !important;
    height: 100vh !important;
  }

  @media screen and (min-width: ${breakpoints.small}) {
    border-radius: var(--search-modal-border-radius);
    width: var(--search-modal-width);
    min-height: var(--search-modal-min-height);
    min-width: var(--search-modal-min-width);
    max-width: 95vw;
    max-height: 95vh;
    height: var(--search-modal-min-height);
    resize: both;
  }
`;

const SearchDialogHeader = styled.header`
  display: flex;
  align-items: center;
  border-bottom: var(--search-modal-border);
  background-color: var(--search-modal-header-bg-color);
  padding: var(--search-modal-header-padding);
`;

const SearchDialogBody = styled.div`
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  overflow: hidden;
`;

const SearchDialogBodyMainView = styled.div`
  flex: 2;
  flex-grow: 2;
  overflow-y: scroll;
  overscroll-behavior: contain;
  border-right: var(--search-modal-border);
`;

const SearchDialogBodyFilterView = styled.div`
  overflow: scroll;
`;

const SearchDialogFooter = styled.footer`
  display: flex;
  gap: var(--search-modal-footer-gap);
  padding: var(--search-modal-footer-padding);
  border-top: var(--search-modal-border);
`;

const SearchShortcuts = styled.div`
  display: none;
  justify-content: flex-start;
  align-items: center;
  gap: var(--search-shortcuts-gap);

  @media screen and (min-width: ${breakpoints.small}) {
    display: flex;
  }
`;

const SearchMessage = styled.div`
  display: flex;
  height: 40%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-size: var(--search-message-font-size);
  font-weight: var(--search-message-font-weight);
  line-height: var(--search-message-line-height);
  color: var(--search-message-text-color);
  gap: var(--search-message-gap);
`;

const SearchProductTag = styled(Tag)`
  --tag-border-radius: var(--border-radius);
  border: none;
  margin: var(--spacing-xs) var(--spacing-sm) !important;
`;

const SearchFilterToggleButton = styled(Button)`
  margin-left: 0;
`;

const SearchAiButton = styled(Button)`
  margin-left: 0;
`;

const SearchCancelButton = styled(Button)`
  width: 100%;

  @media screen and (min-width: ${breakpoints.small}) {
    display: none;
  }
`;

const SearchGroupTitle = styled.div`
  border-bottom: var(--search-modal-border);
  padding: var(--search-group-title-padding);
  background-color: var(--search-group-title-bg-color);
`;

const SearchGroupFooter = styled.div`
  display: flex;
  justify-content: center;
  padding: var(--search-group-footer-padding);
  color: var(--search-group-footer-text-color);
  cursor: pointer;
`;

const SearchLoading = styled.div`
  display: none;
  align-items: center;
  gap: var(--spacing-xs);

  @media screen and (min-width: ${breakpoints.small}) {
    display: flex;
  }
`;

const SearchHeaderButtons = styled.div`
  display: flex;
  gap: var(--search-header-buttons-gap);
  padding-left: var(--search-header-buttons-padding-left);
  border-left: var(--search-header-buttons-border-left);
`;
