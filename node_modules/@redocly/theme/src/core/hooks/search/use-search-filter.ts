import { useCallback, useState } from 'react';

import type { SearchFilterItem } from '@redocly/theme/core/types';

export function useSearchFilter(
  filter: SearchFilterItem[],
  setFilter: React.Dispatch<React.SetStateAction<SearchFilterItem[]>>,
) {
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  const onFilterToggle = useCallback(() => {
    setIsFilterOpen(!isFilterOpen);
  }, [isFilterOpen]);

  const onFilterChange = (field: string, value: string | string[] | undefined, isTop?: boolean) => {
    const values = value ? (Array.isArray(value) ? value : [value]) : [];

    const _filter = [...filter];
    const fieldIndex = _filter.findIndex((filter) => filter.field === field);
    if (fieldIndex > -1) {
      // filter field already exists
      _filter[fieldIndex].values = values;
    } else {
      if (!values.length) return;
      _filter.push({ field, values, isTop });
    }

    setFilter(_filter.filter((item) => item.values.length));
  };

  const onFilterReset = () => {
    setFilter([]);
  };

  const onTopFacetsReset = () => {
    const _filter = [...filter];
    setFilter(_filter.filter((item) => !item.isTop));
  };

  const onFacetReset = (field: string) => {
    const _filter = [...filter];
    const fieldIndex = _filter.findIndex((filter) => filter.field === field);
    if (fieldIndex !== -1) {
      _filter[fieldIndex].values = [];
    }
    setFilter(_filter.filter((item) => item.values.length));
  };

  return {
    onFacetReset,
    onTopFacetsReset,
    onFilterChange,
    onFilterReset,
    onFilterToggle,
    isFilterOpen,
  };
}
