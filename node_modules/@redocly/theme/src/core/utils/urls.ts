import type { Locale } from '@redocly/theme/core/types';

import { DEFAULT_LOCALE_PLACEHOLDER } from '@redocly/theme/core/constants';

export function combineUrls(baseURL: string, ...relativeURLs: string[]) {
  let res = baseURL;
  for (let relativeURL of relativeURLs) {
    res = relativeURL
      ? res.replace(/[\/\\]+$/, '') + '/' + relativeURL.replace(/^[\/\\]+/, '')
      : res;
  }

  return res;
}

export function withPathPrefix(url: string) {
  return combineUrls(getPathPrefix(), url);
}

export function withoutPathPrefix(pathname: string) {
  const pathPrefix = getPathPrefix();
  return pathPrefix && pathname.startsWith(pathPrefix)
    ? pathname.slice(pathPrefix.length)
    : pathname;
}

export function withoutHash(url: undefined | null): undefined;
export function withoutHash(url: string): string;
export function withoutHash(url: string | undefined): string | undefined;
export function withoutHash(url: string | undefined | null): string | undefined {
  if (url == null) return undefined;
  return url.split('#')[0];
}

export function getPathPrefix() {
  if (process.env.REDOCLY_PREFIX_PATHS) {
    return normalizePathPrefix(process.env.REDOCLY_PREFIX_PATHS);
  }

  return '';
}

export function normalizePathPrefix(prefix: string) {
  const withoutTrailing = removeTrailingSlash(prefix);
  return addLeadingSlash(withoutTrailing === '.' ? '' : withoutTrailing);
}

export function addLeadingSlash(url: string): string {
  return url.startsWith('/') ? url : `/${url}`;
}

export function removeTrailingSlash(url: string): string {
  return url.endsWith('/') ? url.substring(0, url.length - 1) : url;
}

export function removeLeadingSlash(url: string): string {
  return url.startsWith('/') ? url.substring(1) : url;
}

export function isPathInFolder(child: string, parent: string): boolean {
  parent = removeTrailingSlash(removeLeadingSlash(slash(parent)));
  child = removeTrailingSlash(removeLeadingSlash(slash(child)));
  return child === parent || child.startsWith(parent + '/');
}

/**
 * Convert Windows backslash paths to slash paths: foo\\bar âž” foo/bar
 *
 * @param  path
 * @return  slashed path
 */
export function slash(path: string): string {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path);

  if (isExtendedLengthPath) {
    return path;
  }

  return path.replace(/\\/g, `/`);
}

export function addTrailingSlash(url: string): string {
  return url.endsWith('/') ? url : `${url}/`;
}

/**
 * Adds locale to pathname, or replaces current locale in pathname with a new one
 * Also handles path prefix
 */
export function getPathnameForLocale(
  originalPathname: string,
  defaultLocale: string,
  newLocale: string,
  allLocales: Locale[],
) {
  const pathnameWithoutPrefix = withoutPathPrefix(originalPathname);

  const currentLocale = getLocaleFromPathname(originalPathname, defaultLocale, allLocales);

  if (currentLocale === newLocale) {
    return pathnameWithoutPrefix;
  }

  const pathnameWithoutLocale =
    currentLocale === defaultLocale
      ? pathnameWithoutPrefix
      : pathnameWithoutPrefix.slice(currentLocale.length + 1);

  const newLocalePrefix = newLocale === defaultLocale ? '' : '/' + newLocale;

  return `${newLocalePrefix.toLowerCase()}${pathnameWithoutLocale}`;
}

export function getLocaleFromPathname(
  pathname: string,
  defaultLocale: string = DEFAULT_LOCALE_PLACEHOLDER,
  allLocales: Locale[] = [],
) {
  const maybeLocale = withoutPathPrefix(pathname)?.split('/')[1];
  const locale = allLocales.find((locale) => locale.code.toLowerCase() === maybeLocale);

  return locale?.code || defaultLocale;
}
