export function findDeepFirst<T extends { items?: T[] }>(
  list: T[],
  cb: (item: T) => boolean,
): T | undefined {
  for (const item of list) {
    if (cb(item) === true) {
      return item;
    }
    if (item.items) {
      const nestedRes = findDeepFirst(item.items, cb);
      if (nestedRes !== undefined) return nestedRes;
    }
  }
}

export function toStringIfDefined(value: unknown): string | undefined {
  return value == undefined ? undefined : String(value);
}

/**
 * Returns true when the function executed in browser.
 */
export function isBrowser() {
  return typeof window !== 'undefined' && 'HTMLElement' in window;
}
