import type { PageProps, ResolvedNavItemWithLink, Version } from '@redocly/config';
import type { Callback, TFunction as TFunc } from 'i18next';
import type { To, Location } from 'react-router-dom';
import type { CatalogConfig, ProductUiConfig } from '@redocly/theme/config';
import type {
  UserMenuData,
  FilteredCatalog,
  ItemState,
  SearchItemData,
  SubmitFeedbackParams,
  TFunction,
  BreadcrumbItem,
  DrilldownMenuItemDetails,
  SearchFacet,
  SearchFilterItem,
  SearchFacetQuery,
} from '@redocly/theme/core/types';

export type ThemeHooks = {
  useTranslate: () => { translate: TFunction };
  /**
   * @deprecated use `useL10n` instead
   * */
  useI18n: () => {
    changeLanguage: (lng?: string | undefined, callback?: Callback | undefined) => Promise<TFunc>;
  };
  /**
   * @deprecated use `useL10nConfig` instead
   * */
  useI18nConfig: () => L10nConfig;
  useL10n: () => {
    changeLanguage: (lng?: string | undefined, callback?: Callback | undefined) => Promise<TFunc>;
  };
  useL10nConfig: () => L10nConfig;
  useCurrentProduct: () => ProductUiConfig | undefined;
  useProducts: () => ProductUiConfig[];
  usePageVersions: () => {
    versions: {
      link: string;
      version: string;
      label: string;
      default: boolean;
      active: boolean;
      folderId: string;
      'redocly::teams-rbac'?: { [x: string]: string };
    }[];
  };
  useUserMenu: () => UserMenuData;
  useSubmitFeedback: () => {
    submitFeedback: ({ type, values, path, location, lang }: SubmitFeedbackParams) => Promise<void>;
  };
  usePreloadHistory: () => {
    push: (location: To) => Promise<void>;
    location: Location;
  };
  useBreadcrumbs: () => BreadcrumbItem[];
  useSearch: (
    product?: string,
    autoSearchDisabled?: boolean,
  ) => {
    query: string;
    setQuery: React.Dispatch<React.SetStateAction<string>>;
    filter: SearchFilterItem[];
    setFilter: React.Dispatch<React.SetStateAction<SearchFilterItem[]>>;
    items: Record<string, SearchItemData[] | null>;
    isSearchLoading: boolean;
    facets: SearchFacet[];
    setLoadMore: React.Dispatch<
      React.SetStateAction<
        | {
            groupKey: string;
            offset: number;
          }
        | undefined
      >
    >;
    advancedSearch?: boolean;
    askAi?: boolean;
  };
  useAiSearch: (options?: { filter?: SearchFilterItem[] }) => {
    askQuestion: (question: string) => void;
    isGeneratingResponse: boolean;
    question: string;
    response?: string;
    resources: {
      title: string;
      url: string;
    }[];
  };
  useMarkdownText: (text: string) => React.ReactNode;
  useFacetQuery: (field: string) => {
    searchFacet: SearchFacet | null;
    setSearchFacet: React.Dispatch<React.SetStateAction<SearchFacet | null>>;
    setSearchFacetQuery: React.Dispatch<React.SetStateAction<SearchFacetQuery | null>>;
  };
  useSidebarItems: (activeVersion?: Version | null) => {
    currentItems: ItemState[];
    allSidebarItems: ItemState[];
    popDrilldownState: () => void;
    pushDrilldownState: (drilldownDetails: DrilldownMenuItemDetails) => void;
    backLink?: { slug?: string; label?: string };
  };
  useSidebarSiblingsData: () =>
    | {
        prevPage?: ResolvedNavItemWithLink;
        nextPage?: ResolvedNavItemWithLink;
      }
    | undefined;
  useCatalog: (config: CatalogConfig) => FilteredCatalog;
  useTelemetry: () => { send(action: TelemetryEvent, data: unknown): void };
  useUserTeams: () => string[];
  usePageProps: <T extends Record<string, unknown>>() => PageProps & T;
  useCodeHighlight: () => {
    highlight: (
      code: string,
      language?: string | undefined,
      highlightOptions?: {
        withLineNumbers?: boolean;
        startLineNumber?: number;
        highlight?: string;
      },
    ) => string;
  };
};

export type L10nConfig = {
  currentLocale: string;
  defaultLocale: string;
  locales: { code: string; name: string }[];
};

type TelemetryEvent =
  | 'search_opened'
  | 'client_error_caught'
  | 'breadcrumb_clicked'
  | 'color_mode_switched'
  | 'sidebar_item_clicked'
  | 'sidebar_item_expanded'
  | 'sidebar_item_collapsed'
  | 'edit_page_link_clicked'
  | 'code_snippet_copied'
  | 'code_snippet_reported'
  | 'feedback_sent'
  | 'navbar_menu_item_clicked'
  | 'login_button_clicked'
  | 'login_provider_button_clicked'
  | 'logout_menu_item_clicked'
  | 'logo_clicked'
  | 'toc_item_clicked'
  | 'version_switched'
  | 'catalog_filter_changed'
  | 'catalog_item_clicked'
  | 'scorecard_link_clicked'
  | 'markdown_anchor_link_clicked'
  | 'back_to_catalog_button_clicked'
  | 'sidebar_drilldown_back_button_clicked'
  | 'footer_item_clicked'
  | 'request_api_access_button_clicked'
  | 'sidebar_samples_button_clicked'
  | 'change_layout_button_clicked'
  | 'version_picker_selection_change'
  | 'openapi_docs'
  | 'replay'
  | 'catalog_actions_button_clicked'
  | 'catalog_item_clicked'
  | 'filter_checkbox_toggled'
  | 'language_picker_locale_changed'
  | 'mobile_menu_button_close_clicked'
  | 'mobile_menu_button_open_clicked'
  | 'search_input_reset_button_clicked'
  | 'search_recent_remove_button_clicked'
  | 'product_picked';
