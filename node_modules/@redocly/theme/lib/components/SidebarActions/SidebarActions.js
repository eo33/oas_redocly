"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SidebarActions = exports.LayoutVariant = void 0;
const react_1 = __importDefault(require("react"));
const config_1 = require("@redocly/config");
Object.defineProperty(exports, "LayoutVariant", { enumerable: true, get: function () { return config_1.LayoutVariant; } });
const hooks_1 = require("../../core/hooks");
const ChangeViewButton_1 = require("../../components/SidebarActions/ChangeViewButton");
const Button_1 = require("../../components/Button/Button");
const SidePanelCloseIcon_1 = require("../../icons/SidePanelCloseIcon/SidePanelCloseIcon");
const SidePanelOpenIcon_1 = require("../../icons/SidePanelOpenIcon/SidePanelOpenIcon");
const styled_1 = require("../../components/SidebarActions/styled");
const SidebarActions = ({ layout, hideCollapseSidebarButton = false, collapsedSidebar, isOpenapiDocs, onChangeViewClick, onChangeCollapseSidebarClick, requestAccessButton, className, }) => {
    const { useTelemetry, useTranslate } = (0, hooks_1.useThemeHooks)();
    const { translate } = useTranslate();
    const telemetry = useTelemetry();
    return (react_1.default.createElement(styled_1.ControlsWrap, { className: className, isCollapsed: collapsedSidebar, "data-component-name": "Sidebar/SidebarActions" },
        !hideCollapseSidebarButton && (react_1.default.createElement(Button_1.Button, { onClick: () => {
                var _a, _b;
                onChangeCollapseSidebarClick();
                if (collapsedSidebar) {
                    (_a = telemetry.send) === null || _a === void 0 ? void 0 : _a.call(telemetry, 'sidebar_item_expanded', {});
                }
                else {
                    (_b = telemetry.send) === null || _b === void 0 ? void 0 : _b.call(telemetry, 'sidebar_item_collapsed', {});
                }
            }, title: collapsedSidebar
                ? translate('sidebar.actions.show', 'Show sidebar')
                : translate('sidebar.actions.hide', 'Hide sidebar'), size: "small", variant: "outlined", icon: collapsedSidebar ? react_1.default.createElement(SidePanelOpenIcon_1.SidePanelOpenIcon, null) : react_1.default.createElement(SidePanelCloseIcon_1.SidePanelCloseIcon, null) })),
        isOpenapiDocs && (react_1.default.createElement(styled_1.ControlsWrapChangeLayoutButtons, { isCollapsed: collapsedSidebar },
            react_1.default.createElement(ChangeViewButton_1.ChangeViewButton, { collapsedSidebar: collapsedSidebar, layout: layout, onClick: () => {
                    var _a;
                    onChangeViewClick();
                    (_a = telemetry.send) === null || _a === void 0 ? void 0 : _a.call(telemetry, 'change_layout_button_clicked', {});
                } }))),
        !collapsedSidebar && requestAccessButton));
};
exports.SidebarActions = SidebarActions;
//# sourceMappingURL=SidebarActions.js.map