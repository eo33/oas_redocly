"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchAiResponse = SearchAiResponse;
const react_1 = __importDefault(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const Spinner_1 = require("../../icons/Spinner/Spinner");
const CheckmarkFilledIcon_1 = require("../../icons/CheckmarkFilledIcon/CheckmarkFilledIcon");
const DocumentIcon_1 = require("../../icons/DocumentIcon/DocumentIcon");
const Tag_1 = require("../../components/Tag/Tag");
const Link_1 = require("../../components/Link/Link");
const hooks_1 = require("../../core/hooks");
const Markdown_1 = require("../../components/Markdown/Markdown");
function SearchAiResponse(props) {
    const { useMarkdownText } = (0, hooks_1.useThemeHooks)();
    const { question, response, isGeneratingResponse, resources } = props;
    const { useTranslate } = (0, hooks_1.useThemeHooks)();
    const { translate } = useTranslate();
    const markdownResponse = useMarkdownText(response || '');
    return (react_1.default.createElement(ResponseWrapper, { "data-component-name": "Search/SearchAiResponse" },
        react_1.default.createElement(ResponseHeader, null,
            isGeneratingResponse ? (react_1.default.createElement(Spinner_1.Spinner, { size: "20px", color: "--search-ai-spinner-icon-color" })) : (react_1.default.createElement(CheckmarkFilledIcon_1.CheckmarkFilledIcon, { size: "20px", color: "--search-ai-checkmark-icon-color" })),
            react_1.default.createElement(Question, null, question)),
        react_1.default.createElement(ResponseBody, null,
            response ? (react_1.default.createElement(ResponseText, Object.assign({ children: markdownResponse, as: "div" }, props))) : (react_1.default.createElement(ThinkingResponseText, { "data-translation-key": "search.ai.thinkingText" }, translate('search.ai.thinkingText', 'Thinking...'))),
            resources.length && !isGeneratingResponse ? (react_1.default.createElement(Resources, null,
                react_1.default.createElement(ResourcesTitle, { "data-translation-key": "search.ai.resourcesFound" },
                    resources.length,
                    " ",
                    translate('search.ai.resourcesFound', 'resources found')),
                react_1.default.createElement(ResourceTags, null, resources.map((resource, idx) => (react_1.default.createElement(Link_1.Link, { key: idx, to: resource.url },
                    react_1.default.createElement(ResourceTag, { borderless: true, icon: react_1.default.createElement(DocumentIcon_1.DocumentIcon, { color: "--search-ai-resource-tag-icon-color" }) }, resource.title))))))) : null)));
}
const ResponseWrapper = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  flex: 2;
  flex-grow: 2;
  overflow-y: scroll;
  overscroll-behavior: contain;
  padding: var(--search-ai-response-padding);
  gap: var(--search-ai-response-gap);
`;
const ResponseHeader = styled_components_1.default.div `
  display: flex;
  flex-direction: row;
  gap: var(--search-ai-response-header-gap);
  align-items: center;
`;
const Question = styled_components_1.default.div `
  font-size: var(--search-ai-question-font-size);
  font-weight: var(--search-ai-question-font-weight);
  line-height: var(--search-ai-question-line-height);
  color: var(--search-ai-question-text-color);
`;
const ResponseBody = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: var(--search-ai-response-body-gap);
  padding: var(--search-ai-response-body-padding);
`;
const ResponseText = (0, styled_components_1.default)(Markdown_1.Markdown) `
  color: var(--search-ai-response-text-color);
  font-size: var(--search-ai-response-text-font-size);
  line-height: var(--search-ai-response-text-line-height);
  font-family: inherit;
  white-space: break-spaces;
`;
const ThinkingResponseText = styled_components_1.default.pre `
  color: var(--search-ai-response-text-color);
  font-size: var(--search-ai-response-text-font-size);
  line-height: var(--search-ai-response-text-line-height);
  font-family: inherit;
  white-space: break-spaces;
  margin: var(--md-pre-margin) 0;
  animation: fadeIn 2s ease-in-out infinite;

  @keyframes fadeIn {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.3;
    }
    100% {
      opacity: 1;
    }
  }
`;
const Resources = styled_components_1.default.div `
  gap: var(--search-ai-resources-gap);
  display: flex;
  flex-direction: column;
`;
const ResourcesTitle = styled_components_1.default.div `
  font-weight: var(--search-ai-resources-title-font-weight);
  font-size: var(--search-ai-resources-title-font-size);
  line-height: var(--search-ai-resources-title-line-height);
`;
const ResourceTags = styled_components_1.default.div `
  display: flex;
  flex-wrap: wrap;
  gap: var(--search-ai-resource-tags-gap);
`;
const ResourceTag = (0, styled_components_1.default)(Tag_1.Tag) `
  .tag-default {
    --tag-color: --search-ai-resource-tag-text-color;
  }
`;
//# sourceMappingURL=SearchAiResponse.js.map