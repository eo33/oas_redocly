"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchDialog = SearchDialog;
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const SearchInput_1 = require("../../components/Search/SearchInput");
const SearchShortcut_1 = require("../../components/Search/SearchShortcut");
const SearchAiResponse_1 = require("../../components/Search/SearchAiResponse");
const Button_1 = require("../../components/Button/Button");
const utils_1 = require("../../core/utils");
const SearchItem_1 = require("../../components/Search/SearchItem");
const SearchRecent_1 = require("../../components/Search/SearchRecent");
const SearchSuggestedPages_1 = require("../../components/Search/SearchSuggestedPages");
const hooks_1 = require("../../core/hooks");
const Tag_1 = require("../../components/Tag/Tag");
const CloseIcon_1 = require("../../icons/CloseIcon/CloseIcon");
const SearchFilter_1 = require("../../components/Search/SearchFilter");
const SearchGroups_1 = require("../../components/Search/SearchGroups");
const SpinnerLoader_1 = require("../../components/Loaders/SpinnerLoader");
const SettingsIcon_1 = require("../../icons/SettingsIcon/SettingsIcon");
const AiStarsIcon_1 = require("../../icons/AiStarsIcon/AiStarsIcon");
function SearchDialog({ onClose, className }) {
    const { useTranslate, useCurrentProduct, useSearch, useProducts, useAiSearch } = (0, hooks_1.useThemeHooks)();
    const products = useProducts();
    const currentProduct = useCurrentProduct();
    const [product, setProduct] = (0, react_1.useState)(currentProduct);
    const [mode, setMode] = (0, react_1.useState)('search');
    const autoSearchDisabled = mode !== 'search';
    const { query, setQuery, filter, setFilter, items, isSearchLoading, facets, setLoadMore, advancedSearch, askAi, } = useSearch(product === null || product === void 0 ? void 0 : product.name, autoSearchDisabled);
    const { isFilterOpen, onFilterToggle, onFilterChange, onFilterReset, onFacetReset, onTopFacetsReset, } = (0, hooks_1.useSearchFilter)(filter, setFilter);
    const aiSearch = useAiSearch({ filter });
    const modalRef = (0, react_1.useRef)(null);
    const { translate } = useTranslate();
    (0, hooks_1.useDialogHotKeys)(modalRef, onClose);
    const handleOverlayClick = (event) => {
        var _a;
        const target = event.target;
        if (typeof target.className !== 'string')
            return;
        if ((_a = target.className) === null || _a === void 0 ? void 0 : _a.includes(' overlay')) {
            onClose();
        }
    };
    const mapItem = (item, index) => {
        let itemProduct;
        if (!product && item.document.product) {
            const resolvedProduct = products.find((product) => { var _a; return product.slug.match(`/${(_a = item.document.product) === null || _a === void 0 ? void 0 : _a.folder}/`); });
            itemProduct = resolvedProduct
                ? { name: resolvedProduct.name, icon: resolvedProduct.icon }
                : undefined;
        }
        return react_1.default.createElement(SearchItem_1.SearchItem, { key: `${index}-${item.document.id}`, item: item, product: itemProduct });
    };
    const showLoadMore = (groupKey, currentCount = 0) => {
        const topFacet = facets.find((facet) => facet.isTop);
        let needLoadMore = false;
        if (topFacet) {
            const groupValue = topFacet.values.find((value) => {
                if (typeof value === 'object') {
                    return value.value === groupKey;
                }
                else
                    return false;
            });
            needLoadMore = groupValue ? groupValue.count > currentCount : false;
        }
        return needLoadMore;
    };
    const showResults = !!((filter && filter.length) || query);
    const showSearchFilterButton = advancedSearch && mode === 'search';
    const showAiSearchButton = askAi && mode === 'search';
    const showHeaderButtons = showSearchFilterButton || showAiSearchButton;
    return (react_1.default.createElement(SearchOverlay, { "data-component-name": "Search/SearchDialog", ref: modalRef, onClick: handleOverlayClick, className: (0, utils_1.concatClassNames)('overlay', className) },
        react_1.default.createElement(SearchDialogWrapper, { className: "scroll-lock", role: "dialog" },
            react_1.default.createElement(SearchDialogHeader, null,
                product && (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(SearchProductTag, { color: "product" },
                        product.name,
                        react_1.default.createElement(CloseIcon_1.CloseIcon, { onClick: () => setProduct(undefined), color: "--icon-color-additional" })))),
                react_1.default.createElement(SearchInput_1.SearchInput, { value: query, onChange: setQuery, placeholder: mode === 'search'
                        ? translate('search.label', 'Search docs...')
                        : translate('search.ai.label', 'Ask a follow up question'), isLoading: isSearchLoading, showReturnButton: mode === 'ai-dialog', onReturn: () => setMode('search'), onSubmit: mode === 'ai-dialog'
                        ? () => {
                            setQuery('');
                            aiSearch.askQuestion(query);
                        }
                        : undefined, "data-translation-key": mode === 'search' ? 'search.label' : 'search.ai.label' }),
                showHeaderButtons && (react_1.default.createElement(SearchHeaderButtons, null,
                    showAiSearchButton ? (react_1.default.createElement(SearchAiButton, { disabled: !query.trim(), icon: react_1.default.createElement(AiStarsIcon_1.AiStarsIcon, null), onClick: () => {
                            setMode('ai-dialog');
                            setQuery('');
                            aiSearch.askQuestion(query);
                        } }, translate('search.aiButton', 'Search with AI'))) : null,
                    showSearchFilterButton && (react_1.default.createElement(SearchFilterToggleButton, { icon: react_1.default.createElement(SettingsIcon_1.SettingsIcon, null), onClick: onFilterToggle }))))),
            react_1.default.createElement(SearchDialogBody, null, mode === 'search' ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(SearchDialogBodyMainView, null,
                    react_1.default.createElement(SearchGroups_1.SearchGroups, { facets: facets, searchFilter: filter, onFilterChange: onFilterChange, onTopFacetsReset: onTopFacetsReset }),
                    showResults ? (items && Object.keys(items).some((key) => { var _a; return (_a = items[key]) === null || _a === void 0 ? void 0 : _a.length; }) ? (Object.keys(items).map((key) => {
                        var _a, _b, _c;
                        return ((_a = items[key]) === null || _a === void 0 ? void 0 : _a.length) ? (react_1.default.createElement(react_1.Fragment, { key: key },
                            react_1.default.createElement(SearchGroupTitle, null, key), (_b = items[key]) === null || _b === void 0 ? void 0 :
                            _b.map(mapItem),
                            showLoadMore(key, ((_c = items[key]) === null || _c === void 0 ? void 0 : _c.length) || 0) && (react_1.default.createElement(SearchGroupFooter, { "data-translation-key": "search.showMore", onClick: () => { var _a; return setLoadMore({ groupKey: key, offset: ((_a = items[key]) === null || _a === void 0 ? void 0 : _a.length) || 0 }); } }, translate('search.showMore', 'Show more'))))) : null;
                    })) : isSearchLoading ? (react_1.default.createElement(SearchMessage, null,
                        react_1.default.createElement(SpinnerLoader_1.SpinnerLoader, { size: "26px", color: "var(--search-input-icon-color)" }),
                        translate('search.loading', 'Loading...'))) : (react_1.default.createElement(SearchMessage, { "data-translation-key": "search.noResults" },
                        react_1.default.createElement("b", null, translate('search.noResults.title', 'No results'))))) : (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement(SearchRecent_1.SearchRecent, { onSelect: setQuery }),
                        react_1.default.createElement(SearchSuggestedPages_1.SearchSuggestedPages, null)))),
                advancedSearch && mode === 'search' && isFilterOpen && (react_1.default.createElement(SearchDialogBodyFilterView, null,
                    react_1.default.createElement(SearchFilter_1.SearchFilter, { facets: facets, filter: filter, query: query, onFilterChange: onFilterChange, onFilterReset: onFilterReset, onFacetReset: onFacetReset }))))) : (react_1.default.createElement(SearchAiResponse_1.SearchAiResponse, { question: aiSearch.question, isGeneratingResponse: aiSearch.isGeneratingResponse, response: aiSearch.response, resources: aiSearch.resources }))),
            mode === 'search' && (react_1.default.createElement(SearchDialogFooter, null,
                react_1.default.createElement(SearchShortcuts, null,
                    react_1.default.createElement(SearchShortcut_1.SearchShortcut, { "data-translation-key": "search.keys.navigate", combination: "Tab", text: translate('search.keys.navigate', 'to navigate') }),
                    react_1.default.createElement(SearchShortcut_1.SearchShortcut, { "data-translation-key": "search.keys.select", combination: "\u23CE", text: translate('search.keys.select', 'to select') }),
                    react_1.default.createElement(SearchShortcut_1.SearchShortcut, { "data-translation-key": "search.keys.exit", combination: "Esc", text: translate('search.keys.exit', 'to exit') })),
                isSearchLoading && (react_1.default.createElement(SearchLoading, null,
                    react_1.default.createElement(SpinnerLoader_1.SpinnerLoader, { size: "16px", color: "var(--search-input-icon-color)" }),
                    translate('search.loading', 'Loading...'))),
                react_1.default.createElement(SearchCancelButton, { "data-translation-key": "search.cancel", variant: "secondary", size: "small", onClick: onClose }, translate('search.cancel', 'Cancel')))))));
}
const SearchOverlay = styled_components_1.default.div `
  position: fixed;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: var(--bg-color-modal-overlay);
  z-index: var(--z-index-overlay);
`;
const SearchDialogWrapper = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  overflow: auto;
  width: 100vw;
  height: 100vh;
  background: var(--search-modal-bg-color);
  box-shadow: var(--search-modal-box-shadow);
  border-radius: 0;

  @media screen and (max-width: ${utils_1.breakpoints.small}) {
    /* Ignore resize on mobile */
    width: 100vw !important;
    height: 100vh !important;
  }

  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    border-radius: var(--search-modal-border-radius);
    width: var(--search-modal-width);
    min-height: var(--search-modal-min-height);
    min-width: var(--search-modal-min-width);
    max-width: 95vw;
    max-height: 95vh;
    height: var(--search-modal-min-height);
    resize: both;
  }
`;
const SearchDialogHeader = styled_components_1.default.header `
  display: flex;
  align-items: center;
  border-bottom: var(--search-modal-border);
  background-color: var(--search-modal-header-bg-color);
  padding: var(--search-modal-header-padding);
`;
const SearchDialogBody = styled_components_1.default.div `
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  overflow: hidden;
`;
const SearchDialogBodyMainView = styled_components_1.default.div `
  flex: 2;
  flex-grow: 2;
  overflow-y: scroll;
  overscroll-behavior: contain;
  border-right: var(--search-modal-border);
`;
const SearchDialogBodyFilterView = styled_components_1.default.div `
  overflow: scroll;
`;
const SearchDialogFooter = styled_components_1.default.footer `
  display: flex;
  gap: var(--search-modal-footer-gap);
  padding: var(--search-modal-footer-padding);
  border-top: var(--search-modal-border);
`;
const SearchShortcuts = styled_components_1.default.div `
  display: none;
  justify-content: flex-start;
  align-items: center;
  gap: var(--search-shortcuts-gap);

  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    display: flex;
  }
`;
const SearchMessage = styled_components_1.default.div `
  display: flex;
  height: 40%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-size: var(--search-message-font-size);
  font-weight: var(--search-message-font-weight);
  line-height: var(--search-message-line-height);
  color: var(--search-message-text-color);
  gap: var(--search-message-gap);
`;
const SearchProductTag = (0, styled_components_1.default)(Tag_1.Tag) `
  --tag-border-radius: var(--border-radius);
  border: none;
  margin: var(--spacing-xs) var(--spacing-sm) !important;
`;
const SearchFilterToggleButton = (0, styled_components_1.default)(Button_1.Button) `
  margin-left: 0;
`;
const SearchAiButton = (0, styled_components_1.default)(Button_1.Button) `
  margin-left: 0;
`;
const SearchCancelButton = (0, styled_components_1.default)(Button_1.Button) `
  width: 100%;

  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    display: none;
  }
`;
const SearchGroupTitle = styled_components_1.default.div `
  border-bottom: var(--search-modal-border);
  padding: var(--search-group-title-padding);
  background-color: var(--search-group-title-bg-color);
`;
const SearchGroupFooter = styled_components_1.default.div `
  display: flex;
  justify-content: center;
  padding: var(--search-group-footer-padding);
  color: var(--search-group-footer-text-color);
  cursor: pointer;
`;
const SearchLoading = styled_components_1.default.div `
  display: none;
  align-items: center;
  gap: var(--spacing-xs);

  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    display: flex;
  }
`;
const SearchHeaderButtons = styled_components_1.default.div `
  display: flex;
  gap: var(--search-header-buttons-gap);
  padding-left: var(--search-header-buttons-padding-left);
  border-left: var(--search-header-buttons-border-left);
`;
//# sourceMappingURL=SearchDialog.js.map