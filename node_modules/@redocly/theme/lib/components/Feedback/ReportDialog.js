"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportDialog = ReportDialog;
const react_1 = __importDefault(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const react_router_dom_1 = require("react-router-dom");
const hooks_1 = require("../../core/hooks");
const Comment_1 = require("../../components/Feedback/Comment");
const Portal_1 = require("../../components/Portal/Portal");
function ReportDialog({ location, settings, onSubmit, onCancel, submitFeedback, lang, }) {
    const { label } = settings;
    const { useTelemetry } = (0, hooks_1.useThemeHooks)();
    const { pathname } = (0, react_router_dom_1.useLocation)();
    const telemetry = useTelemetry();
    return (react_1.default.createElement(Portal_1.Portal, null,
        react_1.default.createElement(ReportDialogWrapper, { className: "scroll-lock", "data-component-name": "Feedback/ReportDialog" },
            react_1.default.createElement(Comment_1.Comment, { settings: { label }, onSubmit: (value) => __awaiter(this, void 0, void 0, function* () {
                    yield submitFeedback({
                        type: 'problem',
                        values: value,
                        location,
                        path: pathname,
                        lang,
                    });
                    telemetry.send('code_snippet_reported', {});
                    onSubmit();
                }), isDialog: true, onCancel: onCancel }))));
}
const ReportDialogWrapper = styled_components_1.default.div `
  font-family: var(--font-family-base);
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: var(--bg-color-modal-overlay);
  z-index: var(--z-index-overlay);
  display: flex;
  align-items: center;
  justify-content: center;

  & > * {
    background: var(--modal-bg-color);
    box-shadow: var(--modal-box-shadow);
    padding: var(--spacing-base);
    margin: var(--spacing-base);
    max-width: var(--feedback-report-dialog-max-width);
    width: var(--feedback-report-dialog-width);
    max-height: var(--feedback-report-dialog-max-height);
  }
`;
//# sourceMappingURL=ReportDialog.js.map