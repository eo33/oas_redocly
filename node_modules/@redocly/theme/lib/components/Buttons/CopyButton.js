"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyButton = void 0;
const react_1 = __importStar(require("react"));
const utils_1 = require("../../core/utils");
const hooks_1 = require("../../core/hooks");
const Button_1 = require("../../components/Button/Button");
const CopyIcon_1 = require("../../icons/CopyIcon/CopyIcon");
const Tooltip_1 = require("../../components/Tooltip/Tooltip");
function CopyButtonComponent({ data, type = 'icon', toasterPlacement = 'top', toasterText, toasterDuration, buttonText, onCopyClick, dataTestId = 'copy-button', className, variant = 'text', }) {
    const { useTranslate } = (0, hooks_1.useThemeHooks)();
    const tooltip = (0, hooks_1.useControl)();
    const { translate } = useTranslate();
    const showTooltip = (duration = 1500) => {
        tooltip.handleOpen();
        setTimeout(() => {
            tooltip.handleClose();
        }, duration);
    };
    const copy = (e, duration) => {
        const content = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
        utils_1.ClipboardService.copyCustom(content);
        showTooltip(duration);
        onCopyClick === null || onCopyClick === void 0 ? void 0 : onCopyClick(e);
    };
    return (react_1.default.createElement(Tooltip_1.Tooltip, { className: `copy-button ${className ? className : ''}`, tip: translate('codeSnippet.copy.buttonText', toasterText || 'Copied!'), isOpen: tooltip.isOpened, placement: toasterPlacement },
        react_1.default.createElement(Button_1.Button, { "data-component-name": "Buttons/CopyButton", onClick: (e) => copy(e, toasterDuration), "data-testid": dataTestId, icon: type === 'icon' ? react_1.default.createElement(CopyIcon_1.CopyIcon, null) : undefined, size: "small", variant: variant }, type !== 'icon' && translate('codeSnippet.copy.toasterText', buttonText || 'Copy'))));
}
exports.CopyButton = (0, react_1.memo)(CopyButtonComponent);
//# sourceMappingURL=CopyButton.js.map