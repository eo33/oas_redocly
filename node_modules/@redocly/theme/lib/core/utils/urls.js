"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineUrls = combineUrls;
exports.withPathPrefix = withPathPrefix;
exports.withoutPathPrefix = withoutPathPrefix;
exports.withoutHash = withoutHash;
exports.getPathPrefix = getPathPrefix;
exports.normalizePathPrefix = normalizePathPrefix;
exports.addLeadingSlash = addLeadingSlash;
exports.removeTrailingSlash = removeTrailingSlash;
exports.removeLeadingSlash = removeLeadingSlash;
exports.isPathInFolder = isPathInFolder;
exports.slash = slash;
exports.addTrailingSlash = addTrailingSlash;
exports.getPathnameForLocale = getPathnameForLocale;
exports.getLocaleFromPathname = getLocaleFromPathname;
const constants_1 = require("../../core/constants");
function combineUrls(baseURL, ...relativeURLs) {
    let res = baseURL;
    for (let relativeURL of relativeURLs) {
        res = relativeURL
            ? res.replace(/[\/\\]+$/, '') + '/' + relativeURL.replace(/^[\/\\]+/, '')
            : res;
    }
    return res;
}
function withPathPrefix(url) {
    return combineUrls(getPathPrefix(), url);
}
function withoutPathPrefix(pathname) {
    const pathPrefix = getPathPrefix();
    return pathPrefix && pathname.startsWith(pathPrefix)
        ? pathname.slice(pathPrefix.length)
        : pathname;
}
function withoutHash(url) {
    if (url == null)
        return undefined;
    return url.split('#')[0];
}
function getPathPrefix() {
    if (process.env.REDOCLY_PREFIX_PATHS) {
        return normalizePathPrefix(process.env.REDOCLY_PREFIX_PATHS);
    }
    return '';
}
function normalizePathPrefix(prefix) {
    const withoutTrailing = removeTrailingSlash(prefix);
    return addLeadingSlash(withoutTrailing === '.' ? '' : withoutTrailing);
}
function addLeadingSlash(url) {
    return url.startsWith('/') ? url : `/${url}`;
}
function removeTrailingSlash(url) {
    return url.endsWith('/') ? url.substring(0, url.length - 1) : url;
}
function removeLeadingSlash(url) {
    return url.startsWith('/') ? url.substring(1) : url;
}
function isPathInFolder(child, parent) {
    parent = removeTrailingSlash(removeLeadingSlash(slash(parent)));
    child = removeTrailingSlash(removeLeadingSlash(slash(child)));
    return child === parent || child.startsWith(parent + '/');
}
/**
 * Convert Windows backslash paths to slash paths: foo\\bar âž” foo/bar
 *
 * @param  path
 * @return  slashed path
 */
function slash(path) {
    const isExtendedLengthPath = /^\\\\\?\\/.test(path);
    if (isExtendedLengthPath) {
        return path;
    }
    return path.replace(/\\/g, `/`);
}
function addTrailingSlash(url) {
    return url.endsWith('/') ? url : `${url}/`;
}
/**
 * Adds locale to pathname, or replaces current locale in pathname with a new one
 * Also handles path prefix
 */
function getPathnameForLocale(originalPathname, defaultLocale, newLocale, allLocales) {
    const pathnameWithoutPrefix = withoutPathPrefix(originalPathname);
    const currentLocale = getLocaleFromPathname(originalPathname, defaultLocale, allLocales);
    if (currentLocale === newLocale) {
        return pathnameWithoutPrefix;
    }
    const pathnameWithoutLocale = currentLocale === defaultLocale
        ? pathnameWithoutPrefix
        : pathnameWithoutPrefix.slice(currentLocale.length + 1);
    const newLocalePrefix = newLocale === defaultLocale ? '' : '/' + newLocale;
    return `${newLocalePrefix.toLowerCase()}${pathnameWithoutLocale}`;
}
function getLocaleFromPathname(pathname, defaultLocale = constants_1.DEFAULT_LOCALE_PLACEHOLDER, allLocales = []) {
    var _a;
    const maybeLocale = (_a = withoutPathPrefix(pathname)) === null || _a === void 0 ? void 0 : _a.split('/')[1];
    const locale = allLocales.find((locale) => locale.code.toLowerCase() === maybeLocale);
    return (locale === null || locale === void 0 ? void 0 : locale.code) || defaultLocale;
}
//# sourceMappingURL=urls.js.map