"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLoadProgress = withLoadProgress;
const nprogress_1 = __importDefault(require("nprogress"));
nprogress_1.default.configure({
    trickleSpeed: 100,
    template: '<div class="bar" role="bar"><div class="peg"></div></div>',
});
// Only the last caller should be able to call nprogress.done()
let lastCalledBy;
function withLoadProgress(loadTarget) {
    return __awaiter(this, void 0, void 0, function* () {
        const callIdentifier = Symbol();
        lastCalledBy = callIdentifier;
        // Cancel any existing progress and restart
        nprogress_1.default.done();
        nprogress_1.default.start();
        return loadTarget.finally(() => {
            if (lastCalledBy === callIdentifier) {
                nprogress_1.default.done();
                nprogress_1.default.remove();
            }
        });
    });
}
//# sourceMappingURL=with-load-progress.js.map