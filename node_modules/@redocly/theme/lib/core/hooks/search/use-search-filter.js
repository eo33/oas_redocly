"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSearchFilter = useSearchFilter;
const react_1 = require("react");
function useSearchFilter(filter, setFilter) {
    const [isFilterOpen, setIsFilterOpen] = (0, react_1.useState)(false);
    const onFilterToggle = (0, react_1.useCallback)(() => {
        setIsFilterOpen(!isFilterOpen);
    }, [isFilterOpen]);
    const onFilterChange = (field, value, isTop) => {
        const values = value ? (Array.isArray(value) ? value : [value]) : [];
        const _filter = [...filter];
        const fieldIndex = _filter.findIndex((filter) => filter.field === field);
        if (fieldIndex > -1) {
            // filter field already exists
            _filter[fieldIndex].values = values;
        }
        else {
            if (!values.length)
                return;
            _filter.push({ field, values, isTop });
        }
        setFilter(_filter.filter((item) => item.values.length));
    };
    const onFilterReset = () => {
        setFilter([]);
    };
    const onTopFacetsReset = () => {
        const _filter = [...filter];
        setFilter(_filter.filter((item) => !item.isTop));
    };
    const onFacetReset = (field) => {
        const _filter = [...filter];
        const fieldIndex = _filter.findIndex((filter) => filter.field === field);
        if (fieldIndex !== -1) {
            _filter[fieldIndex].values = [];
        }
        setFilter(_filter.filter((item) => item.values.length));
    };
    return {
        onFacetReset,
        onTopFacetsReset,
        onFilterChange,
        onFilterReset,
        onFilterToggle,
        isFilterOpen,
    };
}
//# sourceMappingURL=use-search-filter.js.map