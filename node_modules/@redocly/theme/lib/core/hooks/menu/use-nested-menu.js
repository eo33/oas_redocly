"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNestedMenu = useNestedMenu;
const react_router_dom_1 = require("react-router-dom");
const react_1 = require("react");
const hooks_1 = require("../../../core/hooks");
const utils_1 = require("../../../core/utils");
function useNestedMenu({ item, labelRef, nestedMenuRef }) {
    const [isExpanded, setIsExpanded] = (0, hooks_1.useMenuItemExpanded)(item);
    // we need to know when the item is collapsed after transition to remove children from DOM
    const [canUnmount, setCanUnmount] = (0, react_1.useState)(!isExpanded);
    const navigate = (0, react_router_dom_1.useNavigate)();
    const location = (0, react_router_dom_1.useLocation)();
    const { style } = (0, hooks_1.useCollapse)({
        isExpanded,
        collapseElRef: nestedMenuRef || { current: null },
        onTransitionStateChange: (state) => {
            if (state === 'collapseEnd') {
                setCanUnmount(true);
            }
            if (state === 'expandStart') {
                setCanUnmount(false);
            }
        },
    });
    function scrollIfNeeded(el, centerIfNeeded = false) {
        // @ts-ignore
        if (typeof el.scrollIntoViewIfNeeded === 'function') {
            // @ts-ignore
            el.scrollIntoViewIfNeeded(centerIfNeeded);
        }
    }
    // scroll to active element if needed
    (0, react_1.useEffect)(() => {
        if (item.active && labelRef && labelRef.current) {
            scrollIfNeeded(labelRef.current, true); // center item on the first scroll
        }
    }, [labelRef, item.active]);
    // scroll to expanded element if needed (position could change after collapse)
    (0, react_1.useEffect)(() => {
        if (item.active && isExpanded && labelRef && labelRef.current) {
            scrollIfNeeded(labelRef.current);
        }
    }, [labelRef, isExpanded, item.active]);
    const handleExpand = (0, react_1.useCallback)(() => __awaiter(this, void 0, void 0, function* () {
        if (item.expanded === 'always' ||
            (item.link && item.hasActiveSubItem && item.link !== location.pathname)) {
            return;
        }
        const [firstChild] = item.items;
        if (!isExpanded && item.selectFirstItemOnExpand && firstChild.link) {
            yield (0, utils_1.loadAndNavigate)(navigate, firstChild.link);
        }
        setIsExpanded(!isExpanded);
    }), [item, isExpanded, navigate, location.pathname, setIsExpanded]);
    return {
        isExpanded,
        canUnmount,
        style,
        handleExpand,
    };
}
//# sourceMappingURL=use-nested-menu.js.map