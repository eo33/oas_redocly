"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMobileMenuItems = void 0;
const react_router_dom_1 = require("react-router-dom");
const hooks_1 = require("../../../core/hooks");
const constants_1 = require("../../../core/constants");
const utils_1 = require("../../../core/utils");
const MENU_SEPARATOR = {
    type: 'separator',
    separatorLine: true,
};
const useMobileMenuItems = (menuType) => {
    var _a, _b, _c;
    const { useTranslate, useL10nConfig, useCurrentProduct, usePageVersions, useSidebarItems } = (0, hooks_1.useThemeHooks)();
    const { versions = [] } = usePageVersions() || {};
    const { defaultLocale, currentLocale, locales } = useL10nConfig();
    const { translate } = useTranslate();
    const activeVersion = versions.find((version) => version.active);
    const { currentItems: sidebarItems, pushDrilldownState, popDrilldownState, backLink, } = useSidebarItems(activeVersion);
    const location = (0, react_router_dom_1.useLocation)();
    const currentProduct = useCurrentProduct();
    const hasProductNavbarOverride = (_a = currentProduct === null || currentProduct === void 0 ? void 0 : currentProduct.configOverride) === null || _a === void 0 ? void 0 : _a.navbar;
    const productThemeConfig = (0, hooks_1.useThemeConfig)();
    const baseThemeConfig = (0, hooks_1.useThemeConfig)(false);
    const baseNavItems = (((_b = baseThemeConfig.navbar) === null || _b === void 0 ? void 0 : _b.items) || []);
    const productNavItems = (hasProductNavbarOverride ? ((_c = productThemeConfig.navbar) === null || _c === void 0 ? void 0 : _c.items) || [] : []);
    const menuItems = [];
    if (menuType === constants_1.MobileMenuType.PAGE) {
        if (activeVersion) {
            // TODO: consider to refactor
            const versionsSection = (0, utils_1.buildVersionSection)(translate, versions, activeVersion);
            menuItems.push(...versionsSection);
        }
        if (menuItems.length && sidebarItems.length) {
            menuItems.push(MENU_SEPARATOR);
        }
        menuItems.push(...sidebarItems);
    }
    else if (menuType === constants_1.MobileMenuType.PRODUCT) {
        menuItems.push(...productNavItems);
        if (menuItems.length && baseNavItems.length) {
            menuItems.push(MENU_SEPARATOR);
        }
        if (baseNavItems.length) {
            menuItems.push(...baseNavItems);
        }
    }
    else if (menuType === constants_1.MobileMenuType.MAIN_MENU) {
        const productMenuItems = Object.values(baseThemeConfig.products || {}).map((product) => ({
            label: product.name,
            link: product.link,
            icon: product.icon,
            type: 'link',
        }));
        if (productMenuItems.length) {
            menuItems.push({
                type: 'separator',
                label: translate('mobileMenu.products', 'Products'),
            });
            menuItems.push(...productMenuItems);
        }
        if (menuItems.length && baseNavItems.length) {
            menuItems.push(MENU_SEPARATOR);
        }
        if (baseNavItems.length) {
            menuItems.push(...baseNavItems);
        }
    }
    const languagesMenu = (0, utils_1.buildLanguagesGroup)(locales, defaultLocale, currentLocale);
    if (menuItems.length && languagesMenu) {
        menuItems.push(MENU_SEPARATOR);
    }
    if (languagesMenu) {
        menuItems.push(languagesMenu);
    }
    return {
        items: (0, utils_1.mapNavbarItems)(menuItems, defaultLocale, currentLocale, locales, location),
        popDrilldownState,
        pushDrilldownState,
        backLink,
    };
};
exports.useMobileMenuItems = useMobileMenuItems;
//# sourceMappingURL=use-mobile-menu-items.js.map