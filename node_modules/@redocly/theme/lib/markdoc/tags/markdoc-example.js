"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.markdocExample = void 0;
const markdoc_1 = __importDefault(require("@markdoc/markdoc"));
// This custom tag prevents evaluating any children markdoc tags (no children) so we can
// have markdoc examples in code fences
// approach copied from: https://github.com/markdoc/docs/blob/main/markdoc/tags/markdoc-example.markdoc.js
exports.markdocExample = {
    schema: {
        attributes: {
            renderDemo: { type: Boolean, default: false },
            withLabels: { type: Boolean, required: false },
            codeLabel: { type: String, required: false },
            resultLabel: { type: String, required: false },
        },
        children: ['fence'],
        transform(node, config) {
            var _a;
            const attributes = node.transformAttributes(config);
            const { content } = ((_a = node.children[0]) === null || _a === void 0 ? void 0 : _a.attributes) || {};
            if (!content)
                return null;
            const language = 'markdoc';
            const annotations = node.children[0].annotations;
            let title = null;
            if (annotations.length > 0) {
                const fenceWithTitle = annotations.find((annotation) => annotation.name === 'title');
                title = fenceWithTitle === null || fenceWithTitle === void 0 ? void 0 : fenceWithTitle.value;
            }
            return new markdoc_1.default.Tag('MarkdocExample', Object.assign(Object.assign({}, attributes), { title,
                language, demoContent: node.children[0].transformChildren(config), rawContent: content }), []);
        },
    },
    tagName: 'markdoc-example',
};
//# sourceMappingURL=markdoc-example.js.map