"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.partial = void 0;
const markdoc_1 = __importDefault(require("@markdoc/markdoc"));
const utils_1 = require("../../core/utils");
const relative_path_1 = require("../../markdoc/attributes/relative-path");
exports.partial = {
    schema: Object.assign(Object.assign({}, markdoc_1.default.tags.partial), { attributes: Object.assign(Object.assign({}, markdoc_1.default.tags.partial.attributes), { file: { type: relative_path_1.RelativePath } }), validate(node, config) {
            var _a, _b;
            const folders = (((_a = config.themeConfig) === null || _a === void 0 ? void 0 : _a.partialsFolders) || []).map(utils_1.addTrailingSlash);
            if (!folders.length) {
                return [
                    {
                        id: '',
                        message: `Could not resolve partial ${node.attributes.file}. markdown.partialsFolders is empty.`,
                        level: 'error',
                    },
                ];
            }
            if (!((_b = config.partials) === null || _b === void 0 ? void 0 : _b[node.attributes.file])) {
                return [
                    {
                        id: '',
                        message: `Could not resolve partial ${node.attributes.file}. Starting with 0.73.0 version all partials should be placed in partials folders: \n\n  - ${folders.join('\n  - ')}`,
                        level: 'error',
                    },
                ];
            }
            return [];
        } }),
    tagName: 'partial',
};
//# sourceMappingURL=partial.js.map