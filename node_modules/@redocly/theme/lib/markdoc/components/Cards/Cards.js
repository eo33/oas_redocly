"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cards = Cards;
const React = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
function Cards({ cardMinWidth = 240, columns, className, children, ariaLabel }) {
    return (React.createElement(GridLayout, { "$cardMinWidth": cardMinWidth, "$columns": columns, className: className, "aria-label": ariaLabel }, children));
}
const GridLayout = styled_components_1.default.div `
  display: grid;
  grid-template-columns: ${({ $cardMinWidth, $columns }) => `repeat(auto-fit, minmax(${getCardMinWidth($cardMinWidth, $columns)}, 1fr))`};
  gap: var(--cards-gap);
  width: 100%;
  margin-top: var(--spacing-base);
  margin-bottom: var(--spacing-base);
`;
function getColumnWidth(columns) {
    return `calc((100% - ${columns - 1} * var(--cards-gap)) / ${columns})`;
}
function getCardMinWidth(cardMinWidth, columns) {
    return columns ? `max(${getColumnWidth(columns)}, ${cardMinWidth}px)` : `${cardMinWidth}px`;
}
//# sourceMappingURL=Cards.js.map