#!/usr/bin/env node
import"./cli/utils/node-version-check.js";import i from"mri";import*as o from"node:path";import{tmpdir as P}from"node:os";import*as T from"node:fs";import"./server/node-fetch-polyfill.js";import{develop as S}from"./cli/develop.js";import{build as L}from"./cli/build.js";import{eject as I}from"./cli/eject/index.js";import{cliCommandNames as f}from"./server/constants.js";import{PORTAL_VERSION as w}from"./server/version.js";import{beforeCommand as v}from"./server/utils/lifecycle-hooks.js";import{Store as g}from"./server/store.js";import{prepare as k}from"./cli/prepare/index.js";import{sha as R}from"./server/utils/crypto.js";import{fromCurrentDir as C}from"./server/utils/paths.js";import{loadEnvironmentVariables as y}from"./shared/env.js";import{telemetry as a}from"./cli/telemetry/index.js";import{translationsCliOpts as N}from"./cli/translations/options.js";import{generateTranslations as U}from"./cli/translations/index.js";import e from"./server/utils/reporter/logger.js";import{EntitlementsProvider as V}from"./server/entitlements/entitlements-provider.js";import{Feature as O}from"./server/entitlements/entitlements.types.js";import{isValidPlan as M}from"./server/entitlements/is-valid-plan.js";import{stopAllCompilers as F}from"./server/esbuild/esbuild.js";import{initPlugins as G}from"./server/plugins/lifecycle.js";const s=process.argv[2];let t;const m={alias:{d:"project-dir",t:"htmlTemplate",p:"port"},default:{"project-dir":process.env.REDOCLY_CONTENT_DIR||process.cwd(),verbose:!1,htmlTemplate:"",outdir:"public"}},B={alias:m.alias,default:{...m.default,plan:"enterprise"}},Y={alias:{d:"prepareDir"},default:{verbose:!1,prepareDir:"public"}},$={boolean:["force"],alias:{f:"force",d:"project-dir"},default:{"project-dir":process.cwd()}};a.updateContext({command:s,version:w,anonymousId:"ANONYMOUS",platform:process.platform,orgSlug:process.env.ORG_SLUG,projectSlug:process.env.PROJECT_SLUG}),process.on("uncaughtException",async function(r){r?.code==="ERR_INVALID_STATE"?console.log("Ignore premature close error"):(e.error("Uncaught exception occurred. Stopping compilers."),await F(),a.send("cli_error_caught",{message:r.message}),e.error("Exiting due to uncaught exception"),e.panic(r))});try{s||e.panicOnContentError("Command not specified.");const r=V.instance();switch(["prepare","build","serve"].includes(s)&&await r.init(),["eject","translate"].includes(s)&&await r.init({developModePlan:"enterprise"}),s){case"develop":case"preview":const n=i(process.argv.slice(3),B),h=o.resolve(n["project-dir"]),D=o.join(P(),"redocly-public-"+R(h)),d=n.plan.toLowerCase();M(d)||e.panicOnContentError(`Invalid --plan argument value '${d}'.`),await r.init({developModePlan:d}),t=new g({contentDir:o.resolve(n["project-dir"]),outdir:D,renderMode:"main",serverOutDir:C(import.meta.url,"./server/esbuild/cache/server")}),await v(f.DEVELOP,n,t),await S(n,t);break;case"build":const l=i(process.argv.slice(3),m);t=new g({contentDir:o.resolve(l["project-dir"]),outdir:o.resolve(l.outdir),renderMode:"main",serverOutDir:C(import.meta.url,"./server/esbuild/cache/server")}),await v(f.BUILD,l,t),await L(l,t);break;case"prepare":const c=i(process.argv.slice(3),m);t=new g({contentDir:o.resolve(c["project-dir"]),outdir:o.resolve(c.outdir,"client"),renderMode:"main",serverOutDir:o.resolve(o.join(c.outdir,"server"))}),await v(f.BUILD,c,t),await k(c,t);break;case"serve":y();const b=i(process.argv.slice(3),Y),E=o.resolve(b.prepareDir);a.send("cli_command_executed",{arguments:b});const j=o.join(E,"server","index.mjs");T.existsSync(j)||e.panic("Server not found. Please run `realm prepare` first"),import(j).catch(p=>{e.panic("Failed to load server",p)});break;case"eject":r.canAccessFeature(O.ThemeEjecting)||e.panicOnContentError('The "eject" command is not available for this project');const u=i(process.argv.slice(3),$),{lifecycleContext:{getConfig:_,fs:A}}=await G({outdir:"",contentDir:u["project-dir"],setGlobalConfig:()=>null});A.dispose(),a.send("cli_command_executed",{arguments:u});const x=await _();await I({...u,config:x}),e.clearAllTimeouts();break;case"translate":if(r.canAccessFeature(O.L10n)){const p=i(process.argv.slice(3),N);a.send("cli_command_executed",{arguments:p}),await U(p)}else e.panicOnContentError('The "translate" command is not available for this project');break;case"--version":console.log(w);break;default:e.panicOnContentError(`Unknown command "${s}"`)}}catch(r){a.send("cli_error_caught",{message:r.message}),e.error("Exiting due to uncaught exception"),e.panic(r)}
