import*as c from"dotenv";import*as p from"path";import{PUBLIC_ENV_PREFIX as l}from"./constants.js";const o=/{{\s*process\.env\.([A-Z0-9_]+)\s*}}/gi;function s(r,n){let e=process.env[r];return e&&n&&["scopes"].includes(n)?JSON.parse(e):e}function a(r){return r.replace(o,(n,e)=>(e?s(e.toUpperCase()):"")||"")}function f(r){return r&&Object.entries(r).reduce((n,[e,t])=>(typeof t=="string"?n[e]=a(t):typeof t=="object"&&t!==null?n[e]=f(t):n[e]=t,n),Array.isArray(r)?[]:{})}function u(r){if(!r)return[];const n=[];for(const e of Object.values(r))if(typeof e=="string"){let t=o.exec(e);for(;t;){const i=t[1].toUpperCase();s(i)==null&&n.push(i),t=o.exec(e)}}else typeof e=="object"&&e!==null&&n.push(...u(e));return n}function E(r,n){n==null?delete process.env[r]:process.env[r]=n}function d(){const r=process.env,n=Object.entries(r).filter(([e])=>e.startsWith(l));return Object.fromEntries(n)}function V(r){c.config({path:p.resolve(r??"",".env")});const n=s("REDOCLY_ENV");let e;switch(n){case"production":e=".env.production";break;case"preview":e=".env.preview";break;case"development":default:e=".env.development";break}c.config({path:p.resolve(r??"",e)})}function b(){return s("REDOCLY_ENV")==="production"}export{u as collectMissingEnvVariablesDeep,d as getPublicEnvVariables,b as isProductionMode,V as loadEnvironmentVariables,s as readEnvVariable,f as replaceEnvVariablesDeep,E as writeEnvVariable};
