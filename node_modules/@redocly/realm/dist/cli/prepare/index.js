import{otelTelemetry as h}from"../telemetry/otel/telemetry.js";h.init();import y from"node:path";import{writeFile as _,unlink as I}from"node:fs/promises";import{writeFileSync as L}from"node:fs";import{createClientCompiler as J,createNodeBundleCompiler as N}from"../../server/esbuild/esbuild.js";import{initPlugins as k,runPlugins as U,writeClientEntries as j}from"../../server/plugins/lifecycle.js";import{promiseMapLimit as F,ensureDir as O,logger as e,reporter as R,readEnvVariable as G}from"../../server/utils/index.js";import{exit as z}from"../../server/utils/process.js";import{sendCliCommandExecution as M,telemetry as o}from"../telemetry/index.js";import{validateAllMarkdowns as W}from"../../server/plugins/markdown/compiler.js";import{copyEnvFiles as B}from"./copy-env-files.js";import{EsbuildError as a,esbuildLogger as l}from"../../server/esbuild/esbuild-logger.js";import{reportAllErrors as Z}from"../../server/utils/report-all-errors.js";import{getPortalConfigStats as V}from"../telemetry/get-portal-config-stats.js";async function li(p,i){e.info("Starting portal build.");const S=e.startTiming();j(i);const m=await J(i,i.outdir,"production"),c=await N(i,i.serverOutDir,"production");let r;try{const t=e.startTiming(),s=await m.rebuild().catch(n=>{throw new a(n)});Array.isArray(s.warnings)&&l(new a({warnings:s.warnings}));const w=e.infoTime(t,"Client JavaScript compiled");w&&o.send("timing_performed",w);const x=e.startTiming(),T=await c.rebuild().catch(n=>{throw new a(n)});Array.isArray(T.warnings)&&l(new a({warnings:T.warnings}));const v=e.infoTime(x,"Server JavaScript compiled");v&&o.send("timing_performed",v),await i.reloadMarkdocOptions();let C;({pluginInstances:C,lifecycleContext:r}=await k({outdir:i.outdir,serverOutDir:i.serverOutDir,contentDir:i.contentDir,devLogin:p.devLogin,setGlobalConfig:i.setGlobalConfig})),r.fs.dispose(),i.lifecycleContext=r,await U(C,i,r),h.send("build",{buildContext:V(i),organizationId:process.env.ORGANIZATION_ID,organizationSlug:process.env.ORGANIZATION_SLUG}),await W(i,r),await Z(r),M(p,r,i);const P=e.startTiming();e.info("Re-compiling JavaScript with user code"),(await Promise.all([m.rebuild(),c.rebuild()]).catch(n=>{throw new a(n)})).forEach(({warnings:n})=>{Array.isArray(n)&&l(new a({warnings:n}))});const b=e.infoTime(P,"JavaScript re-compiled");b&&o.send("timing_performed",b),i.markUserCodeReady()}catch(t){t instanceof a&&l(t)}finally{await m.dispose(),await c.dispose()}R.printErrors(),e.info("Rendering pages...");const A=e.startTiming(),D=[...i.getAllRoutes(),...i.getAllApiRoutes()];await F(D,15,t=>i.writeRouteStaticData(t,r));const d=e.successTime(A,"Page static data prepared.");d&&o.send("timing_performed",d);const E=e.startTiming();O(i.serverOutDir),L(y.join(i.serverOutDir,"store.json"),JSON.stringify(i.toJson())),e.successTime(E,"Store serialized and written."),B(i);const u=i.searchEngine;if(u){e.info("Writing out search data...");const t=e.startTiming();await u.export(i.outdir);const s=e.successTime(t,"Search data written.");s&&o.send("timing_performed",s)}const f=G("REDOCLY_PROBLEMS_OUTPUT_FILE");f&&(_(O(f),JSON.stringify(R.getProblems()),"utf-8"),e.info("Reported broken links...")),await I(y.join(i.serverOutDir,"index.css"));const g=e.successTime(S,"All done");g&&o.send("timing_performed",g),z(0)}export{li as prepare};
