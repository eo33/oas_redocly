import{getBilledPagesCount as m,logger as n,reporter as u}from"../server/utils/index.js";import{createClientCompiler as g,createServerCompiler as v}from"../server/esbuild/esbuild.js";import{initPlugins as w,runPlugins as p,writeClientEntries as C}from"../server/plugins/lifecycle.js";import{startDevServer as h}from"../server/web-server/dev-server.js";import{sendCliCommandExecution as S}from"./telemetry/index.js";import{validateAllMarkdowns as f}from"../server/plugins/markdown/compiler.js";import{green as y}from"../server/utils/reporter/colors.js";import{reportAllErrors as b}from"../server/utils/report-all-errors.js";async function M(i,e){n.patchConsole(),n.info("Starting portal develop mode."),C(e),n.startTiming("initial-js"),await R(e),n.infoTime("initial-js","JavaScript compiled");const{pluginInstances:l,lifecycleContext:t}=await w({contentDir:e.contentDir,outdir:e.outdir,serverOutDir:void 0,devLogin:i["dev-login"]!==!1,setGlobalConfig:e.setGlobalConfig});e.lifecycleContext=t,await p(l,e,t,{failFast:!0}),S(i,t,e);const d=async()=>{const r=performance.now();u.clearErrors(),await p(l,e,t),await f(e,t),E().then(async()=>{await b(t);const a=m(e.getAllRoutes()),o=u.summary(`  \u{1F440} Last change processed in ${y(Math.round(performance.now()-r)+"ms")}`,a);e.runListeners("errors-updated",void 0,o),e.runListeners("pages-updated",void 0,a),e.runListeners("routes-updated")})};t.fs.watch(async()=>{await d()}),await f(e,t),await b(t);const s=m(e.getAllRoutes());u.summary("  \u{1F440} Watching for changes...",s),e.runListeners("pages-updated",void 0,s),n.verbose("Starting development server."),await h(e,t,{port:Number(i.port||4e3)}),u.listenStdin()}async function R(i){let e=!0,l=!0;const t=r=>{r==="client"?e=!0:l=!0,i.runListeners("build-started"),e!=l&&n.startTiming("rebuild")},d=async r=>{r==="client"?e=!1:l=!1,!(e||l)&&(i.buildRevision++,n.infoTime("rebuild","JavaScript re-compiled"),await i.reloadMarkdocOptions(),i.markUserCodeReady(),i.runListeners("build-updated"),i.lifecycleContext&&i.buildRevision>1&&i.lifecycleContext.fs.emitCodeUpdated())},s=[new Promise((r,a)=>{const o={label:"client",buildStart(){n.verbose("Start compiling client code."),n.startTiming(this.label)},buildEnd(){n.verboseTime(this.label,"Client compiled"),r(!0)},rebuildStart:()=>t("client"),rebuildEnd:()=>d("client")};g(i,i.outdir,"development",o).then(c=>c.watch()).catch(a)}),new Promise((r,a)=>{const o={label:"server",buildStart(){n.verbose("Start compiling server code."),n.startTiming(this.label)},buildEnd(){n.verboseTime(this.label,"Server compiled"),r(!0)},rebuildStart:()=>t("server"),rebuildEnd:()=>d("server")};v(i,i.serverOutDir,"development",o).then(c=>c.watch()).catch(a)})];await Promise.all(s),await i.reloadMarkdocOptions()}function E(){return new Promise(i=>{setTimeout(i,0)})}export{M as develop};
