import type { ErrorScope } from '../../server/utils/reporter/error-scope';
export type PortalContentStats = {
    total_pages: number;
    openapi_pages: number;
    graphql_pages: number;
    markdown_pages: number;
    react_pages: number;
    versions: {
        versioned_folders: number;
    };
    user_theme_files: string[];
};
type CliCommandEvent = {
    arguments: Record<string, unknown>;
    portal_content?: PortalContentStats;
    config?: string;
};
type RuntimeErrorEvent = Partial<Error> & {
    scope?: ErrorScope;
};
type TimingEvent = {
    message: string;
    time_ms: number;
};
export type CliEventsMap = {
    cli_command_executed: CliCommandEvent;
    cli_error_caught: RuntimeErrorEvent;
    ssr_error_caught: RuntimeErrorEvent;
    timing_performed: TimingEvent;
};
export type CliTelemetryContext = {
    version?: string;
    command?: string;
    anonymousId: string;
    platform: string;
    orgSlug?: string;
    projectSlug?: string;
};
export {};
//# sourceMappingURL=event-types.d.ts.map