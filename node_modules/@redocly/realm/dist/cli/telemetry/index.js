import n from"path";import{isGraphqlDoc as f}from"../../server/plugins/graphql-docs/is-graphql-doc.js";import{isMarkdownPage as c}from"../../server/plugins/markdown/is-markdown-page.js";import{isOpenapiDoc as g}from"../../server/plugins/openapi-docs/is-openapi-doc.js";import{isReactPage as d}from"../../server/plugins/pages/is-react-page.js";import{TelemetryClient as _}from"../../shared/telemetry-client.js";import{TELEMETRY_ENABLED as m,TELEMETRY_ENDPOINT as E}from"../../server/constants.js";import{USER_THEME_ALIAS as h}from"../../server/config/constants.js";import{readFileNames as u}from"../../server/utils/fs.js";import{getPortalConfigStats as P}from"./get-portal-config-stats.js";const w=new _(E,!m),q=(e,o,t)=>{m&&(async()=>{w.send("cli_command_executed",{arguments:e,portal_content:o&&await C(o),config:t&&P(t)})})().catch(()=>{})},C=async e=>{let o=0,t=0,r=0,i=0;for(const{relativePath:a}of await e.fs.scan())c(a)?o++:d(a)?i++:f(a)?r++:await g(a,e)&&t++;const p=(await e.cache.load("versions-config","versions-config")).data,s=n.join(e.fs.cwd,h),l=u(s).map(a=>n.relative(s,a));return{total_pages:o+t+r+i,markdown_pages:o,openapi_pages:t,graphql_pages:r,react_pages:i,versions:{versioned_folders:p.size},user_theme_files:l}};export{q as sendCliCommandExecution,w as telemetry};
