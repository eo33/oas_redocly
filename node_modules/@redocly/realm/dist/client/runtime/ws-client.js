import{Loader as o}from"./loader";let a=null,c=!1;const d=new Map,s=new Map;function b(){p(),a=f(),addEventListener("beforeunload",()=>c=!0),u(a)}function h(e,t){const n=s.get(e)??new Set;s.set(e,n),n.add(t);const l=g(e);return l&&t(l),()=>{n.delete(t),n.size===0&&s.delete(e)}}function u(e){e.addEventListener("message",i),e.addEventListener("close",r)}function r(){c||(console.log("[connection closed] reloading page"),window.location.reload())}function p(){a&&(a.removeEventListener("message",i),a.removeEventListener("close",r),a.close(),a=null),c=!1,d.clear()}function f(){const e=new URL(window.location.href);return e.hash="",e.pathname="/",e.protocol=e.protocol==="https:"?"wss:":"ws:",new WebSocket(e.toString())}function i(e){const t=JSON.parse(e.data);switch(console.log("[received]",t.type,t.pathname),d.set(t.type,t),t.type){case"ready":console.log("[hot] websocket connection established");break;case"page-updated":o.update(t.pathname);break;case"routes-updated":o.update(window.location.pathname);break;case"global-data-updated":o.updateGlobalData(t.data);break;case"shared-data-updated":o.updateSharedData(t.id);break;case"build-updated":window.location.reload();break;default:s.get(t.type)?.forEach(n=>n(t))}}function g(e){return d.get(e)}export{h as addSocketMessageListener,b as listenWs};
