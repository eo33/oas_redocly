import{ulid as i}from"ulid";import{trace as p}from"@opentelemetry/api";import{CompositePropagator as d,W3CBaggagePropagator as f,W3CTraceContextPropagator as l}from"@opentelemetry/core";import{Resource as E}from"@opentelemetry/resources";import{BatchSpanProcessor as u,WebTracerProvider as T}from"@opentelemetry/sdk-trace-web";import{ZoneContextManager as R}from"@opentelemetry/context-zone";import{registerInstrumentations as g}from"@opentelemetry/instrumentation";import{DocumentLoadInstrumentation as _}from"@opentelemetry/instrumentation-document-load";import{OTLPTraceExporter as w}from"@opentelemetry/exporter-trace-otlp-http";import{FetchInstrumentation as C}from"@opentelemetry/instrumentation-fetch";import{XMLHttpRequestInstrumentation as h}from"@opentelemetry/instrumentation-xml-http-request";import{ATTR_SERVICE_NAME as I,ATTR_SERVICE_VERSION as v}from"@opentelemetry/semantic-conventions";import{PACKAGE_NAME as y}from"../../../../config/product-gates";import{ServerRoutes as O}from"../../../../shared/constants";import{ErrorInstrumentation as s}from"./error-instrumentation";class A{sessionId;initialReferrer;init(){if(this.disabled())return;this.sessionId=`ses_${i()}`,this.initialReferrer=document.referrer||void 0;const e=new T({resource:new E({[I]:"realm-ui",[v]:`${y}@${process.env.REDOCLY_PORTAL_VERSION}`,"redocly.session.id":this.sessionId})});e.addSpanProcessor(new u(new w({url:O.OTEL_TRACES,headers:{}}))),e.register({contextManager:new R,propagator:new d({propagators:[new f,new l]})}),g({instrumentations:[new _,new C,new h,new s(void 0,r=>{this.send("error",r)})]})}send(e,r){try{if(this.disabled())return;const t=new Date,a=i(),o=p.getTracer("ClientTelemetry").startSpan(`event.${e}`,{attributes:{"redocly.event_id":a,"redocly.event_type":e,"redocly.page.uri":location.href,"redocly.page.initial_referrer":this.initialReferrer},startTime:t});Object.entries(r).forEach(([m,n])=>{const c=m.replace(/([A-Z])/g,"_$1").toLowerCase();n!==void 0&&o.setAttribute(`redocly.event_data.${c}`,n)}),o.end(t)}catch(t){process.env.NODE_ENV!=="production"&&console.error("Event reporting failed:",t)}}sendError(e,r){this.send("error",s.toErrorEvent(e,r))}disabled(){return process.env.NODE_ENV!=="production"||process.env.REDOCLY_TELEMETRY==="off"}}const q=new A;export{A as OtelClientTelemetry,q as otelTelemetry};
