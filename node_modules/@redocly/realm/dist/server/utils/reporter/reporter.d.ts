import type { MarkdocError, CommonError, ErrorSeverity } from '../../../shared/types';
export declare class Reporter {
    private errors;
    private markdocProblems;
    pushError(message: string, severity: ErrorSeverity, ...args: any[]): void;
    reportBrokenLink(details: CommonError & {
        type: 'BROKEN_LINK';
    }): void;
    panicOnBuild(message: string | Error, ...args: any[]): void;
    panicOnBuildContentError(message: string | Error, ...args: any[]): void;
    reportMarkdocProblem(details: MarkdocError): void;
    clearErrors(): void;
    clearMarkdocProblems(): void;
    getProblems(): ({
        severity: ErrorSeverity;
        type: "ERROR";
        message: string;
        codeframe?: string | undefined;
        sourceFileRelativePath?: string;
        sourceFileLocation?: {
            line: number;
            character?: number;
        };
    } | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "BROKEN_LINK";
        link: string;
        rawLink: string;
        title: string;
    }) | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "MARKDOC";
    }) | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "RESOLVE";
        rawLink: string;
    }))[];
    summary(timing: string, pages?: number): ({
        severity: ErrorSeverity;
        type: "ERROR";
        message: string;
        codeframe?: string | undefined;
        sourceFileRelativePath?: string;
        sourceFileLocation?: {
            line: number;
            character?: number;
        };
    } | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "BROKEN_LINK";
        link: string;
        rawLink: string;
        title: string;
    }) | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "MARKDOC";
    }) | ({
        message: string;
        codeframe?: string;
        type: "BROKEN_LINK" | "MARKDOC" | "RESOLVE";
        brokenLinkType?: import("../../../shared/types").BrokenLinkType;
        sourceFileRelativePath: string;
        sourceFileLocation: import("@markdoc/markdoc").LocationEdge;
    } & {
        type: "RESOLVE";
        rawLink: string;
    }))[];
    printErrors(errors?: Array<MarkdocError | CommonError>): void;
    listenStdin(): void;
}
export declare const reporter: Reporter;
//# sourceMappingURL=reporter.d.ts.map