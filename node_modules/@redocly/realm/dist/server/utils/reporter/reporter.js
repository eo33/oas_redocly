import{isBuildMode as h}from"../is-build-mode.js";import m from"./formatter.js";import o from"./logger.js";import{blue as k,gray as p,red as l}from"./colors.js";const a=30;class E{errors=[];markdocProblems=[];pushError(r,t,...e){const s=m.interpolate(r,...e);this.errors.push({severity:t,message:s,type:"ERROR"})}reportBrokenLink(r){this.errors.push(r)}panicOnBuild(r,...t){r instanceof Error&&(r=r.message+`
`+r.stack),h()?o.panic(r,...t):this.pushError(r,"PANIC",...t)}panicOnBuildContentError(r,...t){r instanceof Error&&(r=r.message+`
`+r.stack),h()?o.panicOnContentError(r,...t):this.pushError(r,"PANIC",...t)}reportMarkdocProblem(r){this.markdocProblems.push(r)}clearErrors(){this.errors=[]}clearMarkdocProblems(){this.markdocProblems=[]}getProblems(){return[...this.errors,...this.markdocProblems]}summary(r,t=0){const e=this.getProblems(),s=this.markdocProblems.filter(c=>c.type==="BROKEN_LINK").length,n=this.errors.filter(c=>c.type==="BROKEN_LINK").length,d=this.markdocProblems.length-s,f=this.errors.length-n;return o.logSticky("validate",e.length?l("  \u274C Status: %s markdoc errors, %s broken links, %s other errors"):"  \u2705 Status: No errors found",d,s+n,f),t!==0&&o.logSticky("pages",`  \u{1F4C4} Total pages: ${t}`),o.logSticky("timing",r),o.logSticky("validate-sep",""),o.isInteractive()&&(e.length?o.logSticky("actions","Press (e) to print all errors, (q) to quit"):o.logSticky("actions",p("Press (q) to quit"))),e}printErrors(r=[]){o.clearSticky(),o.disableSticky=!0;const t=this.errors.length,e=r.length?r:[...this.errors,...this.markdocProblems];let s=0;for(const n of e.slice(0,a))s>=t?o.contentError(l(`[${++s}] `)+u(n)):o.error(l(`[${++s}] `)+u(n));e.length>a&&o.error(`... and ${e.length-a} more errors`),o.printSticky(),o.disableSticky=!1}listenStdin(){if(!o.isInteractive())return;process.stdin.setRawMode(!0),process.stdin.resume(),process.stdin.setEncoding("utf8");const r=this.printErrors.bind(this);process.stdin.on("data",function(t){if(t===""&&process.exit(),t==="\x7F"){process.stdout.write("\b \b");return}if(t==="\r"){o.clearSticky(),process.stdout.write(`
`),o.printSticky();return}if(t==="e"){r();return}t==="q"&&process.exit(0)})}}const y=new E;function u(i){const r=i.sourceFileLocation,t=r?`:${r.line}:${r.character??1}`:"";return i.message+(i.codeframe?`

`+i.codeframe+`

`:`
`)+(i.sourceFileRelativePath?p(`at ${k("./"+i.sourceFileRelativePath)}${t}`)+`
`:"")}export{E as Reporter,y as reporter};
