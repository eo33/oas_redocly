import s from"path";import{simpleGit as o}from"simple-git";import{statSync as a}from"node:fs";import{isDevelopMode as h}from"../utils/is-develop-mode.js";import{fastMtime as r}from"./fast-mtime.js";class C{fs;_git;gitInstallationChecked=!1;_remoteGitChanges=void 0;_localGitChanges=null;developmentContentChanges=new Map;gitRootFolder=".";constructor(t){this.fs=t,t.watch(i=>{for(const e of i)e.event!=="code-updated"&&(e.event==="unlink"?this.developmentContentChanges.delete(e.path):this.developmentContentChanges.set(e.path,new Date().toISOString()))})}get git(){if(this.gitInstallationChecked)return Promise.resolve(this._git);const t=o(this.fs.cwd,{binary:"git"});return t.version().then(i=>(i.installed&&(this._git=t),t.revparse(["--show-toplevel"]).then(e=>(this.gitRootFolder=e,this.gitInstallationChecked=!0,this._git)).catch(()=>{})))}async getRemoteGitChanges(){if(!this._remoteGitChanges){const t=await this.git;this._remoteGitChanges=await r(this.fs.cwd,t)}return this._remoteGitChanges}async getLocalGitChanges(){if(!this._localGitChanges){const t=await this.git;if(!t)return new Set;try{const i=await t?.status();this._localGitChanges=new Set(i?.files.map(e=>s.posix.normalize(s.relative(this.fs.cwd,s.resolve(this.gitRootFolder,e.path))))??[])}catch{this._localGitChanges=new Set}}return h()&&setTimeout(()=>{this._localGitChanges=null},5e3),this._localGitChanges}getLocalLastModified(t){return this.developmentContentChanges.get(t)||a(s.resolve(this.fs.cwd,t)).mtime.toISOString()}async getLastModified(t){const i=await this.getRemoteGitChanges(),e=await this.getLocalGitChanges();try{if(e.has(t))return this.getLocalLastModified(t);const n=i.get(t);return n||this.getLocalLastModified(t)}catch{return null}}}export{C as LastModifiedTracker};
