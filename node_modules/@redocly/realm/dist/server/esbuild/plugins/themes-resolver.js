import*as m from"node:path";import{resolvePlugins as p}from"../../config/external-plugins.js";import{slash as $}from"../../../shared/utils.js";import{generateMarkdocComponentsEntry as M,generateMarkdocSchemasEntry as R}from"./codegen/index.js";import{CONFIG_FILE_NAME as T}from"../../constants.js";import{DEFAULT_THEME_NAME as A,USER_THEME_ALIAS as g}from"../../config/constants.js";import{isDefined as u}from"../../../shared/jsUtils.js";const U=(a,n)=>{const h=m.resolve(n,g),i=m.resolve(n,T),f=new Map,k=["components","core","layouts","markdoc","icons","config"],w="@redocly\\/theme\\/",F=k.map(t=>`${w}${t}`).join("|"),E=new RegExp(`^(@redocly/theme$|${F})`);return{name:"esbuild-redocly-custom-themes-resolver",setup:t=>{t.onResolve({filter:/@redocly-markdoc\/schema/},async e=>{const s=(await p(n,a.config.plugins)).flatMap(r=>r.markdoc?.schemaFile).filter(u);return{namespace:"markdoc-schema-ns",path:e.path,watchFiles:[...s,i],watchDirs:[m.resolve(h,"markdoc")],pluginData:{schemaFiles:s}}}),t.onLoad({filter:/@redocly-markdoc\/schema/,namespace:"markdoc-schema-ns"},({pluginData:e})=>({contents:R(e),resolveDir:"/",loader:"ts"})),t.onResolve({filter:/@redocly-markdoc\/components/},async e=>{const s=[...(await p(n,a.config.plugins)).map(r=>r.markdoc?.componentsFile).filter(u)];return{namespace:"markdoc-schema-ns",path:e.path,watchFiles:[...s,i],pluginData:{componentsFiles:s},watchDirs:[m.resolve(h,"markdoc")]}}),t.onLoad({filter:/@redocly-markdoc\/components/,namespace:"markdoc-schema-ns"},({pluginData:e})=>({contents:M(e),resolveDir:"/",loader:"ts"})),t.onResolve({filter:/@styles/},async e=>{const s=(await p(n,a.config.plugins)).map(r=>r.stylesFile).filter(Boolean);return{namespace:"user-styles-ns",path:e.path,watchFiles:[...s,i],pluginData:{styleFiles:s},watchDirs:[h]}}),t.onLoad({filter:/@styles/,namespace:"user-styles-ns"},async({pluginData:e})=>{const{styleFiles:o}=e;return{contents:o.map(r=>`@import url("${$(m.relative(n,r))}");`).join(`
`),loader:"css",resolveDir:n}}),t.onResolve({filter:/(^|\/)styles\.css$/},async({path:e,...o})=>{if(o.pluginData==="missing-styles-ns")return;const s=await t.resolve(e,{...o,pluginData:"missing-styles-ns"});return s.errors.length&&s.errors.some(r=>r.text.match(/^Could not resolve .*?\bstyles.css\b/))?{namespace:"missing-styles-ns",path:e}:s}),t.onLoad({filter:/(^|\/)styles\.css$/,namespace:"missing-styles-ns"},async()=>({contents:"",loader:"css"})),t.onResolve({filter:E},async e=>{if(e.resolveDir==="")return;const o=`${e.path}:${e.importer}`;if(f.has(o))return f.get(o);const{path:s,...r}=e,l=await p(n,a.config.plugins),v=e.path.replace(A,"")||"index";for(let c=l.length-1;c>=0;c--){const D=l[c].isNpmPackage?[m.join(l[c].name,"src",v),{...r,resolveDir:n}]:[`./${v}`,{...r,resolveDir:l[c].pluginDirAbsolutePath}],y=C(await t.resolve(...D));if("path"in y&&y.path!==e.importer){const d={...y,watchFiles:[i]};return l[c].name===g||f.set(o,d),d}}})}}};function C(a){return a.errors.length?{errors:a.errors}:a}export{U as ThemesResolver};
