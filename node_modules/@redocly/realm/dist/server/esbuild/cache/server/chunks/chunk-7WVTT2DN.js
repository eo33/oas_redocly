import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  init_lib_esm
} from "./chunk-R4PATEVC.js";

// node_modules/@redocly/realm/dist/shared/constants.js
init_lib_esm();
var n = "openapi_docs";
var C = "/_spec";
var p = { "*": "read" };
var i = 24 * 60 * 60;
var o;
(function(_) {
  _.RATING = "rating", _.SENTIMENT = "sentiment", _.COMMENT = "comment", _.MOOD = "mood", _.PROBLEM = "problem", _.SCALE = "scale";
})(o || (o = {}));
var t;
(function(_) {
  _.EJECT_COMPONENT = "/eject-component/:componentName", _.SHARED_PAGE_DATA = "/page-data/shared/*", _.PAGE_DATA = "/page-data/*", _.APP_DATA = "/app-data.json", _.AUTHORIZATION = "/authorize", _.OIDC_CALLBACK = "/_auth/oidc", _.SAML_CALLBACK = "/_auth/saml2", _.REDOCLY_CALLBACK = "/_auth/redocly", _.REPLAY_OAUTH2_CALLBACK = "/_auth/replay-oauth2", _.REDOCLY_LOGIN_CALLBACK = "/_auth/redocly/redocly-login", _.REDOCLY_TOKEN_LOGIN = "/_auth/redocly-token-login", _.SEARCH = "/_search", _.SEARCH_FACETS = "/_search-facets", _.LOGOUT = "/logout", _.LOGIN = "/login", _.IDP_LOGIN = "/_auth/idp-login", _.RESOLVE_ROUTE_BY_PATH = "/resolve-route-by-path", _.RESOLVE_ROUTE_BY_SLUG = "/resolve-route-by-slug", _.GET_ROUTES_BY_LINE = "/get-routes-by-line", _.FEEDBACK = "/feedback", _.TELEMETRY = "/_events", _.OTEL_TRACES = "/_otel/v1/traces", _.HEALTH = "/_health", _.ASK_AI = "/_ask-ai";
})(t || (t = {}));
var P = "/login";
var E;
(function(_) {
  _.AUTH0_PASS = "/auth/auth0-pass";
})(E || (E = {}));
var a;
(function(_) {
  _.NotExist = "ENOENT";
})(a || (a = {}));
var R = "default_locale";
var r = "PUBLIC_";

// node_modules/@redocly/realm/dist/shared/utils.js
var c = (t2) => t2 != null && !t2.match(/^[a-z]+:\/\//) && !t2.startsWith("//") && !t2.startsWith("mailto:");
var d = (t2) => t2 != null && (t2.startsWith("/assets/") || !!t2.match(/\.\w{3,4}($|\?)/g));
function p2() {
  return process.env.REDOCLY_PREFIX_PATHS ? a2(process.env.REDOCLY_PREFIX_PATHS) : "";
}
function a2(t2) {
  const e = n2(t2);
  return u(e === "." ? "" : e);
}
function u(t2) {
  return t2.startsWith("/") ? t2 : `/${t2}`;
}
function x(t2) {
  return t2.endsWith("/") ? t2 : `${t2}/`;
}
function n2(t2) {
  return t2.endsWith("/") && t2 !== "/" ? t2.substring(0, t2.length - 1) : t2;
}
function f(t2) {
  return t2?.$$mdtype === "Tag";
}
function i2(t2) {
  return t2?.$$mdtype === "Node";
}
function g(t2) {
  return i2(t2) && t2.type === "text";
}
function l(t2) {
  return i2(t2) && t2.type === "code";
}
function h(t2) {
  return t2?.$$mdtype === "Variable";
}
var m = (t2) => getComputedStyle(document.documentElement).getPropertyValue(t2);
function P2(t2) {
  return t2 = t2.split("?")[0].split("#")[0], t2.endsWith("/") && (t2 = n2(t2)), t2.startsWith("/") || (t2 = "/" + t2), decodeURI(t2);
}
function y(t2) {
  return ["string", "boolean", "number"].includes(typeof t2);
}

// node_modules/@redocly/realm/dist/shared/urls.js
function l2(t2) {
  return `/page-data${t2 === "/" ? "/index" : t2}/data.json`;
}
function R2(t2) {
  const e = p2();
  if (e) {
    const r2 = t2.slice(e.length);
    return `${e}/page-data${r2 === "/" ? "/index" : r2}/data.json`;
  }
  return l2(t2);
}
function U(t2) {
  return `/page-data/shared/${t2}.json`;
}
var E2 = "/app-data.json";
function x2(t2, ...e) {
  let r2 = t2;
  for (let n4 of e)
    r2 = n4 ? r2.replace(/[\/\\]+$/, "") + "/" + n4.replace(/^[\/\\]+/, "") : r2;
  return r2;
}
function P3(t2) {
  return x2(p2(), t2);
}
function u2(t2) {
  const e = p2();
  return e && t2.startsWith(e) ? t2.slice(e.length) : t2;
}
function $(t2) {
  if (t2 != null)
    return t2.split("#")[0];
}
function d2(t2, e) {
  const r2 = t2.indexOf("?") > -1 ? "&" : "?";
  return `${t2}${r2}${new URLSearchParams(e).toString()}`;
}
var A = process.env.SERVER_EDITOR_APP_URL || "http://127.0.0.1:3000";
function D(t2) {
  return /^https?:\/\//.test(t2);
}
function O(t2, e, r2, n4) {
  const c2 = u2(t2), o2 = h2(t2, e, n4);
  if (o2 === r2)
    return c2;
  const a3 = o2 === e ? c2 : c2.slice(o2.length + 1);
  return `${(r2 === e ? "" : "/" + r2).toLowerCase()}${a3}`;
}
function h2(t2, e = R, r2 = []) {
  const n4 = u2(t2)?.split("/")[1];
  return r2.find((o2) => o2.code.toLowerCase() === n4)?.code || e;
}
function C2(t2, e, r2, n4, c2, o2 = {}) {
  if (!t2)
    return;
  const a3 = n4?.[e] || P3(t.IDP_LOGIN), s = { idpId: t2, localePrefix: r2, redirectTo: c2 || "", ...o2 };
  return d2(a3, s);
}

// node_modules/@redocly/realm/dist/shared/telemetry-client.js
var n3 = {};
var d3 = class {
  telemetryEndpoint;
  disabled;
  constructor(e, t2 = false) {
    this.telemetryEndpoint = e, this.disabled = t2;
  }
  updateContext(e) {
    n3 = e;
  }
  send(e, t2) {
    this.disabled || fetch(this.telemetryEndpoint, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ event: e, ...n3, eventData: t2 }) }).catch(() => {
    });
  }
};

export {
  n,
  C,
  p,
  t,
  P,
  R,
  r,
  d3 as d,
  c,
  d as d2,
  x,
  n2,
  f,
  i2 as i,
  g,
  l,
  h,
  m,
  P2,
  y,
  R2,
  U,
  E2 as E,
  x2,
  P3,
  $,
  D,
  O,
  h2,
  C2
};
