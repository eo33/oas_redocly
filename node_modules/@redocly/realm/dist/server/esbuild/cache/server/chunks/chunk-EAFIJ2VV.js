import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  Breadcrumb,
  Breadcrumbs,
  Comment,
  EditIcon,
  EditPageButton,
  FEEDBACK_MAX_RATING,
  FaceDissatisfiedIcon,
  FaceNeutralIcon,
  FaceSatisfiedIcon,
  Feedback,
  MAX_SCALE,
  MOOD_STATES,
  Markdown,
  Mood,
  Rating,
  Reasons,
  Scale,
  Sentiment,
  StarFilledIcon,
  StarIcon,
  Stars,
  TableOfContent,
  headingAnchorCss,
  init_Breadcrumb,
  init_Breadcrumbs,
  init_Comment,
  init_EditIcon,
  init_EditPageButton,
  init_FaceDissatisfiedIcon,
  init_FaceNeutralIcon,
  init_FaceSatisfiedIcon,
  init_Feedback,
  init_Markdown,
  init_Mood,
  init_Rating,
  init_Reasons,
  init_Scale,
  init_Sentiment,
  init_StarFilledIcon,
  init_StarIcon,
  init_Stars,
  init_TableOfContent,
  init_baseTable,
  init_headingAnchor,
  init_links,
  markdownBaseTableCss,
  markdownLinksCss
} from "./chunk-AB7LF64Z.js";
import {
  NotFound,
  init_NotFound
} from "./chunk-Q6LZZN6W.js";
import {
  ArrowLeftIcon,
  init_ArrowLeftIcon
} from "./chunk-WLDWULA7.js";
import {
  OIDCForbidden,
  init_OIDCForbidden
} from "./chunk-GHSOG4VG.js";
import {
  Forbidden,
  init_Forbidden
} from "./chunk-D237NEF2.js";
import {
  CatalogActions,
  CatalogCard,
  CatalogDescription,
  CatalogHighlight,
  CatalogPageContent,
  CatalogPageDescriptionWrapper,
  CatalogPageWrapper,
  CatalogTitle,
  CheckboxIcon,
  CheckmarkFilledIcon,
  CheckmarkIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  CloseIcon,
  CounterTag,
  DatePicker,
  Dropdown,
  DropdownMenu,
  DropdownMenuItem,
  Filter,
  FilterCheckboxes,
  FilterContent,
  FilterDateRange,
  FilterIcon,
  FilterInput,
  FilterOption,
  FilterOptionLabel,
  FilterOptions,
  FilterPopover,
  FilterSelect,
  FilterTitle,
  H2,
  HighlightContext,
  MenuContainer,
  SearchIcon,
  Select,
  SelectInputWrapper,
  SelectWrapper,
  Sidebar,
  Tag,
  init_Catalog,
  init_CatalogActions,
  init_CatalogCard,
  init_CatalogHighlight,
  init_CheckboxIcon,
  init_CheckmarkFilledIcon,
  init_CheckmarkIcon,
  init_ChevronDownIcon,
  init_ChevronUpIcon,
  init_CloseIcon,
  init_CounterTag,
  init_DatePicker,
  init_Dropdown,
  init_DropdownMenu,
  init_DropdownMenuItem,
  init_Filter,
  init_FilterCheckboxes,
  init_FilterContent,
  init_FilterDateRange,
  init_FilterIcon,
  init_FilterInput,
  init_FilterOption,
  init_FilterOptionLabel,
  init_FilterOptions,
  init_FilterPopover,
  init_FilterSelect,
  init_FilterTitle,
  init_H2,
  init_MenuContainer,
  init_SearchIcon,
  init_Select,
  init_SelectInput,
  init_Sidebar,
  init_Tag,
  require_react_dom
} from "./chunk-2J7OHCSZ.js";
import {
  ArrowRightIcon,
  init_ArrowRightIcon
} from "./chunk-XQXU7C5Q.js";
import {
  Button,
  Link,
  generateClassName,
  init_Button,
  init_Link
} from "./chunk-SX3NFZJN.js";
import {
  $e,
  ClipboardService,
  DEFAULT_FEEDBACK_TYPE,
  DEFAULT_LOCALE_PLACEHOLDER,
  FEEDBACK_TYPES,
  He,
  IS_BROWSER,
  MenuItemType,
  MobileMenuType,
  Ne,
  SecurityVariablesEnvSuffix,
  ThemeDataContext,
  addLeadingSlash,
  addLineNumbers,
  addTrailingSlash,
  breakpoints,
  buildLanguagesGroup,
  buildVersionSection,
  capitalize,
  changeTextCasing,
  clearAnimationTimeout,
  combineUrls,
  concatClassNames,
  extendDetailsBehaviour,
  findDeepFirst,
  formatDateWithoutTimeZone,
  generateCodeBlockTokens,
  getAutoHeightDuration,
  getCssColorVariable,
  getDisplayedHeadings,
  getDisplayedHeadingsIds,
  getElementHeight,
  getLeastDepth,
  getLocaleFromPathname,
  getMenuItemType,
  getNavbarElement,
  getPathPrefix,
  getPathnameForLocale,
  getScorecardColorVariable,
  getTypographyCssRulesByComponentName,
  init_constants,
  init_contexts,
  init_hooks,
  init_media_css,
  init_styled_components_esm,
  init_utils,
  isBrowser,
  isEmptyArray,
  isFromToSelectedOptions,
  isItemActive,
  isNavLinkItem,
  isNotNull,
  isNull,
  isObject,
  isPathInFolder,
  isPrimitive,
  isString,
  isTag,
  isUndefined,
  loadAndNavigate,
  mapNavbarItems,
  normalizePathPrefix,
  onDocumentReady,
  parseSrcSet,
  removeLeadingSlash,
  removeTrailingSlash,
  setAnimationTimeout,
  slash,
  slug,
  stringToHslColor,
  styled_components_esm_default,
  toStringIfDefined,
  trimText,
  typography,
  useActiveHeading,
  useActiveSectionId,
  useCodeBlockTabsControls,
  useCollapse,
  useColorSwitcher,
  useControl,
  useControlledState,
  useDialogHotKeys,
  useEvent,
  useFocusTrap,
  useFullHeight,
  useLanguagePicker,
  useMenuItemExpanded,
  useMobileMenu,
  useMobileMenuItems,
  useMobileMenuLevels,
  useModalScrollLock,
  useMount,
  useNavbarHeight,
  useNestedMenu,
  useOutsideClick,
  useProductPicker,
  useRecentSearches,
  useReportDialog,
  useSearchDialog,
  useSearchFilter,
  useSuggestedPages,
  useTabs,
  useThemeConfig,
  useThemeHooks,
  useUnmount,
  withLoadProgress,
  withPathPrefix,
  withoutHash,
  withoutPathPrefix
} from "./chunk-WNBJGIID.js";
import {
  LayoutVariant,
  REDOCLY_TEAMS_RBAC,
  init_lib_esm
} from "./chunk-R4PATEVC.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-35AYGKFE.js";

// node_modules/@redocly/theme/src/icons/ChevronRightIcon/ChevronRightIcon.tsx
import React from "react";
var Icon, ChevronRightIcon;
var init_ChevronRightIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ChevronRightIcon/ChevronRightIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon = (props) => /* @__PURE__ */ React.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M11 8L6.00002 13L5.30002 12.3L9.60002 8L5.30002 3.7L6.00002 3L11 8Z" }));
    ChevronRightIcon = styled_components_esm_default(Icon).attrs(() => ({
      "data-component-name": "icons/ChevronRightIcon/ChevronRightIcon"
    })).withConfig({
      displayName: "ChevronRightIcon",
      componentId: "sc-ah73fk-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CircleDashIcon/CircleDashIcon.tsx
import React2 from "react";
var Icon2, CircleDashIcon;
var init_CircleDashIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CircleDashIcon/CircleDashIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon2 = (props) => /* @__PURE__ */ React2.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React2.createElement("path", { d: "M3.84997 2.35009C3.27647 2.79018 2.77103 3.31247 2.34997 3.90009L3.14997 4.50009C3.5172 3.99081 3.9549 3.53627 4.44997 3.15009L3.84997 2.35009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M2.29997 6.15009L1.34997 5.85009C1.10845 6.54077 0.98999 7.26847 0.999972 8.00009H1.99997C1.99794 7.37116 2.09929 6.74616 2.29997 6.15009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M1.34997 10.2001C1.58185 10.8973 1.91909 11.5549 2.34997 12.1501L3.14997 11.5501C2.78851 11.044 2.50221 10.4882 2.29997 9.90009L1.34997 10.2001Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M3.89997 13.6501C4.49514 14.081 5.15275 14.4182 5.84997 14.6501L6.14997 13.7001C5.56184 13.4979 5.00608 13.2116 4.49997 12.8501L3.89997 13.6501Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M5.84997 1.35009L6.14997 2.30009C6.74604 2.09942 7.37103 1.99806 7.99997 2.00009V1.00009C7.26835 0.990112 6.54065 1.10858 5.84997 1.35009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M12.1 13.6501C12.6889 13.2111 13.211 12.689 13.65 12.1001L12.85 11.5001C12.4781 12.022 12.0219 12.4783 11.5 12.8501L12.1 13.6501Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M13.7 9.85009L14.65 10.1501C14.8675 9.45352 14.9853 8.72968 15 8.00009H14C14.002 8.62903 13.9007 9.25403 13.7 9.85009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M14.6 5.80009C14.3681 5.10288 14.0309 4.44526 13.6 3.85009L12.8 4.45009C13.1614 4.9562 13.4477 5.51196 13.65 6.10009L14.6 5.80009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M12.05 2.30009C11.4548 1.86921 10.7972 1.53197 10.1 1.30009L9.79997 2.25009C10.3881 2.45233 10.9439 2.73863 11.45 3.10009L12.05 2.30009Z" }), /* @__PURE__ */ React2.createElement("path", { d: "M10.15 14.6501L9.84997 13.7001C9.25391 13.9008 8.62891 14.0021 7.99997 14.0001V15.0001C8.72667 14.9568 9.44706 14.8395 10.15 14.6501Z" }));
    CircleDashIcon = styled_components_esm_default(Icon2).attrs(() => ({
      "data-component-name": "icons/CircleDashIcon/CircleDashIcon"
    })).withConfig({
      displayName: "CircleDashIcon",
      componentId: "sc-1vqu36r-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/Spinner/Spinner.tsx
var rotate, Spinner;
var init_Spinner = __esm({
  "node_modules/@redocly/theme/src/icons/Spinner/Spinner.tsx"() {
    init_styled_components_esm();
    init_CircleDashIcon();
    rotate = $e(["0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}"]);
    Spinner = styled_components_esm_default(CircleDashIcon).attrs(() => ({
      "data-component-name": "icons/Spinner/Spinner"
    })).withConfig({
      displayName: "Spinner",
      componentId: "sc-1fob0gr-0"
    })(["animation:2s ", " linear infinite;"], rotate);
  }
});

// node_modules/@redocly/theme/src/icons/CloseFilledIcon/CloseFilledIcon.tsx
import React3 from "react";
var Icon3, CloseFilledIcon;
var init_CloseFilledIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CloseFilledIcon/CloseFilledIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon3 = (props) => /* @__PURE__ */ React3.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React3.createElement("path", { d: "M8 1C4.1 1 1 4.1 1 8C1 11.9 4.1 15 8 15C11.9 15 15 11.9 15 8C15 4.1 11.9 1 8 1ZM10.7 11.5L8 8.8L5.3 11.5L4.5 10.7L7.2 8L4.5 5.3L5.3 4.5L8 7.2L10.7 4.5L11.5 5.3L8.8 8L11.5 10.7L10.7 11.5Z" }));
    CloseFilledIcon = styled_components_esm_default(Icon3).attrs(() => ({
      "data-component-name": "icons/CloseFilledIcon/CloseFilledIcon"
    })).withConfig({
      displayName: "CloseFilledIcon",
      componentId: "sc-178399b-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CleanIcon/CleanIcon.tsx
import React4 from "react";
var Icon4, CleanIcon;
var init_CleanIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CleanIcon/CleanIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon4 = (props) => /* @__PURE__ */ React4.createElement("svg", { viewBox: "5 5 16 16", fill: "inherit", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React4.createElement("path", { d: "M13.7499 13.75H16.3749V12.875H13.7499V13.75Z" }), /* @__PURE__ */ React4.createElement("path", { d: "M15.4999 17.25H18.1249V16.375H15.4999V17.25Z" }), /* @__PURE__ */ React4.createElement("path", { d: "M14.6249 15.5H17.2499V14.625H14.6249V15.5Z" }), /* @__PURE__ */ React4.createElement("path", { d: "M12.4386 13.75C12.4355 13.3808 12.337 13.0187 12.1527 12.6989C11.9684 12.379 11.7045 12.1122 11.3867 11.9244L14.6249 6.3125L13.8676 5.875L10.5532 11.6176C10.1463 11.5267 9.72319 11.5392 9.32244 11.6541C8.9217 11.769 8.55615 11.9825 8.25925 12.2751C6.62142 13.855 6.74825 17.5484 6.75425 17.705C6.75877 17.818 6.80685 17.9248 6.88841 18.0031C6.96998 18.0814 7.07868 18.1251 7.19175 18.125H13.7504C13.8422 18.125 13.9317 18.0961 14.0062 18.0424C14.0807 17.9887 14.1364 17.913 14.1654 17.8258C14.1945 17.7387 14.1954 17.6447 14.168 17.5571C14.1406 17.4694 14.0864 17.3926 14.0129 17.3375C12.4643 16.1755 12.4386 13.7735 12.4386 13.75ZM10.2192 12.4362C10.5694 12.4401 10.9046 12.5788 11.1551 12.8235C11.4056 13.0682 11.5521 13.4 11.5642 13.75C11.5642 13.7667 11.565 13.841 11.5715 13.9551L8.99053 12.8073C9.16053 12.6671 9.3567 12.5621 9.56764 12.4984C9.77857 12.4347 10.0001 12.4136 10.2192 12.4362ZM11.759 17.25C11.4094 16.8939 11.1866 16.4327 11.1249 15.9375H10.2499C10.2812 16.4031 10.4268 16.8539 10.6735 17.25H9.70085C9.52091 16.6822 9.41143 16.0945 9.37487 15.5H8.49987C8.52811 16.0927 8.62579 16.6801 8.7909 17.25H7.62487C7.63843 16.4466 7.75175 14.6722 8.41355 13.5082L11.7092 14.9738C11.8678 15.796 12.2055 16.5732 12.6985 17.25H11.759Z" }));
    CleanIcon = styled_components_esm_default(Icon4).attrs(() => ({
      "data-component-name": "icons/CookieIcon/CookieIcon"
    })).withConfig({
      displayName: "CleanIcon",
      componentId: "sc-s5jr2x-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/WarningFilledIcon/WarningFilledIcon.tsx
import React5 from "react";
var Icon5, WarningFilledIcon;
var init_WarningFilledIcon = __esm({
  "node_modules/@redocly/theme/src/icons/WarningFilledIcon/WarningFilledIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon5 = (props) => /* @__PURE__ */ React5.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React5.createElement("path", { d: "M8 1C4.15 1 1 4.15 1 8C1 11.85 4.15 15 8 15C11.85 15 15 11.85 15 8C15 4.15 11.85 1 8 1ZM7.45 4H8.55V9.5H7.45V4ZM8 12.5C7.6 12.5 7.25 12.15 7.25 11.75C7.25 11.35 7.6 11 8 11C8.4 11 8.75 11.35 8.75 11.75C8.75 12.15 8.4 12.5 8 12.5Z" }));
    WarningFilledIcon = styled_components_esm_default(Icon5).attrs(() => ({
      "data-component-name": "icons/WarningFilledIcon/WarningFilledIcon"
    })).withConfig({
      displayName: "WarningFilledIcon",
      componentId: "sc-gmxek-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Portal/Portal.tsx
import React6 from "react";
function Portal({
  children,
  mountId = "root"
}) {
  const mount = IS_BROWSER ? document.getElementById(mountId) || document.body : null;
  if (!mount) {
    return /* @__PURE__ */ React6.createElement(React6.Fragment, null, children);
  }
  return (0, import_react_dom.createPortal)(children, mount);
}
var import_react_dom;
var init_Portal = __esm({
  "node_modules/@redocly/theme/src/components/Portal/Portal.tsx"() {
    import_react_dom = __toESM(require_react_dom());
    init_utils();
  }
});

// node_modules/@redocly/theme/src/icons/DocumentBlankIcon/DocumentBlankIcon.tsx
import React7 from "react";
var Icon6, DocumentBlankIcon;
var init_DocumentBlankIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DocumentBlankIcon/DocumentBlankIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon6 = (props) => /* @__PURE__ */ React7.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React7.createElement("path", { d: "M12.85 4.64993L9.35 1.14993C9.30601 1.10107 9.25192 1.06236 9.19149 1.03646C9.13106 1.01056 9.06572 0.998095 9 0.999933H4C3.73502 1.00071 3.48112 1.10632 3.29375 1.29369C3.10638 1.48105 3.00078 1.73496 3 1.99993V13.9999C3.00078 14.2649 3.10638 14.5188 3.29375 14.7062C3.48112 14.8935 3.73502 14.9992 4 14.9999H12C12.265 14.9992 12.5189 14.8935 12.7062 14.7062C12.8936 14.5188 12.9992 14.2649 13 13.9999V4.99993C13.0018 4.93421 12.9894 4.86887 12.9635 4.80844C12.9376 4.74801 12.8989 4.69393 12.85 4.64993ZM9 2.19993L11.8 4.99993H9V2.19993ZM12 13.9999H4V1.99993H8V4.99993C8.00078 5.26491 8.10638 5.51881 8.29375 5.70618C8.48112 5.89355 8.73502 5.99916 9 5.99993H12V13.9999Z" }));
    DocumentBlankIcon = styled_components_esm_default(Icon6).attrs(() => ({
      "data-component-name": "icons/DocumentBlankIcon/DocumentBlankIcon"
    })).withConfig({
      displayName: "DocumentBlankIcon",
      componentId: "sc-mpuc2n-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CopyIcon/CopyIcon.tsx
import React8 from "react";
var Icon7, CopyIcon;
var init_CopyIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CopyIcon/CopyIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon7 = (props) => /* @__PURE__ */ React8.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React8.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.16667 2.66667C5.16667 2.57462 5.24129 2.5 5.33333 2.5H12C12.092 2.5 12.1667 2.57462 12.1667 2.66667V10.6667C12.1667 10.7587 12.092 10.8333 12 10.8333H10H5.33333C5.24129 10.8333 5.16667 10.7587 5.16667 10.6667V4.66667V2.66667ZM4.16667 4.16667V2.66667C4.16667 2.02233 4.689 1.5 5.33333 1.5H12C12.6443 1.5 13.1667 2.02233 13.1667 2.66667V10.6667C13.1667 11.311 12.6443 11.8333 12 11.8333H10.5V13.3333C10.5 13.6428 10.3771 13.9395 10.1583 14.1583C9.9395 14.3771 9.64275 14.5 9.33333 14.5H2.66667C2.35725 14.5 2.0605 14.3771 1.84171 14.1583C1.62292 13.9395 1.5 13.6428 1.5 13.3333V5.33333C1.5 5.02391 1.62292 4.72717 1.84171 4.50838C2.0605 4.28958 2.35725 4.16667 2.66667 4.16667H4.16667ZM9.5 11.8333V13.3333C9.5 13.3775 9.48244 13.4199 9.45118 13.4512C9.41993 13.4824 9.37754 13.5 9.33333 13.5H2.66667C2.62246 13.5 2.58007 13.4824 2.54882 13.4512C2.51756 13.4199 2.5 13.3775 2.5 13.3333V5.33333C2.5 5.28913 2.51756 5.24674 2.54882 5.21548C2.58007 5.18423 2.62246 5.16667 2.66667 5.16667H4.16667V10.6667C4.16667 11.311 4.689 11.8333 5.33333 11.8333H9.5Z" }));
    CopyIcon = styled_components_esm_default(Icon7).attrs(() => ({
      "data-component-name": "icons/CopyIcon/CopyIcon"
    })).withConfig({
      displayName: "CopyIcon",
      componentId: "sc-1n8wc2v-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Tooltip/Tooltip.tsx
import React9, { useEffect, memo, useRef } from "react";
function TooltipComponent({
  children,
  isOpen,
  tip,
  withArrow = true,
  placement = "top",
  className = "default",
  width,
  dataTestId
}) {
  const ref = useRef(null);
  const {
    isOpened,
    handleOpen,
    handleClose
  } = useControl(isOpen);
  useOutsideClick(ref, handleClose);
  const isControlled = isOpen !== void 0;
  useEffect(() => {
    if (isControlled) {
      if (isOpen) {
        handleOpen();
      } else {
        handleClose();
      }
    }
  }, [isOpen, isControlled, handleOpen, handleClose]);
  const controllers = !isControlled && {
    onMouseEnter: handleOpen,
    onMouseLeave: handleClose,
    onClick: handleClose
  };
  return /* @__PURE__ */ React9.createElement(TooltipWrapper, { ref, ...controllers, className: `tooltip-${className}`, "data-component-name": "Tooltip/Tooltip" }, children, isOpened && /* @__PURE__ */ React9.createElement(TooltipBody, { "data-testid": dataTestId || (typeof tip === "string" ? tip : ""), placement, width, withArrow }, tip));
}
var Tooltip, PLACEMENTS, TooltipWrapper, TooltipBody;
var init_Tooltip = __esm({
  "node_modules/@redocly/theme/src/components/Tooltip/Tooltip.tsx"() {
    init_styled_components_esm();
    init_hooks();
    Tooltip = memo(TooltipComponent);
    PLACEMENTS = {
      top: Ne(["top:0;left:50%;transform:translate(-50%,-99%);margin-top:-10px;", ""], ({
        withArrow
      }) => withArrow && Ne(["&::after{border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:6px;border-top-style:solid;bottom:0;left:50%;transform:translate(-50%,99%);}"])),
      bottom: Ne(["bottom:0;left:50%;transform:translate(-50%,99%);margin-bottom:-10px;", ""], ({
        withArrow
      }) => withArrow && Ne(["&::after{border-left:5px solid transparent;border-right:5px solid transparent;border-bottom-width:6px;border-bottom-style:solid;top:0;left:50%;transform:translate(-50%,-99%);}"])),
      left: Ne(["top:50%;left:0;transform:translate(-100%,-50%);margin-left:-10px;", ""], ({
        withArrow
      }) => withArrow && Ne(["&::after{border-top:5px solid transparent;border-bottom:5px solid transparent;border-left-width:6px;border-left-style:solid;top:50%;right:0;transform:translate(99%,-50%);}"])),
      right: Ne(["top:50%;right:0;transform:translate(100%,-50%);margin-right:-10px;", ""], ({
        withArrow
      }) => withArrow && Ne(["&::after{border-top:5px solid transparent;border-bottom:5px solid transparent;border-right-width:6px;border-right-style:solid;top:50%;left:0;transform:translate(-99%,-50%);}"]))
    };
    TooltipWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Tooltip__TooltipWrapper",
      componentId: "sc-qwrd2a-0"
    })(["position:relative;display:flex;"]);
    TooltipBody = styled_components_esm_default.span.withConfig({
      displayName: "Tooltip__TooltipBody",
      componentId: "sc-qwrd2a-1"
    })(["display:inline-block;position:absolute;text-align:center;padding:var(--tooltip-padding);max-width:var(--tooltip-max-width);white-space:normal;overflow-wrap:break-word;border-radius:var(--border-radius);transition:opacity 0.3s ease-out;font-size:13px;z-index:var(--z-index-overlay);&::after{position:absolute;content:' ';display:inline-block;width:0;height:0;border-color:var(--tooltip-bg-color);}background:var(--tooltip-bg-color);color:var(--tooltip-text-color);box-shadow:rgb(0 0 0 / 25%) 0 2px 4px;width:", ";", ""], ({
      width
    }) => width || "120px", ({
      placement
    }) => Ne(["", ";"], PLACEMENTS[placement]));
  }
});

// node_modules/@redocly/theme/src/components/Buttons/CopyButton.tsx
import React10, { memo as memo2 } from "react";
function CopyButtonComponent({
  data,
  type = "icon",
  toasterPlacement = "top",
  toasterText,
  toasterDuration,
  buttonText,
  onCopyClick,
  dataTestId = "copy-button",
  className,
  variant = "text"
}) {
  const { useTranslate } = useThemeHooks();
  const tooltip2 = useControl();
  const { translate } = useTranslate();
  const showTooltip = (duration = 1500) => {
    tooltip2.handleOpen();
    setTimeout(() => {
      tooltip2.handleClose();
    }, duration);
  };
  const copy = (e, duration) => {
    const content = typeof data === "string" ? data : JSON.stringify(data, null, 2);
    ClipboardService.copyCustom(content);
    showTooltip(duration);
    onCopyClick?.(e);
  };
  return /* @__PURE__ */ React10.createElement(
    Tooltip,
    {
      className: `copy-button ${className ? className : ""}`,
      tip: translate("codeSnippet.copy.buttonText", toasterText || "Copied!"),
      isOpen: tooltip2.isOpened,
      placement: toasterPlacement
    },
    /* @__PURE__ */ React10.createElement(
      Button,
      {
        "data-component-name": "Buttons/CopyButton",
        onClick: (e) => copy(e, toasterDuration),
        "data-testid": dataTestId,
        icon: type === "icon" ? /* @__PURE__ */ React10.createElement(CopyIcon, null) : void 0,
        size: "small",
        variant
      },
      type !== "icon" && translate("codeSnippet.copy.toasterText", buttonText || "Copy")
    )
  );
}
var CopyButton;
var init_CopyButton = __esm({
  "node_modules/@redocly/theme/src/components/Buttons/CopyButton.tsx"() {
    init_utils();
    init_hooks();
    init_Button();
    init_CopyIcon();
    init_Tooltip();
    CopyButton = memo2(CopyButtonComponent);
  }
});

// node_modules/@markdoc/markdoc/dist/index.mjs
function isAst(value) {
  return !!value?.$$mdtype;
}
function isFunction(value) {
  return !!(value?.$$mdtype === "Function");
}
function isVariable(value) {
  return !!(value?.$$mdtype === "Variable");
}
function* getAstValues(value) {
  if (value == null || typeof value !== "object")
    return;
  if (Array.isArray(value))
    for (const v of value)
      yield* getAstValues(v);
  if (isAst(value))
    yield value;
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return;
  for (const v of Object.values(value))
    yield* getAstValues(v);
}
function resolve(value, config = {}) {
  if (value == null || typeof value !== "object")
    return value;
  if (Array.isArray(value))
    return value.map((item2) => resolve(item2, config));
  if (isAst(value) && value?.resolve instanceof Function)
    return value.resolve(config);
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return value;
  const output = {};
  for (const [k, v] of Object.entries(value))
    output[k] = resolve(v, config);
  return output;
}
function isIdentifier(s2) {
  return typeof s2 === "string" && IDENTIFIER_REGEX.test(s2);
}
function isPromise(a) {
  return a && typeof a === "object" && typeof a.then === "function";
}
function findTagEnd(content, start = 0) {
  let state = 0;
  for (let pos = start; pos < content.length; pos++) {
    const char = content[pos];
    switch (state) {
      case 1:
        switch (char) {
          case '"':
            state = 0;
            break;
          case "\\":
            state = 2;
            break;
        }
        break;
      case 2:
        state = 1;
        break;
      case 0:
        if (char === '"')
          state = 1;
        else if (content.startsWith(CLOSE, pos))
          return pos;
    }
  }
  return null;
}
function parseTag(content, line, contentStart) {
  try {
    return (0, import_tag.parse)(content, { Variable, Function: Function2 });
  } catch (error22) {
    if (!(error22 instanceof import_tag.SyntaxError))
      throw error22;
    const {
      message,
      location: { start, end }
    } = error22;
    const location = {
      start: { line, character: start.offset + contentStart },
      end: { line: line + 1, character: end.offset + contentStart }
    };
    return { type: "error", meta: { error: { message, location } } };
  }
}
function parseTags(content, firstLine = 0) {
  let line = firstLine + 1;
  const output = [];
  let start = 0;
  for (let pos = 0; pos < content.length; pos++) {
    if (content[pos] === "\n") {
      line++;
      continue;
    }
    if (!content.startsWith(OPEN, pos))
      continue;
    const end = findTagEnd(content, pos);
    if (end == null) {
      pos = pos + OPEN.length;
      continue;
    }
    const text2 = content.slice(pos, end + CLOSE.length);
    const inner = content.slice(pos + OPEN.length, end);
    const lineStart = content.lastIndexOf("\n", pos);
    const lineEnd = content.indexOf("\n", end);
    const lineContent = content.slice(lineStart, lineEnd);
    const tag2 = parseTag(inner.trim(), line, pos - lineStart);
    const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;
    const precedingText = content.slice(start, precedingTextEnd);
    output.push({
      type: "text",
      start,
      end: pos - 1,
      content: precedingText
    });
    output.push({
      map: [line, line + 1],
      position: {
        start: pos - lineStart,
        end: pos - lineStart + text2.length
      },
      start: pos,
      end: pos + text2.length - 1,
      info: text2,
      ...tag2
    });
    start = end + CLOSE.length;
    pos = start - 1;
  }
  output.push({
    type: "text",
    start,
    end: content.length - 1,
    content: content.slice(start)
  });
  return output;
}
function reviver(_, value) {
  if (!value)
    return value;
  const klass = AstTypes[value.$$mdtype];
  return klass ? Object.assign(new klass(), value) : value;
}
function fromJSON(text2) {
  return JSON.parse(text2, reviver);
}
function* formatChildren(a, options) {
  for (const child of a.children) {
    yield* formatValue(child, options);
  }
}
function* formatInline(g) {
  yield [...g].join("").trim();
}
function* formatTableRow(items) {
  yield `| ${items.join(" | ")} |`;
}
function formatScalar(v) {
  if (v === void 0) {
    return void 0;
  }
  if (ast_default.isAst(v)) {
    return format(v);
  }
  if (v === null) {
    return "null";
  }
  if (Array.isArray(v)) {
    return "[" + v.map(formatScalar).join(SEP) + "]";
  }
  if (typeof v === "object") {
    return "{" + Object.entries(v).map(([key, value]) => `${isIdentifier(key) ? key : `"${key}"`}: ${formatScalar(value)}`).join(SEP) + "}";
  }
  return JSON.stringify(v);
}
function formatAnnotationValue(a) {
  const formattedValue = formatScalar(a.value);
  if (formattedValue === void 0)
    return void 0;
  if (a.name === "primary")
    return formattedValue;
  if (a.name === "id" && typeof a.value === "string" && isIdentifier(a.value))
    return "#" + a.value;
  if (a.type === "class" && isIdentifier(a.name))
    return "." + a.name;
  return `${a.name}=${formattedValue}`;
}
function* formatAttributes(n) {
  for (const [key, value] of Object.entries(n.attributes)) {
    if (key === "class" && typeof value === "object" && !ast_default.isAst(value))
      for (const name of Object.keys(value)) {
        yield formatAnnotationValue({ type: "class", name, value });
      }
    else
      yield formatAnnotationValue({ type: "attribute", name: key, value });
  }
}
function* formatAnnotations(n) {
  if (n.annotations.length) {
    yield OPEN + SPACE;
    yield n.annotations.map(formatAnnotationValue).join(SPACE);
    yield SPACE + CLOSE;
  }
}
function* formatVariable(v) {
  yield "$";
  yield v.path.map((p, i) => {
    if (i === 0)
      return p;
    if (isIdentifier(p))
      return "." + p;
    if (typeof p === "number")
      return `[${p}]`;
    return `["${p}"]`;
  }).join("");
}
function* formatFunction(f) {
  yield f.name;
  yield "(";
  yield Object.values(f.parameters).map(formatScalar).join(SEP);
  yield ")";
}
function* trimStart(g) {
  let n;
  do {
    const { value, done } = g.next();
    if (done)
      return;
    n = value.trimStart();
  } while (!n.length);
  yield n;
  yield* g;
}
function* escapeMarkdownCharacters(s2, characters) {
  yield s2.replace(characters, "\\$&").replace(new RegExp("\xA0", "g"), "&nbsp;");
}
function* formatNode(n, o = {}) {
  const no = { ...o, parent: n };
  const indent = SPACE.repeat(no.indent || 0);
  switch (n.type) {
    case "document": {
      if (n.attributes.frontmatter && n.attributes.frontmatter.length) {
        yield "---" + NL + n.attributes.frontmatter + NL + "---" + NL + NL;
      }
      yield* trimStart(formatChildren(n, no));
      break;
    }
    case "heading": {
      yield NL;
      yield indent;
      yield "#".repeat(n.attributes.level || 1);
      yield SPACE;
      yield* trimStart(formatChildren(n, no));
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "paragraph": {
      yield NL;
      yield* formatChildren(n, no);
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "inline": {
      yield indent;
      yield* formatChildren(n, no);
      break;
    }
    case "image": {
      yield "!";
      yield "[";
      yield* formatValue(n.attributes.alt, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.src === "string" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "link": {
      yield "[";
      yield* formatChildren(n, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.href === "string" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "text": {
      const { content } = n.attributes;
      if (ast_default.isAst(content)) {
        yield OPEN + SPACE;
        yield* formatValue(content, no);
        yield SPACE + CLOSE;
      } else {
        if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {
          yield* escapeMarkdownCharacters(content, /[*_~]/g);
        } else {
          yield* escapeMarkdownCharacters(content, /^[*>#]/);
        }
      }
      break;
    }
    case "blockquote": {
      const prefix = ">" + SPACE;
      yield n.children.map((child) => format(child, no).trimStart()).map((d) => NL + indent + prefix + d).join(indent + prefix);
      break;
    }
    case "hr": {
      yield NL;
      yield indent;
      yield "---";
      yield NL;
      break;
    }
    case "fence": {
      yield NL;
      yield indent;
      const innerFence = n.attributes.content.match(/`{3,}/g) || [];
      const innerFenceLength = innerFence.map((s2) => s2.length).reduce(max, 0);
      const boundary = "`".repeat(innerFenceLength ? innerFenceLength + 1 : 3);
      yield boundary;
      if (n.attributes.language)
        yield n.attributes.language;
      if (n.annotations.length)
        yield SPACE;
      yield* formatAnnotations(n);
      yield NL;
      yield indent;
      yield n.attributes.content.split(NL).join(NL + indent);
      yield boundary;
      yield NL;
      break;
    }
    case "tag": {
      if (!n.inline) {
        yield NL;
        yield indent;
      }
      const open = OPEN + SPACE;
      const attributes = [...formatAttributes(n)].filter((v) => v !== void 0);
      const tag2 = [open + n.tag, ...attributes];
      const inlineTag = tag2.join(SPACE);
      const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);
      yield (!n.inline && isLongTagOpening ? tag2.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? "" : "/") + CLOSE;
      if (n.children.length) {
        yield* formatChildren(n, no.allowIndentation ? increment(no) : no);
        if (!n.inline) {
          yield indent;
        }
        yield OPEN + SPACE + "/" + n.tag + SPACE + CLOSE;
      }
      if (!n.inline) {
        yield NL;
      }
      break;
    }
    case "list": {
      const isLoose = n.children.some((n2) => n2.children.some((c) => c.type === "paragraph"));
      for (let i = 0; i < n.children.length; i++) {
        const prefix = n.attributes.ordered ? `${i === 0 ? n.attributes.start ?? "1" : "1"}${n.attributes.marker ?? OL}` : n.attributes.marker ?? UL;
        let d = format(n.children[i], increment(no, prefix.length + 1));
        if (!isLoose || i === n.children.length - 1) {
          d = d.trim();
        }
        yield NL + indent + prefix + " " + d;
      }
      yield NL;
      break;
    }
    case "item": {
      for (let i = 0; i < n.children.length; i++) {
        yield* formatValue(n.children[i], no);
        if (i === 0)
          yield* formatAnnotations(n);
      }
      break;
    }
    case "strong": {
      yield n.attributes.marker ?? "**";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "**";
      break;
    }
    case "em": {
      yield n.attributes.marker ?? "*";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "*";
      break;
    }
    case "code": {
      yield "`";
      yield* formatInline(formatValue(n.attributes.content, no));
      yield "`";
      break;
    }
    case "s": {
      yield "~~";
      yield* formatInline(formatChildren(n, no));
      yield "~~";
      break;
    }
    case "hardbreak": {
      yield "\\" + NL;
      yield indent;
      break;
    }
    case "softbreak": {
      yield NL;
      yield indent;
      break;
    }
    case "table": {
      const table3 = [...formatChildren(n, increment(no))];
      if (o.parent && o.parent.type === "tag" && o.parent.tag === "table") {
        for (let i = 0; i < table3.length; i++) {
          const row = table3[i];
          if (typeof row === "string") {
            if (row.trim().length) {
              yield NL;
              yield row;
            }
          } else {
            if (i !== 0) {
              yield NL;
              yield indent + "---";
            }
            for (const d of row) {
              yield NL + indent + UL + " " + d;
            }
          }
        }
        yield NL;
      } else {
        const widths = [];
        for (const row of table3) {
          for (let i = 0; i < row.length; i++) {
            widths[i] = widths[i] ? Math.max(widths[i], row[i].length) : row[i].length;
          }
        }
        const [head, ...rows] = table3;
        yield NL;
        yield* formatTableRow(head.map((cell, i) => cell + SPACE.repeat(widths[i] - cell.length)));
        yield NL;
        yield* formatTableRow(head.map((cell, i) => "-".repeat(widths[i])));
        yield NL;
        for (const row of rows) {
          yield* formatTableRow(row.map((cell, i) => cell + SPACE.repeat(widths[i] - cell.length)));
          yield NL;
        }
      }
      break;
    }
    case "thead": {
      const [head] = [...formatChildren(n, no)];
      yield head || [];
      break;
    }
    case "tr": {
      yield [...formatChildren(n, no)];
      break;
    }
    case "td":
    case "th": {
      yield [...formatChildren(n, no), ...formatAnnotations(n)].join("").trim();
      break;
    }
    case "tbody": {
      yield* formatChildren(n, no);
      break;
    }
    case "comment": {
      yield "<!-- " + n.attributes.content + " -->\n";
      break;
    }
    case "error":
    case "node":
      break;
  }
}
function* formatValue(v, o = {}) {
  switch (typeof v) {
    case "undefined":
      break;
    case "boolean":
    case "number":
    case "string": {
      yield v.toString();
      break;
    }
    case "object": {
      if (v === null)
        break;
      if (Array.isArray(v)) {
        for (const n of v)
          yield* formatValue(n, o);
        break;
      }
      switch (v.$$mdtype) {
        case "Function": {
          yield* formatFunction(v);
          break;
        }
        case "Node":
          yield* formatNode(v, o);
          break;
        case "Variable": {
          yield* formatVariable(v);
          break;
        }
        default:
          throw new Error(`Unimplemented: "${v.$$mdtype}"`);
      }
      break;
    }
  }
}
function format(v, options) {
  let doc = "";
  for (const s2 of formatValue(v, options))
    doc += s2;
  return doc.trimStart();
}
function truthy(value) {
  return value !== false && value !== void 0 && value !== null;
}
function renderConditions(node2) {
  const conditions = [
    { condition: node2.attributes.primary, children: [] }
  ];
  for (const child of node2.children) {
    if (child.type === "tag" && child.tag === "else")
      conditions.push({
        condition: "primary" in child.attributes ? child.attributes.primary : true,
        children: []
      });
    else
      conditions[conditions.length - 1].children.push(child);
  }
  return conditions;
}
function convertToRow(node2, cellType = "td") {
  node2.type = "tr";
  node2.attributes = {};
  for (const cell of node2.children)
    cell.type = cellType;
  return node2;
}
function transform(document22) {
  for (const node2 of document22.walk()) {
    if (node2.type !== "tag" || node2.tag !== "table")
      continue;
    const [first, ...rest] = node2.children;
    if (!first || first.type === "table")
      continue;
    const table3 = new ast_default.Node("table", node2.attributes, [
      new ast_default.Node("thead"),
      new ast_default.Node("tbody")
    ]);
    const [thead2, tbody2] = table3.children;
    if (first.type === "list")
      thead2.push(convertToRow(first, "th"));
    for (const row of rest) {
      if (row.type === "list")
        convertToRow(row);
      else if (row.type === "tag" && row.tag === "if") {
        const children = [];
        for (const child of row.children) {
          if (child.type === "hr")
            continue;
          if (child.type === "list")
            convertToRow(child);
          children.push(child);
        }
        row.children = children;
      } else
        continue;
      tbody2.push(row);
    }
    node2.children = [table3];
  }
}
function annotate(node2, attributes) {
  for (const attribute of attributes) {
    node2.annotations.push(attribute);
    const { name, value, type } = attribute;
    if (type === "attribute") {
      if (node2.attributes[name] !== void 0)
        node2.errors.push({
          id: "duplicate-attribute",
          level: "warning",
          message: `Attribute '${name}' already set`
        });
      node2.attributes[name] = value;
    } else if (type === "class")
      if (node2.attributes.class)
        node2.attributes.class[name] = value;
      else
        node2.attributes.class = { [name]: value };
  }
}
function handleAttrs(token, type) {
  switch (type) {
    case "heading":
      return { level: Number(token.tag.replace("h", "")) };
    case "list": {
      const attrs = token.attrs ? Object.fromEntries(token.attrs) : void 0;
      const ordered = token.type.startsWith("ordered");
      return ordered && attrs?.start ? { ordered: true, start: attrs.start, marker: token.markup } : { ordered, marker: token.markup };
    }
    case "link": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { href: attrs.href, title: attrs.title } : { href: attrs.href };
    }
    case "image": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { alt: token.content, src: attrs.src, title: attrs.title } : { alt: token.content, src: attrs.src };
    }
    case "em":
    case "strong":
      return { marker: token.markup };
    case "text":
    case "code":
    case "comment":
      return { content: (token.meta || {}).variable || token.content };
    case "fence": {
      const [language] = token.info.split(" ", 1);
      return language === "" || language === OPEN ? { content: token.content } : { content: token.content, language };
    }
    case "td":
    case "th": {
      if (token.attrs) {
        const attrs = Object.fromEntries(token.attrs);
        let align;
        if (attrs.style) {
          if (attrs.style.includes("left")) {
            align = "left";
          } else if (attrs.style.includes("center")) {
            align = "center";
          } else if (attrs.style.includes("right")) {
            align = "right";
          }
        }
        if (align) {
          return { align };
        }
      }
      return {};
    }
    default:
      return {};
  }
}
function handleToken(token, nodes, file, handleSlots, addLocation, inlineParent) {
  if (token.type === "frontmatter") {
    nodes[0].attributes.frontmatter = token.content;
    return;
  }
  if (token.hidden || token.type === "text" && token.content === "")
    return;
  const errors = token.errors || [];
  const parent = nodes[nodes.length - 1];
  const { tag: tag2, attributes, error: error22 } = token.meta || {};
  if (token.type === "annotation") {
    if (inlineParent)
      return annotate(inlineParent, attributes);
    return parent.errors.push({
      id: "no-inline-annotations",
      level: "error",
      message: `Can't apply inline annotations to '${parent.type}'`
    });
  }
  let typeName = token.type.replace(/_(open|close)$/, "");
  if (mappings[typeName])
    typeName = mappings[typeName];
  if (typeName === "error") {
    const { message, location } = error22;
    errors.push({ id: "parse-error", level: "critical", message, location });
  }
  if (token.nesting < 0) {
    if (parent.type === typeName && parent.tag === tag2) {
      if (parent.lines && token.map)
        parent.lines.push(...token.map);
      return nodes.pop();
    }
    errors.push({
      id: "missing-opening",
      level: "critical",
      message: `Node '${typeName}' is missing opening`
    });
  }
  const attrs = handleAttrs(token, typeName);
  const node2 = new Node(typeName, attrs, void 0, tag2 || void 0);
  const { position = {} } = token;
  node2.errors = errors;
  if (addLocation !== false) {
    node2.lines = token.map || parent.lines || [];
    node2.location = {
      file,
      start: {
        line: node2.lines[0],
        character: position.start
      },
      end: {
        line: node2.lines[1],
        character: position.end
      }
    };
  }
  if (inlineParent)
    node2.inline = true;
  if (attributes && ["tag", "fence", "image"].includes(typeName))
    annotate(node2, attributes);
  if (handleSlots && tag2 === "slot" && typeof node2.attributes.primary === "string")
    parent.slots[node2.attributes.primary] = node2;
  else
    parent.push(node2);
  if (token.nesting > 0)
    nodes.push(node2);
  if (!Array.isArray(token.children))
    return;
  if (node2.type === "inline")
    inlineParent = parent;
  nodes.push(node2);
  const isLeafNode = typeName === "image";
  if (!isLeafNode) {
    for (const child of token.children)
      handleToken(child, nodes, file, handleSlots, addLocation, inlineParent);
  }
  nodes.pop();
}
function parser(tokens, args) {
  const doc = new Node("document");
  const nodes = [doc];
  if (typeof args === "string")
    args = { file: args };
  for (const token of tokens)
    handleToken(token, nodes, args?.file, args?.slots, args?.location);
  if (nodes.length > 1)
    for (const node2 of nodes.slice(1))
      node2.errors.push({
        id: "missing-closing",
        level: "critical",
        message: `Node '${node2.tag || node2.type}' is missing closing`
      });
  for (const transform3 of transforms_default)
    transform3(doc);
  return doc;
}
function render(node2) {
  if (typeof node2 === "string" || typeof node2 === "number")
    return escapeHtml(String(node2));
  if (Array.isArray(node2))
    return node2.map(render).join("");
  if (node2 === null || typeof node2 !== "object" || !Tag2.isTag(node2))
    return "";
  const { name, attributes, children = [] } = node2;
  if (!name)
    return render(children);
  let output = `<${name}`;
  for (const [k, v] of Object.entries(attributes ?? {}))
    output += ` ${k.toLowerCase()}="${escapeHtml(String(v))}"`;
  output += ">";
  if (voidElements.has(name))
    return output;
  if (children.length)
    output += render(children);
  output += `</${name}>`;
  return output;
}
function tagName(name, components) {
  return typeof name !== "string" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
}
function dynamic(node2, React159, { components = {} } = {}) {
  function deepRender2(value) {
    if (value == null || typeof value !== "object")
      return value;
    if (Array.isArray(value))
      return value.map((item2) => deepRender2(item2));
    if (value.$$mdtype === "Tag")
      return render3(value);
    if (typeof value !== "object")
      return value;
    const output = {};
    for (const [k, v] of Object.entries(value))
      output[k] = deepRender2(v);
    return output;
  }
  function render3(node3) {
    if (Array.isArray(node3))
      return React159.createElement(React159.Fragment, null, ...node3.map(render3));
    if (node3 === null || typeof node3 !== "object" || !Tag2.isTag(node3))
      return node3;
    const {
      name,
      attributes: { class: className, ...attrs } = {},
      children = []
    } = node3;
    if (className)
      attrs.className = className;
    return React159.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));
  }
  return render3(node2);
}
function tagName2(name, components) {
  return typeof name !== "string" ? "Fragment" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
}
function renderArray(children) {
  return children.map(render2).join(", ");
}
function deepRender(value) {
  if (value == null || typeof value !== "object")
    return JSON.stringify(value);
  if (Array.isArray(value))
    return `[${value.map((item2) => deepRender(item2)).join(", ")}]`;
  if (value.$$mdtype === "Tag")
    return render2(value);
  if (typeof value !== "object")
    return JSON.stringify(value);
  const object = Object.entries(value).map(([k, v]) => [JSON.stringify(k), deepRender(v)].join(": ")).join(", ");
  return `{${object}}`;
}
function render2(node2) {
  if (Array.isArray(node2))
    return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;
  if (node2 === null || typeof node2 !== "object" || !Tag2.isTag(node2))
    return JSON.stringify(node2);
  const {
    name,
    attributes: { class: className, ...attrs } = {},
    children = []
  } = node2;
  if (className)
    attrs.className = className;
  return `React.createElement(
    tagName(${JSON.stringify(name)}, components),
    ${Object.keys(attrs).length == 0 ? "null" : deepRender(attrs)},
    ${renderArray(children)})`;
}
function reactStatic(node2) {
  return `
  (({components = {}} = {}) => {
    ${tagName2}
    return ${render2(node2)};
  })
`;
}
function createToken(state, content, contentStart) {
  try {
    const { type, meta, nesting = 0 } = (0, import_tag7.parse)(content, { Variable, Function: Function2 });
    const token = state.push(type, "", nesting);
    token.info = content;
    token.meta = meta;
    if (!state.delimiters) {
      state.delimiters = [];
    }
    return token;
  } catch (error22) {
    if (!(error22 instanceof import_tag7.SyntaxError))
      throw error22;
    const {
      message,
      location: { start, end }
    } = error22;
    const location = contentStart ? {
      start: { offset: start.offset + contentStart },
      end: { offset: end.offset + contentStart }
    } : null;
    const token = state.push("error", "", 0);
    token.meta = { error: { message, location } };
    return token;
  }
}
function block(state, startLine, endLine, silent) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  const finish = state.eMarks[startLine];
  if (!state.src.startsWith(OPEN, start))
    return false;
  const tagEnd = findTagEnd(state.src, start);
  const lastPossible = state.src.slice(0, finish).trim().length;
  if (!tagEnd || tagEnd < lastPossible - CLOSE.length)
    return false;
  const contentStart = start + OPEN.length;
  const content = state.src.slice(contentStart, tagEnd).trim();
  const lines = state.src.slice(start, tagEnd + CLOSE.length).split("\n").length;
  if (content[0] === "$")
    return false;
  if (silent)
    return true;
  const token = createToken(state, content, contentStart);
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
}
function inline2(state, silent) {
  if (!state.src.startsWith(OPEN, state.pos))
    return false;
  const tagEnd = findTagEnd(state.src, state.pos);
  if (!tagEnd)
    return false;
  const content = state.src.slice(state.pos + OPEN.length, tagEnd);
  if (!silent)
    createToken(state, content.trim());
  state.pos = tagEnd + CLOSE.length;
  return true;
}
function core(state) {
  let token;
  for (token of state.tokens) {
    if (token.type !== "fence")
      continue;
    if (token.info.includes(OPEN)) {
      const start = token.info.indexOf(OPEN);
      const end = findTagEnd(token.info, start);
      const content = token.info.slice(start + OPEN.length, end);
      try {
        const { meta } = (0, import_tag7.parse)(content.trim(), { Variable, Function: Function2 });
        token.meta = meta;
      } catch (error22) {
        if (!(error22 instanceof import_tag7.SyntaxError))
          throw error22;
        if (!token.errors)
          token.errors = [];
        token.errors.push({
          id: "fence-tag-error",
          level: "error",
          message: `Syntax error in fence tag: ${error22.message}`
        });
      }
    }
    if (token?.meta?.attributes?.find((attr) => attr.name === "process" && !attr.value))
      continue;
    token.children = parseTags(token.content, token.map[0]);
  }
}
function plugin(md) {
  md.block.ruler.before("paragraph", "annotations", block, {
    alt: ["paragraph", "blockquote"]
  });
  md.inline.ruler.push("containers", inline2);
  md.core.ruler.push("annotations", core);
}
function getLine(state, n) {
  return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();
}
function findClose(state, endLine) {
  for (let line = 1; line < endLine; line++)
    if (getLine(state, line) === fence2)
      return line;
}
function block2(state, startLine, endLine, silent) {
  if (startLine != 0 || getLine(state, 0) != fence2)
    return false;
  const close = findClose(state, endLine);
  if (!close)
    return false;
  if (silent)
    return true;
  const token = state.push("frontmatter", "", 0);
  token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();
  token.map = [0, close];
  token.hidden = true;
  state.line = close + 1;
  return true;
}
function plugin2(md) {
  md.block.ruler.before("hr", "frontmatter", block2);
}
function block3(state, startLine, endLine, silent) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  if (!state.src.startsWith(OPEN2, start))
    return false;
  const close = state.src.indexOf(CLOSE2, start);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(start + OPEN2.length, close);
  const lines = content.split("\n").length;
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
}
function inline3(state, silent) {
  if (!state.src.startsWith(OPEN2, state.pos))
    return false;
  const close = state.src.indexOf(CLOSE2, state.pos);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(state.pos + OPEN2.length, close);
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  state.pos = close + CLOSE2.length;
  return true;
}
function plugin3(md) {
  md.block.ruler.before("table", "comment", block3, { alt: ["paragraph"] });
  md.inline.ruler.push("comment", inline3);
}
function validateType(type, value, config, key) {
  if (!type)
    return true;
  if (ast_default.isFunction(value) && config.validation?.validateFunctions) {
    const schema = config.functions?.[value.name];
    return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t) => t === type) !== void 0 : schema.returns === type;
  }
  if (ast_default.isAst(value))
    return true;
  if (Array.isArray(type))
    return type.some((t) => validateType(t, value, config, key));
  if (typeof type === "string")
    type = TypeMappings[type];
  if (typeof type === "function") {
    const instance = new type();
    if (instance.validate) {
      return instance.validate(value, config, key);
    }
  }
  return value != null && value.constructor === type;
}
function typeToString(type) {
  if (typeof type === "string")
    return type;
  if (Array.isArray(type))
    return type.map(typeToString).join(" | ");
  return type.name;
}
function validateFunction(fn, config) {
  const schema = config.functions?.[fn.name];
  const errors = [];
  if (!schema)
    return [
      {
        id: "function-undefined",
        level: "critical",
        message: `Undefined function: '${fn.name}'`
      }
    ];
  if (schema.validate)
    errors.push(...schema.validate(fn, config));
  if (schema.parameters) {
    for (const [key, value] of Object.entries(fn.parameters)) {
      const param = schema.parameters?.[key];
      if (!param) {
        errors.push({
          id: "parameter-undefined",
          level: "error",
          message: `Invalid parameter: '${key}'`
        });
        continue;
      }
      if (ast_default.isAst(value) && !ast_default.isFunction(value))
        continue;
      if (param.type) {
        const valid = validateType(param.type, value, config, key);
        if (valid === false) {
          errors.push({
            id: "parameter-type-invalid",
            level: "error",
            message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`
          });
        } else if (Array.isArray(valid)) {
          errors.push(...valid);
        }
      }
    }
  }
  for (const [key, { required }] of Object.entries(schema.parameters ?? {}))
    if (required && fn.parameters[key] === void 0)
      errors.push({
        id: "parameter-missing-required",
        level: "error",
        message: `Missing required parameter: '${key}'`
      });
  return errors;
}
function displayMatches(matches, n) {
  if (matches.length <= n)
    return JSON.stringify(matches);
  const items = matches.slice(0, n).map((item2) => JSON.stringify(item2));
  return `[${items.join(",")}, ... ${matches.length - n} more]`;
}
function validator(node2, config) {
  const schema = node2.findSchema(config);
  const errors = [...node2.errors || []];
  if (!schema) {
    errors.push({
      id: node2.tag ? "tag-undefined" : "node-undefined",
      level: "critical",
      message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`
    });
    return errors;
  }
  if (schema.inline != void 0 && node2.inline !== schema.inline)
    errors.push({
      id: "tag-placement-invalid",
      level: "critical",
      message: `'${node2.tag}' tag should be ${schema.inline ? "inline" : "block"}`
    });
  if (schema.selfClosing && node2.children.length > 0)
    errors.push({
      id: "tag-selfclosing-has-children",
      level: "critical",
      message: `'${node2.tag}' tag should be self-closing`
    });
  const attributes = {
    ...globalAttributes,
    ...schema.attributes
  };
  for (const key of Object.keys(node2.slots)) {
    const slot2 = schema.slots?.[key];
    if (!slot2)
      errors.push({
        id: "slot-undefined",
        level: "error",
        message: `Invalid slot: '${key}'`
      });
  }
  for (let [key, value] of Object.entries(node2.attributes)) {
    const attrib = attributes[key];
    if (!attrib) {
      errors.push({
        id: "attribute-undefined",
        level: "error",
        message: `Invalid attribute: '${key}'`
      });
      continue;
    }
    let { type, matches, errorLevel } = attrib;
    if (ast_default.isAst(value)) {
      if (ast_default.isFunction(value) && config.validation?.validateFunctions)
        errors.push(...validateFunction(value, config));
      else if (ast_default.isVariable(value) && config.variables) {
        let missing = false;
        let variables = config.variables;
        for (const key2 of value.path) {
          if (!Object.prototype.hasOwnProperty.call(variables, key2)) {
            missing = true;
            break;
          }
          variables = variables[key2];
        }
        if (missing) {
          errors.push({
            id: "variable-undefined",
            level: "error",
            message: `Undefined variable: '${value.path.join(".")}'`
          });
        }
      } else
        continue;
    }
    value = value;
    if (type) {
      const valid = validateType(type, value, config, key);
      if (valid === false) {
        errors.push({
          id: "attribute-type-invalid",
          level: errorLevel || "error",
          message: `Attribute '${key}' must be type of '${typeToString(type)}'`
        });
      }
      if (Array.isArray(valid)) {
        errors.push(...valid);
      }
    }
    if (typeof matches === "function")
      matches = matches(config);
    if (Array.isArray(matches) && !matches.includes(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match one of ${displayMatches(matches, 8)}. Got '${value}' instead.`
      });
    if (matches instanceof RegExp && !matches.test(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`
      });
    if (typeof attrib.validate === "function") {
      const attribErrors = attrib.validate(value, config, key);
      if (Array.isArray(attribErrors))
        errors.push(...attribErrors);
    }
  }
  for (const [key, { required }] of Object.entries(attributes))
    if (required && node2.attributes[key] === void 0)
      errors.push({
        id: "attribute-missing-required",
        level: "error",
        message: `Missing required attribute: '${key}'`
      });
  if (schema.slots) {
    for (const [key, { required }] of Object.entries(schema.slots))
      if (required && node2.slots[key] === void 0)
        errors.push({
          id: "slot-missing-required",
          level: "error",
          message: `Missing required slot: '${key}'`
        });
  }
  for (const { type } of node2.children) {
    if (schema.children && type !== "error" && !schema.children.includes(type))
      errors.push({
        id: "child-invalid",
        level: "warning",
        message: `Can't nest '${type}' in '${node2.tag || node2.type}'`
      });
  }
  if (schema.validate) {
    const schemaErrors = schema.validate(node2, config);
    if (isPromise(schemaErrors)) {
      return schemaErrors.then((e) => errors.concat(e));
    }
    errors.push(...schemaErrors);
  }
  return errors;
}
function* walkWithParents(node2, parents = []) {
  yield [node2, parents];
  for (const child of [...Object.values(node2.slots), ...node2.children])
    yield* walkWithParents(child, [...parents, node2]);
}
function validateTree(content, config) {
  const output = [...walkWithParents(content)].map(([node2, parents]) => {
    const { type, lines, location } = node2;
    const updatedConfig = {
      ...config,
      validation: { ...config.validation, parents }
    };
    const errors = validator(node2, updatedConfig);
    if (isPromise(errors)) {
      return errors.then((e) => e.map((error22) => ({ type, lines, location, error: error22 })));
    }
    return errors.map((error22) => ({ type, lines, location, error: error22 }));
  });
  if (output.some(isPromise)) {
    return Promise.all(output).then((o) => o.flat());
  }
  return output.flat();
}
function mergeConfig(config = {}) {
  return {
    ...config,
    tags: {
      ...tags_default,
      ...config.tags
    },
    nodes: {
      ...schema_exports,
      ...config.nodes
    },
    functions: {
      ...functions_default,
      ...config.functions
    }
  };
}
function parse3(content, args) {
  if (typeof content === "string")
    content = tokenizer.tokenize(content);
  return parser(content, args);
}
function resolve2(content, config) {
  if (Array.isArray(content))
    return content.flatMap((child) => child.resolve(config));
  return content.resolve(config);
}
function transform2(nodes, options) {
  const config = mergeConfig(options);
  const content = resolve2(nodes, config);
  if (Array.isArray(content))
    return content.flatMap((child) => child.transform(config));
  return content.transform(config);
}
function validate(content, options) {
  const config = mergeConfig(options);
  return validateTree(content, config);
}
function createElement(name, attributes = {}, ...children) {
  return { name, attributes, children };
}
var __create, __defProp, __getOwnPropDesc, __getOwnPropNames, __getProtoOf, __hasOwnProp, __markAsModule, __commonJS, __export2, __reExport, __toModule, require_tag, require_entities, require_entities2, require_regex, require_encode, require_decode, require_format, require_parse, require_mdurl, require_regex2, require_regex3, require_regex4, require_regex5, require_uc, require_utils, require_parse_link_label, require_parse_link_destination, require_parse_link_title, require_helpers, require_renderer, require_ruler, require_normalize, require_block, require_inline, require_linkify, require_replacements, require_smartquotes, require_token, require_state_core, require_parser_core, require_table, require_code, require_fence, require_blockquote, require_hr, require_list, require_reference, require_html_blocks, require_html_re, require_html_block, require_heading, require_lheading, require_paragraph, require_state_block, require_parser_block, require_text, require_newline, require_escape, require_backticks, require_strikethrough, require_emphasis, require_link, require_image, require_autolink, require_html_inline, require_entity, require_balance_pairs, require_text_collapse, require_state_inline, require_parser_inline, require_re, require_linkify_it, require_punycode, require_default, require_zero, require_commonmark, require_lib, require_markdown_it, base_exports, Tag2, Class, Id, import_tag, Variable, Function2, STATES, OPEN, CLOSE, IDENTIFIER_REGEX, globalAttributes, transformer_default, Node, AstTypes, ast_default, SPACE, SEP, NL, OL, UL, MAX_TAG_OPENING_WIDTH, WRAPPING_TYPES, max, increment, tagIf, tagElse, and, or, not, equals, debug, defaultFn, functions_default, transforms_default, mappings, schema_exports, document2, heading, paragraph, image, fence, blockquote, item, list, hr, table, td, th, tr, tbody, thead, strong, em, s, inline, link, code, text, hardbreak, softbreak, comment, error, node, import_markdown_it, escapeHtml, voidElements, renderers_default, PartialFile, partial, table2, slot, tags_default, import_lib, import_tag7, fence2, OPEN2, CLOSE2, Tokenizer, TypeMappings, tokenizer, Markdoc;
var init_dist = __esm({
  "node_modules/@markdoc/markdoc/dist/index.mjs"() {
    __create = Object.create;
    __defProp = Object.defineProperty;
    __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    __getOwnPropNames = Object.getOwnPropertyNames;
    __getProtoOf = Object.getPrototypeOf;
    __hasOwnProp = Object.prototype.hasOwnProperty;
    __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
    __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    __export2 = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    __reExport = (target, module, desc) => {
      if (module && typeof module === "object" || typeof module === "function") {
        for (let key of __getOwnPropNames(module))
          if (!__hasOwnProp.call(target, key) && key !== "default")
            __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
      }
      return target;
    };
    __toModule = (module) => {
      return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
    };
    require_tag = __commonJS({
      "src/grammar/tag.js"(exports, module) {
        "use strict";
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          this.message = message;
          this.expected = expected;
          this.found = found;
          this.location = location;
          this.name = "SyntaxError";
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, peg$SyntaxError);
          }
        }
        peg$subclass(peg$SyntaxError, Error);
        peg$SyntaxError.buildMessage = function(expected, found, location) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            },
            not: function(expectation) {
              return "not " + describeExpectation(expectation.expected);
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s2) {
            return s2.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s2) {
            return s2.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$startRuleFunctions = { Top: peg$parseTop };
          var peg$startRuleFunction = peg$parseTop;
          var peg$c0 = "/";
          var peg$c1 = ".";
          var peg$c2 = "#";
          var peg$c3 = "=";
          var peg$c4 = "(";
          var peg$c5 = ")";
          var peg$c6 = ",";
          var peg$c7 = "[";
          var peg$c8 = "]";
          var peg$c9 = "null";
          var peg$c10 = "true";
          var peg$c11 = "false";
          var peg$c12 = "{";
          var peg$c13 = "}";
          var peg$c14 = ":";
          var peg$c15 = "-";
          var peg$c16 = '"';
          var peg$c17 = "\\";
          var peg$c18 = "n";
          var peg$c19 = "r";
          var peg$c20 = "t";
          var peg$r0 = /^[$@]/;
          var peg$r1 = /^[0-9]/;
          var peg$r2 = /^[^\0-\x1F"\\]/;
          var peg$r3 = /^[a-zA-Z0-9_\-]/;
          var peg$r4 = /^[ \n\t]/;
          var peg$e0 = peg$literalExpectation("/", false);
          var peg$e1 = peg$otherExpectation("tag name");
          var peg$e2 = peg$otherExpectation("class");
          var peg$e3 = peg$otherExpectation("id");
          var peg$e4 = peg$literalExpectation("=", false);
          var peg$e5 = peg$literalExpectation("(", false);
          var peg$e6 = peg$literalExpectation(")", false);
          var peg$e7 = peg$literalExpectation(",", false);
          var peg$e8 = peg$otherExpectation("variable");
          var peg$e9 = peg$otherExpectation("null");
          var peg$e10 = peg$otherExpectation("boolean");
          var peg$e11 = peg$literalExpectation("[", false);
          var peg$e12 = peg$literalExpectation("]", false);
          var peg$e13 = peg$literalExpectation("{", false);
          var peg$e14 = peg$literalExpectation("}", false);
          var peg$e15 = peg$literalExpectation(":", false);
          var peg$e16 = peg$otherExpectation("number");
          var peg$e17 = peg$otherExpectation("string");
          var peg$e18 = peg$otherExpectation("identifier");
          var peg$e19 = peg$otherExpectation("whitespace");
          var peg$f0 = function(variable) {
            return { type: "variable", meta: { variable } };
          };
          var peg$f1 = function(attributes) {
            return { type: "annotation", meta: { attributes } };
          };
          var peg$f2 = function(tag2, value) {
            return value;
          };
          var peg$f3 = function(tag2, primary, attributes, close) {
            if (primary) {
              attributes = attributes || [];
              attributes.unshift({
                type: "attribute",
                name: "primary",
                value: primary
              });
            }
            const [type, nesting] = close ? ["tag", 0] : ["tag_open", 1];
            return { type, nesting, meta: { tag: tag2, attributes } };
          };
          var peg$f4 = function(tag2) {
            return { type: "tag_close", nesting: -1, meta: { tag: tag2 } };
          };
          var peg$f5 = function(head, tail) {
            return !head ? [] : [head, ...tail];
          };
          var peg$f6 = function(item2) {
            return item2;
          };
          var peg$f7 = function(ids) {
            return ids;
          };
          var peg$f8 = function(classes) {
            return classes;
          };
          var peg$f9 = function(attribute) {
            return attribute;
          };
          var peg$f10 = function(name) {
            return { type: "class", name, value: true };
          };
          var peg$f11 = function(value) {
            return { type: "attribute", name: "id", value };
          };
          var peg$f12 = function(name, value) {
            return { type: "attribute", name, value };
          };
          var peg$f13 = function(name, head, tail) {
            return head ? [head, ...tail] : [];
          };
          var peg$f14 = function(name, params) {
            let parameters = {};
            for (let [index, { name: name2, value }] of params.entries())
              parameters[name2 || index] = value;
            return new Function3(name, parameters);
          };
          var peg$f15 = function(name) {
            return name;
          };
          var peg$f16 = function(name, value) {
            return { name, value };
          };
          var peg$f17 = function(value) {
            return value;
          };
          var peg$f18 = function(prefix, head, tail) {
            if (prefix === "@")
              return [head, ...tail];
            return new Variable2([head, ...tail]);
          };
          var peg$f19 = function() {
            return null;
          };
          var peg$f20 = function() {
            return true;
          };
          var peg$f21 = function() {
            return false;
          };
          var peg$f22 = function(head, tail) {
            return [head, ...tail];
          };
          var peg$f23 = function(value) {
            return value || [];
          };
          var peg$f24 = function(head, tail) {
            return Object.assign(head, ...tail);
          };
          var peg$f25 = function(value) {
            return value || {};
          };
          var peg$f26 = function(key, value) {
            return key === "$$mdtype" ? {} : { [key]: value };
          };
          var peg$f27 = function() {
            return parseFloat(text2());
          };
          var peg$f28 = function(value) {
            return value.join("");
          };
          var peg$f29 = function() {
            return "\n";
          };
          var peg$f30 = function() {
            return "\r";
          };
          var peg$f31 = function() {
            return "	";
          };
          var peg$f32 = function(sequence) {
            return sequence;
          };
          var peg$currPos = 0;
          var peg$savedPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$expected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function text2() {
            return input.substring(peg$savedPos, peg$currPos);
          }
          function offset() {
            return peg$savedPos;
          }
          function range() {
            return [peg$savedPos, peg$currPos];
          }
          function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
          }
          function expected(description, location2) {
            location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
            throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
          }
          function error22(message, location2) {
            location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
            throw peg$buildSimpleError(message, location2);
          }
          function peg$literalExpectation(text3, ignoreCase) {
            return { type: "literal", text: text3, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return {
              type: "class",
              parts,
              inverted,
              ignoreCase
            };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
          function peg$computeLocation(startPos, endPos) {
            var loc = {};
            if (peg$VALIDFILENAME)
              loc.filename = options.filename;
            var startPosDetails = peg$computePosDetails(startPos);
            loc.start = {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            };
            var endPosDetails = peg$computePosDetails(endPos);
            loc.end = {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            };
            return loc;
          }
          function peg$begin() {
            peg$expected.push({ pos: peg$currPos, variants: [] });
          }
          function peg$expect(expected2) {
            var top = peg$expected[peg$expected.length - 1];
            if (peg$currPos < top.pos) {
              return;
            }
            if (peg$currPos > top.pos) {
              top.pos = peg$currPos;
              top.variants = [];
            }
            top.variants.push(expected2);
          }
          function peg$end(invert) {
            var expected2 = peg$expected.pop();
            var top = peg$expected[peg$expected.length - 1];
            var variants = expected2.variants;
            if (top.pos !== expected2.pos) {
              return;
            }
            if (invert) {
              variants = variants.map(function(e) {
                return e.type === "not" ? e.expected : { type: "not", expected: e };
              });
            }
            Array.prototype.push.apply(top.variants, variants);
          }
          function peg$buildSimpleError(message, location2) {
            return new peg$SyntaxError(message, null, null, location2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);
          }
          function peg$buildError() {
            var expected2 = peg$expected[0];
            var failPos = expected2.pos;
            return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));
          }
          function peg$parseTop() {
            var s0;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$parseTopLevelValue();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAnnotation();
              if (s0 === peg$FAILED) {
                s0 = peg$parseTagOpen();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTagClose();
                }
              }
            }
            return s0;
          }
          function peg$parseTopLevelValue() {
            var s0, s1;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseVariable();
            if (s1 === peg$FAILED) {
              s1 = peg$parseFunction();
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f0(s1);
            }
            s0 = s1;
            return s0;
          }
          function peg$parseAnnotation() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseTagAttributes();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              peg$savedPos = s0;
              s0 = peg$f1(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTagOpen() {
            var s0, s1, s2, s3, s4, s5, s6;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseTagName();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$currPos;
              s4 = peg$parseValue();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                peg$savedPos = s3;
                s3 = peg$f2(s1, s4);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parseTagAttributes();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              rule$expects(peg$e0);
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c0;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f3(s1, s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTagClose() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            rule$expects(peg$e0);
            if (input.charCodeAt(peg$currPos) === 47) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseTagName();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f4(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTagName() {
            var s0;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e1);
            peg$silentFails++;
            s0 = peg$parseIdentifier();
            peg$silentFails--;
            return s0;
          }
          function peg$parseTagAttributes() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseTagAttributesItem();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseTagAttributesTail();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseTagAttributesTail();
              }
              peg$savedPos = s0;
              s0 = peg$f5(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTagAttributesTail() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_();
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseTagAttributesItem();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTagAttributesItem() {
            var s0, s1;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseTagShortcutId();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f7(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTagShortcutClass();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f8(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseTagAttribute();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f9(s1);
                }
                s0 = s1;
              }
            }
            return s0;
          }
          function peg$parseTagShortcutClass() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e2);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s1 = peg$c1;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f10(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseTagShortcutId() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e3);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f11(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseTagAttribute() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseIdentifier();
            if (s1 !== peg$FAILED) {
              rule$expects(peg$e4);
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c3;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseValue();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f12(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseFunction() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseIdentifier();
            if (s1 !== peg$FAILED) {
              rule$expects(peg$e5);
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c4;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parse_();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parse_();
                }
                s4 = peg$currPos;
                s5 = peg$parseFunctionParameter();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = [];
                s7 = peg$parseFunctionParameterTail();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseFunctionParameterTail();
                }
                peg$savedPos = s4;
                s4 = peg$f13(s1, s5, s6);
                rule$expects(peg$e6);
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c5;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f14(s1, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseFunctionParameter() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e4);
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f15(s2);
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = peg$parseValue();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseFunctionParameterTail() {
            var s0, s1, s2, s3, s4;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c6;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$parseFunctionParameter();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseTrailingComma() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c6;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = null;
            }
            return s0;
          }
          function peg$parseVariable() {
            var s0, s1, s2, s3, s4;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e8);
            peg$silentFails++;
            s0 = peg$currPos;
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseVariableTail();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVariableTail();
                }
                peg$savedPos = s0;
                s0 = peg$f18(s1, s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseVariableTail() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s1 = peg$c1;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f15(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c7;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseValueNumber();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseValueString();
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c8;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f17(s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseValue() {
            var s0;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$parseValueNull();
            if (s0 === peg$FAILED) {
              s0 = peg$parseValueBoolean();
              if (s0 === peg$FAILED) {
                s0 = peg$parseValueString();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseValueNumber();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseValueArray();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseValueHash();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFunction();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseVariable();
                        }
                      }
                    }
                  }
                }
              }
            }
            return s0;
          }
          function peg$parseValueNull() {
            var s0, s1;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e9);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c9) {
              s1 = peg$c9;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f19();
            }
            s0 = s1;
            peg$silentFails--;
            return s0;
          }
          function peg$parseValueBoolean() {
            var s0, s1;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e10);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c10) {
              s1 = peg$c10;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f20();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c11) {
                s1 = peg$c11;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f21();
              }
              s0 = s1;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseValueArray() {
            var s0, s1, s2, s3, s4, s5, s6;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            rule$expects(peg$e11);
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c7;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$currPos;
              s4 = peg$parseValue();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseValueArrayTail();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseValueArrayTail();
                }
                s6 = peg$parseTrailingComma();
                peg$savedPos = s3;
                s3 = peg$f22(s4, s5);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              rule$expects(peg$e12);
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c8;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f23(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseValueArrayTail() {
            var s0, s1, s2, s3, s4;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c6;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$parseValue();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseValueHash() {
            var s0, s1, s2, s3, s4, s5, s6;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            rule$expects(peg$e13);
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$currPos;
              s4 = peg$parseValueHashItem();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseValueHashTail();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseValueHashTail();
                }
                s6 = peg$parseTrailingComma();
                peg$savedPos = s3;
                s3 = peg$f24(s4, s5);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              rule$expects(peg$e14);
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c13;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f25(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseValueHashTail() {
            var s0, s1, s2, s3, s4;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c6;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$parseValueHashItem();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseValueHashItem() {
            var s0, s1, s2, s3, s4;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            s1 = peg$parseIdentifier();
            if (s1 === peg$FAILED) {
              s1 = peg$parseValueString();
            }
            if (s1 !== peg$FAILED) {
              rule$expects(peg$e15);
              if (input.charCodeAt(peg$currPos) === 58) {
                s2 = peg$c14;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parse_();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parse_();
                }
                s4 = peg$parseValue();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f26(s1, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseValueNumber() {
            var s0, s1, s2, s3, s4, s5, s6;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e16);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c1;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$r1.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f27();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseValueString() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e17);
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c16;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseValueStringChars();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseValueStringChars();
              }
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c16;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f28(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parseValueStringChars() {
            var s0;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseValueStringEscapes();
            }
            return s0;
          }
          function peg$parseValueStringEscapes() {
            var s0, s1, s2, s3;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s2 = peg$c16;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                  s2 = peg$c17;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c18;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$f29();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c19;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$f30();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c20;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$f31();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f32(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseIdentifier() {
            var s0, s1, s2;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e18);
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r3.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            peg$silentFails--;
            return s0;
          }
          function peg$parse_() {
            var s0;
            var rule$expects = function(expected2) {
              if (peg$silentFails === 0)
                peg$expect(expected2);
            };
            rule$expects(peg$e19);
            peg$silentFails++;
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            return s0;
          }
          const { Variable: Variable2, Function: Function3 } = options;
          peg$begin();
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$expect(peg$endExpectation());
            }
            throw peg$buildError();
          }
        }
        module.exports = {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }
    });
    require_entities = __commonJS({
      "node_modules/entities/lib/maps/entities.json"(exports, module) {
        module.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
      }
    });
    require_entities2 = __commonJS({
      "node_modules/markdown-it/lib/common/entities.js"(exports, module) {
        "use strict";
        module.exports = require_entities();
      }
    });
    require_regex = __commonJS({
      "node_modules/uc.micro/categories/P/regex.js"(exports, module) {
        module.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
      }
    });
    require_encode = __commonJS({
      "node_modules/mdurl/encode.js"(exports, module) {
        "use strict";
        var encodeCache = {};
        function getEncodeCache(exclude) {
          var i, ch, cache = encodeCache[exclude];
          if (cache) {
            return cache;
          }
          cache = encodeCache[exclude] = [];
          for (i = 0; i < 128; i++) {
            ch = String.fromCharCode(i);
            if (/^[0-9a-z]$/i.test(ch)) {
              cache.push(ch);
            } else {
              cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
            }
          }
          for (i = 0; i < exclude.length; i++) {
            cache[exclude.charCodeAt(i)] = exclude[i];
          }
          return cache;
        }
        function encode(string, exclude, keepEscaped) {
          var i, l, code22, nextCode, cache, result = "";
          if (typeof exclude !== "string") {
            keepEscaped = exclude;
            exclude = encode.defaultChars;
          }
          if (typeof keepEscaped === "undefined") {
            keepEscaped = true;
          }
          cache = getEncodeCache(exclude);
          for (i = 0, l = string.length; i < l; i++) {
            code22 = string.charCodeAt(i);
            if (keepEscaped && code22 === 37 && i + 2 < l) {
              if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
                result += string.slice(i, i + 3);
                i += 2;
                continue;
              }
            }
            if (code22 < 128) {
              result += cache[code22];
              continue;
            }
            if (code22 >= 55296 && code22 <= 57343) {
              if (code22 >= 55296 && code22 <= 56319 && i + 1 < l) {
                nextCode = string.charCodeAt(i + 1);
                if (nextCode >= 56320 && nextCode <= 57343) {
                  result += encodeURIComponent(string[i] + string[i + 1]);
                  i++;
                  continue;
                }
              }
              result += "%EF%BF%BD";
              continue;
            }
            result += encodeURIComponent(string[i]);
          }
          return result;
        }
        encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
        encode.componentChars = "-_.!~*'()";
        module.exports = encode;
      }
    });
    require_decode = __commonJS({
      "node_modules/mdurl/decode.js"(exports, module) {
        "use strict";
        var decodeCache = {};
        function getDecodeCache(exclude) {
          var i, ch, cache = decodeCache[exclude];
          if (cache) {
            return cache;
          }
          cache = decodeCache[exclude] = [];
          for (i = 0; i < 128; i++) {
            ch = String.fromCharCode(i);
            cache.push(ch);
          }
          for (i = 0; i < exclude.length; i++) {
            ch = exclude.charCodeAt(i);
            cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
          }
          return cache;
        }
        function decode(string, exclude) {
          var cache;
          if (typeof exclude !== "string") {
            exclude = decode.defaultChars;
          }
          cache = getDecodeCache(exclude);
          return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
            var i, l, b1, b2, b3, b4, chr, result = "";
            for (i = 0, l = seq.length; i < l; i += 3) {
              b1 = parseInt(seq.slice(i + 1, i + 3), 16);
              if (b1 < 128) {
                result += cache[b1];
                continue;
              }
              if ((b1 & 224) === 192 && i + 3 < l) {
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                if ((b2 & 192) === 128) {
                  chr = b1 << 6 & 1984 | b2 & 63;
                  if (chr < 128) {
                    result += "\uFFFD\uFFFD";
                  } else {
                    result += String.fromCharCode(chr);
                  }
                  i += 3;
                  continue;
                }
              }
              if ((b1 & 240) === 224 && i + 6 < l) {
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                b3 = parseInt(seq.slice(i + 7, i + 9), 16);
                if ((b2 & 192) === 128 && (b3 & 192) === 128) {
                  chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
                  if (chr < 2048 || chr >= 55296 && chr <= 57343) {
                    result += "\uFFFD\uFFFD\uFFFD";
                  } else {
                    result += String.fromCharCode(chr);
                  }
                  i += 6;
                  continue;
                }
              }
              if ((b1 & 248) === 240 && i + 9 < l) {
                b2 = parseInt(seq.slice(i + 4, i + 6), 16);
                b3 = parseInt(seq.slice(i + 7, i + 9), 16);
                b4 = parseInt(seq.slice(i + 10, i + 12), 16);
                if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
                  chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
                  if (chr < 65536 || chr > 1114111) {
                    result += "\uFFFD\uFFFD\uFFFD\uFFFD";
                  } else {
                    chr -= 65536;
                    result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
                  }
                  i += 9;
                  continue;
                }
              }
              result += "\uFFFD";
            }
            return result;
          });
        }
        decode.defaultChars = ";/?:@&=+$,#";
        decode.componentChars = "";
        module.exports = decode;
      }
    });
    require_format = __commonJS({
      "node_modules/mdurl/format.js"(exports, module) {
        "use strict";
        module.exports = function format2(url) {
          var result = "";
          result += url.protocol || "";
          result += url.slashes ? "//" : "";
          result += url.auth ? url.auth + "@" : "";
          if (url.hostname && url.hostname.indexOf(":") !== -1) {
            result += "[" + url.hostname + "]";
          } else {
            result += url.hostname || "";
          }
          result += url.port ? ":" + url.port : "";
          result += url.pathname || "";
          result += url.search || "";
          result += url.hash || "";
          return result;
        };
      }
    });
    require_parse = __commonJS({
      "node_modules/mdurl/parse.js"(exports, module) {
        "use strict";
        function Url() {
          this.protocol = null;
          this.slashes = null;
          this.auth = null;
          this.port = null;
          this.hostname = null;
          this.hash = null;
          this.search = null;
          this.pathname = null;
        }
        var protocolPattern = /^([a-z0-9.+-]+:)/i;
        var portPattern = /:[0-9]*$/;
        var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
        var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
        var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
        var autoEscape = ["'"].concat(unwise);
        var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
        var hostEndingChars = ["/", "?", "#"];
        var hostnameMaxLen = 255;
        var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
        var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
        var hostlessProtocol = {
          "javascript": true,
          "javascript:": true
        };
        var slashedProtocol = {
          "http": true,
          "https": true,
          "ftp": true,
          "gopher": true,
          "file": true,
          "http:": true,
          "https:": true,
          "ftp:": true,
          "gopher:": true,
          "file:": true
        };
        function urlParse(url, slashesDenoteHost) {
          if (url && url instanceof Url) {
            return url;
          }
          var u = new Url();
          u.parse(url, slashesDenoteHost);
          return u;
        }
        Url.prototype.parse = function(url, slashesDenoteHost) {
          var i, l, lowerProto, hec, slashes, rest = url;
          rest = rest.trim();
          if (!slashesDenoteHost && url.split("#").length === 1) {
            var simplePath = simplePathPattern.exec(rest);
            if (simplePath) {
              this.pathname = simplePath[1];
              if (simplePath[2]) {
                this.search = simplePath[2];
              }
              return this;
            }
          }
          var proto = protocolPattern.exec(rest);
          if (proto) {
            proto = proto[0];
            lowerProto = proto.toLowerCase();
            this.protocol = proto;
            rest = rest.substr(proto.length);
          }
          if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            slashes = rest.substr(0, 2) === "//";
            if (slashes && !(proto && hostlessProtocol[proto])) {
              rest = rest.substr(2);
              this.slashes = true;
            }
          }
          if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
            var hostEnd = -1;
            for (i = 0; i < hostEndingChars.length; i++) {
              hec = rest.indexOf(hostEndingChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
                hostEnd = hec;
              }
            }
            var auth, atSign;
            if (hostEnd === -1) {
              atSign = rest.lastIndexOf("@");
            } else {
              atSign = rest.lastIndexOf("@", hostEnd);
            }
            if (atSign !== -1) {
              auth = rest.slice(0, atSign);
              rest = rest.slice(atSign + 1);
              this.auth = auth;
            }
            hostEnd = -1;
            for (i = 0; i < nonHostChars.length; i++) {
              hec = rest.indexOf(nonHostChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
                hostEnd = hec;
              }
            }
            if (hostEnd === -1) {
              hostEnd = rest.length;
            }
            if (rest[hostEnd - 1] === ":") {
              hostEnd--;
            }
            var host = rest.slice(0, hostEnd);
            rest = rest.slice(hostEnd);
            this.parseHost(host);
            this.hostname = this.hostname || "";
            var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!ipv6Hostname) {
              var hostparts = this.hostname.split(/\./);
              for (i = 0, l = hostparts.length; i < l; i++) {
                var part = hostparts[i];
                if (!part) {
                  continue;
                }
                if (!part.match(hostnamePartPattern)) {
                  var newpart = "";
                  for (var j = 0, k = part.length; j < k; j++) {
                    if (part.charCodeAt(j) > 127) {
                      newpart += "x";
                    } else {
                      newpart += part[j];
                    }
                  }
                  if (!newpart.match(hostnamePartPattern)) {
                    var validParts = hostparts.slice(0, i);
                    var notHost = hostparts.slice(i + 1);
                    var bit = part.match(hostnamePartStart);
                    if (bit) {
                      validParts.push(bit[1]);
                      notHost.unshift(bit[2]);
                    }
                    if (notHost.length) {
                      rest = notHost.join(".") + rest;
                    }
                    this.hostname = validParts.join(".");
                    break;
                  }
                }
              }
            }
            if (this.hostname.length > hostnameMaxLen) {
              this.hostname = "";
            }
            if (ipv6Hostname) {
              this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            }
          }
          var hash = rest.indexOf("#");
          if (hash !== -1) {
            this.hash = rest.substr(hash);
            rest = rest.slice(0, hash);
          }
          var qm = rest.indexOf("?");
          if (qm !== -1) {
            this.search = rest.substr(qm);
            rest = rest.slice(0, qm);
          }
          if (rest) {
            this.pathname = rest;
          }
          if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
            this.pathname = "";
          }
          return this;
        };
        Url.prototype.parseHost = function(host) {
          var port = portPattern.exec(host);
          if (port) {
            port = port[0];
            if (port !== ":") {
              this.port = port.substr(1);
            }
            host = host.substr(0, host.length - port.length);
          }
          if (host) {
            this.hostname = host;
          }
        };
        module.exports = urlParse;
      }
    });
    require_mdurl = __commonJS({
      "node_modules/mdurl/index.js"(exports, module) {
        "use strict";
        module.exports.encode = require_encode();
        module.exports.decode = require_decode();
        module.exports.format = require_format();
        module.exports.parse = require_parse();
      }
    });
    require_regex2 = __commonJS({
      "node_modules/uc.micro/properties/Any/regex.js"(exports, module) {
        module.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      }
    });
    require_regex3 = __commonJS({
      "node_modules/uc.micro/categories/Cc/regex.js"(exports, module) {
        module.exports = /[\0-\x1F\x7F-\x9F]/;
      }
    });
    require_regex4 = __commonJS({
      "node_modules/uc.micro/categories/Cf/regex.js"(exports, module) {
        module.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
      }
    });
    require_regex5 = __commonJS({
      "node_modules/uc.micro/categories/Z/regex.js"(exports, module) {
        module.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
      }
    });
    require_uc = __commonJS({
      "node_modules/uc.micro/index.js"(exports) {
        "use strict";
        exports.Any = require_regex2();
        exports.Cc = require_regex3();
        exports.Cf = require_regex4();
        exports.P = require_regex();
        exports.Z = require_regex5();
      }
    });
    require_utils = __commonJS({
      "node_modules/markdown-it/lib/common/utils.js"(exports) {
        "use strict";
        function _class(obj) {
          return Object.prototype.toString.call(obj);
        }
        function isString2(obj) {
          return _class(obj) === "[object String]";
        }
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        function has(object, key) {
          return _hasOwnProperty.call(object, key);
        }
        function assign(obj) {
          var sources = Array.prototype.slice.call(arguments, 1);
          sources.forEach(function(source) {
            if (!source) {
              return;
            }
            if (typeof source !== "object") {
              throw new TypeError(source + "must be object");
            }
            Object.keys(source).forEach(function(key) {
              obj[key] = source[key];
            });
          });
          return obj;
        }
        function arrayReplaceAt(src, pos, newElements) {
          return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
        }
        function isValidEntityCode(c) {
          if (c >= 55296 && c <= 57343) {
            return false;
          }
          if (c >= 64976 && c <= 65007) {
            return false;
          }
          if ((c & 65535) === 65535 || (c & 65535) === 65534) {
            return false;
          }
          if (c >= 0 && c <= 8) {
            return false;
          }
          if (c === 11) {
            return false;
          }
          if (c >= 14 && c <= 31) {
            return false;
          }
          if (c >= 127 && c <= 159) {
            return false;
          }
          if (c > 1114111) {
            return false;
          }
          return true;
        }
        function fromCodePoint(c) {
          if (c > 65535) {
            c -= 65536;
            var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);
            return String.fromCharCode(surrogate1, surrogate2);
          }
          return String.fromCharCode(c);
        }
        var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
        var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
        var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
        var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
        var entities = require_entities2();
        function replaceEntityPattern(match, name) {
          var code22 = 0;
          if (has(entities, name)) {
            return entities[name];
          }
          if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
            code22 = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
            if (isValidEntityCode(code22)) {
              return fromCodePoint(code22);
            }
          }
          return match;
        }
        function unescapeMd(str) {
          if (str.indexOf("\\") < 0) {
            return str;
          }
          return str.replace(UNESCAPE_MD_RE, "$1");
        }
        function unescapeAll(str) {
          if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
            return str;
          }
          return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {
            if (escaped) {
              return escaped;
            }
            return replaceEntityPattern(match, entity);
          });
        }
        var HTML_ESCAPE_TEST_RE = /[&<>"]/;
        var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
        var HTML_REPLACEMENTS = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;"
        };
        function replaceUnsafeChar(ch) {
          return HTML_REPLACEMENTS[ch];
        }
        function escapeHtml2(str) {
          if (HTML_ESCAPE_TEST_RE.test(str)) {
            return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
          }
          return str;
        }
        var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
        function escapeRE(str) {
          return str.replace(REGEXP_ESCAPE_RE, "\\$&");
        }
        function isSpace(code22) {
          switch (code22) {
            case 9:
            case 32:
              return true;
          }
          return false;
        }
        function isWhiteSpace(code22) {
          if (code22 >= 8192 && code22 <= 8202) {
            return true;
          }
          switch (code22) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 160:
            case 5760:
            case 8239:
            case 8287:
            case 12288:
              return true;
          }
          return false;
        }
        var UNICODE_PUNCT_RE = require_regex();
        function isPunctChar(ch) {
          return UNICODE_PUNCT_RE.test(ch);
        }
        function isMdAsciiPunct(ch) {
          switch (ch) {
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 123:
            case 124:
            case 125:
            case 126:
              return true;
            default:
              return false;
          }
        }
        function normalizeReference(str) {
          str = str.trim().replace(/\s+/g, " ");
          if ("\u1E9E".toLowerCase() === "\u1E7E") {
            str = str.replace(/ẞ/g, "\xDF");
          }
          return str.toLowerCase().toUpperCase();
        }
        exports.lib = {};
        exports.lib.mdurl = require_mdurl();
        exports.lib.ucmicro = require_uc();
        exports.assign = assign;
        exports.isString = isString2;
        exports.has = has;
        exports.unescapeMd = unescapeMd;
        exports.unescapeAll = unescapeAll;
        exports.isValidEntityCode = isValidEntityCode;
        exports.fromCodePoint = fromCodePoint;
        exports.escapeHtml = escapeHtml2;
        exports.arrayReplaceAt = arrayReplaceAt;
        exports.isSpace = isSpace;
        exports.isWhiteSpace = isWhiteSpace;
        exports.isMdAsciiPunct = isMdAsciiPunct;
        exports.isPunctChar = isPunctChar;
        exports.escapeRE = escapeRE;
        exports.normalizeReference = normalizeReference;
      }
    });
    require_parse_link_label = __commonJS({
      "node_modules/markdown-it/lib/helpers/parse_link_label.js"(exports, module) {
        "use strict";
        module.exports = function parseLinkLabel(state, start, disableNested) {
          var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;
          state.pos = start + 1;
          level = 1;
          while (state.pos < max2) {
            marker = state.src.charCodeAt(state.pos);
            if (marker === 93) {
              level--;
              if (level === 0) {
                found = true;
                break;
              }
            }
            prevPos = state.pos;
            state.md.inline.skipToken(state);
            if (marker === 91) {
              if (prevPos === state.pos - 1) {
                level++;
              } else if (disableNested) {
                state.pos = oldPos;
                return -1;
              }
            }
          }
          if (found) {
            labelEnd = state.pos;
          }
          state.pos = oldPos;
          return labelEnd;
        };
      }
    });
    require_parse_link_destination = __commonJS({
      "node_modules/markdown-it/lib/helpers/parse_link_destination.js"(exports, module) {
        "use strict";
        var unescapeAll = require_utils().unescapeAll;
        module.exports = function parseLinkDestination(str, pos, max2) {
          var code22, level, lines = 0, start = pos, result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ""
          };
          if (str.charCodeAt(pos) === 60) {
            pos++;
            while (pos < max2) {
              code22 = str.charCodeAt(pos);
              if (code22 === 10) {
                return result;
              }
              if (code22 === 60) {
                return result;
              }
              if (code22 === 62) {
                result.pos = pos + 1;
                result.str = unescapeAll(str.slice(start + 1, pos));
                result.ok = true;
                return result;
              }
              if (code22 === 92 && pos + 1 < max2) {
                pos += 2;
                continue;
              }
              pos++;
            }
            return result;
          }
          level = 0;
          while (pos < max2) {
            code22 = str.charCodeAt(pos);
            if (code22 === 32) {
              break;
            }
            if (code22 < 32 || code22 === 127) {
              break;
            }
            if (code22 === 92 && pos + 1 < max2) {
              if (str.charCodeAt(pos + 1) === 32) {
                break;
              }
              pos += 2;
              continue;
            }
            if (code22 === 40) {
              level++;
              if (level > 32) {
                return result;
              }
            }
            if (code22 === 41) {
              if (level === 0) {
                break;
              }
              level--;
            }
            pos++;
          }
          if (start === pos) {
            return result;
          }
          if (level !== 0) {
            return result;
          }
          result.str = unescapeAll(str.slice(start, pos));
          result.lines = lines;
          result.pos = pos;
          result.ok = true;
          return result;
        };
      }
    });
    require_parse_link_title = __commonJS({
      "node_modules/markdown-it/lib/helpers/parse_link_title.js"(exports, module) {
        "use strict";
        var unescapeAll = require_utils().unescapeAll;
        module.exports = function parseLinkTitle(str, pos, max2) {
          var code22, marker, lines = 0, start = pos, result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ""
          };
          if (pos >= max2) {
            return result;
          }
          marker = str.charCodeAt(pos);
          if (marker !== 34 && marker !== 39 && marker !== 40) {
            return result;
          }
          pos++;
          if (marker === 40) {
            marker = 41;
          }
          while (pos < max2) {
            code22 = str.charCodeAt(pos);
            if (code22 === marker) {
              result.pos = pos + 1;
              result.lines = lines;
              result.str = unescapeAll(str.slice(start + 1, pos));
              result.ok = true;
              return result;
            } else if (code22 === 40 && marker === 41) {
              return result;
            } else if (code22 === 10) {
              lines++;
            } else if (code22 === 92 && pos + 1 < max2) {
              pos++;
              if (str.charCodeAt(pos) === 10) {
                lines++;
              }
            }
            pos++;
          }
          return result;
        };
      }
    });
    require_helpers = __commonJS({
      "node_modules/markdown-it/lib/helpers/index.js"(exports) {
        "use strict";
        exports.parseLinkLabel = require_parse_link_label();
        exports.parseLinkDestination = require_parse_link_destination();
        exports.parseLinkTitle = require_parse_link_title();
      }
    });
    require_renderer = __commonJS({
      "node_modules/markdown-it/lib/renderer.js"(exports, module) {
        "use strict";
        var assign = require_utils().assign;
        var unescapeAll = require_utils().unescapeAll;
        var escapeHtml2 = require_utils().escapeHtml;
        var default_rules = {};
        default_rules.code_inline = function(tokens, idx, options, env, slf) {
          var token = tokens[idx];
          return "<code" + slf.renderAttrs(token) + ">" + escapeHtml2(tokens[idx].content) + "</code>";
        };
        default_rules.code_block = function(tokens, idx, options, env, slf) {
          var token = tokens[idx];
          return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml2(tokens[idx].content) + "</code></pre>\n";
        };
        default_rules.fence = function(tokens, idx, options, env, slf) {
          var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : "", langName = "", langAttrs = "", highlighted, i, arr, tmpAttrs, tmpToken;
          if (info) {
            arr = info.split(/(\s+)/g);
            langName = arr[0];
            langAttrs = arr.slice(2).join("");
          }
          if (options.highlight) {
            highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);
          } else {
            highlighted = escapeHtml2(token.content);
          }
          if (highlighted.indexOf("<pre") === 0) {
            return highlighted + "\n";
          }
          if (info) {
            i = token.attrIndex("class");
            tmpAttrs = token.attrs ? token.attrs.slice() : [];
            if (i < 0) {
              tmpAttrs.push(["class", options.langPrefix + langName]);
            } else {
              tmpAttrs[i] = tmpAttrs[i].slice();
              tmpAttrs[i][1] += " " + options.langPrefix + langName;
            }
            tmpToken = {
              attrs: tmpAttrs
            };
            return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
          }
          return "<pre><code" + slf.renderAttrs(token) + ">" + highlighted + "</code></pre>\n";
        };
        default_rules.image = function(tokens, idx, options, env, slf) {
          var token = tokens[idx];
          token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
          return slf.renderToken(tokens, idx, options);
        };
        default_rules.hardbreak = function(tokens, idx, options) {
          return options.xhtmlOut ? "<br />\n" : "<br>\n";
        };
        default_rules.softbreak = function(tokens, idx, options) {
          return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
        };
        default_rules.text = function(tokens, idx) {
          return escapeHtml2(tokens[idx].content);
        };
        default_rules.html_block = function(tokens, idx) {
          return tokens[idx].content;
        };
        default_rules.html_inline = function(tokens, idx) {
          return tokens[idx].content;
        };
        function Renderer() {
          this.rules = assign({}, default_rules);
        }
        Renderer.prototype.renderAttrs = function renderAttrs(token) {
          var i, l, result;
          if (!token.attrs) {
            return "";
          }
          result = "";
          for (i = 0, l = token.attrs.length; i < l; i++) {
            result += " " + escapeHtml2(token.attrs[i][0]) + '="' + escapeHtml2(token.attrs[i][1]) + '"';
          }
          return result;
        };
        Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
          var nextToken, result = "", needLf = false, token = tokens[idx];
          if (token.hidden) {
            return "";
          }
          if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
            result += "\n";
          }
          result += (token.nesting === -1 ? "</" : "<") + token.tag;
          result += this.renderAttrs(token);
          if (token.nesting === 0 && options.xhtmlOut) {
            result += " /";
          }
          if (token.block) {
            needLf = true;
            if (token.nesting === 1) {
              if (idx + 1 < tokens.length) {
                nextToken = tokens[idx + 1];
                if (nextToken.type === "inline" || nextToken.hidden) {
                  needLf = false;
                } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
                  needLf = false;
                }
              }
            }
          }
          result += needLf ? ">\n" : ">";
          return result;
        };
        Renderer.prototype.renderInline = function(tokens, options, env) {
          var type, result = "", rules = this.rules;
          for (var i = 0, len = tokens.length; i < len; i++) {
            type = tokens[i].type;
            if (typeof rules[type] !== "undefined") {
              result += rules[type](tokens, i, options, env, this);
            } else {
              result += this.renderToken(tokens, i, options);
            }
          }
          return result;
        };
        Renderer.prototype.renderInlineAsText = function(tokens, options, env) {
          var result = "";
          for (var i = 0, len = tokens.length; i < len; i++) {
            if (tokens[i].type === "text") {
              result += tokens[i].content;
            } else if (tokens[i].type === "image") {
              result += this.renderInlineAsText(tokens[i].children, options, env);
            } else if (tokens[i].type === "softbreak") {
              result += "\n";
            }
          }
          return result;
        };
        Renderer.prototype.render = function(tokens, options, env) {
          var i, len, type, result = "", rules = this.rules;
          for (i = 0, len = tokens.length; i < len; i++) {
            type = tokens[i].type;
            if (type === "inline") {
              result += this.renderInline(tokens[i].children, options, env);
            } else if (typeof rules[type] !== "undefined") {
              result += rules[tokens[i].type](tokens, i, options, env, this);
            } else {
              result += this.renderToken(tokens, i, options, env);
            }
          }
          return result;
        };
        module.exports = Renderer;
      }
    });
    require_ruler = __commonJS({
      "node_modules/markdown-it/lib/ruler.js"(exports, module) {
        "use strict";
        function Ruler() {
          this.__rules__ = [];
          this.__cache__ = null;
        }
        Ruler.prototype.__find__ = function(name) {
          for (var i = 0; i < this.__rules__.length; i++) {
            if (this.__rules__[i].name === name) {
              return i;
            }
          }
          return -1;
        };
        Ruler.prototype.__compile__ = function() {
          var self = this;
          var chains = [""];
          self.__rules__.forEach(function(rule) {
            if (!rule.enabled) {
              return;
            }
            rule.alt.forEach(function(altName) {
              if (chains.indexOf(altName) < 0) {
                chains.push(altName);
              }
            });
          });
          self.__cache__ = {};
          chains.forEach(function(chain) {
            self.__cache__[chain] = [];
            self.__rules__.forEach(function(rule) {
              if (!rule.enabled) {
                return;
              }
              if (chain && rule.alt.indexOf(chain) < 0) {
                return;
              }
              self.__cache__[chain].push(rule.fn);
            });
          });
        };
        Ruler.prototype.at = function(name, fn, options) {
          var index = this.__find__(name);
          var opt = options || {};
          if (index === -1) {
            throw new Error("Parser rule not found: " + name);
          }
          this.__rules__[index].fn = fn;
          this.__rules__[index].alt = opt.alt || [];
          this.__cache__ = null;
        };
        Ruler.prototype.before = function(beforeName, ruleName, fn, options) {
          var index = this.__find__(beforeName);
          var opt = options || {};
          if (index === -1) {
            throw new Error("Parser rule not found: " + beforeName);
          }
          this.__rules__.splice(index, 0, {
            name: ruleName,
            enabled: true,
            fn,
            alt: opt.alt || []
          });
          this.__cache__ = null;
        };
        Ruler.prototype.after = function(afterName, ruleName, fn, options) {
          var index = this.__find__(afterName);
          var opt = options || {};
          if (index === -1) {
            throw new Error("Parser rule not found: " + afterName);
          }
          this.__rules__.splice(index + 1, 0, {
            name: ruleName,
            enabled: true,
            fn,
            alt: opt.alt || []
          });
          this.__cache__ = null;
        };
        Ruler.prototype.push = function(ruleName, fn, options) {
          var opt = options || {};
          this.__rules__.push({
            name: ruleName,
            enabled: true,
            fn,
            alt: opt.alt || []
          });
          this.__cache__ = null;
        };
        Ruler.prototype.enable = function(list2, ignoreInvalid) {
          if (!Array.isArray(list2)) {
            list2 = [list2];
          }
          var result = [];
          list2.forEach(function(name) {
            var idx = this.__find__(name);
            if (idx < 0) {
              if (ignoreInvalid) {
                return;
              }
              throw new Error("Rules manager: invalid rule name " + name);
            }
            this.__rules__[idx].enabled = true;
            result.push(name);
          }, this);
          this.__cache__ = null;
          return result;
        };
        Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {
          if (!Array.isArray(list2)) {
            list2 = [list2];
          }
          this.__rules__.forEach(function(rule) {
            rule.enabled = false;
          });
          this.enable(list2, ignoreInvalid);
        };
        Ruler.prototype.disable = function(list2, ignoreInvalid) {
          if (!Array.isArray(list2)) {
            list2 = [list2];
          }
          var result = [];
          list2.forEach(function(name) {
            var idx = this.__find__(name);
            if (idx < 0) {
              if (ignoreInvalid) {
                return;
              }
              throw new Error("Rules manager: invalid rule name " + name);
            }
            this.__rules__[idx].enabled = false;
            result.push(name);
          }, this);
          this.__cache__ = null;
          return result;
        };
        Ruler.prototype.getRules = function(chainName) {
          if (this.__cache__ === null) {
            this.__compile__();
          }
          return this.__cache__[chainName] || [];
        };
        module.exports = Ruler;
      }
    });
    require_normalize = __commonJS({
      "node_modules/markdown-it/lib/rules_core/normalize.js"(exports, module) {
        "use strict";
        var NEWLINES_RE = /\r\n?|\n/g;
        var NULL_RE = /\0/g;
        module.exports = function normalize(state) {
          var str;
          str = state.src.replace(NEWLINES_RE, "\n");
          str = str.replace(NULL_RE, "\uFFFD");
          state.src = str;
        };
      }
    });
    require_block = __commonJS({
      "node_modules/markdown-it/lib/rules_core/block.js"(exports, module) {
        "use strict";
        module.exports = function block4(state) {
          var token;
          if (state.inlineMode) {
            token = new state.Token("inline", "", 0);
            token.content = state.src;
            token.map = [0, 1];
            token.children = [];
            state.tokens.push(token);
          } else {
            state.md.block.parse(state.src, state.md, state.env, state.tokens);
          }
        };
      }
    });
    require_inline = __commonJS({
      "node_modules/markdown-it/lib/rules_core/inline.js"(exports, module) {
        "use strict";
        module.exports = function inline4(state) {
          var tokens = state.tokens, tok, i, l;
          for (i = 0, l = tokens.length; i < l; i++) {
            tok = tokens[i];
            if (tok.type === "inline") {
              state.md.inline.parse(tok.content, state.md, state.env, tok.children);
            }
          }
        };
      }
    });
    require_linkify = __commonJS({
      "node_modules/markdown-it/lib/rules_core/linkify.js"(exports, module) {
        "use strict";
        var arrayReplaceAt = require_utils().arrayReplaceAt;
        function isLinkOpen(str) {
          return /^<a[>\s]/i.test(str);
        }
        function isLinkClose(str) {
          return /^<\/a\s*>/i.test(str);
        }
        module.exports = function linkify(state) {
          var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links2;
          if (!state.md.options.linkify) {
            return;
          }
          for (j = 0, l = blockTokens.length; j < l; j++) {
            if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) {
              continue;
            }
            tokens = blockTokens[j].children;
            htmlLinkLevel = 0;
            for (i = tokens.length - 1; i >= 0; i--) {
              currentToken = tokens[i];
              if (currentToken.type === "link_close") {
                i--;
                while (tokens[i].level !== currentToken.level && tokens[i].type !== "link_open") {
                  i--;
                }
                continue;
              }
              if (currentToken.type === "html_inline") {
                if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
                  htmlLinkLevel--;
                }
                if (isLinkClose(currentToken.content)) {
                  htmlLinkLevel++;
                }
              }
              if (htmlLinkLevel > 0) {
                continue;
              }
              if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
                text2 = currentToken.content;
                links2 = state.md.linkify.match(text2);
                nodes = [];
                level = currentToken.level;
                lastPos = 0;
                for (ln = 0; ln < links2.length; ln++) {
                  url = links2[ln].url;
                  fullUrl = state.md.normalizeLink(url);
                  if (!state.md.validateLink(fullUrl)) {
                    continue;
                  }
                  urlText = links2[ln].text;
                  if (!links2[ln].schema) {
                    urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
                  } else if (links2[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
                    urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
                  } else {
                    urlText = state.md.normalizeLinkText(urlText);
                  }
                  pos = links2[ln].index;
                  if (pos > lastPos) {
                    token = new state.Token("text", "", 0);
                    token.content = text2.slice(lastPos, pos);
                    token.level = level;
                    nodes.push(token);
                  }
                  token = new state.Token("link_open", "a", 1);
                  token.attrs = [["href", fullUrl]];
                  token.level = level++;
                  token.markup = "linkify";
                  token.info = "auto";
                  nodes.push(token);
                  token = new state.Token("text", "", 0);
                  token.content = urlText;
                  token.level = level;
                  nodes.push(token);
                  token = new state.Token("link_close", "a", -1);
                  token.level = --level;
                  token.markup = "linkify";
                  token.info = "auto";
                  nodes.push(token);
                  lastPos = links2[ln].lastIndex;
                }
                if (lastPos < text2.length) {
                  token = new state.Token("text", "", 0);
                  token.content = text2.slice(lastPos);
                  token.level = level;
                  nodes.push(token);
                }
                blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
              }
            }
          }
        };
      }
    });
    require_replacements = __commonJS({
      "node_modules/markdown-it/lib/rules_core/replacements.js"(exports, module) {
        "use strict";
        var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
        var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
        var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
        var SCOPED_ABBR = {
          c: "\xA9",
          r: "\xAE",
          p: "\xA7",
          tm: "\u2122"
        };
        function replaceFn(match, name) {
          return SCOPED_ABBR[name.toLowerCase()];
        }
        function replace_scoped(inlineTokens) {
          var i, token, inside_autolink = 0;
          for (i = inlineTokens.length - 1; i >= 0; i--) {
            token = inlineTokens[i];
            if (token.type === "text" && !inside_autolink) {
              token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
            }
            if (token.type === "link_open" && token.info === "auto") {
              inside_autolink--;
            }
            if (token.type === "link_close" && token.info === "auto") {
              inside_autolink++;
            }
          }
        }
        function replace_rare(inlineTokens) {
          var i, token, inside_autolink = 0;
          for (i = inlineTokens.length - 1; i >= 0; i--) {
            token = inlineTokens[i];
            if (token.type === "text" && !inside_autolink) {
              if (RARE_RE.test(token.content)) {
                token.content = token.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
              }
            }
            if (token.type === "link_open" && token.info === "auto") {
              inside_autolink--;
            }
            if (token.type === "link_close" && token.info === "auto") {
              inside_autolink++;
            }
          }
        }
        module.exports = function replace(state) {
          var blkIdx;
          if (!state.md.options.typographer) {
            return;
          }
          for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
            if (state.tokens[blkIdx].type !== "inline") {
              continue;
            }
            if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
              replace_scoped(state.tokens[blkIdx].children);
            }
            if (RARE_RE.test(state.tokens[blkIdx].content)) {
              replace_rare(state.tokens[blkIdx].children);
            }
          }
        };
      }
    });
    require_smartquotes = __commonJS({
      "node_modules/markdown-it/lib/rules_core/smartquotes.js"(exports, module) {
        "use strict";
        var isWhiteSpace = require_utils().isWhiteSpace;
        var isPunctChar = require_utils().isPunctChar;
        var isMdAsciiPunct = require_utils().isMdAsciiPunct;
        var QUOTE_TEST_RE = /['"]/;
        var QUOTE_RE = /['"]/g;
        var APOSTROPHE = "\u2019";
        function replaceAt(str, index, ch) {
          return str.substr(0, index) + ch + str.substr(index + 1);
        }
        function process_inlines(tokens, state) {
          var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
          stack = [];
          for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            thisLevel = tokens[i].level;
            for (j = stack.length - 1; j >= 0; j--) {
              if (stack[j].level <= thisLevel) {
                break;
              }
            }
            stack.length = j + 1;
            if (token.type !== "text") {
              continue;
            }
            text2 = token.content;
            pos = 0;
            max2 = text2.length;
            OUTER:
              while (pos < max2) {
                QUOTE_RE.lastIndex = pos;
                t = QUOTE_RE.exec(text2);
                if (!t) {
                  break;
                }
                canOpen = canClose = true;
                pos = t.index + 1;
                isSingle = t[0] === "'";
                lastChar = 32;
                if (t.index - 1 >= 0) {
                  lastChar = text2.charCodeAt(t.index - 1);
                } else {
                  for (j = i - 1; j >= 0; j--) {
                    if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
                      break;
                    if (!tokens[j].content)
                      continue;
                    lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
                    break;
                  }
                }
                nextChar = 32;
                if (pos < max2) {
                  nextChar = text2.charCodeAt(pos);
                } else {
                  for (j = i + 1; j < tokens.length; j++) {
                    if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
                      break;
                    if (!tokens[j].content)
                      continue;
                    nextChar = tokens[j].content.charCodeAt(0);
                    break;
                  }
                }
                isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
                isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
                isLastWhiteSpace = isWhiteSpace(lastChar);
                isNextWhiteSpace = isWhiteSpace(nextChar);
                if (isNextWhiteSpace) {
                  canOpen = false;
                } else if (isNextPunctChar) {
                  if (!(isLastWhiteSpace || isLastPunctChar)) {
                    canOpen = false;
                  }
                }
                if (isLastWhiteSpace) {
                  canClose = false;
                } else if (isLastPunctChar) {
                  if (!(isNextWhiteSpace || isNextPunctChar)) {
                    canClose = false;
                  }
                }
                if (nextChar === 34 && t[0] === '"') {
                  if (lastChar >= 48 && lastChar <= 57) {
                    canClose = canOpen = false;
                  }
                }
                if (canOpen && canClose) {
                  canOpen = isLastPunctChar;
                  canClose = isNextPunctChar;
                }
                if (!canOpen && !canClose) {
                  if (isSingle) {
                    token.content = replaceAt(token.content, t.index, APOSTROPHE);
                  }
                  continue;
                }
                if (canClose) {
                  for (j = stack.length - 1; j >= 0; j--) {
                    item2 = stack[j];
                    if (stack[j].level < thisLevel) {
                      break;
                    }
                    if (item2.single === isSingle && stack[j].level === thisLevel) {
                      item2 = stack[j];
                      if (isSingle) {
                        openQuote = state.md.options.quotes[2];
                        closeQuote = state.md.options.quotes[3];
                      } else {
                        openQuote = state.md.options.quotes[0];
                        closeQuote = state.md.options.quotes[1];
                      }
                      token.content = replaceAt(token.content, t.index, closeQuote);
                      tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);
                      pos += closeQuote.length - 1;
                      if (item2.token === i) {
                        pos += openQuote.length - 1;
                      }
                      text2 = token.content;
                      max2 = text2.length;
                      stack.length = j;
                      continue OUTER;
                    }
                  }
                }
                if (canOpen) {
                  stack.push({
                    token: i,
                    pos: t.index,
                    single: isSingle,
                    level: thisLevel
                  });
                } else if (canClose && isSingle) {
                  token.content = replaceAt(token.content, t.index, APOSTROPHE);
                }
              }
          }
        }
        module.exports = function smartquotes(state) {
          var blkIdx;
          if (!state.md.options.typographer) {
            return;
          }
          for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
            if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
              continue;
            }
            process_inlines(state.tokens[blkIdx].children, state);
          }
        };
      }
    });
    require_token = __commonJS({
      "node_modules/markdown-it/lib/token.js"(exports, module) {
        "use strict";
        function Token(type, tag2, nesting) {
          this.type = type;
          this.tag = tag2;
          this.attrs = null;
          this.map = null;
          this.nesting = nesting;
          this.level = 0;
          this.children = null;
          this.content = "";
          this.markup = "";
          this.info = "";
          this.meta = null;
          this.block = false;
          this.hidden = false;
        }
        Token.prototype.attrIndex = function attrIndex(name) {
          var attrs, i, len;
          if (!this.attrs) {
            return -1;
          }
          attrs = this.attrs;
          for (i = 0, len = attrs.length; i < len; i++) {
            if (attrs[i][0] === name) {
              return i;
            }
          }
          return -1;
        };
        Token.prototype.attrPush = function attrPush(attrData) {
          if (this.attrs) {
            this.attrs.push(attrData);
          } else {
            this.attrs = [attrData];
          }
        };
        Token.prototype.attrSet = function attrSet(name, value) {
          var idx = this.attrIndex(name), attrData = [name, value];
          if (idx < 0) {
            this.attrPush(attrData);
          } else {
            this.attrs[idx] = attrData;
          }
        };
        Token.prototype.attrGet = function attrGet(name) {
          var idx = this.attrIndex(name), value = null;
          if (idx >= 0) {
            value = this.attrs[idx][1];
          }
          return value;
        };
        Token.prototype.attrJoin = function attrJoin(name, value) {
          var idx = this.attrIndex(name);
          if (idx < 0) {
            this.attrPush([name, value]);
          } else {
            this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
          }
        };
        module.exports = Token;
      }
    });
    require_state_core = __commonJS({
      "node_modules/markdown-it/lib/rules_core/state_core.js"(exports, module) {
        "use strict";
        var Token = require_token();
        function StateCore(src, md, env) {
          this.src = src;
          this.env = env;
          this.tokens = [];
          this.inlineMode = false;
          this.md = md;
        }
        StateCore.prototype.Token = Token;
        module.exports = StateCore;
      }
    });
    require_parser_core = __commonJS({
      "node_modules/markdown-it/lib/parser_core.js"(exports, module) {
        "use strict";
        var Ruler = require_ruler();
        var _rules = [
          ["normalize", require_normalize()],
          ["block", require_block()],
          ["inline", require_inline()],
          ["linkify", require_linkify()],
          ["replacements", require_replacements()],
          ["smartquotes", require_smartquotes()]
        ];
        function Core() {
          this.ruler = new Ruler();
          for (var i = 0; i < _rules.length; i++) {
            this.ruler.push(_rules[i][0], _rules[i][1]);
          }
        }
        Core.prototype.process = function(state) {
          var i, l, rules;
          rules = this.ruler.getRules("");
          for (i = 0, l = rules.length; i < l; i++) {
            rules[i](state);
          }
        };
        Core.prototype.State = require_state_core();
        module.exports = Core;
      }
    });
    require_table = __commonJS({
      "node_modules/markdown-it/lib/rules_block/table.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        function getLine2(state, line) {
          var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];
          return state.src.substr(pos, max2 - pos);
        }
        function escapedSplit(str) {
          var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = "";
          ch = str.charCodeAt(pos);
          while (pos < max2) {
            if (ch === 124) {
              if (!isEscaped) {
                result.push(current + str.substring(lastPos, pos));
                current = "";
                lastPos = pos + 1;
              } else {
                current += str.substring(lastPos, pos - 1);
                lastPos = pos;
              }
            }
            isEscaped = ch === 92;
            pos++;
            ch = str.charCodeAt(pos);
          }
          result.push(current + str.substring(lastPos));
          return result;
        }
        module.exports = function table3(state, startLine, endLine, silent) {
          var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
          if (startLine + 2 > endLine) {
            return false;
          }
          nextLine = startLine + 1;
          if (state.sCount[nextLine] < state.blkIndent) {
            return false;
          }
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
            return false;
          }
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          if (pos >= state.eMarks[nextLine]) {
            return false;
          }
          firstCh = state.src.charCodeAt(pos++);
          if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
            return false;
          }
          if (pos >= state.eMarks[nextLine]) {
            return false;
          }
          secondCh = state.src.charCodeAt(pos++);
          if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
            return false;
          }
          if (firstCh === 45 && isSpace(secondCh)) {
            return false;
          }
          while (pos < state.eMarks[nextLine]) {
            ch = state.src.charCodeAt(pos);
            if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {
              return false;
            }
            pos++;
          }
          lineText = getLine2(state, startLine + 1);
          columns = lineText.split("|");
          aligns = [];
          for (i = 0; i < columns.length; i++) {
            t = columns[i].trim();
            if (!t) {
              if (i === 0 || i === columns.length - 1) {
                continue;
              } else {
                return false;
              }
            }
            if (!/^:?-+:?$/.test(t)) {
              return false;
            }
            if (t.charCodeAt(t.length - 1) === 58) {
              aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
            } else if (t.charCodeAt(0) === 58) {
              aligns.push("left");
            } else {
              aligns.push("");
            }
          }
          lineText = getLine2(state, startLine).trim();
          if (lineText.indexOf("|") === -1) {
            return false;
          }
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          columns = escapedSplit(lineText);
          if (columns.length && columns[0] === "")
            columns.shift();
          if (columns.length && columns[columns.length - 1] === "")
            columns.pop();
          columnCount = columns.length;
          if (columnCount === 0 || columnCount !== aligns.length) {
            return false;
          }
          if (silent) {
            return true;
          }
          oldParentType = state.parentType;
          state.parentType = "table";
          terminatorRules = state.md.block.ruler.getRules("blockquote");
          token = state.push("table_open", "table", 1);
          token.map = tableLines = [startLine, 0];
          token = state.push("thead_open", "thead", 1);
          token.map = [startLine, startLine + 1];
          token = state.push("tr_open", "tr", 1);
          token.map = [startLine, startLine + 1];
          for (i = 0; i < columns.length; i++) {
            token = state.push("th_open", "th", 1);
            if (aligns[i]) {
              token.attrs = [["style", "text-align:" + aligns[i]]];
            }
            token = state.push("inline", "", 0);
            token.content = columns[i].trim();
            token.children = [];
            token = state.push("th_close", "th", -1);
          }
          token = state.push("tr_close", "tr", -1);
          token = state.push("thead_close", "thead", -1);
          for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
            if (state.sCount[nextLine] < state.blkIndent) {
              break;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              break;
            }
            lineText = getLine2(state, nextLine).trim();
            if (!lineText) {
              break;
            }
            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
              break;
            }
            columns = escapedSplit(lineText);
            if (columns.length && columns[0] === "")
              columns.shift();
            if (columns.length && columns[columns.length - 1] === "")
              columns.pop();
            if (nextLine === startLine + 2) {
              token = state.push("tbody_open", "tbody", 1);
              token.map = tbodyLines = [startLine + 2, 0];
            }
            token = state.push("tr_open", "tr", 1);
            token.map = [nextLine, nextLine + 1];
            for (i = 0; i < columnCount; i++) {
              token = state.push("td_open", "td", 1);
              if (aligns[i]) {
                token.attrs = [["style", "text-align:" + aligns[i]]];
              }
              token = state.push("inline", "", 0);
              token.content = columns[i] ? columns[i].trim() : "";
              token.children = [];
              token = state.push("td_close", "td", -1);
            }
            token = state.push("tr_close", "tr", -1);
          }
          if (tbodyLines) {
            token = state.push("tbody_close", "tbody", -1);
            tbodyLines[1] = nextLine;
          }
          token = state.push("table_close", "table", -1);
          tableLines[1] = nextLine;
          state.parentType = oldParentType;
          state.line = nextLine;
          return true;
        };
      }
    });
    require_code = __commonJS({
      "node_modules/markdown-it/lib/rules_block/code.js"(exports, module) {
        "use strict";
        module.exports = function code22(state, startLine, endLine) {
          if (state.md.options.allowIndentation) {
            return false;
          }
          var nextLine, last, token;
          if (state.sCount[startLine] - state.blkIndent < 4) {
            return false;
          }
          last = nextLine = startLine + 1;
          while (nextLine < endLine) {
            if (state.isEmpty(nextLine)) {
              nextLine++;
              continue;
            }
            if (state.sCount[nextLine] - state.blkIndent >= 4) {
              nextLine++;
              last = nextLine;
              continue;
            }
            break;
          }
          state.line = last;
          token = state.push("code_block", "code", 0);
          token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
          token.map = [startLine, state.line];
          return true;
        };
      }
    });
    require_fence = __commonJS({
      "node_modules/markdown-it/lib/rules_block/fence.js"(exports, module) {
        "use strict";
        module.exports = function fence3(state, startLine, endLine, silent) {
          var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          if (pos + 3 > max2) {
            return false;
          }
          marker = state.src.charCodeAt(pos);
          if (marker !== 126 && marker !== 96) {
            return false;
          }
          mem = pos;
          pos = state.skipChars(pos, marker);
          len = pos - mem;
          if (len < 3) {
            return false;
          }
          markup = state.src.slice(mem, pos);
          params = state.src.slice(pos, max2);
          if (marker === 96) {
            if (params.indexOf(String.fromCharCode(marker)) >= 0) {
              return false;
            }
          }
          if (silent) {
            return true;
          }
          nextLine = startLine;
          for (; ; ) {
            nextLine++;
            if (nextLine >= endLine) {
              break;
            }
            pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
            max2 = state.eMarks[nextLine];
            if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {
              break;
            }
            if (state.src.charCodeAt(pos) !== marker) {
              continue;
            }
            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
              continue;
            }
            pos = state.skipChars(pos, marker);
            if (pos - mem < len) {
              continue;
            }
            pos = state.skipSpaces(pos);
            if (pos < max2) {
              continue;
            }
            haveEndMarker = true;
            break;
          }
          len = state.sCount[startLine];
          state.line = nextLine + (haveEndMarker ? 1 : 0);
          token = state.push("fence", "code", 0);
          token.info = params;
          token.content = state.getLines(startLine + 1, nextLine, len, true);
          token.markup = markup;
          token.map = [startLine, state.line];
          return true;
        };
      }
    });
    require_blockquote = __commonJS({
      "node_modules/markdown-it/lib/rules_block/blockquote.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        module.exports = function blockquote2(state, startLine, endLine, silent) {
          var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          if (state.src.charCodeAt(pos++) !== 62) {
            return false;
          }
          if (silent) {
            return true;
          }
          initial = offset = state.sCount[startLine] + 1;
          if (state.src.charCodeAt(pos) === 32) {
            pos++;
            initial++;
            offset++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 9) {
            spaceAfterMarker = true;
            if ((state.bsCount[startLine] + offset) % 4 === 3) {
              pos++;
              initial++;
              offset++;
              adjustTab = false;
            } else {
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }
          oldBMarks = [state.bMarks[startLine]];
          state.bMarks[startLine] = pos;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (isSpace(ch)) {
              if (ch === 9) {
                offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset++;
              }
            } else {
              break;
            }
            pos++;
          }
          oldBSCount = [state.bsCount[startLine]];
          state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
          lastLineEmpty = pos >= max2;
          oldSCount = [state.sCount[startLine]];
          state.sCount[startLine] = offset - initial;
          oldTShift = [state.tShift[startLine]];
          state.tShift[startLine] = pos - state.bMarks[startLine];
          terminatorRules = state.md.block.ruler.getRules("blockquote");
          oldParentType = state.parentType;
          state.parentType = "blockquote";
          for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
            isOutdented = state.sCount[nextLine] < state.blkIndent;
            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max2 = state.eMarks[nextLine];
            if (pos >= max2) {
              break;
            }
            if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
              initial = offset = state.sCount[nextLine] + 1;
              if (state.src.charCodeAt(pos) === 32) {
                pos++;
                initial++;
                offset++;
                adjustTab = false;
                spaceAfterMarker = true;
              } else if (state.src.charCodeAt(pos) === 9) {
                spaceAfterMarker = true;
                if ((state.bsCount[nextLine] + offset) % 4 === 3) {
                  pos++;
                  initial++;
                  offset++;
                  adjustTab = false;
                } else {
                  adjustTab = true;
                }
              } else {
                spaceAfterMarker = false;
              }
              oldBMarks.push(state.bMarks[nextLine]);
              state.bMarks[nextLine] = pos;
              while (pos < max2) {
                ch = state.src.charCodeAt(pos);
                if (isSpace(ch)) {
                  if (ch === 9) {
                    offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
                  } else {
                    offset++;
                  }
                } else {
                  break;
                }
                pos++;
              }
              lastLineEmpty = pos >= max2;
              oldBSCount.push(state.bsCount[nextLine]);
              state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
              oldSCount.push(state.sCount[nextLine]);
              state.sCount[nextLine] = offset - initial;
              oldTShift.push(state.tShift[nextLine]);
              state.tShift[nextLine] = pos - state.bMarks[nextLine];
              continue;
            }
            if (lastLineEmpty) {
              break;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              state.lineMax = nextLine;
              if (state.blkIndent !== 0) {
                oldBMarks.push(state.bMarks[nextLine]);
                oldBSCount.push(state.bsCount[nextLine]);
                oldTShift.push(state.tShift[nextLine]);
                oldSCount.push(state.sCount[nextLine]);
                state.sCount[nextLine] -= state.blkIndent;
              }
              break;
            }
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] = -1;
          }
          oldIndent = state.blkIndent;
          state.blkIndent = 0;
          token = state.push("blockquote_open", "blockquote", 1);
          token.markup = ">";
          token.map = lines = [startLine, 0];
          state.md.block.tokenize(state, startLine, nextLine);
          token = state.push("blockquote_close", "blockquote", -1);
          token.markup = ">";
          state.lineMax = oldLineMax;
          state.parentType = oldParentType;
          lines[1] = state.line;
          for (i = 0; i < oldTShift.length; i++) {
            state.bMarks[i + startLine] = oldBMarks[i];
            state.tShift[i + startLine] = oldTShift[i];
            state.sCount[i + startLine] = oldSCount[i];
            state.bsCount[i + startLine] = oldBSCount[i];
          }
          state.blkIndent = oldIndent;
          return true;
        };
      }
    });
    require_hr = __commonJS({
      "node_modules/markdown-it/lib/rules_block/hr.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        module.exports = function hr2(state, startLine, endLine, silent) {
          var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          marker = state.src.charCodeAt(pos++);
          if (marker !== 42 && marker !== 45 && marker !== 95) {
            return false;
          }
          cnt = 1;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos++);
            if (ch !== marker && !isSpace(ch)) {
              return false;
            }
            if (ch === marker) {
              cnt++;
            }
          }
          if (cnt < 3) {
            return false;
          }
          if (silent) {
            return true;
          }
          state.line = startLine + 1;
          token = state.push("hr", "hr", 0);
          token.map = [startLine, state.line];
          token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
          return true;
        };
      }
    });
    require_list = __commonJS({
      "node_modules/markdown-it/lib/rules_block/list.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        function skipBulletListMarker(state, startLine) {
          var marker, pos, max2, ch;
          pos = state.bMarks[startLine] + state.tShift[startLine];
          max2 = state.eMarks[startLine];
          marker = state.src.charCodeAt(pos++);
          if (marker !== 42 && marker !== 45 && marker !== 43) {
            return -1;
          }
          if (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (!isSpace(ch)) {
              return -1;
            }
          }
          return pos;
        }
        function skipOrderedListMarker(state, startLine) {
          var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];
          if (pos + 1 >= max2) {
            return -1;
          }
          ch = state.src.charCodeAt(pos++);
          if (ch < 48 || ch > 57) {
            return -1;
          }
          for (; ; ) {
            if (pos >= max2) {
              return -1;
            }
            ch = state.src.charCodeAt(pos++);
            if (ch >= 48 && ch <= 57) {
              if (pos - start >= 10) {
                return -1;
              }
              continue;
            }
            if (ch === 41 || ch === 46) {
              break;
            }
            return -1;
          }
          if (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (!isSpace(ch)) {
              return -1;
            }
          }
          return pos;
        }
        function markTightParagraphs(state, idx) {
          var i, l, level = state.level + 2;
          for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
            if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
              state.tokens[i + 2].hidden = true;
              state.tokens[i].hidden = true;
              i += 2;
            }
          }
        }
        module.exports = function list2(state, startLine, endLine, silent) {
          var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
            return false;
          }
          if (silent && state.parentType === "paragraph") {
            if (state.sCount[startLine] >= state.blkIndent) {
              isTerminatingParagraph = true;
            }
          }
          if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
            isOrdered = true;
            start = state.bMarks[startLine] + state.tShift[startLine];
            markerValue = Number(state.src.slice(start, posAfterMarker - 1));
            if (isTerminatingParagraph && markerValue !== 1)
              return false;
          } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
            isOrdered = false;
          } else {
            return false;
          }
          if (isTerminatingParagraph) {
            if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])
              return false;
          }
          markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
          if (silent) {
            return true;
          }
          listTokIdx = state.tokens.length;
          if (isOrdered) {
            token = state.push("ordered_list_open", "ol", 1);
            if (markerValue !== 1) {
              token.attrs = [["start", markerValue]];
            }
          } else {
            token = state.push("bullet_list_open", "ul", 1);
          }
          token.map = listLines = [startLine, 0];
          token.markup = String.fromCharCode(markerCharCode);
          nextLine = startLine;
          prevEmptyEnd = false;
          terminatorRules = state.md.block.ruler.getRules("list");
          oldParentType = state.parentType;
          state.parentType = "list";
          while (nextLine < endLine) {
            pos = posAfterMarker;
            max2 = state.eMarks[nextLine];
            initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
            while (pos < max2) {
              ch = state.src.charCodeAt(pos);
              if (ch === 9) {
                offset += 4 - (offset + state.bsCount[nextLine]) % 4;
              } else if (ch === 32) {
                offset++;
              } else {
                break;
              }
              pos++;
            }
            contentStart = pos;
            if (contentStart >= max2) {
              indentAfterMarker = 1;
            } else {
              indentAfterMarker = offset - initial;
            }
            if (!state.md.options.allowIndentation && indentAfterMarker > 4) {
              indentAfterMarker = 1;
            }
            indent = initial + indentAfterMarker;
            token = state.push("list_item_open", "li", 1);
            token.markup = String.fromCharCode(markerCharCode);
            token.map = itemLines = [startLine, 0];
            if (isOrdered) {
              token.info = state.src.slice(start, posAfterMarker - 1);
            }
            oldTight = state.tight;
            oldTShift = state.tShift[startLine];
            oldSCount = state.sCount[startLine];
            oldListIndent = state.listIndent;
            state.listIndent = state.blkIndent;
            state.blkIndent = indent;
            state.tight = true;
            state.tShift[startLine] = contentStart - state.bMarks[startLine];
            state.sCount[startLine] = offset;
            if (contentStart >= max2 && state.isEmpty(startLine + 1)) {
              state.line = Math.min(state.line + 2, endLine);
            } else {
              state.md.block.tokenize(state, startLine, endLine, true);
            }
            if (!state.tight || prevEmptyEnd) {
              tight = false;
            }
            prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
            state.blkIndent = state.listIndent;
            state.listIndent = oldListIndent;
            state.tShift[startLine] = oldTShift;
            state.sCount[startLine] = oldSCount;
            state.tight = oldTight;
            token = state.push("list_item_close", "li", -1);
            token.markup = String.fromCharCode(markerCharCode);
            nextLine = startLine = state.line;
            itemLines[1] = nextLine;
            contentStart = state.bMarks[startLine];
            if (nextLine >= endLine) {
              break;
            }
            if (state.sCount[nextLine] < state.blkIndent) {
              break;
            }
            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
              break;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              break;
            }
            if (isOrdered) {
              posAfterMarker = skipOrderedListMarker(state, nextLine);
              if (posAfterMarker < 0) {
                break;
              }
              start = state.bMarks[nextLine] + state.tShift[nextLine];
            } else {
              posAfterMarker = skipBulletListMarker(state, nextLine);
              if (posAfterMarker < 0) {
                break;
              }
            }
            if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
              break;
            }
          }
          if (isOrdered) {
            token = state.push("ordered_list_close", "ol", -1);
          } else {
            token = state.push("bullet_list_close", "ul", -1);
          }
          token.markup = String.fromCharCode(markerCharCode);
          listLines[1] = nextLine;
          state.line = nextLine;
          state.parentType = oldParentType;
          if (tight) {
            markTightParagraphs(state, listTokIdx);
          }
          return true;
        };
      }
    });
    require_reference = __commonJS({
      "node_modules/markdown-it/lib/rules_block/reference.js"(exports, module) {
        "use strict";
        var normalizeReference = require_utils().normalizeReference;
        var isSpace = require_utils().isSpace;
        module.exports = function reference(state, startLine, _endLine, silent) {
          var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          if (state.src.charCodeAt(pos) !== 91) {
            return false;
          }
          while (++pos < max2) {
            if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
              if (pos + 1 === max2) {
                return false;
              }
              if (state.src.charCodeAt(pos + 1) !== 58) {
                return false;
              }
              break;
            }
          }
          endLine = state.lineMax;
          terminatorRules = state.md.block.ruler.getRules("reference");
          oldParentType = state.parentType;
          state.parentType = "reference";
          for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
              continue;
            }
            if (state.sCount[nextLine] < 0) {
              continue;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              break;
            }
          }
          str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
          max2 = str.length;
          for (pos = 1; pos < max2; pos++) {
            ch = str.charCodeAt(pos);
            if (ch === 91) {
              return false;
            } else if (ch === 93) {
              labelEnd = pos;
              break;
            } else if (ch === 10) {
              lines++;
            } else if (ch === 92) {
              pos++;
              if (pos < max2 && str.charCodeAt(pos) === 10) {
                lines++;
              }
            }
          }
          if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
            return false;
          }
          for (pos = labelEnd + 2; pos < max2; pos++) {
            ch = str.charCodeAt(pos);
            if (ch === 10) {
              lines++;
            } else if (isSpace(ch)) {
            } else {
              break;
            }
          }
          res = state.md.helpers.parseLinkDestination(str, pos, max2);
          if (!res.ok) {
            return false;
          }
          href = state.md.normalizeLink(res.str);
          if (!state.md.validateLink(href)) {
            return false;
          }
          pos = res.pos;
          lines += res.lines;
          destEndPos = pos;
          destEndLineNo = lines;
          start = pos;
          for (; pos < max2; pos++) {
            ch = str.charCodeAt(pos);
            if (ch === 10) {
              lines++;
            } else if (isSpace(ch)) {
            } else {
              break;
            }
          }
          res = state.md.helpers.parseLinkTitle(str, pos, max2);
          if (pos < max2 && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
            lines += res.lines;
          } else {
            title = "";
            pos = destEndPos;
            lines = destEndLineNo;
          }
          while (pos < max2) {
            ch = str.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
            pos++;
          }
          if (pos < max2 && str.charCodeAt(pos) !== 10) {
            if (title) {
              title = "";
              pos = destEndPos;
              lines = destEndLineNo;
              while (pos < max2) {
                ch = str.charCodeAt(pos);
                if (!isSpace(ch)) {
                  break;
                }
                pos++;
              }
            }
          }
          if (pos < max2 && str.charCodeAt(pos) !== 10) {
            return false;
          }
          label = normalizeReference(str.slice(1, labelEnd));
          if (!label) {
            return false;
          }
          if (silent) {
            return true;
          }
          if (typeof state.env.references === "undefined") {
            state.env.references = {};
          }
          if (typeof state.env.references[label] === "undefined") {
            state.env.references[label] = { title, href };
          }
          state.parentType = oldParentType;
          state.line = startLine + lines + 1;
          return true;
        };
      }
    });
    require_html_blocks = __commonJS({
      "node_modules/markdown-it/lib/common/html_blocks.js"(exports, module) {
        "use strict";
        module.exports = [
          "address",
          "article",
          "aside",
          "base",
          "basefont",
          "blockquote",
          "body",
          "caption",
          "center",
          "col",
          "colgroup",
          "dd",
          "details",
          "dialog",
          "dir",
          "div",
          "dl",
          "dt",
          "fieldset",
          "figcaption",
          "figure",
          "footer",
          "form",
          "frame",
          "frameset",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6",
          "head",
          "header",
          "hr",
          "html",
          "iframe",
          "legend",
          "li",
          "link",
          "main",
          "menu",
          "menuitem",
          "nav",
          "noframes",
          "ol",
          "optgroup",
          "option",
          "p",
          "param",
          "section",
          "source",
          "summary",
          "table",
          "tbody",
          "td",
          "tfoot",
          "th",
          "thead",
          "title",
          "tr",
          "track",
          "ul"
        ];
      }
    });
    require_html_re = __commonJS({
      "node_modules/markdown-it/lib/common/html_re.js"(exports, module) {
        "use strict";
        var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
        var unquoted = "[^\"'=<>`\\x00-\\x20]+";
        var single_quoted = "'[^']*'";
        var double_quoted = '"[^"]*"';
        var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
        var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
        var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
        var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
        var comment2 = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
        var processing = "<[?][\\s\\S]*?[?]>";
        var declaration = "<![A-Z]+\\s+[^>]*>";
        var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
        var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment2 + "|" + processing + "|" + declaration + "|" + cdata + ")");
        var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
        module.exports.HTML_TAG_RE = HTML_TAG_RE;
        module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;
      }
    });
    require_html_block = __commonJS({
      "node_modules/markdown-it/lib/rules_block/html_block.js"(exports, module) {
        "use strict";
        var block_names = require_html_blocks();
        var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;
        var HTML_SEQUENCES = [
          [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
          [/^<!--/, /-->/, true],
          [/^<\?/, /\?>/, true],
          [/^<![A-Z]/, />/, true],
          [/^<!\[CDATA\[/, /\]\]>/, true],
          [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
          [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
        ];
        module.exports = function html_block(state, startLine, endLine, silent) {
          var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          if (!state.md.options.html) {
            return false;
          }
          if (state.src.charCodeAt(pos) !== 60) {
            return false;
          }
          lineText = state.src.slice(pos, max2);
          for (i = 0; i < HTML_SEQUENCES.length; i++) {
            if (HTML_SEQUENCES[i][0].test(lineText)) {
              break;
            }
          }
          if (i === HTML_SEQUENCES.length) {
            return false;
          }
          if (silent) {
            return HTML_SEQUENCES[i][2];
          }
          nextLine = startLine + 1;
          if (!HTML_SEQUENCES[i][1].test(lineText)) {
            for (; nextLine < endLine; nextLine++) {
              if (state.sCount[nextLine] < state.blkIndent) {
                break;
              }
              pos = state.bMarks[nextLine] + state.tShift[nextLine];
              max2 = state.eMarks[nextLine];
              lineText = state.src.slice(pos, max2);
              if (HTML_SEQUENCES[i][1].test(lineText)) {
                if (lineText.length !== 0) {
                  nextLine++;
                }
                break;
              }
            }
          }
          state.line = nextLine;
          token = state.push("html_block", "", 0);
          token.map = [startLine, nextLine];
          token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
          return true;
        };
      }
    });
    require_heading = __commonJS({
      "node_modules/markdown-it/lib/rules_block/heading.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        module.exports = function heading2(state, startLine, endLine, silent) {
          var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          ch = state.src.charCodeAt(pos);
          if (ch !== 35 || pos >= max2) {
            return false;
          }
          level = 1;
          ch = state.src.charCodeAt(++pos);
          while (ch === 35 && pos < max2 && level <= 6) {
            level++;
            ch = state.src.charCodeAt(++pos);
          }
          if (level > 6 || pos < max2 && !isSpace(ch)) {
            return false;
          }
          if (silent) {
            return true;
          }
          max2 = state.skipSpacesBack(max2, pos);
          tmp = state.skipCharsBack(max2, 35, pos);
          if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
            max2 = tmp;
          }
          state.line = startLine + 1;
          token = state.push("heading_open", "h" + String(level), 1);
          token.markup = "########".slice(0, level);
          token.map = [startLine, state.line];
          token = state.push("inline", "", 0);
          token.content = state.src.slice(pos, max2).trim();
          token.map = [startLine, state.line];
          token.children = [];
          token = state.push("heading_close", "h" + String(level), -1);
          token.markup = "########".slice(0, level);
          return true;
        };
      }
    });
    require_lheading = __commonJS({
      "node_modules/markdown-it/lib/rules_block/lheading.js"(exports, module) {
        "use strict";
        module.exports = function lheading(state, startLine, endLine) {
          var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules("paragraph");
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            return false;
          }
          oldParentType = state.parentType;
          state.parentType = "paragraph";
          for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
              continue;
            }
            if (state.sCount[nextLine] >= state.blkIndent) {
              pos = state.bMarks[nextLine] + state.tShift[nextLine];
              max2 = state.eMarks[nextLine];
              if (pos < max2) {
                marker = state.src.charCodeAt(pos);
                if (marker === 45 || marker === 61) {
                  pos = state.skipChars(pos, marker);
                  pos = state.skipSpaces(pos);
                  if (pos >= max2) {
                    level = marker === 61 ? 1 : 2;
                    break;
                  }
                }
              }
            }
            if (state.sCount[nextLine] < 0) {
              continue;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              break;
            }
          }
          if (!level) {
            return false;
          }
          content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
          state.line = nextLine + 1;
          token = state.push("heading_open", "h" + String(level), 1);
          token.markup = String.fromCharCode(marker);
          token.map = [startLine, state.line];
          token = state.push("inline", "", 0);
          token.content = content;
          token.map = [startLine, state.line - 1];
          token.children = [];
          token = state.push("heading_close", "h" + String(level), -1);
          token.markup = String.fromCharCode(marker);
          state.parentType = oldParentType;
          return true;
        };
      }
    });
    require_paragraph = __commonJS({
      "node_modules/markdown-it/lib/rules_block/paragraph.js"(exports, module) {
        "use strict";
        module.exports = function paragraph2(state, startLine) {
          var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules("paragraph"), endLine = state.lineMax;
          oldParentType = state.parentType;
          state.parentType = "paragraph";
          for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
              continue;
            }
            if (state.sCount[nextLine] < 0) {
              continue;
            }
            terminate = false;
            for (i = 0, l = terminatorRules.length; i < l; i++) {
              if (terminatorRules[i](state, nextLine, endLine, true)) {
                terminate = true;
                break;
              }
            }
            if (terminate) {
              break;
            }
          }
          content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
          state.line = nextLine;
          token = state.push("paragraph_open", "p", 1);
          token.map = [startLine, state.line];
          token = state.push("inline", "", 0);
          token.content = content;
          token.map = [startLine, state.line];
          token.children = [];
          token = state.push("paragraph_close", "p", -1);
          state.parentType = oldParentType;
          return true;
        };
      }
    });
    require_state_block = __commonJS({
      "node_modules/markdown-it/lib/rules_block/state_block.js"(exports, module) {
        "use strict";
        var Token = require_token();
        var isSpace = require_utils().isSpace;
        function StateBlock(src, md, env, tokens) {
          var ch, s2, start, pos, len, indent, offset, indent_found;
          this.src = src;
          this.md = md;
          this.env = env;
          this.tokens = tokens;
          this.bMarks = [];
          this.eMarks = [];
          this.tShift = [];
          this.sCount = [];
          this.bsCount = [];
          this.blkIndent = 0;
          this.line = 0;
          this.lineMax = 0;
          this.tight = false;
          this.ddIndent = -1;
          this.listIndent = -1;
          this.parentType = "root";
          this.level = 0;
          this.result = "";
          s2 = this.src;
          indent_found = false;
          for (start = pos = indent = offset = 0, len = s2.length; pos < len; pos++) {
            ch = s2.charCodeAt(pos);
            if (!indent_found) {
              if (isSpace(ch)) {
                indent++;
                if (ch === 9) {
                  offset += 4 - offset % 4;
                } else {
                  offset++;
                }
                continue;
              } else {
                indent_found = true;
              }
            }
            if (ch === 10 || pos === len - 1) {
              if (ch !== 10) {
                pos++;
              }
              this.bMarks.push(start);
              this.eMarks.push(pos);
              this.tShift.push(indent);
              this.sCount.push(offset);
              this.bsCount.push(0);
              indent_found = false;
              indent = 0;
              offset = 0;
              start = pos + 1;
            }
          }
          this.bMarks.push(s2.length);
          this.eMarks.push(s2.length);
          this.tShift.push(0);
          this.sCount.push(0);
          this.bsCount.push(0);
          this.lineMax = this.bMarks.length - 1;
        }
        StateBlock.prototype.push = function(type, tag2, nesting) {
          var token = new Token(type, tag2, nesting);
          token.block = true;
          if (nesting < 0)
            this.level--;
          token.level = this.level;
          if (nesting > 0)
            this.level++;
          this.tokens.push(token);
          return token;
        };
        StateBlock.prototype.isEmpty = function isEmpty(line) {
          return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
        };
        StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
          for (var max2 = this.lineMax; from < max2; from++) {
            if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
              break;
            }
          }
          return from;
        };
        StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
          var ch;
          for (var max2 = this.src.length; pos < max2; pos++) {
            ch = this.src.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
          }
          return pos;
        };
        StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
          if (pos <= min) {
            return pos;
          }
          while (pos > min) {
            if (!isSpace(this.src.charCodeAt(--pos))) {
              return pos + 1;
            }
          }
          return pos;
        };
        StateBlock.prototype.skipChars = function skipChars(pos, code22) {
          for (var max2 = this.src.length; pos < max2; pos++) {
            if (this.src.charCodeAt(pos) !== code22) {
              break;
            }
          }
          return pos;
        };
        StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code22, min) {
          if (pos <= min) {
            return pos;
          }
          while (pos > min) {
            if (code22 !== this.src.charCodeAt(--pos)) {
              return pos + 1;
            }
          }
          return pos;
        };
        StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
          var i, lineIndent, ch, first, last, queue, lineStart, line = begin;
          if (begin >= end) {
            return "";
          }
          queue = new Array(end - begin);
          for (i = 0; line < end; line++, i++) {
            lineIndent = 0;
            lineStart = first = this.bMarks[line];
            if (line + 1 < end || keepLastLF) {
              last = this.eMarks[line] + 1;
            } else {
              last = this.eMarks[line];
            }
            while (first < last && lineIndent < indent) {
              ch = this.src.charCodeAt(first);
              if (isSpace(ch)) {
                if (ch === 9) {
                  lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
                } else {
                  lineIndent++;
                }
              } else if (first - lineStart < this.tShift[line]) {
                lineIndent++;
              } else {
                break;
              }
              first++;
            }
            if (lineIndent > indent) {
              queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
            } else {
              queue[i] = this.src.slice(first, last);
            }
          }
          return queue.join("");
        };
        StateBlock.prototype.Token = Token;
        module.exports = StateBlock;
      }
    });
    require_parser_block = __commonJS({
      "node_modules/markdown-it/lib/parser_block.js"(exports, module) {
        "use strict";
        var Ruler = require_ruler();
        var _rules = [
          ["table", require_table(), ["paragraph", "reference"]],
          ["code", require_code()],
          ["fence", require_fence(), ["paragraph", "reference", "blockquote", "list"]],
          ["blockquote", require_blockquote(), ["paragraph", "reference", "blockquote", "list"]],
          ["hr", require_hr(), ["paragraph", "reference", "blockquote", "list"]],
          ["list", require_list(), ["paragraph", "reference", "blockquote"]],
          ["reference", require_reference()],
          ["html_block", require_html_block(), ["paragraph", "reference", "blockquote"]],
          ["heading", require_heading(), ["paragraph", "reference", "blockquote"]],
          ["lheading", require_lheading()],
          ["paragraph", require_paragraph()]
        ];
        function ParserBlock() {
          this.ruler = new Ruler();
          for (var i = 0; i < _rules.length; i++) {
            this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });
          }
        }
        ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
          var ok, i, rules = this.ruler.getRules(""), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;
          while (line < endLine) {
            state.line = line = state.skipEmptyLines(line);
            if (line >= endLine) {
              break;
            }
            if (state.sCount[line] < state.blkIndent) {
              break;
            }
            if (state.level >= maxNesting) {
              state.line = endLine;
              break;
            }
            for (i = 0; i < len; i++) {
              ok = rules[i](state, line, endLine, false);
              if (ok) {
                break;
              }
            }
            state.tight = !hasEmptyLines;
            if (state.isEmpty(state.line - 1)) {
              hasEmptyLines = true;
            }
            line = state.line;
            if (line < endLine && state.isEmpty(line)) {
              hasEmptyLines = true;
              line++;
              state.line = line;
            }
          }
        };
        ParserBlock.prototype.parse = function(src, md, env, outTokens) {
          var state;
          if (!src) {
            return;
          }
          state = new this.State(src, md, env, outTokens);
          this.tokenize(state, state.line, state.lineMax);
        };
        ParserBlock.prototype.State = require_state_block();
        module.exports = ParserBlock;
      }
    });
    require_text = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/text.js"(exports, module) {
        "use strict";
        function isTerminatorChar(ch) {
          switch (ch) {
            case 10:
            case 33:
            case 35:
            case 36:
            case 37:
            case 38:
            case 42:
            case 43:
            case 45:
            case 58:
            case 60:
            case 61:
            case 62:
            case 64:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 123:
            case 125:
            case 126:
              return true;
            default:
              return false;
          }
        }
        module.exports = function text2(state, silent) {
          var pos = state.pos;
          while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
            pos++;
          }
          if (pos === state.pos) {
            return false;
          }
          if (!silent) {
            state.pending += state.src.slice(state.pos, pos);
          }
          state.pos = pos;
          return true;
        };
      }
    });
    require_newline = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/newline.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        module.exports = function newline(state, silent) {
          var pmax, max2, ws, pos = state.pos;
          if (state.src.charCodeAt(pos) !== 10) {
            return false;
          }
          pmax = state.pending.length - 1;
          max2 = state.posMax;
          if (!silent) {
            if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
              if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
                ws = pmax - 1;
                while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)
                  ws--;
                state.pending = state.pending.slice(0, ws);
                state.push("hardbreak", "br", 0);
              } else {
                state.pending = state.pending.slice(0, -1);
                state.push("softbreak", "br", 0);
              }
            } else {
              state.push("softbreak", "br", 0);
            }
          }
          pos++;
          while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {
            pos++;
          }
          state.pos = pos;
          return true;
        };
      }
    });
    require_escape = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/escape.js"(exports, module) {
        "use strict";
        var isSpace = require_utils().isSpace;
        var ESCAPED = [];
        for (i = 0; i < 256; i++) {
          ESCAPED.push(0);
        }
        var i;
        "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
          ESCAPED[ch.charCodeAt(0)] = 1;
        });
        module.exports = function escape(state, silent) {
          var ch, pos = state.pos, max2 = state.posMax;
          if (state.src.charCodeAt(pos) !== 92) {
            return false;
          }
          pos++;
          if (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (ch < 256 && ESCAPED[ch] !== 0) {
              if (!silent) {
                state.pending += state.src[pos];
              }
              state.pos += 2;
              return true;
            }
            if (ch === 10) {
              if (!silent) {
                state.push("hardbreak", "br", 0);
              }
              pos++;
              while (pos < max2) {
                ch = state.src.charCodeAt(pos);
                if (!isSpace(ch)) {
                  break;
                }
                pos++;
              }
              state.pos = pos;
              return true;
            }
          }
          if (!silent) {
            state.pending += "\\";
          }
          state.pos++;
          return true;
        };
      }
    });
    require_backticks = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/backticks.js"(exports, module) {
        "use strict";
        module.exports = function backtick(state, silent) {
          var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);
          if (ch !== 96) {
            return false;
          }
          start = pos;
          pos++;
          max2 = state.posMax;
          while (pos < max2 && state.src.charCodeAt(pos) === 96) {
            pos++;
          }
          marker = state.src.slice(start, pos);
          openerLength = marker.length;
          if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
            if (!silent)
              state.pending += marker;
            state.pos += openerLength;
            return true;
          }
          matchStart = matchEnd = pos;
          while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
            matchEnd = matchStart + 1;
            while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
              matchEnd++;
            }
            closerLength = matchEnd - matchStart;
            if (closerLength === openerLength) {
              if (!silent) {
                token = state.push("code_inline", "code", 0);
                token.markup = marker;
                token.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
              }
              state.pos = matchEnd;
              return true;
            }
            state.backticks[closerLength] = matchStart;
          }
          state.backticksScanned = true;
          if (!silent)
            state.pending += marker;
          state.pos += openerLength;
          return true;
        };
      }
    });
    require_strikethrough = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/strikethrough.js"(exports, module) {
        "use strict";
        module.exports.tokenize = function strikethrough(state, silent) {
          var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);
          if (silent) {
            return false;
          }
          if (marker !== 126) {
            return false;
          }
          scanned = state.scanDelims(state.pos, true);
          len = scanned.length;
          ch = String.fromCharCode(marker);
          if (len < 2) {
            return false;
          }
          if (len % 2) {
            token = state.push("text", "", 0);
            token.content = ch;
            len--;
          }
          for (i = 0; i < len; i += 2) {
            token = state.push("text", "", 0);
            token.content = ch + ch;
            state.delimiters.push({
              marker,
              length: 0,
              token: state.tokens.length - 1,
              end: -1,
              open: scanned.can_open,
              close: scanned.can_close
            });
          }
          state.pos += scanned.length;
          return true;
        };
        function postProcess(state, delimiters) {
          var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;
          for (i = 0; i < max2; i++) {
            startDelim = delimiters[i];
            if (startDelim.marker !== 126) {
              continue;
            }
            if (startDelim.end === -1) {
              continue;
            }
            endDelim = delimiters[startDelim.end];
            token = state.tokens[startDelim.token];
            token.type = "s_open";
            token.tag = "s";
            token.nesting = 1;
            token.markup = "~~";
            token.content = "";
            token = state.tokens[endDelim.token];
            token.type = "s_close";
            token.tag = "s";
            token.nesting = -1;
            token.markup = "~~";
            token.content = "";
            if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
              loneMarkers.push(endDelim.token - 1);
            }
          }
          while (loneMarkers.length) {
            i = loneMarkers.pop();
            j = i + 1;
            while (j < state.tokens.length && state.tokens[j].type === "s_close") {
              j++;
            }
            j--;
            if (i !== j) {
              token = state.tokens[j];
              state.tokens[j] = state.tokens[i];
              state.tokens[i] = token;
            }
          }
        }
        module.exports.postProcess = function strikethrough(state) {
          var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
          postProcess(state, state.delimiters);
          for (curr = 0; curr < max2; curr++) {
            if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
              postProcess(state, tokens_meta[curr].delimiters);
            }
          }
        };
      }
    });
    require_emphasis = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/emphasis.js"(exports, module) {
        "use strict";
        module.exports.tokenize = function emphasis(state, silent) {
          var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);
          if (silent) {
            return false;
          }
          if (marker !== 95 && marker !== 42) {
            return false;
          }
          scanned = state.scanDelims(state.pos, marker === 42);
          for (i = 0; i < scanned.length; i++) {
            token = state.push("text", "", 0);
            token.content = String.fromCharCode(marker);
            state.delimiters.push({
              marker,
              length: scanned.length,
              token: state.tokens.length - 1,
              end: -1,
              open: scanned.can_open,
              close: scanned.can_close
            });
          }
          state.pos += scanned.length;
          return true;
        };
        function postProcess(state, delimiters) {
          var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;
          for (i = max2 - 1; i >= 0; i--) {
            startDelim = delimiters[i];
            if (startDelim.marker !== 95 && startDelim.marker !== 42) {
              continue;
            }
            if (startDelim.end === -1) {
              continue;
            }
            endDelim = delimiters[startDelim.end];
            isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
            ch = String.fromCharCode(startDelim.marker);
            token = state.tokens[startDelim.token];
            token.type = isStrong ? "strong_open" : "em_open";
            token.tag = isStrong ? "strong" : "em";
            token.nesting = 1;
            token.markup = isStrong ? ch + ch : ch;
            token.content = "";
            token = state.tokens[endDelim.token];
            token.type = isStrong ? "strong_close" : "em_close";
            token.tag = isStrong ? "strong" : "em";
            token.nesting = -1;
            token.markup = isStrong ? ch + ch : ch;
            token.content = "";
            if (isStrong) {
              state.tokens[delimiters[i - 1].token].content = "";
              state.tokens[delimiters[startDelim.end + 1].token].content = "";
              i--;
            }
          }
        }
        module.exports.postProcess = function emphasis(state) {
          var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
          postProcess(state, state.delimiters);
          for (curr = 0; curr < max2; curr++) {
            if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
              postProcess(state, tokens_meta[curr].delimiters);
            }
          }
        };
      }
    });
    require_link = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/link.js"(exports, module) {
        "use strict";
        var normalizeReference = require_utils().normalizeReference;
        var isSpace = require_utils().isSpace;
        module.exports = function link2(state, silent) {
          var attrs, code22, label, labelEnd, labelStart, pos, res, ref, token, href = "", title = "", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;
          if (state.src.charCodeAt(state.pos) !== 91) {
            return false;
          }
          labelStart = state.pos + 1;
          labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
          if (labelEnd < 0) {
            return false;
          }
          pos = labelEnd + 1;
          if (pos < max2 && state.src.charCodeAt(pos) === 40) {
            parseReference = false;
            pos++;
            for (; pos < max2; pos++) {
              code22 = state.src.charCodeAt(pos);
              if (!isSpace(code22) && code22 !== 10) {
                break;
              }
            }
            if (pos >= max2) {
              return false;
            }
            start = pos;
            res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
            if (res.ok) {
              href = state.md.normalizeLink(res.str);
              if (state.md.validateLink(href)) {
                pos = res.pos;
              } else {
                href = "";
              }
              start = pos;
              for (; pos < max2; pos++) {
                code22 = state.src.charCodeAt(pos);
                if (!isSpace(code22) && code22 !== 10) {
                  break;
                }
              }
              res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
              if (pos < max2 && start !== pos && res.ok) {
                title = res.str;
                pos = res.pos;
                for (; pos < max2; pos++) {
                  code22 = state.src.charCodeAt(pos);
                  if (!isSpace(code22) && code22 !== 10) {
                    break;
                  }
                }
              }
            }
            if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
              parseReference = true;
            }
            pos++;
          }
          if (parseReference) {
            if (typeof state.env.references === "undefined") {
              return false;
            }
            if (pos < max2 && state.src.charCodeAt(pos) === 91) {
              start = pos + 1;
              pos = state.md.helpers.parseLinkLabel(state, pos);
              if (pos >= 0) {
                label = state.src.slice(start, pos++);
              } else {
                pos = labelEnd + 1;
              }
            } else {
              pos = labelEnd + 1;
            }
            if (!label) {
              label = state.src.slice(labelStart, labelEnd);
            }
            ref = state.env.references[normalizeReference(label)];
            if (!ref) {
              state.pos = oldPos;
              return false;
            }
            href = ref.href;
            title = ref.title;
          }
          if (!silent) {
            state.pos = labelStart;
            state.posMax = labelEnd;
            token = state.push("link_open", "a", 1);
            token.attrs = attrs = [["href", href]];
            if (title) {
              attrs.push(["title", title]);
            }
            state.md.inline.tokenize(state);
            token = state.push("link_close", "a", -1);
          }
          state.pos = pos;
          state.posMax = max2;
          return true;
        };
      }
    });
    require_image = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/image.js"(exports, module) {
        "use strict";
        var normalizeReference = require_utils().normalizeReference;
        var isSpace = require_utils().isSpace;
        module.exports = function image2(state, silent) {
          var attrs, code22, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = "", oldPos = state.pos, max2 = state.posMax;
          if (state.src.charCodeAt(state.pos) !== 33) {
            return false;
          }
          if (state.src.charCodeAt(state.pos + 1) !== 91) {
            return false;
          }
          labelStart = state.pos + 2;
          labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
          if (labelEnd < 0) {
            return false;
          }
          pos = labelEnd + 1;
          if (pos < max2 && state.src.charCodeAt(pos) === 40) {
            pos++;
            for (; pos < max2; pos++) {
              code22 = state.src.charCodeAt(pos);
              if (!isSpace(code22) && code22 !== 10) {
                break;
              }
            }
            if (pos >= max2) {
              return false;
            }
            start = pos;
            res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
            if (res.ok) {
              href = state.md.normalizeLink(res.str);
              if (state.md.validateLink(href)) {
                pos = res.pos;
              } else {
                href = "";
              }
            }
            start = pos;
            for (; pos < max2; pos++) {
              code22 = state.src.charCodeAt(pos);
              if (!isSpace(code22) && code22 !== 10) {
                break;
              }
            }
            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
            if (pos < max2 && start !== pos && res.ok) {
              title = res.str;
              pos = res.pos;
              for (; pos < max2; pos++) {
                code22 = state.src.charCodeAt(pos);
                if (!isSpace(code22) && code22 !== 10) {
                  break;
                }
              }
            } else {
              title = "";
            }
            if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
              state.pos = oldPos;
              return false;
            }
            pos++;
          } else {
            if (typeof state.env.references === "undefined") {
              return false;
            }
            if (pos < max2 && state.src.charCodeAt(pos) === 91) {
              start = pos + 1;
              pos = state.md.helpers.parseLinkLabel(state, pos);
              if (pos >= 0) {
                label = state.src.slice(start, pos++);
              } else {
                pos = labelEnd + 1;
              }
            } else {
              pos = labelEnd + 1;
            }
            if (!label) {
              label = state.src.slice(labelStart, labelEnd);
            }
            ref = state.env.references[normalizeReference(label)];
            if (!ref) {
              state.pos = oldPos;
              return false;
            }
            href = ref.href;
            title = ref.title;
          }
          if (!silent) {
            content = state.src.slice(labelStart, labelEnd);
            state.md.inline.parse(content, state.md, state.env, tokens = []);
            token = state.push("image", "img", 0);
            token.attrs = attrs = [["src", href], ["alt", ""]];
            token.children = tokens;
            token.content = content;
            if (title) {
              attrs.push(["title", title]);
            }
          }
          state.pos = pos;
          state.posMax = max2;
          return true;
        };
      }
    });
    require_autolink = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/autolink.js"(exports, module) {
        "use strict";
        var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
        var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
        module.exports = function autolink(state, silent) {
          var url, fullUrl, token, ch, start, max2, pos = state.pos;
          if (state.src.charCodeAt(pos) !== 60) {
            return false;
          }
          start = state.pos;
          max2 = state.posMax;
          for (; ; ) {
            if (++pos >= max2)
              return false;
            ch = state.src.charCodeAt(pos);
            if (ch === 60)
              return false;
            if (ch === 62)
              break;
          }
          url = state.src.slice(start + 1, pos);
          if (AUTOLINK_RE.test(url)) {
            fullUrl = state.md.normalizeLink(url);
            if (!state.md.validateLink(fullUrl)) {
              return false;
            }
            if (!silent) {
              token = state.push("link_open", "a", 1);
              token.attrs = [["href", fullUrl]];
              token.markup = "autolink";
              token.info = "auto";
              token = state.push("text", "", 0);
              token.content = state.md.normalizeLinkText(url);
              token = state.push("link_close", "a", -1);
              token.markup = "autolink";
              token.info = "auto";
            }
            state.pos += url.length + 2;
            return true;
          }
          if (EMAIL_RE.test(url)) {
            fullUrl = state.md.normalizeLink("mailto:" + url);
            if (!state.md.validateLink(fullUrl)) {
              return false;
            }
            if (!silent) {
              token = state.push("link_open", "a", 1);
              token.attrs = [["href", fullUrl]];
              token.markup = "autolink";
              token.info = "auto";
              token = state.push("text", "", 0);
              token.content = state.md.normalizeLinkText(url);
              token = state.push("link_close", "a", -1);
              token.markup = "autolink";
              token.info = "auto";
            }
            state.pos += url.length + 2;
            return true;
          }
          return false;
        };
      }
    });
    require_html_inline = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/html_inline.js"(exports, module) {
        "use strict";
        var HTML_TAG_RE = require_html_re().HTML_TAG_RE;
        function isLetter(ch) {
          var lc = ch | 32;
          return lc >= 97 && lc <= 122;
        }
        module.exports = function html_inline(state, silent) {
          var ch, match, max2, token, pos = state.pos;
          if (!state.md.options.html) {
            return false;
          }
          max2 = state.posMax;
          if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {
            return false;
          }
          ch = state.src.charCodeAt(pos + 1);
          if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
            return false;
          }
          match = state.src.slice(pos).match(HTML_TAG_RE);
          if (!match) {
            return false;
          }
          if (!silent) {
            token = state.push("html_inline", "", 0);
            token.content = state.src.slice(pos, pos + match[0].length);
          }
          state.pos += match[0].length;
          return true;
        };
      }
    });
    require_entity = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/entity.js"(exports, module) {
        "use strict";
        var entities = require_entities2();
        var has = require_utils().has;
        var isValidEntityCode = require_utils().isValidEntityCode;
        var fromCodePoint = require_utils().fromCodePoint;
        var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
        var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
        module.exports = function entity(state, silent) {
          var ch, code22, match, pos = state.pos, max2 = state.posMax;
          if (state.src.charCodeAt(pos) !== 38) {
            return false;
          }
          if (pos + 1 < max2) {
            ch = state.src.charCodeAt(pos + 1);
            if (ch === 35) {
              match = state.src.slice(pos).match(DIGITAL_RE);
              if (match) {
                if (!silent) {
                  code22 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
                  state.pending += isValidEntityCode(code22) ? fromCodePoint(code22) : fromCodePoint(65533);
                }
                state.pos += match[0].length;
                return true;
              }
            } else {
              match = state.src.slice(pos).match(NAMED_RE);
              if (match) {
                if (has(entities, match[1])) {
                  if (!silent) {
                    state.pending += entities[match[1]];
                  }
                  state.pos += match[0].length;
                  return true;
                }
              }
            }
          }
          if (!silent) {
            state.pending += "&";
          }
          state.pos++;
          return true;
        };
      }
    });
    require_balance_pairs = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/balance_pairs.js"(exports, module) {
        "use strict";
        function processDelimiters(state, delimiters) {
          var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;
          if (!max2)
            return;
          var headerIdx = 0;
          var lastTokenIdx = -2;
          var jumps = [];
          for (closerIdx = 0; closerIdx < max2; closerIdx++) {
            closer = delimiters[closerIdx];
            jumps.push(0);
            if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
              headerIdx = closerIdx;
            }
            lastTokenIdx = closer.token;
            closer.length = closer.length || 0;
            if (!closer.close)
              continue;
            if (!openersBottom.hasOwnProperty(closer.marker)) {
              openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
            }
            minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
            openerIdx = headerIdx - jumps[headerIdx] - 1;
            newMinOpenerIdx = openerIdx;
            for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
              opener = delimiters[openerIdx];
              if (opener.marker !== closer.marker)
                continue;
              if (opener.open && opener.end < 0) {
                isOddMatch = false;
                if (opener.close || closer.open) {
                  if ((opener.length + closer.length) % 3 === 0) {
                    if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                      isOddMatch = true;
                    }
                  }
                }
                if (!isOddMatch) {
                  lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
                  jumps[closerIdx] = closerIdx - openerIdx + lastJump;
                  jumps[openerIdx] = lastJump;
                  closer.open = false;
                  opener.end = closerIdx;
                  opener.close = false;
                  newMinOpenerIdx = -1;
                  lastTokenIdx = -2;
                  break;
                }
              }
            }
            if (newMinOpenerIdx !== -1) {
              openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
            }
          }
        }
        module.exports = function link_pairs(state) {
          var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
          processDelimiters(state, state.delimiters);
          for (curr = 0; curr < max2; curr++) {
            if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
              processDelimiters(state, tokens_meta[curr].delimiters);
            }
          }
        };
      }
    });
    require_text_collapse = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/text_collapse.js"(exports, module) {
        "use strict";
        module.exports = function text_collapse(state) {
          var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;
          for (curr = last = 0; curr < max2; curr++) {
            if (tokens[curr].nesting < 0)
              level--;
            tokens[curr].level = level;
            if (tokens[curr].nesting > 0)
              level++;
            if (tokens[curr].type === "text" && curr + 1 < max2 && tokens[curr + 1].type === "text") {
              tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
            } else {
              if (curr !== last) {
                tokens[last] = tokens[curr];
              }
              last++;
            }
          }
          if (curr !== last) {
            tokens.length = last;
          }
        };
      }
    });
    require_state_inline = __commonJS({
      "node_modules/markdown-it/lib/rules_inline/state_inline.js"(exports, module) {
        "use strict";
        var Token = require_token();
        var isWhiteSpace = require_utils().isWhiteSpace;
        var isPunctChar = require_utils().isPunctChar;
        var isMdAsciiPunct = require_utils().isMdAsciiPunct;
        function StateInline(src, md, env, outTokens) {
          this.src = src;
          this.env = env;
          this.md = md;
          this.tokens = outTokens;
          this.tokens_meta = Array(outTokens.length);
          this.pos = 0;
          this.posMax = this.src.length;
          this.level = 0;
          this.pending = "";
          this.pendingLevel = 0;
          this.cache = {};
          this.delimiters = [];
          this._prev_delimiters = [];
          this.backticks = {};
          this.backticksScanned = false;
        }
        StateInline.prototype.pushPending = function() {
          var token = new Token("text", "", 0);
          token.content = this.pending;
          token.level = this.pendingLevel;
          this.tokens.push(token);
          this.pending = "";
          return token;
        };
        StateInline.prototype.push = function(type, tag2, nesting) {
          if (this.pending) {
            this.pushPending();
          }
          var token = new Token(type, tag2, nesting);
          var token_meta = null;
          if (nesting < 0) {
            this.level--;
            this.delimiters = this._prev_delimiters.pop();
          }
          token.level = this.level;
          if (nesting > 0) {
            this.level++;
            this._prev_delimiters.push(this.delimiters);
            this.delimiters = [];
            token_meta = { delimiters: this.delimiters };
          }
          this.pendingLevel = this.level;
          this.tokens.push(token);
          this.tokens_meta.push(token_meta);
          return token;
        };
        StateInline.prototype.scanDelims = function(start, canSplitWord) {
          var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);
          lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;
          while (pos < max2 && this.src.charCodeAt(pos) === marker) {
            pos++;
          }
          count = pos - start;
          nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;
          isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
          isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
          isLastWhiteSpace = isWhiteSpace(lastChar);
          isNextWhiteSpace = isWhiteSpace(nextChar);
          if (isNextWhiteSpace) {
            left_flanking = false;
          } else if (isNextPunctChar) {
            if (!(isLastWhiteSpace || isLastPunctChar)) {
              left_flanking = false;
            }
          }
          if (isLastWhiteSpace) {
            right_flanking = false;
          } else if (isLastPunctChar) {
            if (!(isNextWhiteSpace || isNextPunctChar)) {
              right_flanking = false;
            }
          }
          if (!canSplitWord) {
            can_open = left_flanking && (!right_flanking || isLastPunctChar);
            can_close = right_flanking && (!left_flanking || isNextPunctChar);
          } else {
            can_open = left_flanking;
            can_close = right_flanking;
          }
          return {
            can_open,
            can_close,
            length: count
          };
        };
        StateInline.prototype.Token = Token;
        module.exports = StateInline;
      }
    });
    require_parser_inline = __commonJS({
      "node_modules/markdown-it/lib/parser_inline.js"(exports, module) {
        "use strict";
        var Ruler = require_ruler();
        var _rules = [
          ["text", require_text()],
          ["newline", require_newline()],
          ["escape", require_escape()],
          ["backticks", require_backticks()],
          ["strikethrough", require_strikethrough().tokenize],
          ["emphasis", require_emphasis().tokenize],
          ["link", require_link()],
          ["image", require_image()],
          ["autolink", require_autolink()],
          ["html_inline", require_html_inline()],
          ["entity", require_entity()]
        ];
        var _rules2 = [
          ["balance_pairs", require_balance_pairs()],
          ["strikethrough", require_strikethrough().postProcess],
          ["emphasis", require_emphasis().postProcess],
          ["text_collapse", require_text_collapse()]
        ];
        function ParserInline() {
          var i;
          this.ruler = new Ruler();
          for (i = 0; i < _rules.length; i++) {
            this.ruler.push(_rules[i][0], _rules[i][1]);
          }
          this.ruler2 = new Ruler();
          for (i = 0; i < _rules2.length; i++) {
            this.ruler2.push(_rules2[i][0], _rules2[i][1]);
          }
        }
        ParserInline.prototype.skipToken = function(state) {
          var ok, i, pos = state.pos, rules = this.ruler.getRules(""), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;
          if (typeof cache[pos] !== "undefined") {
            state.pos = cache[pos];
            return;
          }
          if (state.level < maxNesting) {
            for (i = 0; i < len; i++) {
              state.level++;
              ok = rules[i](state, true);
              state.level--;
              if (ok) {
                break;
              }
            }
          } else {
            state.pos = state.posMax;
          }
          if (!ok) {
            state.pos++;
          }
          cache[pos] = state.pos;
        };
        ParserInline.prototype.tokenize = function(state) {
          var ok, i, rules = this.ruler.getRules(""), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;
          while (state.pos < end) {
            if (state.level < maxNesting) {
              for (i = 0; i < len; i++) {
                ok = rules[i](state, false);
                if (ok) {
                  break;
                }
              }
            }
            if (ok) {
              if (state.pos >= end) {
                break;
              }
              continue;
            }
            state.pending += state.src[state.pos++];
          }
          if (state.pending) {
            state.pushPending();
          }
        };
        ParserInline.prototype.parse = function(str, md, env, outTokens) {
          var i, rules, len;
          var state = new this.State(str, md, env, outTokens);
          this.tokenize(state);
          rules = this.ruler2.getRules("");
          len = rules.length;
          for (i = 0; i < len; i++) {
            rules[i](state);
          }
        };
        ParserInline.prototype.State = require_state_inline();
        module.exports = ParserInline;
      }
    });
    require_re = __commonJS({
      "node_modules/linkify-it/lib/re.js"(exports, module) {
        "use strict";
        module.exports = function(opts) {
          var re = {};
          re.src_Any = require_regex2().source;
          re.src_Cc = require_regex3().source;
          re.src_Z = require_regex5().source;
          re.src_P = require_regex().source;
          re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
          re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
          var text_separators = "[><\uFF5C]";
          re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
          re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
          re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
          re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
          re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
          re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re.src_ZCc + ").|;(?!" + re.src_ZCc + ").|\\!+(?!" + re.src_ZCc + "|[!]).|\\?(?!" + re.src_ZCc + "|[?]).)+|\\/)?";
          re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
          re.src_xn = "xn--[a-z0-9\\-]{1,59}";
          re.src_domain_root = "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
          re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
          re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
          re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
          re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
          re.src_host_strict = re.src_host + re.src_host_terminator;
          re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
          re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
          re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
          re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
          re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
          re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
          re.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
          re.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
          return re;
        };
      }
    });
    require_linkify_it = __commonJS({
      "node_modules/linkify-it/index.js"(exports, module) {
        "use strict";
        function assign(obj) {
          var sources = Array.prototype.slice.call(arguments, 1);
          sources.forEach(function(source) {
            if (!source) {
              return;
            }
            Object.keys(source).forEach(function(key) {
              obj[key] = source[key];
            });
          });
          return obj;
        }
        function _class(obj) {
          return Object.prototype.toString.call(obj);
        }
        function isString2(obj) {
          return _class(obj) === "[object String]";
        }
        function isObject2(obj) {
          return _class(obj) === "[object Object]";
        }
        function isRegExp(obj) {
          return _class(obj) === "[object RegExp]";
        }
        function isFunction2(obj) {
          return _class(obj) === "[object Function]";
        }
        function escapeRE(str) {
          return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        }
        var defaultOptions = {
          fuzzyLink: true,
          fuzzyEmail: true,
          fuzzyIP: false
        };
        function isOptionsObj(obj) {
          return Object.keys(obj || {}).reduce(function(acc, k) {
            return acc || defaultOptions.hasOwnProperty(k);
          }, false);
        }
        var defaultSchemas = {
          "http:": {
            validate: function(text2, pos, self) {
              var tail = text2.slice(pos);
              if (!self.re.http) {
                self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
              }
              if (self.re.http.test(tail)) {
                return tail.match(self.re.http)[0].length;
              }
              return 0;
            }
          },
          "https:": "http:",
          "ftp:": "http:",
          "//": {
            validate: function(text2, pos, self) {
              var tail = text2.slice(pos);
              if (!self.re.no_http) {
                self.re.no_http = new RegExp("^" + self.re.src_auth + "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
              }
              if (self.re.no_http.test(tail)) {
                if (pos >= 3 && text2[pos - 3] === ":") {
                  return 0;
                }
                if (pos >= 3 && text2[pos - 3] === "/") {
                  return 0;
                }
                return tail.match(self.re.no_http)[0].length;
              }
              return 0;
            }
          },
          "mailto:": {
            validate: function(text2, pos, self) {
              var tail = text2.slice(pos);
              if (!self.re.mailto) {
                self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
              }
              if (self.re.mailto.test(tail)) {
                return tail.match(self.re.mailto)[0].length;
              }
              return 0;
            }
          }
        };
        var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
        var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
        function resetScanCache(self) {
          self.__index__ = -1;
          self.__text_cache__ = "";
        }
        function createValidator(re) {
          return function(text2, pos) {
            var tail = text2.slice(pos);
            if (re.test(tail)) {
              return tail.match(re)[0].length;
            }
            return 0;
          };
        }
        function createNormalizer() {
          return function(match, self) {
            self.normalize(match);
          };
        }
        function compile(self) {
          var re = self.re = require_re()(self.__opts__);
          var tlds = self.__tlds__.slice();
          self.onCompile();
          if (!self.__tlds_replaced__) {
            tlds.push(tlds_2ch_src_re);
          }
          tlds.push(re.src_xn);
          re.src_tlds = tlds.join("|");
          function untpl(tpl) {
            return tpl.replace("%TLDS%", re.src_tlds);
          }
          re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
          re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
          re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
          re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
          var aliases = [];
          self.__compiled__ = {};
          function schemaError(name, val) {
            throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
          }
          Object.keys(self.__schemas__).forEach(function(name) {
            var val = self.__schemas__[name];
            if (val === null) {
              return;
            }
            var compiled = { validate: null, link: null };
            self.__compiled__[name] = compiled;
            if (isObject2(val)) {
              if (isRegExp(val.validate)) {
                compiled.validate = createValidator(val.validate);
              } else if (isFunction2(val.validate)) {
                compiled.validate = val.validate;
              } else {
                schemaError(name, val);
              }
              if (isFunction2(val.normalize)) {
                compiled.normalize = val.normalize;
              } else if (!val.normalize) {
                compiled.normalize = createNormalizer();
              } else {
                schemaError(name, val);
              }
              return;
            }
            if (isString2(val)) {
              aliases.push(name);
              return;
            }
            schemaError(name, val);
          });
          aliases.forEach(function(alias) {
            if (!self.__compiled__[self.__schemas__[alias]]) {
              return;
            }
            self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
            self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
          });
          self.__compiled__[""] = { validate: null, normalize: createNormalizer() };
          var slist = Object.keys(self.__compiled__).filter(function(name) {
            return name.length > 0 && self.__compiled__[name];
          }).map(escapeRE).join("|");
          self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "i");
          self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
          self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
          resetScanCache(self);
        }
        function Match(self, shift) {
          var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);
          this.schema = self.__schema__.toLowerCase();
          this.index = start + shift;
          this.lastIndex = end + shift;
          this.raw = text2;
          this.text = text2;
          this.url = text2;
        }
        function createMatch(self, shift) {
          var match = new Match(self, shift);
          self.__compiled__[match.schema].normalize(match, self);
          return match;
        }
        function LinkifyIt(schemas, options) {
          if (!(this instanceof LinkifyIt)) {
            return new LinkifyIt(schemas, options);
          }
          if (!options) {
            if (isOptionsObj(schemas)) {
              options = schemas;
              schemas = {};
            }
          }
          this.__opts__ = assign({}, defaultOptions, options);
          this.__index__ = -1;
          this.__last_index__ = -1;
          this.__schema__ = "";
          this.__text_cache__ = "";
          this.__schemas__ = assign({}, defaultSchemas, schemas);
          this.__compiled__ = {};
          this.__tlds__ = tlds_default;
          this.__tlds_replaced__ = false;
          this.re = {};
          compile(this);
        }
        LinkifyIt.prototype.add = function add(schema, definition) {
          this.__schemas__[schema] = definition;
          compile(this);
          return this;
        };
        LinkifyIt.prototype.set = function set(options) {
          this.__opts__ = assign(this.__opts__, options);
          return this;
        };
        LinkifyIt.prototype.test = function test(text2) {
          this.__text_cache__ = text2;
          this.__index__ = -1;
          if (!text2.length) {
            return false;
          }
          var m, ml, me, len, shift, next, re, tld_pos, at_pos;
          if (this.re.schema_test.test(text2)) {
            re = this.re.schema_search;
            re.lastIndex = 0;
            while ((m = re.exec(text2)) !== null) {
              len = this.testSchemaAt(text2, m[2], re.lastIndex);
              if (len) {
                this.__schema__ = m[2];
                this.__index__ = m.index + m[1].length;
                this.__last_index__ = m.index + m[0].length + len;
                break;
              }
            }
          }
          if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
            tld_pos = text2.search(this.re.host_fuzzy_test);
            if (tld_pos >= 0) {
              if (this.__index__ < 0 || tld_pos < this.__index__) {
                if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
                  shift = ml.index + ml[1].length;
                  if (this.__index__ < 0 || shift < this.__index__) {
                    this.__schema__ = "";
                    this.__index__ = shift;
                    this.__last_index__ = ml.index + ml[0].length;
                  }
                }
              }
            }
          }
          if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
            at_pos = text2.indexOf("@");
            if (at_pos >= 0) {
              if ((me = text2.match(this.re.email_fuzzy)) !== null) {
                shift = me.index + me[1].length;
                next = me.index + me[0].length;
                if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
                  this.__schema__ = "mailto:";
                  this.__index__ = shift;
                  this.__last_index__ = next;
                }
              }
            }
          }
          return this.__index__ >= 0;
        };
        LinkifyIt.prototype.pretest = function pretest(text2) {
          return this.re.pretest.test(text2);
        };
        LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {
          if (!this.__compiled__[schema.toLowerCase()]) {
            return 0;
          }
          return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);
        };
        LinkifyIt.prototype.match = function match(text2) {
          var shift = 0, result = [];
          if (this.__index__ >= 0 && this.__text_cache__ === text2) {
            result.push(createMatch(this, shift));
            shift = this.__last_index__;
          }
          var tail = shift ? text2.slice(shift) : text2;
          while (this.test(tail)) {
            result.push(createMatch(this, shift));
            tail = tail.slice(this.__last_index__);
            shift += this.__last_index__;
          }
          if (result.length) {
            return result;
          }
          return null;
        };
        LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {
          list2 = Array.isArray(list2) ? list2 : [list2];
          if (!keepOld) {
            this.__tlds__ = list2.slice();
            this.__tlds_replaced__ = true;
            compile(this);
            return this;
          }
          this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {
            return el !== arr[idx - 1];
          }).reverse();
          compile(this);
          return this;
        };
        LinkifyIt.prototype.normalize = function normalize(match) {
          if (!match.schema) {
            match.url = "http://" + match.url;
          }
          if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) {
            match.url = "mailto:" + match.url;
          }
        };
        LinkifyIt.prototype.onCompile = function onCompile() {
        };
        module.exports = LinkifyIt;
      }
    });
    require_punycode = __commonJS({
      "node_modules/punycode/punycode.js"(exports, module) {
        "use strict";
        var maxInt = 2147483647;
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128;
        var delimiter = "-";
        var regexPunycode = /^xn--/;
        var regexNonASCII = /[^\0-\x7E]/;
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        var errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        };
        var baseMinusTMin = base - tMin;
        var floor = Math.floor;
        var stringFromCharCode = String.fromCharCode;
        function error22(type) {
          throw new RangeError(errors[type]);
        }
        function map(array, fn) {
          const result = [];
          let length = array.length;
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          const parts = string.split("@");
          let result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          const labels = string.split(".");
          const encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          const output = [];
          let counter = 0;
          const length = string.length;
          while (counter < length) {
            const value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              const extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        var ucs2encode = (array) => String.fromCodePoint(...array);
        var basicToDigit = function(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        };
        var digitToBasic = function(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        };
        var adapt = function(delta, numPoints, firstTime) {
          let k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        };
        var decode = function(input) {
          const output = [];
          const inputLength = input.length;
          let i = 0;
          let n = initialN;
          let bias = initialBias;
          let basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (let j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error22("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            let oldi = i;
            for (let w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error22("invalid-input");
              }
              const digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error22("overflow");
              }
              i += digit * w;
              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              const baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error22("overflow");
              }
              w *= baseMinusT;
            }
            const out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error22("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return String.fromCodePoint(...output);
        };
        var encode = function(input) {
          const output = [];
          input = ucs2decode(input);
          let inputLength = input.length;
          let n = initialN;
          let delta = 0;
          let bias = initialBias;
          for (const currentValue of input) {
            if (currentValue < 128) {
              output.push(stringFromCharCode(currentValue));
            }
          }
          let basicLength = output.length;
          let handledCPCount = basicLength;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            let m = maxInt;
            for (const currentValue of input) {
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
            const handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error22("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (const currentValue of input) {
              if (currentValue < n && ++delta > maxInt) {
                error22("overflow");
              }
              if (currentValue == n) {
                let q = delta;
                for (let k = base; ; k += base) {
                  const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  const qMinusT = q - t;
                  const baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        };
        var toUnicode = function(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        };
        var toASCII = function(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        };
        var punycode = {
          "version": "2.1.0",
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        module.exports = punycode;
      }
    });
    require_default = __commonJS({
      "node_modules/markdown-it/lib/presets/default.js"(exports, module) {
        "use strict";
        module.exports = {
          options: {
            html: false,
            xhtmlOut: false,
            breaks: false,
            langPrefix: "language-",
            linkify: false,
            typographer: false,
            quotes: "\u201C\u201D\u2018\u2019",
            highlight: null,
            maxNesting: 100
          },
          components: {
            core: {},
            block: {},
            inline: {}
          }
        };
      }
    });
    require_zero = __commonJS({
      "node_modules/markdown-it/lib/presets/zero.js"(exports, module) {
        "use strict";
        module.exports = {
          options: {
            html: false,
            xhtmlOut: false,
            breaks: false,
            langPrefix: "language-",
            linkify: false,
            typographer: false,
            quotes: "\u201C\u201D\u2018\u2019",
            highlight: null,
            maxNesting: 20
          },
          components: {
            core: {
              rules: [
                "normalize",
                "block",
                "inline"
              ]
            },
            block: {
              rules: [
                "paragraph"
              ]
            },
            inline: {
              rules: [
                "text"
              ],
              rules2: [
                "balance_pairs",
                "text_collapse"
              ]
            }
          }
        };
      }
    });
    require_commonmark = __commonJS({
      "node_modules/markdown-it/lib/presets/commonmark.js"(exports, module) {
        "use strict";
        module.exports = {
          options: {
            html: true,
            xhtmlOut: true,
            breaks: false,
            langPrefix: "language-",
            linkify: false,
            typographer: false,
            quotes: "\u201C\u201D\u2018\u2019",
            highlight: null,
            maxNesting: 20
          },
          components: {
            core: {
              rules: [
                "normalize",
                "block",
                "inline"
              ]
            },
            block: {
              rules: [
                "blockquote",
                "code",
                "fence",
                "heading",
                "hr",
                "html_block",
                "lheading",
                "list",
                "reference",
                "paragraph"
              ]
            },
            inline: {
              rules: [
                "autolink",
                "backticks",
                "emphasis",
                "entity",
                "escape",
                "html_inline",
                "image",
                "link",
                "newline",
                "text"
              ],
              rules2: [
                "balance_pairs",
                "emphasis",
                "text_collapse"
              ]
            }
          }
        };
      }
    });
    require_lib = __commonJS({
      "node_modules/markdown-it/lib/index.js"(exports, module) {
        "use strict";
        var utils = require_utils();
        var helpers = require_helpers();
        var Renderer = require_renderer();
        var ParserCore = require_parser_core();
        var ParserBlock = require_parser_block();
        var ParserInline = require_parser_inline();
        var LinkifyIt = require_linkify_it();
        var mdurl = require_mdurl();
        var punycode = require_punycode();
        var config = {
          default: require_default(),
          zero: require_zero(),
          commonmark: require_commonmark()
        };
        var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
        var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
        function validateLink(url) {
          var str = url.trim().toLowerCase();
          return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
        }
        var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
        function normalizeLink(url) {
          var parsed = mdurl.parse(url, true);
          if (parsed.hostname) {
            if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
              try {
                parsed.hostname = punycode.toASCII(parsed.hostname);
              } catch (er) {
              }
            }
          }
          return mdurl.encode(mdurl.format(parsed));
        }
        function normalizeLinkText(url) {
          var parsed = mdurl.parse(url, true);
          if (parsed.hostname) {
            if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
              try {
                parsed.hostname = punycode.toUnicode(parsed.hostname);
              } catch (er) {
              }
            }
          }
          return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
        }
        function MarkdownIt3(presetName, options) {
          if (!(this instanceof MarkdownIt3)) {
            return new MarkdownIt3(presetName, options);
          }
          if (!options) {
            if (!utils.isString(presetName)) {
              options = presetName || {};
              presetName = "default";
            }
          }
          this.inline = new ParserInline();
          this.block = new ParserBlock();
          this.core = new ParserCore();
          this.renderer = new Renderer();
          this.linkify = new LinkifyIt();
          this.validateLink = validateLink;
          this.normalizeLink = normalizeLink;
          this.normalizeLinkText = normalizeLinkText;
          this.utils = utils;
          this.helpers = utils.assign({}, helpers);
          this.options = {};
          this.configure(presetName);
          if (options) {
            this.set(options);
          }
        }
        MarkdownIt3.prototype.set = function(options) {
          utils.assign(this.options, options);
          return this;
        };
        MarkdownIt3.prototype.configure = function(presets) {
          var self = this, presetName;
          if (utils.isString(presets)) {
            presetName = presets;
            presets = config[presetName];
            if (!presets) {
              throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
            }
          }
          if (!presets) {
            throw new Error("Wrong `markdown-it` preset, can't be empty");
          }
          if (presets.options) {
            self.set(presets.options);
          }
          if (presets.components) {
            Object.keys(presets.components).forEach(function(name) {
              if (presets.components[name].rules) {
                self[name].ruler.enableOnly(presets.components[name].rules);
              }
              if (presets.components[name].rules2) {
                self[name].ruler2.enableOnly(presets.components[name].rules2);
              }
            });
          }
          return this;
        };
        MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {
          var result = [];
          if (!Array.isArray(list2)) {
            list2 = [list2];
          }
          ["core", "block", "inline"].forEach(function(chain) {
            result = result.concat(this[chain].ruler.enable(list2, true));
          }, this);
          result = result.concat(this.inline.ruler2.enable(list2, true));
          var missed = list2.filter(function(name) {
            return result.indexOf(name) < 0;
          });
          if (missed.length && !ignoreInvalid) {
            throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
          }
          return this;
        };
        MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {
          var result = [];
          if (!Array.isArray(list2)) {
            list2 = [list2];
          }
          ["core", "block", "inline"].forEach(function(chain) {
            result = result.concat(this[chain].ruler.disable(list2, true));
          }, this);
          result = result.concat(this.inline.ruler2.disable(list2, true));
          var missed = list2.filter(function(name) {
            return result.indexOf(name) < 0;
          });
          if (missed.length && !ignoreInvalid) {
            throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
          }
          return this;
        };
        MarkdownIt3.prototype.use = function(plugin4) {
          var args = [this].concat(Array.prototype.slice.call(arguments, 1));
          plugin4.apply(plugin4, args);
          return this;
        };
        MarkdownIt3.prototype.parse = function(src, env) {
          if (typeof src !== "string") {
            throw new Error("Input data should be a String");
          }
          var state = new this.core.State(src, this, env);
          this.core.process(state);
          return state.tokens;
        };
        MarkdownIt3.prototype.render = function(src, env) {
          env = env || {};
          return this.renderer.render(this.parse(src, env), this.options, env);
        };
        MarkdownIt3.prototype.parseInline = function(src, env) {
          var state = new this.core.State(src, this, env);
          state.inlineMode = true;
          this.core.process(state);
          return state.tokens;
        };
        MarkdownIt3.prototype.renderInline = function(src, env) {
          env = env || {};
          return this.renderer.render(this.parseInline(src, env), this.options, env);
        };
        module.exports = MarkdownIt3;
      }
    });
    require_markdown_it = __commonJS({
      "node_modules/markdown-it/index.js"(exports, module) {
        "use strict";
        module.exports = require_lib();
      }
    });
    base_exports = {};
    __export2(base_exports, {
      getAstValues: () => getAstValues,
      isAst: () => isAst,
      isFunction: () => isFunction,
      isVariable: () => isVariable,
      resolve: () => resolve
    });
    Tag2 = class {
      constructor(name = "div", attributes = {}, children = []) {
        this.$$mdtype = "Tag";
        this.name = name;
        this.attributes = attributes;
        this.children = children;
      }
    };
    Tag2.isTag = (tag2) => {
      return !!(tag2?.$$mdtype === "Tag");
    };
    Class = class {
      validate(value, _config, key) {
        if (typeof value === "string" || typeof value === "object")
          return [];
        return [
          {
            id: "attribute-type-invalid",
            level: "error",
            message: `Attribute '${key}' must be type 'string | object'`
          }
        ];
      }
      transform(value) {
        if (!value || typeof value === "string")
          return value;
        const classes = [];
        for (const [k, v] of Object.entries(value ?? {}))
          if (v)
            classes.push(k);
        return classes.join(" ");
      }
    };
    Id = class {
      validate(value) {
        if (typeof value === "string" && value.match(/^[a-zA-Z]/))
          return [];
        return [
          {
            id: "attribute-value-invalid",
            level: "error",
            message: "The 'id' attribute must start with a letter"
          }
        ];
      }
    };
    import_tag = __toModule(require_tag());
    Variable = class {
      constructor(path = []) {
        this.$$mdtype = "Variable";
        this.path = path;
      }
      resolve({ variables } = {}) {
        return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key) => obj[key], variables);
      }
    };
    Function2 = class {
      constructor(name, parameters) {
        this.$$mdtype = "Function";
        this.name = name;
        this.parameters = parameters;
      }
      resolve(config = {}) {
        const fn = config?.functions?.[this.name];
        if (!fn)
          return null;
        const parameters = resolve(this.parameters, config);
        return fn.transform?.(parameters, config);
      }
    };
    (function(STATES2) {
      STATES2[STATES2["normal"] = 0] = "normal";
      STATES2[STATES2["string"] = 1] = "string";
      STATES2[STATES2["escape"] = 2] = "escape";
    })(STATES || (STATES = {}));
    OPEN = "{%";
    CLOSE = "%}";
    IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;
    globalAttributes = {
      class: { type: Class, render: true },
      id: { type: Id, render: true }
    };
    transformer_default = {
      findSchema(node2, { nodes = {}, tags: tags2 = {} } = {}) {
        return node2.tag ? tags2[node2.tag] : nodes[node2.type];
      },
      attributes(node2, config = {}) {
        const schema = this.findSchema(node2, config) ?? {};
        const output = {};
        const attrs = { ...globalAttributes, ...schema.attributes };
        for (const [key, attr] of Object.entries(attrs)) {
          if (attr.render == false)
            continue;
          const name = typeof attr.render === "string" ? attr.render : key;
          let value = node2.attributes[key];
          if (typeof attr.type === "function") {
            const instance = new attr.type();
            if (instance.transform) {
              value = instance.transform(value, config);
            }
          }
          value = value === void 0 ? attr.default : value;
          if (value === void 0)
            continue;
          output[name] = value;
        }
        if (schema.slots) {
          for (const [key, slot2] of Object.entries(schema.slots)) {
            if (slot2.render === false)
              continue;
            const name = typeof slot2.render === "string" ? slot2.render : key;
            if (node2.slots[key])
              output[name] = this.node(node2.slots[key], config);
          }
        }
        return output;
      },
      children(node2, config = {}) {
        const children = node2.children.flatMap((child) => this.node(child, config));
        if (children.some(isPromise)) {
          return Promise.all(children);
        }
        return children;
      },
      node(node2, config = {}) {
        const schema = this.findSchema(node2, config) ?? {};
        if (schema && schema.transform instanceof Function)
          return schema.transform(node2, config);
        const children = this.children(node2, config);
        if (!schema || !schema.render)
          return children;
        const attributes = this.attributes(node2, config);
        if (isPromise(attributes) || isPromise(children)) {
          return Promise.all([attributes, children]).then((values) => new Tag2(schema.render, ...values));
        }
        return new Tag2(schema.render, attributes, children);
      }
    };
    Node = class {
      constructor(type = "node", attributes = {}, children = [], tag2) {
        this.$$mdtype = "Node";
        this.errors = [];
        this.lines = [];
        this.inline = false;
        this.attributes = attributes;
        this.children = children;
        this.type = type;
        this.tag = tag2;
        this.annotations = [];
        this.slots = {};
      }
      *walk() {
        for (const child of [...Object.values(this.slots), ...this.children]) {
          yield child;
          yield* child.walk();
        }
      }
      push(node2) {
        this.children.push(node2);
      }
      resolve(config = {}) {
        return Object.assign(new Node(), this, {
          children: this.children.map((child) => child.resolve(config)),
          attributes: resolve(this.attributes, config),
          slots: Object.fromEntries(Object.entries(this.slots).map(([name, slot2]) => [
            name,
            slot2.resolve(config)
          ]))
        });
      }
      findSchema(config = {}) {
        return transformer_default.findSchema(this, config);
      }
      transformAttributes(config = {}) {
        return transformer_default.attributes(this, config);
      }
      transformChildren(config) {
        return transformer_default.children(this, config);
      }
      transform(config) {
        return transformer_default.node(this, config);
      }
    };
    AstTypes = {
      Function: Function2,
      Node,
      Variable
    };
    ast_default = {
      ...AstTypes,
      ...base_exports,
      fromJSON
    };
    SPACE = " ";
    SEP = ", ";
    NL = "\n";
    OL = ".";
    UL = "-";
    MAX_TAG_OPENING_WIDTH = 80;
    WRAPPING_TYPES = ["strong", "em", "s"];
    max = (a, b) => Math.max(a, b);
    increment = (o, n = 2) => ({
      ...o,
      indent: (o.indent || 0) + n
    });
    tagIf = {
      attributes: {
        primary: { type: Object, render: false }
      },
      transform(node2, config) {
        const conditions = renderConditions(node2);
        for (const { condition, children } of conditions)
          if (truthy(condition)) {
            const nodes = children.flatMap((child) => child.transform(config));
            if (nodes.some(isPromise)) {
              return Promise.all(nodes).then((nodes2) => nodes2.flat());
            }
            return nodes;
          }
        return [];
      }
    };
    tagElse = {
      selfClosing: true,
      attributes: {
        primary: { type: Object, render: false }
      }
    };
    and = {
      transform(parameters) {
        return Object.values(parameters).every((x) => truthy(x));
      }
    };
    or = {
      transform(parameters) {
        return Object.values(parameters).find((x) => truthy(x)) !== void 0;
      }
    };
    not = {
      parameters: {
        0: { required: true }
      },
      transform(parameters) {
        return !truthy(parameters[0]);
      }
    };
    equals = {
      transform(parameters) {
        const values = Object.values(parameters);
        return values.every((v) => v === values[0]);
      }
    };
    debug = {
      transform(parameters) {
        return JSON.stringify(parameters[0], null, 2);
      }
    };
    defaultFn = {
      transform(parameters) {
        return parameters[0] === void 0 ? parameters[1] : parameters[0];
      }
    };
    functions_default = { and, or, not, equals, default: defaultFn, debug };
    transforms_default = [transform];
    mappings = {
      ordered_list: "list",
      bullet_list: "list",
      code_inline: "code",
      list_item: "item",
      variable: "text"
    };
    schema_exports = {};
    __export2(schema_exports, {
      blockquote: () => blockquote,
      code: () => code,
      comment: () => comment,
      document: () => document2,
      em: () => em,
      error: () => error,
      fence: () => fence,
      hardbreak: () => hardbreak,
      heading: () => heading,
      hr: () => hr,
      image: () => image,
      inline: () => inline,
      item: () => item,
      link: () => link,
      list: () => list,
      node: () => node,
      paragraph: () => paragraph,
      s: () => s,
      softbreak: () => softbreak,
      strong: () => strong,
      table: () => table,
      tbody: () => tbody,
      td: () => td,
      text: () => text,
      th: () => th,
      thead: () => thead,
      tr: () => tr
    });
    document2 = {
      render: "article",
      children: [
        "heading",
        "paragraph",
        "image",
        "table",
        "tag",
        "fence",
        "blockquote",
        "comment",
        "list",
        "hr"
      ],
      attributes: {
        frontmatter: { render: false }
      }
    };
    heading = {
      children: ["inline"],
      attributes: {
        level: { type: Number, render: false, required: true }
      },
      transform(node2, config) {
        return new Tag2(`h${node2.attributes["level"]}`, node2.transformAttributes(config), node2.transformChildren(config));
      }
    };
    paragraph = {
      render: "p",
      children: ["inline"]
    };
    image = {
      render: "img",
      attributes: {
        src: { type: String, required: true },
        alt: { type: String },
        title: { type: String }
      }
    };
    fence = {
      render: "pre",
      attributes: {
        content: { type: String, render: false, required: true },
        language: { type: String, render: "data-language" },
        process: { type: Boolean, render: false, default: true }
      },
      transform(node2, config) {
        const attributes = node2.transformAttributes(config);
        const children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];
        return new Tag2("pre", attributes, children);
      }
    };
    blockquote = {
      render: "blockquote",
      children: [
        "heading",
        "paragraph",
        "image",
        "table",
        "tag",
        "fence",
        "blockquote",
        "list",
        "hr"
      ]
    };
    item = {
      render: "li",
      children: [
        "inline",
        "heading",
        "paragraph",
        "image",
        "table",
        "tag",
        "fence",
        "blockquote",
        "list",
        "hr"
      ]
    };
    list = {
      children: ["item"],
      attributes: {
        ordered: { type: Boolean, render: false, required: true },
        start: { type: Number },
        marker: { type: String, render: false }
      },
      transform(node2, config) {
        return new Tag2(node2.attributes.ordered ? "ol" : "ul", node2.transformAttributes(config), node2.transformChildren(config));
      }
    };
    hr = {
      render: "hr"
    };
    table = {
      render: "table"
    };
    td = {
      render: "td",
      children: [
        "inline",
        "heading",
        "paragraph",
        "image",
        "table",
        "tag",
        "fence",
        "blockquote",
        "list",
        "hr"
      ],
      attributes: {
        align: { type: String },
        colspan: { type: Number, render: "colSpan" },
        rowspan: { type: Number, render: "rowSpan" }
      }
    };
    th = {
      render: "th",
      attributes: {
        width: { type: String },
        align: { type: String },
        colspan: { type: Number, render: "colSpan" },
        rowspan: { type: Number, render: "rowSpan" }
      }
    };
    tr = {
      render: "tr",
      children: ["th", "td"]
    };
    tbody = {
      render: "tbody",
      children: ["tr", "tag"]
    };
    thead = {
      render: "thead",
      children: ["tr"]
    };
    strong = {
      render: "strong",
      children: ["em", "s", "link", "code", "text", "tag"],
      attributes: {
        marker: { type: String, render: false }
      }
    };
    em = {
      render: "em",
      children: ["strong", "s", "link", "code", "text", "tag"],
      attributes: {
        marker: { type: String, render: false }
      }
    };
    s = {
      render: "s",
      children: ["strong", "em", "link", "code", "text", "tag"]
    };
    inline = {
      children: [
        "strong",
        "em",
        "s",
        "code",
        "text",
        "tag",
        "link",
        "image",
        "hardbreak",
        "softbreak",
        "comment"
      ]
    };
    link = {
      render: "a",
      children: ["strong", "em", "s", "code", "text", "tag"],
      attributes: {
        href: { type: String, required: true },
        title: { type: String }
      }
    };
    code = {
      render: "code",
      attributes: {
        content: { type: String, render: false, required: true }
      },
      transform(node2, config) {
        const attributes = node2.transformAttributes(config);
        return new Tag2("code", attributes, [node2.attributes.content]);
      }
    };
    text = {
      attributes: {
        content: { type: String, required: true }
      },
      transform(node2) {
        return node2.attributes.content;
      }
    };
    hardbreak = {
      render: "br"
    };
    softbreak = {
      transform() {
        return " ";
      }
    };
    comment = {
      attributes: {
        content: { type: String, required: true }
      }
    };
    error = {};
    node = {};
    import_markdown_it = __toModule(require_markdown_it());
    ({ escapeHtml } = (0, import_markdown_it.default)().utils);
    voidElements = /* @__PURE__ */ new Set([
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    renderers_default = { html: render, react: dynamic, reactStatic };
    PartialFile = class {
      validate(file, config) {
        const { partials = {} } = config;
        const partial22 = partials[file];
        if (!partial22)
          return [
            {
              id: "attribute-value-invalid",
              level: "error",
              message: `Partial \`${file}\` not found. The 'file' attribute must be set in \`config.partials\``
            }
          ];
        return [];
      }
    };
    partial = {
      inline: false,
      selfClosing: true,
      attributes: {
        file: { type: PartialFile, render: false, required: true },
        variables: { type: Object, render: false }
      },
      transform(node2, config) {
        const { partials = {} } = config;
        const { file, variables } = node2.attributes;
        const partial22 = partials[file];
        if (!partial22)
          return null;
        const scopedConfig = {
          ...config,
          variables: {
            ...config.variables,
            ...variables,
            ["$$partial:filename"]: file
          }
        };
        const transformChildren = (part) => part.resolve(scopedConfig).transformChildren(scopedConfig);
        return Array.isArray(partial22) ? partial22.flatMap(transformChildren) : transformChildren(partial22);
      }
    };
    table2 = {
      children: ["table"],
      inline: false
    };
    slot = {
      attributes: {
        primary: { type: String, required: true }
      }
    };
    tags_default = {
      else: tagElse,
      if: tagIf,
      partial,
      slot,
      table: table2
    };
    import_lib = __toModule(require_lib());
    import_tag7 = __toModule(require_tag());
    fence2 = "---";
    OPEN2 = "<!--";
    CLOSE2 = "-->";
    Tokenizer = class {
      constructor(config = {}) {
        this.parser = new import_lib.default(config);
        this.parser.use(plugin, "annotations", {});
        this.parser.use(plugin2, "frontmatter", {});
        this.parser.disable([
          "lheading",
          "code"
        ]);
        if (config.allowComments)
          this.parser.use(plugin3, "comments", {});
      }
      tokenize(content) {
        return this.parser.parse(content.toString(), {});
      }
    };
    TypeMappings = {
      String,
      Number,
      Array,
      Object,
      Boolean
    };
    tokenizer = new Tokenizer();
    Markdoc = class {
      constructor(config) {
        this.parse = parse3;
        this.resolve = (content) => resolve2(content, this.config);
        this.transform = (content) => transform2(content, this.config);
        this.validate = (content) => validate(content, this.config);
        this.config = config;
      }
    };
    Markdoc.nodes = schema_exports;
    Markdoc.tags = tags_default;
    Markdoc.functions = functions_default;
    Markdoc.globalAttributes = globalAttributes;
    Markdoc.renderers = renderers_default;
    Markdoc.transforms = transforms_default;
    Markdoc.Ast = ast_default;
    Markdoc.Tag = Tag2;
    Markdoc.Tokenizer = Tokenizer;
    Markdoc.parseTags = parseTags;
    Markdoc.transformer = transformer_default;
    Markdoc.validator = validator;
    Markdoc.parse = parse3;
    Markdoc.transform = transform2;
    Markdoc.validate = validate;
    Markdoc.createElement = createElement;
    Markdoc.truthy = truthy;
    Markdoc.format = format;
  }
});

// node_modules/@redocly/theme/src/markdoc/attributes/code-snippet-file.ts
var CodeSnippetFile;
var init_code_snippet_file = __esm({
  "node_modules/@redocly/theme/src/markdoc/attributes/code-snippet-file.ts"() {
    CodeSnippetFile = class {
      validate(_value) {
        return [];
      }
    };
    CodeSnippetFile.resolver = "codeSnippetFile";
  }
});

// node_modules/@redocly/theme/src/markdoc/attributes/img-src.ts
var ImageSrc;
var init_img_src = __esm({
  "node_modules/@redocly/theme/src/markdoc/attributes/img-src.ts"() {
    ImageSrc = class {
      validate(_value) {
        return [];
      }
    };
    ImageSrc.resolver = "imageSrc";
  }
});

// node_modules/@redocly/theme/src/markdoc/attributes/img-srcset.ts
var ImageSrcSet;
var init_img_srcset = __esm({
  "node_modules/@redocly/theme/src/markdoc/attributes/img-srcset.ts"() {
    ImageSrcSet = class {
      validate(_value) {
        return [];
      }
    };
    ImageSrcSet.resolver = "imageSrcSet";
  }
});

// node_modules/@redocly/theme/src/markdoc/attributes/relative-path.ts
var RelativePath;
var init_relative_path = __esm({
  "node_modules/@redocly/theme/src/markdoc/attributes/relative-path.ts"() {
    RelativePath = class {
      validate(_value) {
        return [];
      }
    };
    RelativePath.resolver = "relativePath";
  }
});

// node_modules/@redocly/theme/src/markdoc/attributes/svg-content.ts
var SvgContent;
var init_svg_content = __esm({
  "node_modules/@redocly/theme/src/markdoc/attributes/svg-content.ts"() {
    SvgContent = class {
      validate(_value) {
        return [];
      }
    };
    SvgContent.resolver = "svgContent";
  }
});

// node_modules/@redocly/theme/src/icons/InformationFilledIcon/InformationFilledIcon.tsx
import React11 from "react";
var Icon8, InformationFilledIcon;
var init_InformationFilledIcon = __esm({
  "node_modules/@redocly/theme/src/icons/InformationFilledIcon/InformationFilledIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon8 = (props) => /* @__PURE__ */ React11.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React11.createElement("path", { d: "M8 1C6.61553 1 5.26216 1.41054 4.11101 2.17971C2.95987 2.94888 2.06266 4.04213 1.53285 5.32122C1.00303 6.6003 0.86441 8.00776 1.13451 9.36563C1.4046 10.7235 2.07129 11.9708 3.05026 12.9497C4.02922 13.9287 5.2765 14.5954 6.63437 14.8655C7.99224 15.1356 9.3997 14.997 10.6788 14.4672C11.9579 13.9373 13.0511 13.0401 13.8203 11.889C14.5895 10.7378 15 9.38447 15 8C15 6.14348 14.2625 4.36301 12.9497 3.05025C11.637 1.7375 9.85652 1 8 1ZM8 4C8.14834 4 8.29334 4.04399 8.41668 4.1264C8.54002 4.20881 8.63615 4.32594 8.69291 4.46299C8.74968 4.60003 8.76453 4.75083 8.73559 4.89632C8.70665 5.0418 8.63522 5.17544 8.53033 5.28033C8.42544 5.38522 8.29181 5.45665 8.14632 5.48559C8.00083 5.51453 7.85004 5.49968 7.71299 5.44291C7.57595 5.38614 7.45881 5.29001 7.3764 5.16668C7.29399 5.04334 7.25 4.89834 7.25 4.75C7.25 4.55109 7.32902 4.36032 7.46967 4.21967C7.61033 4.07902 7.80109 4 8 4ZM10 12.0625H6V10.9375H7.4375V8.0625H6.5V6.9375H8.5625V10.9375H10V12.0625Z" }));
    InformationFilledIcon = styled_components_esm_default(Icon8).attrs(() => ({
      "data-component-name": "icons/InformationFilledIcon/InformationFilledIcon"
    })).withConfig({
      displayName: "InformationFilledIcon",
      componentId: "sc-1kx2qvg-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Admonition/Admonition.tsx
import React12 from "react";
function Admonition({
  type = "info",
  name,
  children,
  className,
  "data-source": dataSource,
  "data-hash": dataHash
}) {
  const Icon80 = IconsMap[type] || IconsMap["info"];
  return /* @__PURE__ */ React12.createElement(AdmonitionWrapper, { type, className, "data-component-name": "Admonition/Admonition", "data-source": dataSource, "data-hash": dataHash }, /* @__PURE__ */ React12.createElement(Icon80, { color: `--admonition-${type}-icon-color` }), /* @__PURE__ */ React12.createElement(TextContainer, null, name ? /* @__PURE__ */ React12.createElement(Heading, { type }, name) : null, children ? /* @__PURE__ */ React12.createElement(Content, null, children) : null));
}
var IconsMap, Content, AdmonitionWrapper, TextContainer, Heading;
var init_Admonition = __esm({
  "node_modules/@redocly/theme/src/components/Admonition/Admonition.tsx"() {
    init_styled_components_esm();
    init_WarningFilledIcon();
    init_CheckmarkFilledIcon();
    init_CloseFilledIcon();
    init_InformationFilledIcon();
    IconsMap = {
      warning: WarningFilledIcon,
      success: CheckmarkFilledIcon,
      danger: CloseFilledIcon,
      info: InformationFilledIcon
    };
    Content = styled_components_esm_default.div.withConfig({
      displayName: "Admonition__Content",
      componentId: "sc-y8uca0-0"
    })(["& > p:first-child{margin-top:0;}"]);
    AdmonitionWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Admonition__AdmonitionWrapper",
      componentId: "sc-y8uca0-1"
    })(["display:flex;flex-direction:row;gap:var(--spacing-base);margin:var(--admonition-margin-vertical) var(--admonition-margin-horizontal);padding:var(--admonition-padding-vertical-xs) var(--admonition-padding-horizontal);border-radius:var(--admonition-border-radius);font-size:var(--admonition-font-size);font-weight:var(--admonition-font-weight);line-height:var(--admonition-line-height);print-color-adjust:exact;-webkit-print-color-adjust:exact;", ";&:has(", "){padding:var(--admonition-padding-vertical-md) var(--admonition-padding-horizontal);}&:not(:has(", ")){--admonition-heading-font-size:var(--admonition-font-size);--admonition-heading-line-height:var(--admonition-line-height);--admonition-icon-size:16px;align-items:center;gap:calc(var(--spacing-xxs) * 1.5);}svg{width:var(--admonition-icon-size);height:var(--admonition-icon-size);flex-shrink:0;fill:", ";background-image:", ";background-repeat:no-repeat;background-position:center;background-size:contain;}"], ({
      type
    }) => Ne(["background-color:var(--admonition-", "-bg-color);color:var(--admonition-", "-text-color);border-left:var(--admonition-", "-border);"], type, type, type), Content, Content, ({
      type
    }) => `var(--admonition-${type}-icon-color)`, ({
      type
    }) => `var(--admonition-${type}-icon)`);
    TextContainer = styled_components_esm_default.div.withConfig({
      displayName: "Admonition__TextContainer",
      componentId: "sc-y8uca0-2"
    })(["display:flex;flex-direction:column;gap:var(--spacing-unit);width:100%;"]);
    Heading = styled_components_esm_default.div.withConfig({
      displayName: "Admonition__Heading",
      componentId: "sc-y8uca0-3"
    })(["letter-spacing:var(--admonition-heading-letter-spacing);color:", ";&&{font-size:var(--admonition-heading-font-size);font-weight:var(--admonition-heading-font-weight);line-height:var(--admonition-heading-line-height);text-transform:var(--admonition-heading-transform);}"], ({
      type
    }) => `var(--admonition-${type}-heading-text-color)`);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Admonition/Admonition.tsx
import React13 from "react";
function Admonition2(props) {
  return /* @__PURE__ */ React13.createElement(Admonition, { ...props });
}
var init_Admonition2 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Admonition/Admonition.tsx"() {
    init_Admonition();
  }
});

// node_modules/@redocly/theme/src/markdoc/components/InlineSvg/InlineSvg.tsx
import * as React14 from "react";
function InlineSvg({
  fileRawContent,
  className
}) {
  return /* @__PURE__ */ React14.createElement(
    "span",
    {
      className,
      "data-component-name": "Markdoc/InlineSvg/InlineSvg",
      dangerouslySetInnerHTML: { __html: fileRawContent }
    }
  );
}
var init_InlineSvg = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/InlineSvg/InlineSvg.tsx"() {
  }
});

// node_modules/@redocly/theme/src/components/Feedback/ReportDialog.tsx
import React15 from "react";
import { useLocation } from "react-router-dom";
function ReportDialog({
  location,
  settings,
  onSubmit,
  onCancel,
  submitFeedback,
  lang
}) {
  const {
    label
  } = settings;
  const {
    useTelemetry
  } = useThemeHooks();
  const {
    pathname
  } = useLocation();
  const telemetry = useTelemetry();
  return /* @__PURE__ */ React15.createElement(Portal, null, /* @__PURE__ */ React15.createElement(ReportDialogWrapper, { className: "scroll-lock", "data-component-name": "Feedback/ReportDialog" }, /* @__PURE__ */ React15.createElement(Comment, { settings: {
    label
  }, onSubmit: async (value) => {
    await submitFeedback({
      type: "problem",
      values: value,
      location,
      path: pathname,
      lang
    });
    telemetry.send("code_snippet_reported", {});
    onSubmit();
  }, isDialog: true, onCancel })));
}
var ReportDialogWrapper;
var init_ReportDialog = __esm({
  "node_modules/@redocly/theme/src/components/Feedback/ReportDialog.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Comment();
    init_Portal();
    ReportDialogWrapper = styled_components_esm_default.div.withConfig({
      displayName: "ReportDialog__ReportDialogWrapper",
      componentId: "sc-qvpcnc-0"
    })(["font-family:var(--font-family-base);position:fixed;top:0;left:0;width:100vw;height:100vh;background:var(--bg-color-modal-overlay);z-index:var(--z-index-overlay);display:flex;align-items:center;justify-content:center;& > *{background:var(--modal-bg-color);box-shadow:var(--modal-box-shadow);padding:var(--spacing-base);margin:var(--spacing-base);max-width:var(--feedback-report-dialog-max-width);width:var(--feedback-report-dialog-width);max-height:var(--feedback-report-dialog-max-height);}"]);
  }
});

// node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockContainer.tsx
import React16 from "react";
function CodeBlockContainer(props) {
  return /* @__PURE__ */ React16.createElement(CodeBlockContainerComponent, { ...props, "data-component-name": "CodeBlock/CodeBlockContainer" });
}
var CodeBlockContainerComponent;
var init_CodeBlockContainer = __esm({
  "node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockContainer.tsx"() {
    init_styled_components_esm();
    init_utils();
    CodeBlockContainerComponent = styled_components_esm_default.pre.withConfig({
      displayName: "CodeBlockContainer__CodeBlockContainerComponent",
      componentId: "sc-wgyn12-0"
    })(["&&{overflow-x:auto;font-family:var(--code-block-font-family);line-height:var(--code-block-line-height);font-weight:var(--code-block-font-weight);padding:var(--code-block-padding);margin:var(--code-block-margin);color:var(--code-block-text-color);font-size:var(--code-block-font-size);white-space:", ";max-height:", ";word-break:var(--code-block-word-break,initial);pre,code{font-family:var(--code-block-font-family);}}.highlighted{background:var(--layer-color-hover);margin-left:calc(var(--spacing-sm) * -1);padding-left:var(--spacing-sm);width:calc(100% + var(--spacing-sm));display:inline-block;&.error{background:var(--color-raspberry-2);}&.warning{background:var(--color-carrot-2);}}[data-line-number]{&::before{content:attr(data-line-number);display:inline-block;min-width:2em;padding-right:0.8em;text-align:right;pointer-events:none;user-select:none;}}.has-diff{> .line{&::before{content:attr(data-line-number) '  ';display:inline-block;padding-right:0.4em;text-align:right;pointer-events:none;user-select:none;}&[data-line-number]::before{min-width:3em;}}}.diff{margin-left:calc(var(--spacing-sm) * -1);padding-left:var(--spacing-sm);width:calc(100% + var(--spacing-sm));display:inline-block;&.add{background:var(--color-grass-2);&:before{content:attr(data-line-number) ' +';color:var(--color-grass-7);}}&.remove{background:var(--color-raspberry-2);&:before{content:attr(data-line-number) ' -';color:var(--color-raspberry-7);}}}.highlighted-word{background:var(--color-carrot-2);border:1px solid var(--color-carrot-5);border-radius:4px;}.has-focused{.line{margin-left:calc(var(--spacing-sm) * -1);padding-left:var(--spacing-sm);width:calc(100% + var(--spacing-sm));display:inline-block;opacity:0.7;filter:blur(0.095rem);transition:filter 0.35s,opacity 0.35s;&.focused{opacity:1;filter:blur(0);}}&:hover{.line{opacity:1;filter:blur(0);}}}.shiki{&.theme{display:inline-block;width:100%;&.tree-view-root{display:flex;flex-direction:column;}}}. .line{display:inline-block;}.tree-view-line{display:flex;}.tree-view-branch{color:var(--code-block-tree-view-lines-color);}.tree-view-file{display:inline-flex;&::before{content:'\\ea01';margin-left:0.3rem;margin-right:0.5rem;font-family:'TreeViewIcons';}&.no-file{&::before{content:'';margin-right:0;}}&.ext-folder{&::before{content:'\\ea02';}}&.ext-img,&.ext-png,&.ext-jpg,&.ext-jpeg,&.ext-gif,&.ext-svg{&::before{content:'\\ea03';}}&.ext-mp2,&.ext-mp3,&.ext-wav,&.ext-ogg,&.ext-flac{&::before{content:'\\ea04';}}&.ext-mp4,&.ext-mkv,&.ext-avi,&.ext-mov,&.ext-wmv,&.ext-flv{&::before{content:'\\ea05';}}&.ext-txt,&.ext-text,&.ext-md,&.ext-markdown{&::before{content:'\\ea06';}}&.ext-js,&.ext-ts,&.ext-jsx,&.ext-tsx,&.ext-json,&.ext-yaml,&.ext-yml,&.ext-xml,&.ext-html,&.ext-css,&.ext-scss,&.ext-less,&.ext-sass,&.ext-java,&.ext-c,&.ext-cpp,&.ext-cs,&.ext-php,&.ext-py,&.ext-rb,&.ext-go,&.ext-swift,&.ext-sql,&.ext-perl,&.ext-lua,&.ext-scala,&.ext-sh{&::before{content:'\\ea07';}}&.ext-zip,&.ext-rar,&.ext-tar,&.ext-gz,&.ext-iso{&::before{content:'\\ea08';}}&.ext-pdf,&.ext-PDF{&::before{content:'\\ea09';}}&.ext-excel,&.ext-xls,&.ext-xlsx{&::before{content:'\\ea0a';}}&.ext-powerpoint,&.ext-ppt,&.ext-pptx{&::before{content:'\\ea0b';}}&.ext-doc,&.ext-docx,&.ext-rtf{&::before{content:'\\ea0c';}}}", " ", ""], ({
      wrapContents
    }) => wrapContents ? "pre-wrap" : "var(--code-wrap, pre)", ({
      maxHeight
    }) => maxHeight ? maxHeight : "var(--code-block-max-height, 600px);", generateCodeBlockTokens(), ({
      hideCodeColors
    }) => hideCodeColors && Ne([".line-number:not(.highlighted),.line-number:not(.highlighted) > span,.line-number:not(.highlighted) > span > span{color:grey;}"]));
  }
});

// node_modules/@redocly/theme/src/icons/ChevronLeftIcon/ChevronLeftIcon.tsx
import React17 from "react";
var Icon9, ChevronLeftIcon;
var init_ChevronLeftIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ChevronLeftIcon/ChevronLeftIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon9 = (props) => /* @__PURE__ */ React17.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React17.createElement("path", { d: "M5 8L10 3L10.7 3.7L6.4 8L10.7 12.3L10 13L5 8Z" }));
    ChevronLeftIcon = styled_components_esm_default(Icon9).attrs(() => ({
      "data-component-name": "icons/ChevronLeftIcon/ChevronLeftIcon"
    })).withConfig({
      displayName: "ChevronLeftIcon",
      componentId: "sc-1fnvms0-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockTabs.tsx
import React18, { useEffect as useEffect2, useRef as useRef2 } from "react";
function CodeBlockTabs({
  tabs: tabs2
}) {
  const containerRef = useRef2(null);
  const tabRefs = useRef2([]);
  const {
    showControls,
    handlePrevTab,
    handleNextTab
  } = useCodeBlockTabsControls({
    tabs: tabs2,
    containerRef,
    tabRefs
  });
  useEffect2(() => {
    const activeTab = tabRefs.current.find((tab3) => tab3?.dataset.name === tabs2.activeTabName);
    if (activeTab) {
      activeTab.scrollIntoView({
        block: "nearest",
        inline: "center"
      });
    }
  }, [tabs2.activeTabName]);
  return /* @__PURE__ */ React18.createElement(CodeBlockTabsWrapper, { ref: containerRef, "data-component-name": "CodeBlock/CodeBlockTabs" }, /* @__PURE__ */ React18.createElement(ShadowWrapper, null, /* @__PURE__ */ React18.createElement(Tabs, null, tabs2.files.map(({
    name
  }, i) => /* @__PURE__ */ React18.createElement(Tab, { ref: (el) => tabRefs.current[i] = el, "data-name": name, active: name === tabs2.activeTabName, key: name, onClick: () => tabs2.handleTabSwitch(name) }, /* @__PURE__ */ React18.createElement(DocumentBlankIcon, null), name)))), showControls && /* @__PURE__ */ React18.createElement(Controls, null, /* @__PURE__ */ React18.createElement(ControlButton, { size: "small", onClick: handlePrevTab, "data-testid": "prev-button" }, /* @__PURE__ */ React18.createElement(ChevronLeftIcon, null)), /* @__PURE__ */ React18.createElement(ControlButton, { size: "small", onClick: handleNextTab, "data-testid": "next-button" }, /* @__PURE__ */ React18.createElement(ChevronRightIcon, null))));
}
var CodeBlockTabsWrapper, Controls, ControlButton, ShadowWrapper, Tabs, Tab;
var init_CodeBlockTabs = __esm({
  "node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockTabs.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Button();
    init_DocumentBlankIcon();
    init_ChevronLeftIcon();
    init_ChevronRightIcon();
    CodeBlockTabsWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockTabs__CodeBlockTabsWrapper",
      componentId: "sc-1gkv5vy-0"
    })(["display:flex;overflow:hidden;padding:var(--spacing-xxs) 0;"]);
    Controls = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockTabs__Controls",
      componentId: "sc-1gkv5vy-1"
    })(["display:flex;gap:calc(var(--spacing-xxs) / 2);"]);
    ControlButton = styled_components_esm_default(Button).withConfig({
      displayName: "CodeBlockTabs__ControlButton",
      componentId: "sc-1gkv5vy-2"
    })(["padding:0 calc(var(--spacing-xxs) / 2);& + &{margin-left:0;}"]);
    ShadowWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockTabs__ShadowWrapper",
      componentId: "sc-1gkv5vy-3"
    })(["position:relative;overflow:hidden;:after{position:absolute;content:'';width:16px;height:100%;right:0;top:0;background:var(--bg-raised-gradient);}"]);
    Tabs = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockTabs__Tabs",
      componentId: "sc-1gkv5vy-4"
    })(["display:flex;overflow-x:auto;padding-right:var(--spacing-base);&::-webkit-scrollbar{display:none;}"]);
    Tab = styled_components_esm_default.button.withConfig({
      displayName: "CodeBlockTabs__Tab",
      componentId: "sc-1gkv5vy-5"
    })(["display:inline-flex;align-items:center;padding:0 var(--spacing-sm);background-color:transparent;height:24px;border-radius:var(--border-radius);cursor:pointer;gap:var(--spacing-xs);color:var(--text-color-secondary);", ""], ({
      active
    }) => active ? Ne(["color:var(--text-color-primary);background-color:var(--tab-bg-color-filled);"]) : Ne(["&:hover{color:var(--text-color-primary);}"]));
  }
});

// node_modules/@redocly/theme/src/icons/DeselectIcon/DeselectIcon.tsx
import React19 from "react";
var Icon10, DeselectIcon;
var init_DeselectIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DeselectIcon/DeselectIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon10 = (props) => /* @__PURE__ */ React19.createElement("svg", { "data-component-name": "icons/DeselectIcon", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React19.createElement("path", { d: "M14.4966 10.5H9.49658V11.5H14.4966V10.5Z", fill: "currentColor" }), /* @__PURE__ */ React19.createElement("path", { d: "M10.5 3.64746H1.5V4.64746H10.5V3.64746Z", fill: "currentColor" }), /* @__PURE__ */ React19.createElement("path", { d: "M10.5 6.64746H1.5V7.64746H10.5V6.64746Z", fill: "currentColor" }), /* @__PURE__ */ React19.createElement("path", { d: "M7.5 9.64746H1.5V10.6475H7.5V9.64746Z", fill: "currentColor" }));
    DeselectIcon = styled_components_esm_default(Icon10).attrs(() => ({
      "data-component-name": "icons/DeselectIcon/DeselectIcon"
    })).withConfig({
      displayName: "DeselectIcon",
      componentId: "sc-1kx4d1y-0"
    })(["path{fill:", ";}height:", ";width:", ";vertical-align:middle;"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "1.3em", ({
      size
    }) => size || "1.3em");
  }
});

// node_modules/@redocly/theme/src/icons/MaximizeIcon/MaximizeIcon.tsx
import React20 from "react";
var Icon11, MaximizeIcon;
var init_MaximizeIcon = __esm({
  "node_modules/@redocly/theme/src/icons/MaximizeIcon/MaximizeIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon11 = (props) => /* @__PURE__ */ React20.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React20.createElement("path", { d: "M10 1V2H13.293L9 6.291L9.707 7L14 2.707V6H15V1H10Z" }), /* @__PURE__ */ React20.createElement("path", { d: "M7 9.708L6.296 9L2 13.293V10H1V15H6V14H2.707L7 9.708Z" }));
    MaximizeIcon = styled_components_esm_default(Icon11).attrs(() => ({
      "data-component-name": "icons/MaximizeIcon/MaximizeIcon"
    })).withConfig({
      displayName: "MaximizeIcon",
      componentId: "sc-1xjuoj3-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/MinimizeIcon/MinimizeIcon.tsx
import React21 from "react";
var Icon12, MinimizeIcon;
var init_MinimizeIcon = __esm({
  "node_modules/@redocly/theme/src/icons/MinimizeIcon/MinimizeIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon12 = (props) => /* @__PURE__ */ React21.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React21.createElement("path", { d: "M2 9V10H5.293L1 14.291L1.707 15L6 10.707V14H7V9H2Z" }), /* @__PURE__ */ React21.createElement("path", { d: "M15 1.708L14.296 1L10 5.293V2H9V7H14V6H10.707L15 1.708Z" }));
    MinimizeIcon = styled_components_esm_default(Icon12).attrs(() => ({
      "data-component-name": "icons/MinimizeIcon/MinimizeIcon"
    })).withConfig({
      displayName: "MinimizeIcon",
      componentId: "sc-5epvri-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SelectIcon/SelectIcon.tsx
import React22 from "react";
var Icon13, SelectIcon;
var init_SelectIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SelectIcon/SelectIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon13 = (props) => /* @__PURE__ */ React22.createElement("svg", { "data-component-name": "icons/SelectIcon", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React22.createElement("path", { d: "M10.5 3.64746H1.5V4.64746H10.5V3.64746Z", fill: "currentColor" }), /* @__PURE__ */ React22.createElement("path", { d: "M10.5 6.64746H1.5V7.64746H10.5V6.64746Z", fill: "currentColor" }), /* @__PURE__ */ React22.createElement("path", { d: "M7.5 9.64746H1.5V10.6475H7.5V9.64746Z", fill: "currentColor" }), /* @__PURE__ */ React22.createElement("path", { d: "M10.5 10.9425L9.205 9.64746L8.5 10.3525L10.5 12.3525L14.5 8.35246L13.795 7.64746L10.5 10.9425Z", fill: "currentColor" }));
    SelectIcon = styled_components_esm_default(Icon13).attrs(() => ({
      "data-component-name": "icons/SelectIcon/SelectIcon"
    })).withConfig({
      displayName: "SelectIcon",
      componentId: "sc-1j8gnyy-0"
    })(["path{fill:", ";}height:", ";width:", ";vertical-align:middle;"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "1.3em", ({
      size
    }) => size || "1.3em");
  }
});

// node_modules/@redocly/theme/src/icons/WarningSquareIcon/WarningSquareIcon.tsx
import React23 from "react";
var Icon14, WarningSquareIcon;
var init_WarningSquareIcon = __esm({
  "node_modules/@redocly/theme/src/icons/WarningSquareIcon/WarningSquareIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon14 = (props) => /* @__PURE__ */ React23.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React23.createElement("path", { d: "M8 10C7.85166 10 7.70666 10.044 7.58332 10.1264C7.45999 10.2088 7.36386 10.3259 7.30709 10.463C7.25032 10.6 7.23547 10.7508 7.26441 10.8963C7.29335 11.0418 7.36478 11.1754 7.46967 11.2803C7.57456 11.3852 7.7082 11.4566 7.85368 11.4856C7.99917 11.5145 8.14997 11.4997 8.28701 11.4429C8.42406 11.3861 8.54119 11.29 8.6236 11.1667C8.70601 11.0433 8.75 10.8983 8.75 10.75C8.75 10.5511 8.67098 10.3603 8.53033 10.2197C8.38968 10.079 8.19891 10 8 10Z" }), /* @__PURE__ */ React23.createElement("path", { d: "M8.5 4.5H7.5V9H8.5V4.5Z" }), /* @__PURE__ */ React23.createElement("path", { d: "M13 14H3C2.73488 13.9997 2.4807 13.8942 2.29323 13.7068C2.10576 13.5193 2.0003 13.2651 2 13V3C2.0003 2.73488 2.10576 2.4807 2.29323 2.29323C2.4807 2.10576 2.73488 2.0003 3 2H13C13.2651 2.0003 13.5193 2.10576 13.7068 2.29323C13.8942 2.4807 13.9997 2.73488 14 3V13C13.9997 13.2651 13.8942 13.5193 13.7068 13.7068C13.5193 13.8942 13.2651 13.9997 13 14ZM3 3V13H13.0006L13 3H3Z" }));
    WarningSquareIcon = styled_components_esm_default(Icon14).attrs(() => ({
      "data-component-name": "icons/WarningSquareIcon/WarningSquareIcon"
    })).withConfig({
      displayName: "WarningSquareIcon",
      componentId: "sc-1qfipv9-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockControls.tsx
import React24 from "react";
function CodeBlockControls({
  children,
  className,
  title,
  controls,
  tabs: tabs2
}) {
  const {
    codeSnippet: codeSnippet2
  } = useThemeConfig();
  const {
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  const controlsType = codeSnippet2?.elementFormat || "icon";
  const {
    copy,
    expand,
    collapse,
    select: select2,
    deselect,
    report
  } = controls || {
    copy: null,
    expand: null,
    collapse: null,
    select: null,
    deselect: null,
    report: null
  };
  const defaultControls = controls ? /* @__PURE__ */ React24.createElement(React24.Fragment, null, title && /* @__PURE__ */ React24.createElement(Title, null, title), tabs2 && /* @__PURE__ */ React24.createElement(CodeBlockTabs, { tabs: tabs2 }), /* @__PURE__ */ React24.createElement(ControlsWrapper, null, report && !report?.props?.hide ? /* @__PURE__ */ React24.createElement(ControlButton2, { variant: "text", size: "small", "data-testid": "report-button", icon: controlsType === "icon" ? /* @__PURE__ */ React24.createElement(WarningSquareIcon, { size: "18px" }) : void 0, ...report.props }, controlsType != "icon" && (report.props?.buttonText || "Report")) : null, expand && !codeSnippet2?.expand?.hide ? /* @__PURE__ */ React24.createElement(ControlButton2, { variant: "text", size: "small", "data-testid": "expand-all", icon: controlsType === "icon" ? /* @__PURE__ */ React24.createElement(MaximizeIcon, null) : void 0, onClick: expand?.onClick }, controlsType !== "icon" && (expand?.label || "Expand all")) : null, collapse && !codeSnippet2?.collapse?.hide ? /* @__PURE__ */ React24.createElement(ControlButton2, { variant: "text", size: "small", "data-testid": "collapse-all", icon: controlsType === "icon" ? /* @__PURE__ */ React24.createElement(MinimizeIcon, null) : void 0, onClick: collapse?.onClick }, controlsType !== "icon" && (expand?.label || "Collapse all")) : null, select2 ? /* @__PURE__ */ React24.createElement(ControlButton2, { variant: "text", size: "small", "data-testid": "select-all", icon: controlsType === "icon" ? /* @__PURE__ */ React24.createElement(SelectIcon, null) : void 0, onClick: select2?.onClick }, controlsType !== "icon" && select2?.label ? select2.label : "Select all") : null, deselect ? /* @__PURE__ */ React24.createElement(ControlButton2, { variant: "text", size: "small", "data-testid": "clear-all", icon: controlsType === "icon" ? /* @__PURE__ */ React24.createElement(DeselectIcon, null) : void 0, onClick: deselect?.onClick }, controlsType !== "icon" && deselect?.label ? deselect.label : "Clear all") : null, copy && !codeSnippet2?.copy?.hide ? /* @__PURE__ */ React24.createElement(CopyButton, { data: copy.data, "data-source": copy.dataSource, "data-hash": copy.dataHash, type: controlsType, toasterPlacement: copy.toasterPlacement, toasterDuration: copy.toasterDuration, buttonText: copy.label, onCopyClick: () => {
    copy?.onClick?.();
    telemetry?.send?.("code_snippet_copied", {});
  } }) : null)) : null;
  return children || controls ? /* @__PURE__ */ React24.createElement(ContainerWrapper, { "data-component-name": "CodeBlock/CodeBlockControls", className }, children ? children : defaultControls) : null;
}
var ContainerWrapper, Title, ControlsWrapper, ControlButton2;
var init_CodeBlockControls = __esm({
  "node_modules/@redocly/theme/src/components/CodeBlock/CodeBlockControls.tsx"() {
    init_styled_components_esm();
    init_CodeBlockTabs();
    init_CopyButton();
    init_hooks();
    init_DeselectIcon();
    init_MaximizeIcon();
    init_MinimizeIcon();
    init_SelectIcon();
    init_WarningSquareIcon();
    init_Button();
    ContainerWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockControls__ContainerWrapper",
      componentId: "sc-gulk3f-0"
    })(["display:grid;justify-content:end;font-size:var(--code-block-controls-font-size);font-family:var(--code-block-controls-font-family);background-color:var(--code-block-controls-bg-color);padding:var(--code-block-controls-padding);border-bottom:var(--code-block-controls-border);line-height:var(--line-height-lg);min-height:var(--control-height-base);grid-template-columns:1fr auto;"]);
    Title = styled_components_esm_default.span.withConfig({
      displayName: "CodeBlockControls__Title",
      componentId: "sc-gulk3f-1"
    })(["display:flex;align-items:center;color:var(--code-block-controls-text-color);width:100%;font-weight:var(--code-block-controls-font-weight);"]);
    ControlsWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlockControls__ControlsWrapper",
      componentId: "sc-gulk3f-2"
    })(["display:flex;text-align:right;align-items:center;gap:var(--spacing-xxs);justify-content:end;margin-left:var(--spacing-sm);"]);
    ControlButton2 = styled_components_esm_default(Button).withConfig({
      displayName: "CodeBlockControls__ControlButton",
      componentId: "sc-gulk3f-3"
    })(["& + &{margin-left:0;}"]);
  }
});

// node_modules/@redocly/theme/src/components/CodeBlock/CodeBlock.tsx
import React25, { useEffect as useEffect3, useState } from "react";
function CodeBlock({
  lang,
  source,
  externalSource,
  header,
  dataTestId = "source-code",
  codeBlockRef,
  highlightedHtml,
  withLineNumbers,
  startLineNumber,
  className,
  codeBlockMaxHeight,
  tabs: tabs2,
  hideCodeColors,
  wrapContents = false,
  children,
  ...rest
}) {
  const [sourceCode, setSourceCode] = useState((source || externalSource?.sample?.get?.(externalSource)) ?? "");
  const {
    useCodeHighlight
  } = useThemeHooks();
  const {
    highlight
  } = useCodeHighlight() || {};
  const highlightedCode = highlightedHtml ? withLineNumbers ? addLineNumbers(highlightedHtml, startLineNumber) : highlightedHtml : children ? null : highlight?.(sourceCode, lang, {
    withLineNumbers,
    startLineNumber,
    highlight: rest["data-highlight"]
  });
  useEffect3(() => {
    const _source = source || externalSource?.sample?.get?.(externalSource);
    if (_source) {
      setSourceCode(_source);
    }
  }, [source, externalSource]);
  const {
    reportDialog,
    reportButton
  } = useReportDialog();
  useModalScrollLock(Boolean(reportDialog.visible));
  const controls = header?.controls && {
    ...header?.controls,
    report: {
      ...header?.controls?.report,
      props: reportButton.props
    },
    copy: header?.controls?.copy ? {
      ...header?.controls?.copy,
      data: sourceCode
    } : void 0
  };
  return /* @__PURE__ */ React25.createElement(CodeBlockWrapper, { "data-component-name": "CodeBlock/CodeBlock", className }, /* @__PURE__ */ React25.createElement(ContainerWrapper2, null, /* @__PURE__ */ React25.createElement(CodeBlockControls, { tabs: tabs2, className: header?.className, title: header?.title, controls }), /* @__PURE__ */ React25.createElement(
    CodeBlockContainer,
    {
      ref: codeBlockRef,
      withLineNumbers,
      dangerouslySetInnerHTML: highlightedCode ? {
        __html: highlightedCode
      } : void 0,
      suppressHydrationWarning: true,
      "data-testid": dataTestId,
      hideCodeColors,
      maxHeight: codeBlockMaxHeight,
      wrapContents,
      tabIndex: 0
    },
    children
  ), reportDialog.visible && /* @__PURE__ */ React25.createElement(ReportDialog, { ...reportDialog.props, location: sourceCode, lang })));
}
var ContainerWrapper2, CodeBlockWrapper;
var init_CodeBlock = __esm({
  "node_modules/@redocly/theme/src/components/CodeBlock/CodeBlock.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_hooks();
    init_ReportDialog();
    init_CodeBlockContainer();
    init_CodeBlockControls();
    ContainerWrapper2 = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlock__ContainerWrapper",
      componentId: "sc-1xpvhna-0"
    })(["display:grid;"]);
    CodeBlockWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CodeBlock__CodeBlockWrapper",
      componentId: "sc-1xpvhna-1"
    })(["border:1px solid var(--border-color-secondary);border-radius:var(--border-radius);background-color:var(--code-block-bg-color);margin:0 0 var(--spacing-sm);--md-pre-margin:0;"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/MarkdocExample/MarkdocExample.tsx
import * as React26 from "react";
function MarkdocExample(props) {
  const {
    language,
    rawContent,
    renderDemo,
    demoContent,
    withLabels,
    codeLabel,
    resultLabel,
    title
  } = props;
  const renderLabels = renderDemo ? withLabels === void 0 ? true : withLabels : false;
  return /* @__PURE__ */ React26.createElement("div", { "data-component-name": "Markdoc/MarkdocExample/MarkdocExample" }, renderLabels ? /* @__PURE__ */ React26.createElement(Label, null, codeLabel ? codeLabel : "Code:") : null, /* @__PURE__ */ React26.createElement(CodeBlock, { lang: language, source: rawContent, header: {
    title,
    controls: {
      copy: {}
    }
  } }), renderDemo ? /* @__PURE__ */ React26.createElement(React26.Fragment, null, renderLabels ? /* @__PURE__ */ React26.createElement(Label, null, resultLabel ? resultLabel : "Result:") : null, demoContent) : null);
}
var Label;
var init_MarkdocExample = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/MarkdocExample/MarkdocExample.tsx"() {
    init_styled_components_esm();
    init_CodeBlock();
    Label = styled_components_esm_default.div.withConfig({
      displayName: "MarkdocExample__Label",
      componentId: "sc-dh3ls7-0"
    })(["margin:10px 0;"]);
  }
});

// node_modules/@redocly/theme/src/icons/LinkIcon/LinkIcon.tsx
import React27 from "react";
var Icon15, LinkIcon;
var init_LinkIcon = __esm({
  "node_modules/@redocly/theme/src/icons/LinkIcon/LinkIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon15 = (props) => /* @__PURE__ */ React27.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React27.createElement("path", { d: "M14.625 3.37992C14.3463 3.10024 14.0151 2.87833 13.6505 2.72692C13.2858 2.5755 12.8949 2.49756 12.5 2.49756C12.1052 2.49756 11.7142 2.5755 11.3496 2.72692C10.9849 2.87833 10.6537 3.10024 10.375 3.37992L11.085 4.08992C11.2712 3.90378 11.4922 3.75611 11.7354 3.65537C11.9786 3.55463 12.2393 3.50278 12.5025 3.50278C12.7658 3.50278 13.0264 3.55463 13.2697 3.65537C13.5129 3.75611 13.7339 3.90378 13.92 4.08992C14.1062 4.27607 14.2538 4.49706 14.3546 4.74028C14.4553 4.98349 14.5072 5.24417 14.5072 5.50742C14.5072 5.77068 14.4553 6.03135 14.3546 6.27457C14.2538 6.51778 14.1062 6.73878 13.92 6.92492L9.92002 10.9249C9.54473 11.3009 9.03548 11.5123 8.50428 11.5128C7.97309 11.5133 7.46346 11.3027 7.08752 10.9274C6.71157 10.5521 6.5001 10.0429 6.49964 9.51169C6.49917 8.98049 6.70973 8.47087 7.08502 8.09492L7.79002 7.38492L7.08502 6.67492L6.37502 7.38492C6.09534 7.66363 5.87343 7.99481 5.72201 8.35947C5.57059 8.72412 5.49265 9.11508 5.49265 9.50992C5.49265 9.90477 5.57059 10.2957 5.72201 10.6604C5.87343 11.025 6.09534 11.3562 6.37502 11.6349C6.94076 12.1934 7.70505 12.5045 8.50002 12.4999C8.89637 12.5016 9.28913 12.4246 9.65558 12.2736C10.022 12.1225 10.3549 11.9004 10.635 11.6199L14.635 7.61992C15.1955 7.0561 15.5093 6.29286 15.5074 5.49785C15.5055 4.70285 15.1881 3.9411 14.625 3.37992Z" }), /* @__PURE__ */ React27.createElement("path", { d: "M2.09502 12.4099C1.90831 12.2241 1.76016 12.0032 1.65907 11.7599C1.55798 11.5167 1.50593 11.2559 1.50593 10.9924C1.50593 10.729 1.55798 10.4682 1.65907 10.2249C1.76016 9.98165 1.90831 9.76076 2.09502 9.57492L6.09502 5.57492C6.28085 5.38822 6.50174 5.24007 6.745 5.13898C6.98826 5.03788 7.24909 4.98584 7.51252 4.98584C7.77594 4.98584 8.03677 5.03788 8.28003 5.13898C8.52329 5.24007 8.74418 5.38822 8.93002 5.57492C9.11554 5.76222 9.26158 5.98486 9.35949 6.22963C9.4574 6.47441 9.50519 6.73634 9.50002 6.99992C9.50154 7.26433 9.45062 7.52641 9.35021 7.771C9.2498 8.0156 9.10188 8.23786 8.91502 8.42492L7.85502 9.49992L8.56501 10.2099L9.62502 9.14992C10.1893 8.58568 10.5063 7.82039 10.5063 7.02242C10.5063 6.22446 10.1893 5.45917 9.62502 4.89492C9.06077 4.33068 8.29548 4.01368 7.49752 4.01368C6.69955 4.01368 5.93426 4.33068 5.37002 4.89492L1.37002 8.89492C1.08958 9.17373 0.867037 9.50522 0.715177 9.87033C0.563316 10.2354 0.485138 10.627 0.485138 11.0224C0.485138 11.4179 0.563316 11.8094 0.715177 12.1745C0.867037 12.5396 1.08958 12.8711 1.37002 13.1499C1.93943 13.7042 2.70546 14.0099 3.50002 13.9999C4.30157 14.0007 5.07087 13.6843 5.64002 13.1199L4.93002 12.4099C4.74418 12.5966 4.52329 12.7448 4.28003 12.8459C4.03677 12.947 3.77594 12.999 3.51252 12.999C3.24909 12.999 2.98826 12.947 2.745 12.8459C2.50174 12.7448 2.28085 12.5966 2.09502 12.4099Z" }));
    LinkIcon = styled_components_esm_default(Icon15).attrs(() => ({
      "data-component-name": "icons/LinkIcon/LinkIcon"
    })).withConfig({
      displayName: "LinkIcon",
      componentId: "sc-q8trda-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Heading/Heading.tsx
import React28, { createElement as createElement4 } from "react";
function Heading2({
  level,
  id,
  children,
  "data-source": dataSource,
  "data-hash": dataHash,
  className
}) {
  const linkEl = /* @__PURE__ */ React28.createElement(
    "a",
    {
      "aria-label": `link  to ${id}`,
      href: `#${id}`,
      className: concatClassNames("anchor", "before")
    },
    /* @__PURE__ */ React28.createElement(LinkIcon, { size: "14px", color: "--heading-anchor-color" })
  );
  return createElement4(
    `h${level}`,
    {
      id,
      className: concatClassNames("heading-anchor", mdClassName, className),
      "data-component-name": "Markdoc/Heading/Heading",
      "data-source": dataSource,
      "data-hash": dataHash
    },
    /* @__PURE__ */ React28.createElement(React28.Fragment, null, linkEl, children)
  );
}
var mdClassName;
var init_Heading = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Heading/Heading.tsx"() {
    init_utils();
    init_LinkIcon();
    mdClassName = "md";
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Mermaid/Mermaid.tsx
import React29 from "react";
function Mermaid({
  diagramHtml,
  "data-source": dataSource,
  "data-hash": dataHash,
  className
}) {
  return /* @__PURE__ */ React29.createElement(Wrapper, { className: concatClassNames("mermaid-wrapper", className), dangerouslySetInnerHTML: {
    __html: diagramHtml
  }, "data-component-name": "Markdoc/Mermaid/Mermaid", "data-source": dataSource, "data-hash": dataHash });
}
var Wrapper;
var init_Mermaid = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Mermaid/Mermaid.tsx"() {
    init_styled_components_esm();
    init_utils();
    Wrapper = styled_components_esm_default.div.withConfig({
      displayName: "Mermaid__Wrapper",
      componentId: "sc-mqjde-0"
    })(["background-color:var(--mermaid-bg-color);border-radius:var(--mermaid-border-radius);*{font-family:var(--mermaid-font-family) !important;}.mermaid > svg{font-size:var(--font-size-base) !important;max-width:100%;}"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/HtmlBlock/HtmlBlock.tsx
import * as React30 from "react";
function HtmlBlock({ rawHtml }) {
  return /* @__PURE__ */ React30.createElement("div", { dangerouslySetInnerHTML: { __html: rawHtml } });
}
var init_HtmlBlock = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/HtmlBlock/HtmlBlock.tsx"() {
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Tabs/Tab.tsx
import React31 from "react";
function TabComponent(props) {
  const {
    label,
    isActive,
    setRef,
    onClick,
    onKeyDown,
    tabId
  } = props;
  return /* @__PURE__ */ React31.createElement(TabItem, { "data-component-name": "Markdoc/Tabs/Tab" }, /* @__PURE__ */ React31.createElement(TabButtonLink, { $active: isActive, id: `tab-${tabId}`, role: "tab", "aria-controls": `panel-${tabId}`, "aria-selected": isActive ? "true" : "false", tabIndex: isActive ? 0 : -1, "data-label": label, ref: setRef, onKeyDown, onClick }, label));
}
var Tab2, TabItem, TabButtonLink;
var init_Tab = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Tabs/Tab.tsx"() {
    init_styled_components_esm();
    Tab2 = styled_components_esm_default(TabComponent).withConfig({
      displayName: "Tab",
      componentId: "sc-1t23rs1-0"
    })([""]);
    TabItem = styled_components_esm_default.li.withConfig({
      displayName: "Tab__TabItem",
      componentId: "sc-1t23rs1-1"
    })(["display:inline-flex;list-style:none;cursor:pointer;align-items:center;&:first-child{margin-bottom:0px;}*:focus-visible{outline:-webkit-focus-ring-color auto 1px;}"]);
    TabButtonLink = styled_components_esm_default.button.withConfig({
      displayName: "Tab__TabButtonLink",
      componentId: "sc-1t23rs1-2"
    })(["all:unset;flex-grow:1;cursor:pointer;width:100%;text-align:center;color:var(--md-tabs-tab-text-color);padding:var(--md-tabs-tab-padding);font-size:var(--md-tabs-tab-font-size);font-family:var(--md-tabs-tab-font-family);font-style:var(--md-tabs-tab-font-style);font-weight:var(--md-tabs-tab-font-weight);background-color:var(--md-tabs-tab-bg-color);border-radius:var(--md-tabs-tab-border-radius);border:var(--md-tabs-tab-border);border-width:var(--md-tabs-tab-border-width);", ""], ({
      $active
    }) => $active ? Ne(["color:var(--md-tabs-active-tab-text-color);font-size:var(--md-tabs-active-tab-font-size);font-family:var(--md-tabs-active-tab-font-family);font-style:var(--md-tabs-active-tab-font-style);font-weight:var(--md-tabs-active-tab-font-weight);background-color:var(--md-tabs-active-tab-bg-color);border-radius:var(--md-tabs-active-tab-border-radius);padding:var(--md-tabs-active-tab-padding);border:solid var(--md-tabs-active-tab-border-color);border-width:var(--md-tabs-active-tab-border-width);"]) : Ne(["&:hover{color:var(--md-tabs-hover-tab-text-color);font-size:var(--md-tabs-hover-tab-font-size);font-family:var(--md-tabs-hover-tab-font-family);font-style:var(--md-tabs-hover-tab-font-style);font-weight:var(--md-tabs-hover-tab-font-weight);background-color:var(--md-tabs-hover-tab-bg-color);border-radius:var(--md-tabs-hover-tab-border-radius);padding:var(--md-tabs-hover-tab-padding);border:solid var(--md-tabs-hover-tab-border-color);border-width:var(--md-tabs-hover-tab-border-width);}"]));
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Tabs/Tabs.tsx
import React32 from "react";
function Tabs2({
  children,
  className
}) {
  const childrenArray = React32.Children.toArray(children);
  const initialTab = childrenArray[0]?.props.label ?? "";
  const {
    activeTab,
    setTabRef,
    onTabClick,
    handleKeyboard,
    getTabId
  } = useTabs({
    initialTab,
    totalTabs: childrenArray.length
  });
  return /* @__PURE__ */ React32.createElement(TabsContainer, { "data-component-name": "Markdoc/Tabs/Tabs", className }, /* @__PURE__ */ React32.createElement(TabList, { role: "tablist" }, childrenArray.map((child, index) => {
    const {
      label,
      onClick
    } = child.props;
    const tabId = getTabId(label, index);
    return /* @__PURE__ */ React32.createElement(Tab2, { key: `key-${tabId}`, tabId, label, isActive: activeTab === label, setRef: (el) => setTabRef(el, index), onKeyDown: (event) => handleKeyboard(event, index), onClick: () => {
      onTabClick(label);
      onClick?.();
    } });
  })), childrenArray.map((child, index) => {
    const {
      label
    } = child.props;
    const tabId = getTabId(label, index);
    return label === activeTab ? /* @__PURE__ */ React32.createElement(TabContent, { key: `content-${tabId}`, id: `panel-${tabId}`, "aria-labelledby": `tab-${tabId}`, tabIndex: 0, role: "tabpanel" }, child.props.children) : null;
  }));
}
var TabsContainer, TabList, TabContent;
var init_Tabs = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Tabs/Tabs.tsx"() {
    init_styled_components_esm();
    init_Tab();
    init_hooks();
    TabsContainer = styled_components_esm_default.div.withConfig({
      displayName: "Tabs__TabsContainer",
      componentId: "sc-1u2kfjg-0"
    })(["color:var(--md-tabs-container-text-color);font-size:var(--md-tabs-container-font-size);font-family:var(--md-tabs-container-font-family);font-style:var(--md-tabs-container-font-style);font-weight:var(--md-tabs-container-font-weight);background-color:var(--md-tabs-container-bg-color);margin:var(--md-tabs-container-margin);padding:var(--md-tabs-container-padding);border:var(--md-tabs-container-border);ol[class^='Tabs__TabList']{margin:0;padding:0;}"]);
    TabList = styled_components_esm_default.ul.withConfig({
      displayName: "Tabs__TabList",
      componentId: "sc-1u2kfjg-1"
    })(["&&{padding:var(--md-tabs-padding);margin-block-end:0;border:var(--md-tabs-border);border-width:var(--md-tabs-border-width);margin:0;& > li:first-child{margin-bottom:0px;}li[class^='Tab__TabItem']{margin:var(--md-tabs-tab-margin);}}"]);
    TabContent = styled_components_esm_default.div.withConfig({
      displayName: "Tabs__TabContent",
      componentId: "sc-1u2kfjg-2"
    })(["color:var(--md-tabs-content-text-color);font-size:var(--md-tabs-content-font-size);font-family:var(--md-tabs-content-font-family);font-style:var(--md-tabs-content-font-style);font-weight:var(--md-tabs-content-font-weight);background-color:var(--md-tabs-content-bg-color);margin:var(--md-tabs-content-margin);padding:var(--md-tabs-content-padding);border:var(--md-tabs-content-border);"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/CodeBlock/CodeBlock.tsx
import React33 from "react";
function CodeBlock2(props) {
  return /* @__PURE__ */ React33.createElement(CodeBlock, { ...props });
}
var init_CodeBlock2 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/CodeBlock/CodeBlock.tsx"() {
    init_CodeBlock();
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/Cards.tsx
import * as React34 from "react";
function Cards({
  cardMinWidth = 240,
  columns,
  className,
  children,
  ariaLabel
}) {
  return /* @__PURE__ */ React34.createElement(GridLayout, { $cardMinWidth: cardMinWidth, $columns: columns, className, "aria-label": ariaLabel }, children);
}
function getColumnWidth(columns) {
  return `calc((100% - ${columns - 1} * var(--cards-gap)) / ${columns})`;
}
function getCardMinWidth(cardMinWidth, columns) {
  return columns ? `max(${getColumnWidth(columns)}, ${cardMinWidth}px)` : `${cardMinWidth}px`;
}
var GridLayout;
var init_Cards = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/Cards.tsx"() {
    init_styled_components_esm();
    GridLayout = styled_components_esm_default.div.withConfig({
      displayName: "Cards__GridLayout",
      componentId: "sc-1fp0s55-0"
    })(["display:grid;grid-template-columns:", ";gap:var(--cards-gap);width:100%;margin-top:var(--spacing-base);margin-bottom:var(--spacing-base);"], ({
      $cardMinWidth,
      $columns
    }) => `repeat(auto-fit, minmax(${getCardMinWidth($cardMinWidth, $columns)}, 1fr))`);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/CardImage.tsx
import React35 from "react";
function CardImage({
  src,
  alt,
  position
}) {
  return /* @__PURE__ */ React35.createElement(Image, { src, alt, $position: position });
}
var Image;
var init_CardImage = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/CardImage.tsx"() {
    init_styled_components_esm();
    Image = styled_components_esm_default.img.withConfig({
      displayName: "CardImage__Image",
      componentId: "sc-1qhmvsw-0"
    })(["width:100%;height:100px;flex-shrink:0;object-fit:cover;order:", ";"], ({
      $position
    }) => $position === "end" ? 1 : 0);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/CardIcon.tsx
import React36 from "react";
function CardIcon({
  variant,
  src,
  rawContent,
  position
}) {
  return /* @__PURE__ */ React36.createElement(CardIconWrapper, { $variant: variant, $position: position }, rawContent ? /* @__PURE__ */ React36.createElement(CardSvg, { fileRawContent: rawContent }) : /* @__PURE__ */ React36.createElement(CardImg, { src }));
}
var CardImg, CardSvg, CardIconWrapper;
var init_CardIcon = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/CardIcon.tsx"() {
    init_styled_components_esm();
    init_InlineSvg();
    CardImg = styled_components_esm_default.img.withConfig({
      displayName: "CardIcon__CardImg",
      componentId: "sc-173juij-0"
    })(["width:var(--card-icon-width);height:var(--card-icon-height);display:inline-block;object-fit:cover;"]);
    CardSvg = styled_components_esm_default(InlineSvg).withConfig({
      displayName: "CardIcon__CardSvg",
      componentId: "sc-173juij-1"
    })(["width:var(--card-icon-width);height:var(--card-icon-height);display:inline-block;svg{width:100%;height:100%;fill:var(--card-icon-color);}"]);
    CardIconWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CardIcon__CardIconWrapper",
      componentId: "sc-173juij-2"
    })(["display:flex;align-self:", ";justify-content:center;min-width:var(--card-icon-width);min-height:var(--card-icon-height);flex-shrink:0;padding:", ";border-radius:var(--card-icon-border-radius);overflow:hidden;background-color:", ";border:", ";"], ({
      $position
    }) => $position ? $position : "auto", ({
      $variant
    }) => $variant === "ghost" ? "0" : `var(--card-icon-padding);`, ({
      $variant
    }) => $variant === "ghost" ? "transparent" : "var(--card-icon-bg-color)", ({
      $variant
    }) => $variant === "ghost" ? "none" : `1px solid var(--card-icon-border-color)`);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/Card.tsx
import React37 from "react";
function Card({
  title,
  image: image2,
  icon: icon2,
  iconRawContent,
  imagePosition = "start",
  iconPosition = "auto",
  layout = "vertical",
  variant = "filled",
  lineClamp,
  iconVariant,
  align = "start",
  to,
  children
}) {
  const titleNoSpaces = title.replace(/\s+/g, "-").toLowerCase();
  const cardTitleId = `card-title-${titleNoSpaces}`;
  const justifyContent = align === "center" ? "center" : align === "end" ? "flex-end" : "flex-start";
  const alignItems = align === "center" ? "center" : align === "end" ? "flex-end" : "flex-start";
  const textAlign = align === "center" ? "center" : align === "end" ? "right" : "left";
  iconVariant = iconVariant ?? (variant === "ghost" ? "filled" : "ghost");
  return /* @__PURE__ */ React37.createElement(CardWrapper, { as: to ? Link : "div", to, "aria-labelledby": cardTitleId, $variant: variant, $layout: layout, $isCardLink: !!to }, /* @__PURE__ */ React37.createElement(React37.Fragment, null, image2 ? /* @__PURE__ */ React37.createElement(CardImage, { src: image2, alt: title, position: imagePosition }) : null, /* @__PURE__ */ React37.createElement(CardContentWrapper, { $layout: layout, $alignItems: alignItems, $textAlign: textAlign, $hasImage: image2 !== void 0 }, icon2 && /* @__PURE__ */ React37.createElement(CardIcon, { variant: iconVariant, src: icon2, rawContent: iconRawContent, position: iconPosition }), /* @__PURE__ */ React37.createElement(ContentWrapper, null, /* @__PURE__ */ React37.createElement(Title2, { id: cardTitleId, $isCardLink: !!to, $justifyContent: justifyContent }, title, !!to && /* @__PURE__ */ React37.createElement(CardLinkIcon, null)), /* @__PURE__ */ React37.createElement(Body, { $lineClamp: lineClamp }, children)))));
}
var CardContentWrapper, ContentWrapper, Title2, CardLinkIcon, Body, CardWrapper, getCardWrapperClass;
var init_Card = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/Card.tsx"() {
    init_styled_components_esm();
    init_ChevronRightIcon();
    init_CardImage();
    init_CardIcon();
    init_Link();
    CardContentWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Card__CardContentWrapper",
      componentId: "sc-tk4xrd-0"
    })(["display:flex;flex-direction:", ";gap:var(--card-icon-gap);align-items:", ";text-align:", ";flex-grow:1;padding:var(--card-padding);height:", ";"], ({
      $layout
    }) => $layout === "horizontal" ? "row" : "column", ({
      $alignItems
    }) => $alignItems, ({
      $textAlign
    }) => $textAlign, ({
      $hasImage
    }) => $hasImage ? "auto" : "100%");
    ContentWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Card__ContentWrapper",
      componentId: "sc-tk4xrd-1"
    })(["display:flex;flex-direction:column;flex-shrink:1;gap:var(--card-content-gap);"]);
    Title2 = styled_components_esm_default.h3.withConfig({
      displayName: "Card__Title",
      componentId: "sc-tk4xrd-2"
    })(["margin:var(--card-title-margin);font-weight:var(--card-title-font-weight);color:var(--card-title-text-color);display:flex;align-items:center;justify-content:", ";width:100%;"], ({
      $justifyContent
    }) => $justifyContent);
    CardLinkIcon = styled_components_esm_default(ChevronRightIcon).withConfig({
      displayName: "Card__CardLinkIcon",
      componentId: "sc-tk4xrd-3"
    })(["width:var(--card-link-icon-width);height:var(--card-link-icon-height);margin-left:var(--spacing-xxs);opacity:0;transition:opacity 0.3s,transform 0.3s;"]);
    Body = styled_components_esm_default.div.withConfig({
      displayName: "Card__Body",
      componentId: "sc-tk4xrd-4"
    })(["color:var(--card-text-color);font-size:var(--card-body-font-size);line-height:var(--card-body-line-height);", " > *:first-child{margin-top:0;}> *:last-child{margin-bottom:0;}& a{display:inline-flex;align-items:center;line-height:1;& svg{width:1.2em;height:1.2em;margin-right:0.25em;vertical-align:middle;& g{fill:var(--link-color-primary);}}}& a:visited > span > svg > g{fill:var(--link-color-visited);}"], ({
      $lineClamp
    }) => $lineClamp && `
  display: -webkit-box;
  -webkit-line-clamp: ${$lineClamp};
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;`);
    CardWrapper = styled_components_esm_default.div.attrs(({
      $isCardLink,
      $variant
    }) => ({
      className: getCardWrapperClass($isCardLink, $variant)
    })).withConfig({
      displayName: "Card__CardWrapper",
      componentId: "sc-tk4xrd-5"
    })(["display:flex;flex-direction:", ";width:100%;height:100%;border-radius:var(--card-border-radius);overflow:hidden;transition:box-shadow 0.3s ease;position:relative;--md-paragraph-margin:0;--link-decoration-hover:none;background-color:var(--card-bg-color);border-width:var(--card-border-width);border-style:var(--card-border-style);border-color:var(--card-border-color);box-shadow:var(--card-box-shadow);&& > img{", "}&.card-link{cursor:var(--card-link-cursor);&:hover,&:focus-within{background-color:var(--card-bg-color-hover);border-color:var(--card-border-color-hover);box-shadow:var(--card-box-shadow-hover);svg{opacity:1;}}}&& ul{list-style:none;padding-left:0;margin:var(--spacing-xs) 0;}"], ({
      $layout
    }) => $layout === "horizontal" ? "row" : "column", ({
      $layout
    }) => $layout === "horizontal" && `
      max-width: 33%;
      width: auto;
      height: 100%;
      object-fit: cover;
    `);
    getCardWrapperClass = ($isCardLink, $variant) => {
      let classes = [];
      classes.push(`card-variant-${$variant}`);
      if ($isCardLink) {
        classes.push("card-link");
      }
      return classes.join(" ");
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/components/default.ts
var default_exports = {};
__export(default_exports, {
  Admonition: () => Admonition2,
  Card: () => Card,
  CardIcon: () => CardIcon,
  CardImage: () => CardImage,
  Cards: () => Cards,
  CodeBlock: () => CodeBlock2,
  Heading: () => Heading2,
  HtmlBlock: () => HtmlBlock,
  InlineSvg: () => InlineSvg,
  MarkdocExample: () => MarkdocExample,
  Mermaid: () => Mermaid,
  Tab: () => Tab2,
  TabComponent: () => TabComponent,
  TabContent: () => TabContent,
  TabList: () => TabList,
  Tabs: () => Tabs2
});
var init_default = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/default.ts"() {
    init_Admonition2();
    init_InlineSvg();
    init_MarkdocExample();
    init_Heading();
    init_Mermaid();
    init_HtmlBlock();
    init_Tab();
    init_Tabs();
    init_CodeBlock2();
    init_Cards();
    init_Card();
    init_CardIcon();
    init_CardImage();
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/admonition.ts
var admonition;
var init_admonition = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/admonition.ts"() {
    admonition = {
      schema: {
        attributes: {
          type: {
            type: String,
            required: true,
            default: "info",
            matches: ["warning", "info", "danger", "success"]
          },
          name: { type: String }
        },
        render: "Admonition"
      },
      tagName: "admonition"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/html.ts
var mapHtmlTags, html;
var init_html = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/html.ts"() {
    init_dist();
    mapHtmlTags = {
      script: "HtmlScript"
    };
    html = {
      schema: {
        attributes: {
          name: { type: String, required: true },
          attrs: { type: Object }
        },
        transform(node2, config) {
          const { name, attrs } = node2.attributes;
          const children = node2.transformChildren(config);
          return new Markdoc.Tag(mapHtmlTags[name] || name, attrs, children);
        }
      },
      tagName: "html"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/markdoc-example.ts
var markdocExample;
var init_markdoc_example = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/markdoc-example.ts"() {
    init_dist();
    markdocExample = {
      schema: {
        attributes: {
          renderDemo: { type: Boolean, default: false },
          withLabels: { type: Boolean, required: false },
          codeLabel: { type: String, required: false },
          resultLabel: { type: String, required: false }
        },
        children: ["fence"],
        transform(node2, config) {
          const attributes = node2.transformAttributes(config);
          const { content } = node2.children[0]?.attributes || {};
          if (!content)
            return null;
          const language = "markdoc";
          const annotations = node2.children[0].annotations;
          let title = null;
          if (annotations.length > 0) {
            const fenceWithTitle = annotations.find((annotation) => annotation.name === "title");
            title = fenceWithTitle?.value;
          }
          return new Markdoc.Tag(
            "MarkdocExample",
            {
              ...attributes,
              title,
              language,
              demoContent: node2.children[0].transformChildren(config),
              rawContent: content
            },
            []
          );
        }
      },
      tagName: "markdoc-example"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/partial.ts
var partial2;
var init_partial = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/partial.ts"() {
    init_dist();
    init_utils();
    init_relative_path();
    partial2 = {
      schema: {
        ...Markdoc.tags.partial,
        attributes: {
          ...Markdoc.tags.partial.attributes,
          file: { type: RelativePath }
        },
        validate(node2, config) {
          const folders = (config.themeConfig?.partialsFolders || []).map(addTrailingSlash);
          if (!folders.length) {
            return [
              {
                id: "",
                message: `Could not resolve partial ${node2.attributes.file}. markdown.partialsFolders is empty.`,
                level: "error"
              }
            ];
          }
          if (!config.partials?.[node2.attributes.file]) {
            return [
              {
                id: "",
                message: `Could not resolve partial ${node2.attributes.file}. Starting with 0.73.0 version all partials should be placed in partials folders: 

  - ${folders.join(
                  "\n  - "
                )}`,
                level: "error"
              }
            ];
          }
          return [];
        }
      },
      tagName: "partial"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/tab.ts
var tab;
var init_tab = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/tab.ts"() {
    tab = {
      schema: {
        attributes: {
          label: { type: String, required: true }
        },
        render: "div"
      },
      tagName: "tab"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/tabs.ts
var tabs;
var init_tabs = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/tabs.ts"() {
    init_dist();
    init_utils();
    tabs = {
      schema: {
        transform(node2, config) {
          const attributes = node2.transformAttributes(config);
          const children = node2.transformChildren(config);
          const tabsContent = children.map((child) => {
            if (isTag(child) && child?.name === "CodeBlock") {
              const key = child.attributes["data-language"] || "default";
              const label = child.attributes["data-label"] || key;
              return new Markdoc.Tag("div", { label, key }, [child]);
            }
            return child;
          });
          return new Markdoc.Tag("Tabs", attributes, tabsContent);
        }
      },
      tagName: "tabs"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/debug.ts
var debug2;
var init_debug = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/debug.ts"() {
    init_dist();
    debug2 = {
      schema: {
        attributes: {
          value: {}
        },
        transform(node2, config) {
          const attributes = node2.transformAttributes(config);
          return new Markdoc.Tag("pre", {}, [JSON.stringify(attributes.value, null, 2)]);
        }
      },
      tagName: "debug"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/code-snippet.ts
var codeSnippet;
var init_code_snippet = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/code-snippet.ts"() {
    init_dist();
    init_code_snippet_file();
    codeSnippet = {
      schema: {
        attributes: {
          file: { type: CodeSnippetFile, render: false, required: true },
          language: { type: String, render: true },
          title: { type: String, render: true },
          to: { type: [String, Number], render: false },
          from: { type: [String, Number], render: false },
          after: { type: [String, Number], render: false },
          before: { type: [String, Number], render: false },
          prefix: { type: String, render: false },
          wrap: { type: Boolean, render: false },
          rawContent: { type: String, render: false }
          // internal
        },
        render: "CodeBlock",
        selfClosing: true,
        transform: (node2, config) => {
          const attributes = node2.transformAttributes(config);
          const rawContent = node2.attributes.rawContent;
          const header = {
            title: node2.attributes.title,
            controls: { copy: {} }
          };
          if (typeof rawContent === "string") {
            return new Markdoc.Tag(
              "CodeBlock",
              {
                ...attributes,
                header,
                lang: attributes.language,
                source: rawContent,
                wrapContents: node2.attributes.wrap
              },
              []
            );
          } else {
            return new Markdoc.Tag(node2.tag, attributes, []);
          }
        },
        validate(node2) {
          const errors = [];
          if (node2.attributes.from && node2.attributes.after) {
            errors.push({
              id: "from-and-after-attributes-are-mutually-exclusive",
              level: "error",
              message: 'attributes "from" and "after" are mutually exclusive'
            });
          }
          if (node2.attributes.to && node2.attributes.before) {
            errors.push({
              id: "to-and-before-attributes-are-mutually-exclusive",
              level: "error",
              message: 'attributes "to" and "before" are mutually exclusive'
            });
          }
          return errors;
        }
      },
      tagName: "code-snippet"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/inline-svg.ts
var inlineSvg;
var init_inline_svg = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/inline-svg.ts"() {
    init_svg_content();
    inlineSvg = {
      schema: {
        attributes: {
          file: { type: SvgContent, required: true },
          fileRawContent: { type: String, render: true }
          // inserted by RawContent
        },
        render: "InlineSvg",
        selfClosing: true
      },
      tagName: "inline-svg"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/cards.ts
var cards;
var init_cards = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/cards.ts"() {
    cards = {
      schema: {
        render: "Cards",
        attributes: {
          columns: {
            type: Number,
            default: 3
          },
          cardMinWidth: {
            type: Number,
            default: 240
          }
        }
      },
      tagName: "cards"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/tags/card.ts
var card;
var init_card = __esm({
  "node_modules/@redocly/theme/src/markdoc/tags/card.ts"() {
    card = {
      schema: {
        render: "Card",
        attributes: {
          title: {
            type: String,
            required: true
          },
          image: {
            type: String,
            resolver: "link"
          },
          icon: { type: String, resolver: "inlineSvgOrImageLink" },
          lineClamp: {
            type: Number
          },
          iconRawContent: {
            // internal use only
            type: String,
            render: true
          },
          imagePosition: {
            type: String,
            matches: ["start", "end"],
            default: "start"
          },
          iconPosition: {
            type: String,
            matches: ["auto", "start", "center", "end"],
            default: "auto"
          },
          layout: {
            type: String,
            matches: ["horizontal", "combined", "vertical"],
            default: "vertical"
          },
          align: {
            type: String,
            matches: ["start", "center", "end"],
            default: "start"
          },
          variant: {
            type: String,
            matches: ["filled", "outlined", "elevated", "ghost"],
            default: "filled"
          },
          iconVariant: {
            type: String,
            matches: ["filled", "ghost"]
          },
          to: { type: String, resolver: "link" }
        },
        children: ["paragraph", "tag", "list"]
      },
      tagName: "card"
    };
  }
});

// node_modules/@redocly/theme/src/markdoc/default.ts
var default_exports2 = {};
__export(default_exports2, {
  CodeSnippetFile: () => CodeSnippetFile,
  ImageSrc: () => ImageSrc,
  ImageSrcSet: () => ImageSrcSet,
  RelativePath: () => RelativePath,
  SvgContent: () => SvgContent,
  components: () => default_exports,
  tags: () => tags
});
var tags;
var init_default2 = __esm({
  "node_modules/@redocly/theme/src/markdoc/default.ts"() {
    init_code_snippet_file();
    init_img_src();
    init_img_srcset();
    init_relative_path();
    init_svg_content();
    init_default();
    init_admonition();
    init_html();
    init_markdoc_example();
    init_partial();
    init_tab();
    init_tabs();
    init_debug();
    init_code_snippet();
    init_inline_svg();
    init_cards();
    init_card();
    tags = {
      [admonition.tagName]: admonition.schema,
      [debug2.tagName]: debug2.schema,
      [html.tagName]: html.schema,
      [markdocExample.tagName]: markdocExample.schema,
      [partial2.tagName]: partial2.schema,
      [tab.tagName]: tab.schema,
      [tabs.tagName]: tabs.schema,
      [codeSnippet.tagName]: codeSnippet.schema,
      [inlineSvg.tagName]: inlineSvg.schema,
      [cards.tagName]: cards.schema,
      [card.tagName]: card.schema
    };
  }
});

// node_modules/@redocly/theme/src/icons/SidePanelCloseIcon/SidePanelCloseIcon.tsx
import React38 from "react";
var Icon16, SidePanelCloseIcon;
var init_SidePanelCloseIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SidePanelCloseIcon/SidePanelCloseIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon16 = (props) => /* @__PURE__ */ React38.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React38.createElement("path", { d: "M14 2H2C1.45 2 1 2.45 1 3V13C1 13.55 1.45 14 2 14H14C14.55 14 15 13.55 15 13V3C15 2.45 14.55 2 14 2ZM5 13H2V3H5V13ZM14 7.5H8.9L10.7 5.7L10 5L7 8L10 11L10.7 10.3L8.9 8.5H14V13H6V3H14V7.5Z" }));
    SidePanelCloseIcon = styled_components_esm_default(Icon16).attrs(() => ({
      "data-component-name": "icons/SidePanelCloseIcon/SidePanelCloseIcon"
    })).withConfig({
      displayName: "SidePanelCloseIcon",
      componentId: "sc-4mueib-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SidePanelOpenIcon/SidePanelOpenIcon.tsx
import React39 from "react";
var Icon17, SidePanelOpenIcon;
var init_SidePanelOpenIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SidePanelOpenIcon/SidePanelOpenIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon17 = (props) => /* @__PURE__ */ React39.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React39.createElement("path", { d: "M14 2H2C1.45 2 1 2.45 1 3V13C1 13.55 1.45 14 2 14H14C14.55 14 15 13.55 15 13V3C15 2.45 14.55 2 14 2ZM5 13H2V3H5V13ZM14 13H6V8.5H11.1L9.3 10.3L10 11L13 8L10 5L9.3 5.7L11.1 7.5H6V3H14V13Z" }));
    SidePanelOpenIcon = styled_components_esm_default(Icon17).attrs(() => ({
      "data-component-name": "icons/SidePanelOpenIcon/SidePanelOpenIcon"
    })).withConfig({
      displayName: "SidePanelOpenIcon",
      componentId: "sc-1d8u0bx-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/AddIcon/AddIcon.tsx
import React40 from "react";
var Icon18, AddIcon;
var init_AddIcon = __esm({
  "node_modules/@redocly/theme/src/icons/AddIcon/AddIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon18 = (props) => /* @__PURE__ */ React40.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React40.createElement("path", { d: "M8.5 7.5V4H7.5V7.5H4V8.5H7.5V12H8.5V8.5H12V7.5H8.5Z" }));
    AddIcon = styled_components_esm_default(Icon18).attrs(() => ({
      "data-component-name": "icons/AddIcon/AddIcon"
    })).withConfig({
      displayName: "AddIcon",
      componentId: "sc-1htvyk0-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Scorecard/variables.dark.ts
var scorecardDarkMode;
var init_variables_dark = __esm({
  "node_modules/@redocly/theme/src/components/Scorecard/variables.dark.ts"() {
    init_styled_components_esm();
    scorecardDarkMode = Ne(["--scorecard-level-color-5-2:var(--color-persian-green-7);--scorecard-level-color-5-3:var(--color-persian-green-6);--scorecard-level-color-5-4:var(--color-persian-green-5);--scorecard-level-color-5-5:var(--color-persian-green-4);--scorecard-level-color-4-2:var(--color-persian-green-7);--scorecard-level-color-4-3:var(--color-persian-green-6);--scorecard-level-color-4-4:var(--color-persian-green-5);--scorecard-level-color-3-2:var(--color-persian-green-6);--scorecard-level-color-3-3:var(--color-persian-green-5);--scorecard-level-color-2-2:var(--color-persian-green-6);"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Mermaid/variables.dark.ts
var mermaidDarkMode;
var init_variables_dark2 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Mermaid/variables.dark.ts"() {
    init_styled_components_esm();
    mermaidDarkMode = Ne(["--mermaid-bg-color:var(--color-warm-grey-8);"]);
  }
});

// node_modules/@redocly/theme/src/components/Menu/variables.dark.ts
var menuDarkMode;
var init_variables_dark3 = __esm({
  "node_modules/@redocly/theme/src/components/Menu/variables.dark.ts"() {
    init_styled_components_esm();
    menuDarkMode = Ne(["--menu-content-color:var(--text-color-secondary);--menu-content-title-color:var(--text-color-secondary);--menu-content-color-active:var(--text-color-primary);--menu-content-color-disabled:var(--text-color-disabled);"]);
  }
});

// node_modules/@redocly/theme/src/components/Button/variables.dark.ts
var buttonDarkMode;
var init_variables_dark4 = __esm({
  "node_modules/@redocly/theme/src/components/Button/variables.dark.ts"() {
    init_styled_components_esm();
    buttonDarkMode = Ne(["--button-content-color:var(--color-warm-grey-9);--button-content-color-inverse:var(--color-warm-grey-11);--button-content-color-disabled:var(--color-warm-grey-4);--button-content-color-primary-hover:var(--color-blue-5);--button-content-color-primary-pressed:var(--color-blue-5);--button-content-color-danger-pressed:var(--color-raspberry-4);--button-content-color-ghost:var(--color-warm-grey-7);--button-border-color:var(--color-warm-grey-4);--button-border-color-disabled:var(--color-warm-grey-3);--button-border-color-focused:var(--color-blue-8);--button-bg-color-secondary:var(--color-warm-grey-4);--button-bg-color-secondary-hover:var(--color-warm-grey-5);--button-bg-color-secondary-pressed:var(--color-warm-grey-6);--button-bg-color-secondary-danger-pressed:var(--color-raspberry-9);--button-bg-color-primary-hover:var(--color-blue-5);--button-bg-color-primary-pressed:var(--color-blue-4);--button-bg-color-primary-danger-hover:var(--color-raspberry-5);--button-bg-color-primary-danger-pressed:var(--color-raspberry-4);--button-bg-color-disabled:var(--color-warm-grey-3);--button-bg-color-custom:var(--color-warm-grey-2);"]);
  }
});

// node_modules/@redocly/theme/src/components/Segmented/variables.dark.ts
var segmentedButtonsDarkMode;
var init_variables_dark5 = __esm({
  "node_modules/@redocly/theme/src/components/Segmented/variables.dark.ts"() {
    init_styled_components_esm();
    segmentedButtonsDarkMode = Ne(["--segmented-buttons-bg-color-inner:var(--color-warm-grey-3);--segmented-buttons-bg-color-main:var(--color-warm-grey-4);"]);
  }
});

// node_modules/@redocly/theme/src/icons/CheckboxIcon/variables.dark.ts
var checkboxDarkMode;
var init_variables_dark6 = __esm({
  "node_modules/@redocly/theme/src/icons/CheckboxIcon/variables.dark.ts"() {
    init_styled_components_esm();
    checkboxDarkMode = Ne(["--checkbox-box-color-disabled:var(--color-warm-grey-3);--checkbox-border-color-disabled:var(--border-color-primary);--checkbox-content-color-inverse:var(--color-warm-grey-1);"]);
  }
});

// node_modules/@redocly/theme/src/components/Tag/variables.dark.ts
var tagDarkMode;
var init_variables_dark7 = __esm({
  "node_modules/@redocly/theme/src/components/Tag/variables.dark.ts"() {
    init_styled_components_esm();
    tagDarkMode = Ne(["--tag-operation-color-delete:#fa82a2;--tag-operation-bg-color-delete:#77214C;--tag-operation-color-get:#68cc97;--tag-operation-bg-color-get:#1F4D2D;--tag-operation-color-post:#90b0f0;--tag-operation-bg-color-post:#233061;--tag-operation-color-put:#e0a663;--tag-operation-bg-color-put:#612729;--tag-operation-color-patch:#e0c363;--tag-operation-bg-color-patch:#5C3721;--tag-operation-color-head:#e6e1fe;--tag-operation-bg-color-head:#5b4ccc;--tag-operation-color-options:#1a1c21;--tag-operation-bg-color-options:#2a2b33;.tag-grey,.tag-draft,.tag-schema,.tag-default{--tag-bg-color:var(--color-warm-grey-4);}"]);
  }
});

// node_modules/@redocly/theme/src/components/StatusCode/variables.dark.ts
var statusCodeDarkMode;
var init_variables_dark8 = __esm({
  "node_modules/@redocly/theme/src/components/StatusCode/variables.dark.ts"() {
    init_styled_components_esm();
    statusCodeDarkMode = Ne(["--status-code-border:1px solid var(--layer-color-accent);"]);
  }
});

// node_modules/@redocly/theme/src/components/Switch/variables.dark.ts
var switcherDarkMode;
var init_variables_dark9 = __esm({
  "node_modules/@redocly/theme/src/components/Switch/variables.dark.ts"() {
    init_styled_components_esm();
    switcherDarkMode = Ne(["--switch-bg-color:var(--color-warm-grey-6);--switch-bg-color-selected:var(--color-warm-grey-6);--switch-bg-color-hover:var(--color-warm-grey-7);--switch-bg-color-pressed:var(--color-warm-grey-7);--switch-bg-color-disabled:var(--color-warm-grey-5);--switch-knob-bg-color:var(--color-warm-grey-8);--switch-knob-bg-color-selected:var(--color-warm-grey-11);--switch-border-radius:var(--border-radius);--switch-knob-border-radius:calc(var(--border-radius) / 2);--switch-width:32px;--switch-height:18px;--switch-padding:calc(var(--spacing-xxs) / 2);--switch-bg-transition:background-color 0.3s;--switch-knob-height:14px;--switch-knob-width:14px;--switch-knob-transition:all 0.3s;"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/variables.dark.ts
var cardsDarkMode;
var init_variables_dark10 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/variables.dark.ts"() {
    init_styled_components_esm();
    cardsDarkMode = Ne(["--card-icon-border-color:var(--color-warm-grey-4);--card-icon-bg-color:var(--color-warm-grey-3);.card-variant-filled{--card-bg-color:var(--color-warm-grey-3);--card-bg-color-hover:var(--color-warm-grey-4);--card-border-color:var(--color-warm-grey-4);--card-border-color-hover:var(--color-warm-grey-3);--card-icon-bg-color:var(--card-bg-color);}.card-variant-outlined{--card-border-color:var(--color-warm-grey-4);--card-border-color-hover:var(--color-warm-grey-5);}.card-variant-elevated{--card-box-shadow:0px 8px 24px -4px #00000014,0px 6px 12px -6px #0000001F;--card-box-shadow-hover:0px 14px 64px -4px #0000001F,0px 8px 22px -6px #0000001F;}"]);
  }
});

// node_modules/@redocly/theme/src/core/styles/dark.ts
var replayDarkMode, darkMode;
var init_dark = __esm({
  "node_modules/@redocly/theme/src/core/styles/dark.ts"() {
    init_styled_components_esm();
    init_variables_dark();
    init_variables_dark2();
    init_variables_dark3();
    init_variables_dark4();
    init_variables_dark5();
    init_variables_dark6();
    init_variables_dark7();
    init_variables_dark8();
    init_variables_dark9();
    init_variables_dark10();
    replayDarkMode = Ne(["--replay-undefined-variable-bg-color:rgba(249,49,109,0.18);--replay-defined-variable-bg-color:rgba(31,124,255,0.18);--replay-server-variable-bg-color:rgba(119,45,240,0.2);"]);
    darkMode = Ne([`--color-warm-grey-1:#1a1c21;--color-warm-grey-2:#22242b;--color-warm-grey-3:#2a2b33;--color-warm-grey-4:#3b3c45;--color-warm-grey-5:#555761;--color-warm-grey-6:#6e6f7a;--color-warm-grey-7:#9b9ca8;--color-warm-grey-8:#c4c6d1;--color-warm-grey-9:#dcdde5;--color-warm-grey-10:#ededf2;--color-warm-grey-11:#fbfbfc;--color-purple-1:#2c2770;--color-purple-2:#2b2480;--color-purple-3:#291f99;--color-purple-4:#4034ab;--color-purple-5:#5b4ccc;--color-purple-6:#7a69ee;--color-purple-7:#9c8ef4;--color-purple-8:#b3a6f9;--color-purple-9:#cec4fd;--color-purple-10:#e6e1fe;--color-purple-11:#f3f1fe;--color-blueberry-1:#232a61;--color-blueberry-2:#222d7a;--color-blueberry-3:#1e2f93;--color-blueberry-4:#2f46b7;--color-blueberry-5:#4561db;--color-blueberry-6:#5f81ff;--color-blueberry-7:#87a3ff;--color-blueberry-8:#9fb7ff;--color-blueberry-9:#bfd0ff;--color-blueberry-10:#dfe8ff;--color-blueberry-11:#F0F4F;--color-blue-1:#233061;--color-blue-2:#223d7a;--color-blue-3:#1f4399;--color-blue-4:#2558b8;--color-blue-5:#3072db;--color-blue-6:#1f7cff;--color-blue-7:#6eabfa;--color-blue-8:#90c2fc;--color-blue-9:#b3d7fc;--color-blue-10:#d9ebfc;--color-blue-11:#edf5fc;--color-sky-1:#1f3757;--color-sky-2:#1d4479;--color-sky-3:#155393;--color-sky-4:#0569b6;--color-sky-5:#088cda;--color-sky-6:#0bb4fe;--color-sky-7:#47d2fe;--color-sky-8:#6ce5fe;--color-sky-9:#9df4fe;--color-sky-10:#cefdfe;--color-sky-11:#eafefe;--color-turquoise-1:#1c394f;--color-turquoise-2:#1c496b;--color-turquoise-3:#125a81;--color-turquoise-4:#0475a1;--color-turquoise-5:#059cc0;--color-turquoise-6:#08c7e0;--color-turquoise-7:#41e6ec;--color-turquoise-8:#67f5ef;--color-turquoise-9:#9afbef;--color-turquoise-10:#ccfdf3;--color-turquoise-11:#ebfdf9;--color-persian-green-1:#193b47;--color-persian-green-2:#143d4d;--color-persian-green-3:#0f4f5d;--color-persian-green-4:#036a73;--color-persian-green-5:#048a89;--color-persian-green-6:#06a192;--color-persian-green-7:#37c6ab;--color-persian-green-8:#5fe2be;--color-persian-green-9:#97f5d2;--color-persian-green-10:#cafae4;--color-persian-green-11:#ebfaf3;--color-green-1:#1a4d40;--color-green-2:#195848;--color-green-3:#0e8450;--color-green-4:#149e53;--color-green-5:#1cb854;--color-green-6:#4dd470;--color-green-7:#72e985;--color-green-8:#a3f7a9;--color-green-9:#d2fbd0;--color-green-10:#edfbec;--color-grass-1:#1f4d2d;--color-grass-2:#164f29;--color-grass-3:#135f25;--color-grass-4:#167625;--color-grass-5:#208d28;--color-grass-6:#2fa52d;--color-grass-7:#66c95b;--color-grass-8:#93e380;--color-grass-9:#c2f6ae;--color-grass-10:#e3fad6;--color-grass-11:#f0faeb;--color-carrot-1:#5c3721;--color-carrot-2:#7a4222;--color-carrot-3:#934c1a;--color-carrot-4:#b75f17;--color-carrot-5:#db7e21;--color-carrot-6:#ffa02e;--color-carrot-7:#ffbe62;--color-carrot-8:#ffd181;--color-carrot-9:#ffe4ab;--color-carrot-10:#fff0cc;--color-carrot-11:#fff8e8;--color-orange-1:#612729;--color-orange-2:#7a2024;--color-orange-3:#931e1a;--color-orange-4:#b72111;--color-orange-5:#db3918;--color-orange-6:#ff5722;--color-orange-7:#ff8c59;--color-orange-8:#ffad7a;--color-orange-9:#ffcea6;--color-orange-10:#ffead2;--color-orange-11:#fff4e8;--color-red-1:#612235;--color-red-2:#752137;--color-red-3:#8d1c37;--color-red-4:#af1631;--color-red-5:#d12030;--color-red-6:#f42d2d;--color-red-7:#f86d60;--color-red-8:#fb9580;--color-red-9:#fdc0ab;--color-red-10:#fee3d4;--color-red-11:#fef1ea;--color-raspberry-1:#612241;--color-raspberry-2:#77214c;--color-raspberry-3:#901d56;--color-raspberry-4:#b3185e;--color-raspberry-5:#d6236a;--color-raspberry-6:#f9316d;--color-raspberry-7:#fb6382;--color-raspberry-8:#fd838f;--color-raspberry-9:#feacad;--color-raspberry-10:#fed9d5;--color-raspberry-11:#fef0ef;--color-magenta-1:#5e1a48;--color-magenta-2:#791f5a;--color-magenta-3:#931a65;--color-magenta-4:#b6006a;--color-magenta-5:#da0078;--color-magenta-6:#fe0184;--color-magenta-7:#fe409c;--color-magenta-8:#fe66aa;--color-magenta-9:#fe99c3;--color-magenta-10:#fecce0;--color-magenta-11:#feeff5;--color-black:#ffffff;--color-white:#000000;--color-hover-base:#32343E;--bg-color:var(--color-warm-grey-2);--bg-color-hover:var(--color-warm-grey-3);--bg-color-active:var(--color-warm-grey-4);--bg-color-tonal:var(--color-warm-grey-2);--bg-color-tonal-hover:var(--color-warm-grey-2);--bg-color-tonal-active:var(--color-warm-grey-2);--bg-color-raised:var(--color-warm-grey-2);--bg-color-modal-overlay:rgba(0,0,0,0.4);--bg-raised-gradient:linear-gradient(270deg,var(--color-warm-grey-3) 21.88%,rgba(42,43,51,0) 112.5%);--layer-color:var(--color-warm-grey-3);--layer-color-hover:var(--color-warm-grey-4);--layer-color-active:var(--color-warm-grey-5);--layer-color-ontonal:var(--color-warm-grey-3);--layer-color-ontonal-hover:var(--color-warm-grey-4);--layer-color-ontonal-active:var(--color-warm-grey-5);--layer-color-accent:var(--color-warm-grey-9);--layer-accent-hover:var(--color-warm-grey-10);--layer-color-raised:var(--color-warm-grey-3);--border-color-primary:var(--color-warm-grey-5);--border-color-secondary:var(--color-warm-grey-4);--tree-content-color-hover:var(--color-warm-grey-11);--tree-border-color-default:var(--color-warm-grey-4);--tree-bg-color-hover:var(--color-warm-grey-3);--tree-bg-color-active:var(--color-warm-grey-4);--link-color-primary:var(--color-blue-7);--link-color-primary-hover:var(--color-blue-8);--link-color-inverse:var(--color-blue-6);--link-color-visited:var(--color-purple-8);--tab-content-color-default:var(--color-warm-grey-7);--tab-bg-color-filled:var(--color-warm-grey-4);--tab-content-color-disabled:var(--color-warm-grey-4);--dropdown-text-color:var(--color-warm-grey-8);--dropdown-menu-item-bg-color-hover:var(--bg-color-hover);--input-bg-color:var(--color-warm-grey-2);--input-bg-color-ghost:var(--color-warm-grey-3);--input-border-color:var(--color-warm-grey-4);--input-border-color-hover:var(--color-warm-grey-5);--input-border-color-focused:var(--color-info-base);--input-bg-color-disabled:var(--color-warm-grey-3);--input-border-color-disabled:var(--color-warm-grey-4);--schema-required-color:#f56c6c;--plus-square-outlined-icon:url("data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 10 10' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M3.20312 5.3125H4.6875V6.79687C4.6875 6.83984 4.72266 6.875 4.76562 6.875H5.23438C5.27734 6.875 5.3125 6.83984 5.3125 6.79687V5.3125H6.79688C6.83984 5.3125 6.875 5.27734 6.875 5.23437V4.76562C6.875 4.72266 6.83984 4.6875 6.79688 4.6875H5.3125V3.20312C5.3125 3.16016 5.27734 3.125 5.23438 3.125H4.76562C4.72266 3.125 4.6875 3.16016 4.6875 3.20312V4.6875H3.20312C3.16016 4.6875 3.125 4.72266 3.125 4.76562V5.23437C3.125 5.27734 3.16016 5.3125 3.20312 5.3125Z' fill='%239B9CA8'/%3E%3Cpath d='M8.59375 1.09375H1.40625C1.2334 1.09375 1.09375 1.2334 1.09375 1.40625V8.59375C1.09375 8.7666 1.2334 8.90625 1.40625 8.90625H8.59375C8.7666 8.90625 8.90625 8.7666 8.90625 8.59375V1.40625C8.90625 1.2334 8.7666 1.09375 8.59375 1.09375ZM8.20312 8.20312H1.79688V1.79687H8.20312V8.20312Z' fill='%239B9CA8'/%3E%3C/svg%3E%0A");--minus-square-outlined-icon:url("data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 10 10' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M3.20312 5.3125H6.79688C6.83984 5.3125 6.875 5.27734 6.875 5.23437V4.76562C6.875 4.72266 6.83984 4.6875 6.79688 4.6875H3.20312C3.16016 4.6875 3.125 4.72266 3.125 4.76562V5.23437C3.125 5.27734 3.16016 5.3125 3.20312 5.3125Z' fill='%239B9CA8'/%3E%3Cpath d='M8.59375 1.09375H1.40625C1.2334 1.09375 1.09375 1.2334 1.09375 1.40625V8.59375C1.09375 8.7666 1.2334 8.90625 1.40625 8.90625H8.59375C8.7666 8.90625 8.90625 8.7666 8.90625 8.59375V1.40625C8.90625 1.2334 8.7666 1.09375 8.59375 1.09375ZM8.20312 8.20312H1.79688V1.79687H8.20312V8.20312Z' fill='%239B9CA8'/%3E%3C/svg%3E%0A");`, " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " color-scheme:dark;*::-webkit-scrollbar-thumb{background-color:var(--color-warm-grey-4);}"], segmentedButtonsDarkMode, buttonDarkMode, checkboxDarkMode, tagDarkMode, statusCodeDarkMode, menuDarkMode, mermaidDarkMode, scorecardDarkMode, replayDarkMode, switcherDarkMode, cardsDarkMode);
  }
});

// node_modules/@redocly/theme/src/components/LanguagePicker/variables.ts
var languagePicker;
var init_variables = __esm({
  "node_modules/@redocly/theme/src/components/LanguagePicker/variables.ts"() {
    init_styled_components_esm();
    languagePicker = Ne(["--language-picker-dropdown-font-size:var(--dropdown-menu-font-size);--language-picker-dropdown-font-weight:var(--dropdown-menu-font-weight);--language-picker-dropdown-line-height:var(--dropdown-menu-line-height);--language-picker-dropdown-text-color:var(--dropdown-menu-text-color);--language-picker-dropdown-min-width:var(--dropdown-menu-min-width);--language-picker-dropdown-max-width:var(--dropdown-menu-max-width);--language-picker-dropdown-max-height:var(--dropdown-menu-max-height);--language-picker-dropdown-padding:var(--dropdown-menu-padding );--language-picker-dropdown-border-radius:var(--dropdown-menu-border-radius);--language-picker-dropdown-box-shadow:var(--dropdown-menu-box-shadow);--language-picker-dropdown-border-color:var(--dropdown-menu-border-color);--language-picker-dropdown-bg-color:var(--dropdown-menu-bg-color);--language-picker-dropdown-item-padding-horizontal:20px;--language-picker-dropdown-item-padding-vertical:var(--dropdown-menu-item-padding-vertical);--language-picker-dropdown-item-separator-padding-top:var(--dropdown-menu-item-separator-padding-top );--language-picker-dropdown-item-separator-padding-bottom:var(--dropdown-menu-item-separator-padding-bottom );--language-picker-dropdown-item-border-radius:var(--dropdown-menu-item-border-radius );--language-picker-dropdown-item-bg-color-active:var(--dropdown-menu-item-bg-color-active);--language-picker-dropdown-item-bg-color-hover:var(--dropdown-menu-item-bg-color-hover);--language-picker-dropdown-item-bg-color-disabled:var(--dropdown-menu-item-bg-color-disabled);--language-picker-dropdown-item-separator-border-color:var(--dropdown-menu-item-separator-border-color);--language-picker-dropdown-item-color-dangerous:var(--dropdown-menu-item-color-dangerous);--language-picker-dropdown-item-color-disabled:var(--dropdown-menu-item-color-disabled);--language-picker-dropdown-item-color-active:var(--dropdown-menu-item-color-active);--language-picker-dropdown-item-color-hover:var(--dropdown-menu-item-color-hover);--language-picker-dropdown-item-border-color-focused:var(--dropdown-menu-item-border-color-focused);"]);
  }
});

// node_modules/@redocly/theme/src/components/Scorecard/variables.ts
var scorecard;
var init_variables2 = __esm({
  "node_modules/@redocly/theme/src/components/Scorecard/variables.ts"() {
    init_styled_components_esm();
    scorecard = Ne(["--scorecard-level-color-5-1:var(--color-error-base);--scorecard-level-color-5-2:var(--color-persian-green-4);--scorecard-level-color-5-3:var(--color-persian-green-5);--scorecard-level-color-5-4:var(--color-persian-green-6);--scorecard-level-color-5-5:var(--color-persian-green-7);--scorecard-level-color-4-1:var(--color-error-base);--scorecard-level-color-4-2:var(--color-persian-green-4);--scorecard-level-color-4-3:var(--color-persian-green-5);--scorecard-level-color-4-4:var(--color-persian-green-6);--scorecard-level-color-3-1:var(--color-error-base);--scorecard-level-color-3-2:var(--color-persian-green-5);--scorecard-level-color-3-3:var(--color-persian-green-6);--scorecard-level-color-2-1:var(--color-error-base);--scorecard-level-color-2-2:var(--color-persian-green-5);"]);
  }
});

// node_modules/@redocly/theme/src/components/Feedback/variables.ts
var feedback;
var init_variables3 = __esm({
  "node_modules/@redocly/theme/src/components/Feedback/variables.ts"() {
    init_styled_components_esm();
    feedback = Ne(["--feedback-padding:var(--spacing-base) 0;--feedback-font-size:var(--font-size-base);--feedback-line-height:var(--line-height-base);--feedback-font-family:var(--font-family-base);--feedback-text-color:var(--text-color-primary);--feedback-bg-color:transparent;--feedback-star-color:var(--color-carrot-6);--feedback-width:fit-content;--feedback-border-radius:var(--border-radius-lg);--feedback-report-dialog-max-width:90%;--feedback-report-dialog-max-height:300px;--feedback-report-dialog-width:480px;--feedback-header-text-color:var(--text-color-primary);--feedback-header-font-size:var(--font-size-lg);--feedback-header-line-height:var(--line-height-lg);--feedback-comment-min-width:256px;--feedback-comment-max-width:480px;@media screen and (max-width:500px){--feedback-comment-max-width:100%;}"]);
  }
});

// node_modules/@redocly/theme/src/components/Sidebar/variables.ts
var sidebar;
var init_variables4 = __esm({
  "node_modules/@redocly/theme/src/components/Sidebar/variables.ts"() {
    init_styled_components_esm();
    sidebar = Ne(["--sidebar-font-size:var(--font-size-base);--sidebar-font-family:var(--font-family-base);--sidebar-word-break:inherit;--sidebar-bg-color:var(--bg-color);--sidebar-border-color:var(--border-color-secondary);--sidebar-text-color:var(--tree-content-color-default);--sidebar-spacing-unit:var(--spacing-base);--sidebar-width:285px;--sidebar-collapsed-width:55px;--sidebar-margin-horizontal:var(--spacing-base);--sidebar-offset-top:var(--sidebar-spacing-unit);--sidebar-offset-left:var(--sidebar-spacing-unit);--sidebar-chevron-size:var(--spacing-xs);--sidebar-header-padding-bottom:var(--sidebar-spacing-unit);--sidebar-footer-padding-vertical:var(--spacing-sm);--sidebar-footer-padding-horizontal:var(--spacing-base);--sidebar-logo-max-height:285px;--sidebar-logo-max-width:285px;--sidebar-logo-padding:2px;--sidebar-controls-collapsed-gap:var(--spacing-xs);--sidebar-controls-collapsed-padding-vertical:var(--spacing-xs);--sidebar-controls-collapsed-padding-horizontal:var(--spacing-xxs);"]);
  }
});

// node_modules/@redocly/theme/src/components/Breadcrumbs/variables.ts
var breadcrumbs;
var init_variables5 = __esm({
  "node_modules/@redocly/theme/src/components/Breadcrumbs/variables.ts"() {
    init_styled_components_esm();
    breadcrumbs = Ne(["--breadcrumbs-text-color:var(--text-color-description);--breadcrumbs-font-size:var(--font-size-base);--breadcrumbs-text-color-active:var(--text-color-primary);--breadcrumbs-text-decoration-hover:underline;--breadcrumbs-padding:0;--breadcrumbs-gap:var(--spacing-xs);--breadcrumbs-margin-bottom:var(--spacing-lg);"]);
  }
});

// node_modules/@redocly/theme/src/components/Tag/variables.ts
var tag;
var init_variables6 = __esm({
  "node_modules/@redocly/theme/src/components/Tag/variables.ts"() {
    init_styled_components_esm();
    tag = Ne(["--tag-border-width:1px;--tag-border-style:solid;--tag-border-radius:var(--border-radius);--tag-box-shadow:none;--tag-status-dot-color-default:var(--color-persian-green-7);--tag-badge-size:var(--spacing-xs);--tag-badge-border-width:1.5px;--tag-badge-border-color:#ffffff;--tag-padding-vertical:1px;--tag-padding-horizontal:8px;--tag-padding:0 var(--tag-padding-horizontal);--tag-content-padding:var(--tag-padding-vertical) 0;--tag-content-gap:4px;--tag-large-padding-vertical:4px;--tag-large-padding-horizontal:16px;--tag-large-padding:0 var(--tag-large-padding-horizontal);--tag-large-content-padding:var(--tag-large-padding-vertical);--tag-margin:0 5px 0 0;--tag-gap:5px;.tag-size-large{--tag-padding:var(--tag-large-padding);--tag-content-padding:var(--tag-large-content-padding);--tag-font-size:var(--font-size-base);}--tag-font-size:var(--font-size-sm);--tag-font-family:inherit;--tag-font-weight:var(--font-weight-regular);--tag-line-height:var(--line-height-sm);--tag-text-transform:capitalize;--tag-icon-width:1em;--tag-icon-height:1em;--tag-basic-content-color:var(--color-warm-grey-9);--tag-basic-bg-color:var(--color-warm-grey-2);--tag-basic-border-color:var(--color-warm-grey-2);.tag-grey,.tag-draft,.tag-schema,.tag-default{--tag-color:var(--text-color-primary);--tag-bg-color:var(--color-warm-grey-2);--tag-border-color:var(--border-color-primary);--tag-close-button-bg-color-hover:var(--color-warm-grey-3);}.tag-green,.tag-success,.tag-approved{--tag-color:var(--color-success-active);--tag-bg-color:var(--color-success-bg);--tag-border-color:var(--color-success-active);--tag-close-button-bg-color-hover:var(--color-success-bg-hover);}.tag-red,.tag-error,.tag-declined{--tag-color:var(--color-error-active);--tag-bg-color:var(--color-error-bg);--tag-border-color:var(--color-error-active);--tag-close-button-bg-color-hover:var(--color-error-hover);}.tag-gold,.tag-warning,.tag-deprecated{--tag-color:var(--color-warning-active);--tag-bg-color:var(--color-warning-bg);--tag-border-color:var(--color-warning-active);--tag-close-button-bg-color-hover:var(--color-warning-hover);}.tag-blue,.tag-processing{--tag-color:var(--color-info-active);--tag-bg-color:var(--color-info-bg);--tag-border-color:var(--color-info-active);--tag-close-button-bg-color-hover:var(--color-info-hover);}.tag-purple,.tag-head{--tag-color:var(--color-purple-7);--tag-bg-color:var(--color-purple-1);--tag-border-color:var(--color-purple-7);--tag-close-button-bg-color-hover:var(--color-purple-3);}.tag-cyan,.tag-option,.tag-geekblue,.tag-link{--tag-color:var(--color-turquoise-7);--tag-bg-color:var(--color-turquoise-1);--tag-border-color:var(--color-turquoise-7);--tag-close-button-bg-color-hover:var(--color-turquoise-3);}.tag-yellow{--tag-color:var(--color-carrot-7);--tag-bg-color:var(--color-carrot-1);--tag-border-color:var(--color-carrot-7);--tag-close-button-bg-color-hover:var(--color-carrot-3);}.tag-magenta,.tag-hook{--tag-color:var(--color-magenta-7);--tag-bg-color:var(--color-magenta-1);--tag-border-color:var(--color-magenta-7);--tag-close-button-bg-color-hover:var(--color-magenta-3);}.tag-lime{--tag-color:var(--color-green-7);--tag-bg-color:none;--tag-border-color:var(--color-green-7);--tag-close-button-bg-color-hover:var(--color-green-3);}.tag-product{--tag-color:var(--color-warm-grey-7);--tag-bg-color:transparent;--tag-border-color:var(--color-warm-grey-4);--tag-close-button-bg-color-hover:var(--color-warm-grey-3);}.tag-http{--tag-font-family:var(--font-family-monospaced);--tag-text-transform:uppercase;}--tag-operation-color-delete:#e70b46;--tag-operation-bg-color-delete:#fee2e9;--tag-operation-color-get:#25b869;--tag-operation-bg-color-get:#e5faef;--tag-operation-color-post:#1e65f5;--tag-operation-bg-color-post:#e2ebfe;--tag-operation-color-put:#f5901d;--tag-operation-bg-color-put:#fef1e2;--tag-operation-color-patch:#f5c31d;--tag-operation-bg-color-patch:#fdf6dd;--tag-operation-color-head:#5b4ccc;--tag-operation-bg-color-head:#e6e1fe;--tag-operation-color-options:#1a1c21;--tag-operation-bg-color-options:#ededf2;--tag-operation-color-deprecated:var(--text-color-disabled);.tag-delete{--tag-color:var(--tag-operation-color-delete);}.tag-get{--tag-color:var(--tag-operation-color-get);}.tag-post{--tag-color:var(--tag-operation-color-post);}.tag-put{--tag-color:var(--tag-operation-color-put);}.tag-patch{--tag-color:var(--tag-operation-color-patch);}.tag-http-deprecated{--tag-color:var(--tag-operation-color-deprecated)}"]);
  }
});

// node_modules/@redocly/theme/src/components/TableOfContent/variables.ts
var toc;
var init_variables7 = __esm({
  "node_modules/@redocly/theme/src/components/TableOfContent/variables.ts"() {
    init_styled_components_esm();
    toc = Ne(["--toc-width:240px;--toc-bg-color:transparent;--toc-border-color:var(--border-color-secondary);--toc-spacing-unit:var(--spacing-xs);--toc-offset-top:var(--toc-spacing-unit);--toc-item-font-family:var(--font-family-base);--toc-item-font-size:var(--font-size-base);--toc-item-line-height:var(--line-height-base);--toc-item-font-weight:var(--font-weight-regular);--toc-item-text-color:var(--text-color-description);--toc-item-text-color-active:var(--text-color-primary);--toc-item-bg-color:transparent;--toc-item-nested-offset:calc(var(--toc-spacing-unit) * 2);--toc-item-padding-vertical:calc(var(--toc-spacing-unit) / 2);--toc-item-padding-horizontal:calc(var(--toc-spacing-unit) * 2);--toc-item-border-color-active:var(--border-color-invers);--toc-heading-font-size:var(--font-size-base);--toc-heading-font-family:var(--font-family-base);--toc-heading-font-weight:var(--font-weight-medium);--toc-heading-text-color:var(--text-color-primary);--toc-heading-text-transform:none;--toc-heading-line-height:var(--line-height-base);"]);
  }
});

// node_modules/@redocly/theme/src/components/Catalog/variables.ts
var catalog;
var init_variables8 = __esm({
  "node_modules/@redocly/theme/src/components/Catalog/variables.ts"() {
    init_styled_components_esm();
    catalog = Ne(["--catalog-page-padding-vertical:var(--spacing-lg);--catalog-page-padding-horizontal:var(--spacing-xl);--catalog-page-padding:var(--catalog-page-padding-vertical) var(--catalog-page-padding-horizontal);--catalog-filter-padding-vertical-mobile:0;--catalog-filter-padding-horizontal-mobile:var(--spacing-base);--catalog-heading-margin:0 0 var(--spacing-xl) 0;--catalog-title-text-color:var(--text-color-primary);--catalog-title-font-weight:var(--font-weight-bold);--catalog-title-font-size:var(--font-size-heading-3);--catalog-title-margin:0 0 var(--spacing-sm) 0;--catalog-description-text-color:var(--text-color-secondary);--catalog-description-font-weight:var(--font-weight-regular);--catalog-description-font-size:var(--font-size-base);--catalog-description-margin:0 0 var(--spacing-sm) 0;--catalog-separator-color:var(--text-color-secondary);--catalog-separator-font-size:var(--font-size-base);--catalog-separator-font-weight:var(--font-weight-regular);--catalog-separator-border-color:var(--border-color-secondary);--catalog-separator-margin:0 0 var(--spacing-base) 0;--catalog-separator-padding:var(--spacing-xxs) 0 0 0;--catalog-separator-label-margin:0 var(--spacing-xs);--catalog-card-min-height:194px;--catalog-card-padding-vertical:var(--spacing-base);--catalog-card-padding-horizontal:var(--spacing-md);--catalog-card-gap:var(--spacing-sm);--catalog-card-text-color:var(--text-color-secondary);--catalog-card-font-size:var(--font-size-base);--catalog-card-font-weight:var(--font-weight-regular);--catalog-card-bg-color:var(--layer-color);--catalog-card-border-color:var(--border-color-secondary);--catalog-card-border-width:var(--border-width);--catalog-card-border-style:var(--border-style);--catalog-card-border-color-hover:var(--border-color-primary);--catalog-card-border-radius:var(--border-radius-xxl);--catalog-cards-group-margin:0 0 var(--spacing-base) 0;--catalog-card-title-color:var(--text-color-primary);--catalog-card-title-min-height:var(--spacing-xxl);--catalog-card-title-font-size:var(--font-size-lg);--catalog-card-title-font-weight:var(--font-weight-bold);--catalog-card-title-line-height:var(--line-height-lg);--catalog-card-title-line-clamp:2;--catalog-card-description-line-clamp:3;--catalog-card-description-color:var(--text-color-secondary);--catalog-card-description-font-size:var(--font-size-base);--catalog-card-description-line-height:var(--line-height-base);--catalog-card-description-font-weight:var(--font-weight-regular);--catalog-card-content-gap:var(--spacing-xxs);--catalog-card-tag-bg:transparent;--catalog-highlight-bg-color:none;--catalog-highlight-text-color:var(--color-info-base);--catalog-actions-gap:var(--spacing-xs);--catalog-actions-padding-vertical:var(--spacing-xs);--catalog-actions-padding-horizontal:5%;--catalog-actions-min-height:40px;--catalog-actions-bg-color:var(--bg-color-tonal);--catalog-page-badge-border-radius:var(--border-radius);--catalog-page-badge-padding:0 var(--spacing-xs);--catalog-page-badge-font-size:var(--font-size-base);--catalog-page-badge-line-height:var(--line-height-base);--catalog-page-badge-dot-size:6px;--catalog-page-badge-dot-border-color:#ffffff;"]);
  }
});

// node_modules/@redocly/theme/src/components/Filter/variables.ts
var filter;
var init_variables9 = __esm({
  "node_modules/@redocly/theme/src/components/Filter/variables.ts"() {
    init_styled_components_esm();
    filter = Ne(["--filter-group-padding:0;--filter-group-gap:var(--spacing-xs);--filter-title-font-weight:var(--font-weight-medium);--filter-title-font-size:var(--font-size-base);--filter-title-line-height:var(--line-height-base);--filter-options-padding-vertical:0;--filter-options-padding-horizontal:0;--filter-options-gap:var(--spacing-sm);--filter-option-font-size:var(--font-size-base);--filter-option-gap:var(--spacing-xs);--filter-option-margin:0;--filter-option-label-font-size:var(--font-size-base);--filter-option-label-color:var(--text-color-secondary);--filter-option-checkbox-padding-left:var(--spacing-xs);--filter-content-header-padding-vertical:5px;--filter-content-header-padding-horizontal:0;--filter-content-title-font-size:var(--font-size-base);--filter-content-title-line-height:var(--line-height-base);--filter-content-title-font-weight:var(--font-weight-semibold);--filter-content-padding-vertical:var(--spacing-sm);--filter-content-padding-horizontal:var(--spacing-base);--filter-content-gap:var(--spacing-sm);--filter-content-items-padding:var(--spacing-sm) 0;--filter-popover-bg-color:var(--bg-color);--filter-popover-header-padding:var(--catalog-filter-padding-vertical-mobile) var(--catalog-filter-padding-horizontal-mobile);--filter-popover-header-border-color:var(--border-color-secondary);--filter-popover-header-bg-color:var(--navbar-bg-color);--filter-popover-header-label-color:var(--navbar-text-color);--filter-popover-header-label-font-size:var(--font-size-lg);--filter-popover-header-label-font-weight:var(--font-weight-bold);--filter-popover-header-button-color:var(--navbar-text-color);--filter-popover-header-button-height:var(--control-height-base);--filter-popover-header-button-font-size:var(--font-size-base);--filter-popover-header-button-font-weight:var(--font-weight-regular);--filter-input-border:1px solid var(--border-color-primary);--filter-input-min-width:200px;--filter-input-padding:var(--input-padding) var(--spacing-sm) var(--input-padding) calc(var(--spacing-unit) * 9);--filter-input-border-radius:var(--input-border-radius);--filter-input-bg-color:var(--input-bg-color);--filter-input-color:var(--text-color-secondary);--filter-input-font-family:var(--font-family-base);--filter-input-font-size:var(--font-size-base);--filter-input-line-height:var(--input-line-height);--filter-input-placeholder-opacity:1;--filter-input-placeholder-color:var(--input-content-placeholder-color);--filter-input-color-hover:var(--text-color-primary);--filter-input-border-hover:1px solid var(--border-color-primary);--filter-input-color-focus:var(--text-color-primary);--filter-input-border-focus:1px solid var(--border-color-primary);--filter-select-min-height:var(--control-height-base);--filter-select-max-width:100%;--filter-select-color:var(--text-color-primary);--filter-select-border-color:var(--border-color-primary);--filter-select-border-radius:calc(var(--spacing-unit) * 1.5);--filter-select-padding:0;--filter-select-border-color-hover:var(--text-color-primary);--filter-select-option-margin:0;--filter-select-wrapper-gap:var(--spacing-xxs);--filter-date-picker-color:var(--text-color-primary);--filter-date-picker-gap:var(--spacing-xs);--filter-date-picker-width:50px;--filter-date-picker-tile-bg-color:var(--color-blue-2);--filter-date-picker-tile-color:var(--text-color-primary);--filter-date-picker-tile-bg-color-hover:var(--color-blue-3);--filter-date-picker-tile-color-hover:var(--text-color-primary);--filter-date-picker-input-width:var(--spacing-md);--filter-date-picker-invalid-input-bg-color:var(--bg-color-raised);--filter-date-picker-button-padding:var(--spacing-xxs);--filter-date-picker-icon-stroke:var(--text-color-secondary);--filter-date-picker-icon-width:var(--spacing-sm);--filter-date-picker-icon-stroke-hover:var(--text-color-primary);--filter-date-picker-wrapper-border-color:var(--border-color-primary);--filter-date-picker-wrapper-radius:calc(var(--spacing-unit) * 1.5);--filter-date-picker-wrapper-padding:calc(var(--spacing-xxs) / 2) var(--spacing-xs);"]);
  }
});

// node_modules/@redocly/theme/src/components/Panel/variables.ts
var responsePanelColors, apiReferencePanels;
var init_variables10 = __esm({
  "node_modules/@redocly/theme/src/components/Panel/variables.ts"() {
    init_styled_components_esm();
    responsePanelColors = Ne(["--panel-response-heading-padding:10px 20px;--panel-response-heading-font-size:var(--font-size-base);--panel-response-heading-line-height:var(--line-height-sm);--panel-response-heading-font-weight:var(--font-weight-bold);--panel-response-heading-text-color:var(--text-color-primary);--panel-response-body-text-color:var(--text-color-secondary);--panel-response-success-border-color:var(--color-success-border);--panel-response-success-heading-bg-color:var(--color-success-bg);--panel-response-success-heading-text-color:var(--panel-response-heading-text-color);--panel-response-success-body-bg-color:transparent;--panel-response-success-body-text-color:var(--panel-response-body-text-color);--panel-response-error-border-color:var(--color-error-border);--panel-response-error-heading-bg-color:var(--color-error-bg);--panel-response-error-heading-text-color:var(--panel-response-heading-text-color);--panel-response-error-body-bg-color:transparent;--panel-response-error-body-text-color:var(--panel-response-body-text-color);--panel-response-redirect-border-color:var(--color-warning-border);--panel-response-redirect-heading-bg-color:var(--color-warning-bg);--panel-response-redirect-heading-text-color:var(--panel-response-heading-text-color);--panel-response-redirect-body-bg-color:transparent;--panel-response-redirect-body-text-color:var(--panel-response-body-text-color);--panel-response-info-border-color:var(--color-info-border);--panel-response-info-heading-bg-color:var(--color-info-bg);--panel-response-info-heading-text-color:var(--panel-response-heading-text-color);--panel-response-info-body-bg-color:transparent;--panel-response-info-body-text-color:var(--panel-response-body-text-color);--panel-response-callback-border-color:var(--color-blue-3);--panel-response-callback-heading-bg-color:var(--color-blue-1);--panel-response-callback-heading-text-color:var(--panel-response-heading-text-color);--panel-response-callback-body-bg-color:transparent;--panel-response-callback-body-text-color:var(--panel-response-body-text-color);.panel-response-success,.panel-response-info,.panel-response-error,.panel-response-redirect,.panel-response-callback{--panel-body-text-color:var(--panel-response-body-text-color);--panel-border-radius-local:calc(1px + var(--panel-border-radius));--panel-heading-text-color:var(--panel-response-heading-text-color);--panel-heading-font-size-local:var(--panel-response-heading-font-size);--panel-heading-font-weight-local:var(--panel-response-heading-font-weight);--panel-heading-line-height-local:var(--panel-response-heading-line-height);--panel-heading-padding-local:var(--panel-response-heading-padding);--panel-heading-border:var(--panel-samples-heading-border);--panel-heading-white-space-local:normal;--panel-body-padding-local:var(--panel-body-padding);}.panel-response-success{--panel-border-local:1px solid var(--panel-response-success-border-color);--panel-body-text-color:var(--panel-response-success-body-text-color);--panel-body-bg-color:var(--panel-response-success-body-bg-color);--panel-heading-bg-color:var(--panel-response-success-heading-bg-color);--panel-heading-text-color:var(--panel-response-success-heading-text-color);}.panel-response-info{--panel-border-local:1px solid var(--panel-response-info-border-color);--panel-body-text-color:var(--panel-response-info-body-text-color);--panel-body-bg-color:var(--panel-response-info-body-bg-color);--panel-heading-bg-color:var(--panel-response-info-heading-bg-color);--panel-heading-text-color:var(--panel-response-info-heading-text-color);}.panel-response-error{--panel-border-local:1px solid var(--panel-response-error-border-color);--panel-body-text-color:var(--panel-response-error-body-text-color);--panel-body-bg-color:var(--panel-response-error-body-bg-color);--panel-heading-bg-color:var(--panel-response-error-heading-bg-color);--panel-heading-text-color:var(--panel-response-error-heading-text-color);}.panel-response-redirect{--panel-border-local:1px solid var(--panel-response-redirect-border-color);--panel-body-text-color:var(--panel-response-redirect-body-text-color);--panel-body-bg-color:var(--panel-response-redirect-body-bg-color);--panel-heading-bg-color:var(--panel-response-redirect-heading-bg-color);--panel-heading-text-color:var(--panel-response-redirect-heading-text-color);}.panel-response-callback{--panel-body-text-color:var(--panel-response-callback-body-text-color);--panel-body-bg-color:var(--panel-response-callback-body-bg-color);--panel-heading-text-color:var(--panel-response-callback-heading-text-color);--panel-body-padding-local:0 0 var(--spacing-base) var(--spacing-lg);}"]);
    apiReferencePanels = Ne(["--panel-gap-horizontal:var(--spacing-xl);--panel-gap-vertical:var(--spacing-base);--panel-border-radius:var(--border-radius);--panel-border:1px solid var(--border-color-secondary);--panel-line-height:var(--line-height-base);--panel-font-size:var(--font-size-base);--panel-font-family:var(--font-family-base);--panel-font-weight:var(--font-weight-semibold);--panel-heading-font-family:var(--font-family-base);--panel-heading-font-size:18px;--panel-heading-font-weight:var(--font-weight-bold);--panel-heading-text-color:var(--text-color-primary);--panel-heading-padding:var(--spacing-md);--panel-heading-line-height:var(--line-height-base);--panel-heading-white-space:'nowrap';--panel-heading-border:1px solid var(--border-color-primary);--panel-body-font-family:var(--font-family-base);--panel-body-font-size:var(--font-size-base);--panel-body-font-weight:var(--font-weight-regular);--panel-body-text-color:var(--text-color-secondary);--panel-body-padding:var(--spacing-md);--panel-body-border:1px solid var(--border-color-primary);.panel-request-schemas,.panel-response-schemas,.panel-callback-schemas,.panel-security-schemas,.panel-default{--panel-text-color:var(--text-color-primary);--panel-font-family-local:var(--panel-font-family);--panel-font-size-local:var(--panel-font-size);--panel-font-weight-local:var(--panel-font-weight);--panel-bg-color:var(--bg-color);--panel-border-local:var(--panel-border);--panel-border-radius-local:calc(1px + var(--panel-border-radius));--panel-chevron-icon-color:var(--text-color-primary);--panel-body-text-color:var(--panel-text-color);--panel-body-font-family-local:var(--panel-body-font-family);--panel-body-font-size-local:var(--panel-body-font-size);--panel-body-font-weight-local:var(--panel-body-font-weight);--panel-body-padding-local:var(--panel-body-padding);--panel-body-bg-color:var(--bg-color);--panel-body-border:var(--panel-body-border);--panel-heading-text-color:var(--panel-text-color);--panel-heading-font-family-local:var(--panel-heading-font-family);--panel-heading-font-size-local:var(--panel-heading-font-size);--panel-heading-font-weight-local:var(--panel-heading-font-weight);--panel-heading-line-height-local:var(--panel-heading-line-height);--panel-heading-padding-local:var(--panel-heading-padding);--panel-heading-bg-color:var(--bg-color);--panel-heading-border:var(--panel-heading-border);--panel-heading-white-space-local:var(--panel-heading-white-space);}--panel-samples-block-bg-color:var(--bg-color);--panel-samples-width:50%;--panel-samples-text-color:var(--text-color-primary);--panel-samples-font-family:var(--panel-font-family);--panel-samples-font-size:var(--panel-font-size);--panel-samples-font-weight:var(--panel-font-weight);--panel-samples-bg-color:var(--layer-color);--panel-samples-border:var(--panel-border);--panel-samples-chevron-icon-color:var(--text-color-primary);--panel-samples-body-text-color:var(--text-color-secondary);--panel-samples-body-font-family:var(--panel-body-font-family);--panel-samples-body-font-size:var(--panel-body-font-size);--panel-samples-body-font-weight:var(--panel-body-font-weight);--panel-samples-body-padding:var(--panel-body-padding);--panel-samples-body-bg-color:var(--layer-color);--panel-samples-body-border:unset;--panel-samples-heading-text-color:var(--text-color-primary);--panel-samples-heading-font-family:var(--panel-heading-font-family);--panel-samples-heading-font-size:var(--panel-font-size);--panel-samples-heading-font-weight:var(--panel-font-weight);--panel-samples-heading-line-height:var(--line-height-sm);--panel-samples-heading-padding:14px var(--spacing-base) 10px 20px;--panel-samples-heading-bg-color:var(--layer-color);--panel-samples-heading-border:unset;.panel-samples-default{--text-color:var(--panel-samples-text-color);--panel-text-color:var(--panel-samples-text-color);--panel-font-family-local:var(--panel-samples-font-family);--panel-font-size-local:var(--panel-samples-font-size);--panel-font-weight-local:var(--panel-samples-font-weight);--panel-bg-color:var(--panel-samples-bg-color);--panel-border-local:var(--panel-samples-border);--panel-border-radius-local:calc(1px + var(--panel-border-radius));--panel-chevron-icon-color:var(--panel-samples-chevron-icon-color);--panel-body-text-color:var(--panel-samples-body-text-color);--panel-body-bg-color:var(--panel-samples-body-bg-color);--panel-body-font-family-local:var(--panel-samples-body-font-family);--panel-body-font-size-local:var(--panel-samples-body-font-size);--panel-body-font-weight-local:var(--panel-samples-body-font-weight);--panel-body-padding-local:0;--panel-body-border-local:var(--panel-samples-body-border);--panel-heading-text-color:var(--panel-samples-heading-text-color);--panel-heading-bg-color:var(--panel-samples-heading-bg-color);--panel-heading-font-family-local:var(--panel-samples-heading-font-family);--panel-heading-font-size-local:var(--panel-samples-heading-font-size);--panel-heading-font-weight-local:var(--panel-samples-heading-font-weight);--panel-heading-line-height-local:var(--panel-samples-heading-line-height);--panel-heading-padding-local:var(--panel-samples-heading-padding);--panel-heading-border:var(--panel-samples-heading-border);}.panel-language-list,.panel-overview,.panel-download,.panel-servers-list,.panel-request-samples,.panel-response-samples,.panel-callback-samples{--text-color:var(--panel-samples-text-color);--panel-text-color:var(--panel-samples-text-color);--panel-font-family-local:var(--panel-samples-font-family);--panel-font-size-local:var(--panel-samples-font-size);--panel-font-weight-local:var(--panel-samples-font-weight);--panel-bg-color:var(--panel-samples-bg-color);--panel-border-local:var(--panel-samples-border);--panel-border-radius-local:var(--panel-border-radius);--panel-chevron-icon-color:var(--panel-samples-chevron-icon-color);--panel-body-text-color:var(--panel-samples-body-text-color);--panel-body-bg-color:var(--panel-samples-body-bg-color);--panel-body-font-family-local:var(--panel-samples-body-font-family);--panel-body-font-size-local:var(--panel-samples-body-font-size);--panel-body-font-weight-local:var(--panel-samples-body-font-weight);--panel-body-padding-local:var(--panel-samples-body-padding);--panel-body-border-local:var(--panel-samples-body-border);--panel-heading-text-color:var(--panel-samples-heading-text-color);--panel-heading-bg-color:var(--panel-samples-heading-bg-color);--panel-heading-font-family-local:var(--panel-samples-heading-font-family);--panel-heading-font-size-local:var(--panel-samples-heading-font-size);--panel-heading-font-weight-local:var(--panel-samples-heading-font-weight);--panel-heading-line-height-local:var(--panel-samples-heading-line-height);--panel-heading-padding-local:var(--panel-samples-heading-padding);--panel-heading-border:var(--panel-samples-heading-border);--panel-heading-border-bottom:var(--panel-samples-border);}.panel-container-response-samples{--panel-z-index:0;}.panel-container-request-samples{--panel-z-index:1;}--panel-samples-tabs-font-size:var(--panel-font-size);--panel-samples-tabs-font-family:var(--panel-font-family);--panel-samples-tabs-font-weight:var(--panel-font-weight);--panel-samples-tabs-text-color:var(--text-color-secondary);--panel-samples-tabs-text-color-hover:var(--text-color-primary);--panel-samples-tabs-text-color-active:var(--text-color-primary);--panel-samples-tabs-text-color-disabled:var(--button-content-color-disabled);--panel-samples-tabs-bg-color:transparent;--panel-samples-tabs-bg-color-hover:transparent;--panel-samples-tabs-bg-color-active:var(--bg-color);--panel-samples-code-block-bg-color:var(--code-block-bg-color);--panel-samples-dropdown-bg-color:var(--bg-color);--panel-samples-dropdown-color:var(--text-color-secondary);--panel-samples-dropdown-border:1px solid var(--border-color-primary);--panel-servers-list-input-bg-color:var(--bg-color-raised);"]);
  }
});

// node_modules/@redocly/theme/src/components/Select/variables.ts
var select;
var init_variables11 = __esm({
  "node_modules/@redocly/theme/src/components/Select/variables.ts"() {
    init_styled_components_esm();
    select = Ne(["--select-font-size:var(--font-size-base);--select-font-weight:var(--font-weight-regular);--select-line-height:var(--line-height-base);--select-text-color:var(--text-color-secondary);--select-border-radius:var(--border-radius);--select-border:var(--border-width) var(--border-style) var(--border-color-primary);--select-input-padding-vertical:6px;--select-input-padding-horizontal:6px;--select-input-padding:var(--select-input-padding-vertical) var(--select-input-padding-horizontal);--select-input-gap:var(--spacing-xs);--select-input-value-gap:var(--spacing-unit);--select-input-border-radius:var(--border-radius);--select-input-font-size:var(--font-size-base);--select-input-font-weight:var(--font-weight-regular);--select-input-line-height:var(--line-height-base);--select-input-bg-color:var(--bg-color);--select-input-placeholder-color:var(--input-content-placeholder-color);--select-list-min-width:100px;--select-list-max-width:300px;--select-list-padding:var(--spacing-xxs);--select-list-border-radius:var(--border-radius-lg);--select-list-bg-color:var(--bg-color);--select-list-box-shadow:var(--bg-raised-shadow);--select-list-item-padding-vertical:var(--spacing-xs);--select-list-item-padding-horizontal:var(--spacing-base);--select-list-item-padding:var(--select-list-item-padding-vertical) var(--select-list-item-padding-horizontal);--select-list-item-gap:var(--spacing-xs);--select-list-item-border-radius:var(--border-radius);--select-list-item-bg-color-active:transparent;--select-list-item-bg-color-hover:var(--menu-item-bg-color-hover);--select-list-item-font-weight-active:var(--font-weight-medium);--select-placeholder-color:var(--color-warm-grey-6);"]);
  }
});

// node_modules/@redocly/theme/src/components/Dropdown/variables.ts
var dropdown;
var init_variables12 = __esm({
  "node_modules/@redocly/theme/src/components/Dropdown/variables.ts"() {
    init_styled_components_esm();
    dropdown = Ne(["--dropdown-menu-font-size:var(--font-size-base);--dropdown-menu-font-weight:var(--font-weight-regular);--dropdown-menu-line-height:var(--line-height-base);--dropdown-menu-text-color:var(--text-color-secondary);--dropdown-menu-min-width:100px;--dropdown-menu-max-width:424px;--dropdown-menu-max-height:300px;--dropdown-menu-padding:var(--spacing-xxs);--dropdown-menu-border-radius:var(--border-radius-lg);--dropdown-menu-box-shadow:var(--bg-raised-shadow);--dropdown-menu-border-color:var(--border-color-secondary);--dropdown-menu-bg-color:var(--bg-color-raised);--dropdown-menu-item-gap:0;--dropdown-menu-item-padding-horizontal:var(--spacing-base);--dropdown-menu-item-padding-vertical:5px;--dropdown-menu-item-separator-padding-top:var(--spacing-xs);--dropdown-menu-item-separator-padding-bottom:var(--spacing-xxs);--dropdown-menu-item-border-radius:var(--border-radius);--dropdown-menu-item-bg-color:transparent;--dropdown-menu-item-bg-color-active:var(--bg-color-hover);--dropdown-menu-item-bg-color-hover:var(--bg-color-hover);--dropdown-menu-item-bg-color-disabled:var(--dropdown-menu-item-bg-color);--dropdown-menu-item-separator-border-color:var(--border-color-primary);--dropdown-menu-item-separator-font-size:var(--font-size-sm);--dropdown-menu-item-separator-line-height:var(--line-height-sm);--dropdown-menu-item-separator-text-color:var(--text-color-disabled);--dropdown-menu-item-justify-content:flex-start;--dropdown-menu-item-color:var(--dropdown-menu-text-color);--dropdown-menu-item-color-hover:var(--dropdown-menu-item-color);--dropdown-menu-item-color-active:var(--dropdown-menu-item-color);--dropdown-menu-item-color-disabled:var(--text-color-disabled);--dropdown-menu-item-color-dangerous:var(--color-error-base);--dropdown-menu-item-border-color-focused:var(--color-blue-4);"]);
  }
});

// node_modules/@redocly/theme/src/components/Tooltip/variables.ts
var tooltip;
var init_variables13 = __esm({
  "node_modules/@redocly/theme/src/components/Tooltip/variables.ts"() {
    init_styled_components_esm();
    tooltip = Ne(["--tooltip-text-color:var(--text-color-secondary);--tooltip-bg-color:var(--bg-color-raised);--tooltip-padding-vertical:var(--spacing-xs);--tooltip-padding-horizontal:var(--spacing-sm);--tooltip-padding:var(--tooltip-padding-vertical) var(--tooltip-padding-horizontal);--tooltip-max-width:250px;.tooltip-copy-button{--tooltip-text-color:var(--text-color-secondary);--tooltip-bg-color:var(--bg-color-raised);}"]);
  }
});

// node_modules/@redocly/theme/src/icons/CheckboxIcon/variables.ts
var checkbox;
var init_variables14 = __esm({
  "node_modules/@redocly/theme/src/icons/CheckboxIcon/variables.ts"() {
    init_styled_components_esm();
    checkbox = Ne(["--checkbox-content-color:var(--text-color-secondary);--checkbox-content-color-hover:var(--text-color-primary);--checkbox-content-color-focused:var(--text-color-primary);--checkbox-content-color-disabled:var(--text-color-disabled);--checkbox-box-color:transparent;--checkbox-box-color-active:var(--color-warm-grey-10);--checkbox-box-color-focused:var(--color-warm-grey-9);--checkbox-box-color-disabled:var(--color-warm-grey-1);--checkbox-border-color:var(--border-color-primary);--checkbox-border-color-active:var(--color-warm-grey-8);--checkbox-border-color-disabled:var(--border-color-secondary);--checkbox-content-color-inverse:var(--color-white);"]);
  }
});

// node_modules/@redocly/theme/src/components/Admonition/variables.ts
var admonition2;
var init_variables15 = __esm({
  "node_modules/@redocly/theme/src/components/Admonition/variables.ts"() {
    init_styled_components_esm();
    admonition2 = Ne(["--admonition-font-size:var(--font-size-base);--admonition-font-weight:var(--font-weight-regular);--admonition-line-height:var(--line-height-base);--admonition-heading-font-size:var(--font-size-lg);--admonition-heading-font-weight:var(--font-weight-regular);--admonition-heading-line-height:var(--line-height-lg);--admonition-heading-letter-spacing:0.3px;--admonition-heading-transform:none;--admonition-margin-horizontal:0;--admonition-margin-vertical:var(--spacing-lg);--admonition-padding-horizontal:var(--spacing-base);--admonition-padding-vertical-xs:var(--spacing-xs);--admonition-padding-vertical-md:var(--spacing-md);--admonition-icon-size:24px;--admonition-border-radius:var(--border-radius-lg);--admonition-border-style:var(--border-style);--admonition-border-width:calc(var(--border-width) * 4);--admonition-info-bg-color:var(--color-info-bg);--admonition-info-heading-text-color:var(--text-color-primary);--admonition-info-text-color:var(--text-color-secondary);--admonition-info-icon-color:var(--color-info-base);--admonition-info-border-color:var(--color-info-border);--admonition-info-border-style:var(--admonition-border-style);--admonition-info-border-width:var(--admonition-border-width);--admonition-info-border:var(--admonition-info-border-width) var(--admonition-info-border-style) var(--admonition-info-border-color);--admonition-info-icon:none;--admonition-warning-bg-color:var(--color-warning-bg);--admonition-warning-text-color:var(--text-color-secondary);--admonition-warning-heading-text-color:var(--text-color-primary);--admonition-warning-icon-color:var(--color-warning-base);--admonition-warning-border-color:var(--color-warning-border);--admonition-warning-border-style:var(--admonition-border-style);--admonition-warning-border-width:var(--admonition-border-width);--admonition-warning-border:var(--admonition-warning-border-width) var(--admonition-warning-border-style) var(--admonition-warning-border-color);--admonition-warning-icon:none;--admonition-danger-bg-color:var(--color-error-bg);--admonition-danger-text-color:var(--text-color-secondary);--admonition-danger-heading-text-color:var(--text-color-primary);--admonition-danger-icon-color:var(--color-error-base);--admonition-danger-border-color:var(--color-error-border);--admonition-danger-border-style:var(--admonition-border-style);--admonition-danger-border-width:var(--admonition-border-width);--admonition-danger-border:var(--admonition-danger-border-width) var(--admonition-danger-border-style) var(--admonition-danger-border-color);--admonition-danger-icon:none;--admonition-success-bg-color:var(--color-success-bg);--admonition-success-text-color:var(--text-color-secondary);--admonition-success-heading-text-color:var(--text-color-primary);--admonition-success-icon-color:var(--color-success-base);--admonition-success-border-color:var(--color-success-border);--admonition-success-border-style:var(--admonition-border-style);--admonition-success-border-width:var(--admonition-border-width);--admonition-success-border:var(--admonition-success-border-width) var(--admonition-success-border-style) var(--admonition-success-border-color);--admonition-success-icon:none;"]);
  }
});

// node_modules/@redocly/theme/src/components/Footer/variables.ts
var footer;
var init_variables16 = __esm({
  "node_modules/@redocly/theme/src/components/Footer/variables.ts"() {
    init_styled_components_esm();
    footer = Ne(["--footer-bg-color:var(--bg-color-raised);--footer-text-color:var(--text-color-secondary);--footer-border-color:var(--border-color-secondary);--footer-padding-vertical:var(--spacing-xl);--footer-padding-horizontal:calc(var(--spacing-unit) * 10);--footer-font-size:var(--font-size-base);--footer-font-weight:var(--font-weight-regular);--footer-column-divider-color:var(--footer-border-color);--footer-title-text-color:var(--text-color-primary);--footer-title-text-color-hover:var(--text-color-primary);--footer-title-font-size:var(--font-size-lg);--footer-title-font-weight:var(--font-weight-bold);--footer-link-text-color:var(--text-color-secondary);--footer-link-color-hover:var(--text-color-primary);--footer-link-padding-vertical:var(--spacing-xs);--footer-link-padding-horizontal:0;--footer-item-icon-width:var(--spacing-lg);--footer-item-icon-height:var(--spacing-lg);--footer-item-icon-margin-right:var(--spacing-sm);--footer-item-icon-border-color:var(--border-color-primary);--footer-item-icon-border-radius:12px;--footer-item-icon-padding:var(--spacing-xxs);--footer-separator-item-font-size:var(--font-size-sm);--footer-separator-item-margin:10px 0 5px 0;--footer-separator-item-opacity:0.75;--footer-column-min-width:calc(var(--spacing-unit) * 30);--footer-column-title-gap:var(--spacing-xs);--footer-column-gap:var(--spacing-lg);--footer-copyright-font-size:var(--footer-font-size);--footer-copyright-text-align:start;--footer-logo-height:var(--logo-height);--footer-logo-width:var(--logo-width);--footer-logo-max-width:var(--logo-max-width);--footer-logo-max-height:var(--logo-max-height);--footer-logo-display:block;--footer-container-max-width:var(--container-width);--mobile-footer-padding-vertical:var(--spacing-base);--mobile-footer-padding-horizontal:var(--spacing-base);"]);
  }
});

// node_modules/@redocly/theme/src/components/Button/variables.ts
var button;
var init_variables17 = __esm({
  "node_modules/@redocly/theme/src/components/Button/variables.ts"() {
    init_styled_components_esm();
    button = Ne(["--button-content-color:var(--color-warm-grey-10);--button-content-color-ghost:var(--text-color-secondary);--button-content-color-inverse:var(--color-white);--button-content-color-disabled:var(--color-warm-grey-5);--button-border-color:var(--color-warm-grey-3);--button-border-color-focused:var(--color-blue-4);--button-border-color-disabled:var(--color-warm-grey-2);--button-border-color-danger:var(--color-raspberry-6);--button-border-color-danger-hover:var(--color-raspberry-7);--button-border-color-danger-pressed:var(--color-raspberry-8);--button-border-width-disabled:0px;--button-bg-color-disabled:var(--color-warm-grey-1);--button-content-color-primary:var(--color-blue-6);--button-content-color-primary-hover:var(--color-blue-7);--button-content-color-primary-pressed:var(--color-blue-8);--button-bg-color-primary:var(--color-blue-6);--button-bg-color-primary-hover:var(--color-blue-7);--button-bg-color-primary-pressed:var(--color-blue-8);--button-bg-color-primary-danger:var(--color-raspberry-6);--button-bg-color-primary-danger-hover:var(--color-raspberry-7);--button-bg-color-primary-danger-pressed:var(--color-raspberry-8);--button-content-color-danger:var(--color-raspberry-6);--button-content-color-danger-hover:var(--color-raspberry-7);--button-content-color-danger-pressed:var(--color-raspberry-8);--button-bg-color-secondary:var(--color-warm-grey-2);--button-bg-color-secondary-hover:var(--color-warm-grey-3);--button-bg-color-secondary-pressed:var(--color-warm-grey-4);--button-bg-color-secondary-danger:var(--color-raspberry-1);--button-bg-color-secondary-danger-hover:var(--color-raspberry-2);--button-bg-color-secondary-danger-pressed:var(--color-raspberry-3);--button-content-color-custom:var(--color-warm-grey-8);--button-content-color-custom-hover:var(--color-warm-grey-11);--button-bg-color-custom:var(--color-white);--button-content-color-link:var(--link-color-primary);--button-content-color-link-hover:var(--link-color-primary-hover);--button-content-color-link-pressed:var(--link-color-primary-pressed);--button-color:var(--button-content-color);--button-color-hover:var(--button-content-color);--button-color-active:var(--button-content-color);--button-bg-color:transparent;--button-bg-color-hover:transparent;--button-border-color-hover:transparent;--button-border-color-active:transparent;--button-font-weight:var(--font-weight-regular);--button-font-size:var(--font-size-base);--button-line-height:var(--line-height-base);--button-border-radius:var(--border-radius-md);--button-padding:5px var(--spacing-sm);--button-text-wrap:nowrap;--button-gap:var(--spacing-xs);--button-border-width:0px;--button-border-style:solid;--button-margin:0;--button-box-shadow:none;--button-hover-box-shadow:none;--button-active-box-shadow:none;--button-icon-size:16px;--button-icon-padding:var(--spacing-xs);--button-icon-padding-small:3px;--button-icon-left-padding:5px var(--spacing-base) 5px 14px;--button-icon-right-padding:5px 14px 5px var(--spacing-base);.button-size-small{--button-border-radius:var(--border-radius);--button-padding:1px var(--spacing-sm);--button-icon-size:14px;--button-icon-padding:5px;--button-icon-left-padding:1px var(--spacing-sm) 1px 10px;--button-icon-right-padding:1px 10px 1px var(--spacing-sm);}.button-size-large{--button-font-size:var(--font-size-lg);--button-line-height:var(--line-height-lg);--border-radius:var(--border-radius-lg);--button-padding:var(--spacing-xs) var(--spacing-md);--button-icon-size:18px;--button-icon-padding:11px;--button-icon-left-padding:var(--spacing-xs) var(--spacing-md) var(--spacing-xs) 18px;--button-icon-right-padding:var(--spacing-xs) 18px var(--spacing-xs) var(--spacing-md);}.button-variant-primary{--button-color:var(--button-content-color-inverse);--button-color-hover:var(--button-content-color-inverse);--button-color-active:var(--button-content-color-inverse);--button-bg-color:var(--button-bg-color-primary);--button-bg-color-hover:var(--button-bg-color-primary-hover);--button-bg-color-active:var(--button-bg-color-primary-pressed);--button-border-color:transparent;--button-bg-color-danger:var(--button-bg-color-primary-danger);--button-bg-color-danger-hover:var(--button-bg-color-primary-danger-hover);--button-bg-color-danger-pressed:var(--button-bg-color-primary-danger-pressed);--button-border-color-danger:transparent;--button-border-color-danger-hover:transparent;--button-border-color-danger-pressed:transparent;--button-content-color-danger:var(--button-content-color-inverse);--button-content-color-danger-hover:var(--button-content-color-inverse);--button-content-color-danger-pressed:var(--button-content-color-inverse);--button-border-width-disabled:0px;}.button-variant-secondary{--button-bg-color:var(--button-bg-color-secondary);--button-bg-color-hover:var(--button-bg-color-secondary-hover);--button-bg-color-active:var(--button-bg-color-secondary-pressed);--button-border-color:transparent;--button-border-color-disabled:transparent;--button-bg-color-danger:var(--button-bg-color-secondary-danger);--button-bg-color-danger-hover:var(--button-bg-color-secondary-danger-hover);--button-bg-color-danger-pressed:var(--button-bg-color-secondary-danger-pressed);--button-border-color-danger:transparent;--button-border-color-danger-hover:transparent;--button-border-color-danger-pressed:transparent;}.button-variant-outlined{--button-color:var(--button-content-color-custom);--button-color-hover:var(--button-content-color-custom-hover);--button-color-active:var(--button-content-color-custom-hover);--button-border-color:var(--border-color-primary);--button-border-color-hover:var(--border-color-primary);--button-border-color-active:var(--border-color-primary);--button-bg-color-disabled:transparent;--button-border-width:1px;--button-border-width-disabled:1px;}.button-variant-text{--button-bg-color-hover:var(--button-bg-color-secondary);--button-bg-color-active:var(--button-bg-color-secondary-hover);--button-bg-color-disabled:transparent;--button-border-color:transparent;--button-border-color-disabled:transparent;--button-bg-color-danger-hover:var(--button-bg-color-secondary-danger);--button-bg-color-danger-pressed:var(--button-bg-color-secondary-danger-hover);--button-border-color-danger:transparent;--button-border-color-danger-hover:transparent;--button-border-color-danger-pressed:transparent;}.button-variant-link{--button-color:var(--button-content-color-link);--button-color-hover:var(--button-content-color-link-hover);--button-color-active:var(--button-content-color-link-pressed);--button-bg-color-disabled:transparent;--button-border-color:transparent;--button-border-color-disabled:transparent;--button-border-color-danger:transparent;--button-border-color-danger-hover:transparent;--button-border-color-danger-pressed:transparent;--button-padding:0;--button-icon-left-padding:0;--button-icon-right-padding:0;}.button-variant-ghost{--button-color:var(--button-content-color-ghost);--button-color-hover:var(--button-content-color);--button-bg-color-disabled:transparent;--button-border-color:transparent;--button-border-color-disabled:transparent;--button-border-color-danger:transparent;--button-border-color-danger-hover:transparent;--button-border-color-danger-pressed:transparent;--button-padding:0;--button-icon-left-padding:0;--button-icon-right-padding:0;}"]);
  }
});

// node_modules/@redocly/theme/src/components/Navbar/variables.ts
var navbar;
var init_variables18 = __esm({
  "node_modules/@redocly/theme/src/components/Navbar/variables.ts"() {
    init_styled_components_esm();
    navbar = Ne(["--navbar-bg-color:var(--bg-color);--navbar-border-color:var(--border-color-secondary);--navbar-border:1px solid var(--navbar-border-color);--navbar-text-color:var(--text-color-secondary);--navbar-height:64px;--navbar-font-size:var(--font-size-base);--navbar-padding:0 var(--spacing-xl);--navbar-font-family:var(--font-family-base);--navbar-container-max-width:100%;--navbar-menu-items-gap:var(--spacing-sm);--navbar-menu-justify-content:flex-start;--navbar-item-font-weight:var(--font-weight-regular);--navbar-item-text-color-active:var(--text-color-primary);--navbar-item-text-decoration-active:none;--navbar-item-bottom-border-active:none;--navbar-item-padding-vertical:var(--spacing-xxs);--navbar-item-padding-horizontal:var(--spacing-sm);--navbar-item-padding:var(--navbar-item-padding-vertical) var(--navbar-item-padding-horizontal);--navbar-item-line-height:var(--line-height-base);--navbar-item-bg-color-active:var(--bg-color-active);--navbar-item-border-radius:var(--border-radius);--navbar-item-bottom-border:none;--navbar-item-text-color-hover:var(--text-color-primary);--navbar-item-text-decoration-hover:none;--navbar-item-bg-color-hover:var(--bg-color);--navbar-item-bottom-border-hover:none;--navbar-item-icon-width:1.5em;--navbar-item-icon-height:1.5em;--navbar-item-icon-margin-right:0.5em;--navbar-logo-height:var(--logo-height);--navbar-logo-width:var(--logo-width);--navbar-logo-margin:var(--logo-margin);--navbar-logo-max-width:var(--logo-max-width);--navbar-logo-max-height:var(--logo-max-height);--navbar-separator-text-color:var(--text-color-description);--navbar-separator-font-size:var(--font-size-sm);--navbar-separator-line-height:var(--line-height-sm);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/variables.ts
var search;
var init_variables19 = __esm({
  "node_modules/@redocly/theme/src/components/Search/variables.ts"() {
    init_styled_components_esm();
    search = Ne(["--search-modal-width:1100px;--search-modal-min-width:460px;--search-modal-min-height:705px;--search-modal-bg-color:var(--modal-bg-color);--search-modal-box-shadow:var(--modal-box-shadow);--search-modal-border-radius:var(--border-radius-lg);--search-modal-border:1px solid var(--border-color-secondary);--search-modal-header-bg-color:var(--bg-color-tonal);--search-modal-header-padding:var(--spacing-sm);--search-modal-footer-padding:var(--spacing-sm);--search-modal-footer-gap:var(--spacing-md);--search-highlight-bg-color:none;--search-highlight-text-color:var(--color-info-base);--search-input-font-family:var(--font-family-base);--search-input-font-size:var(--font-size-base);--search-input-font-weight:var(--font-weight-regular);--search-input-line-height:var(--line-height-base);--search-input-bg-color:var(--bg-color-tonal);--search-input-text-color:var(--input-content-color-active);--search-input-icon-color:var(--icon-color-interactive);--search-input-placeholder-color:var(--input-content-placeholder-color);--search-input-padding:var(--spacing-sm);--search-input-gap:var(--spacing-sm);--search-input-height:40px;--search-input-border:none;--search-input-border-radius:var(--border-radius);--search-group-title-padding:var(--spacing-sm);--search-group-title-bg-color:var(--bg-color-tonal);--search-group-footer-padding:var(--spacing-sm);--search-group-footer-text-color:var(--link-color-primary);--search-item-text-color:var(--text-color-secondary);--search-item-text-color-hover:var(--text-color-primary);--search-item-title-font-size:var(--font-size-base);--search-item-title-font-weight:var(--font-weight-medium);--search-item-title-line-height:var(--line-height-base);--search-item-title-text-color:var(--text-color-primary);--search-item-title-padding:var(--spacing-xxs) 0 2px 0;--search-item-path-text-color:var(--text-color-description);--search-item-bg-color:transparent;--search-item-bg-color-hover:var(--layer-color-ontonal-hover);--search-item-bg-color-active:var(--layer-color);--search-item-border-color-focused:var(--color-blue-4);--search-item-border-color:transparent;--search-item-padding:var(--spacing-sm) var(--spacing-lg);--search-item-gap:var(--spacing-xxs);--search-item-product-icon-size:16px;--search-recent-item-font-size:var(--font-size-base);--search-recent-item-font-weight:var(--font-weight-regular);--search-recent-item-line-height:var(--line-height-base);--search-recent-item-padding:var(--spacing-xs) var(--spacing-lg);--search-recent-item-text-color:var(--search-item-text-color);--search-recent-item-text-color-hover:var(--search-item-text-color-hover);--search-recent-item-bg-color-hover:var(--search-item-bg-color-hover);--search-recent-item-title-font-size:var(--font-size-base);--search-recent-item-title-font-weight:var(--font-weight-semibold);--search-recent-item-title-line-height:var(--line-height-base);--search-recent-item-title-text-color:var(--text-color-primary);--search-recent-item-title-padding:var(--spacing-md) var(--spacing-lg) var(--spacing-xxs) var(--spacing-lg);--search-recent-item-bg-color-active:var(--layer-color);--search-recent-item-border-color-focused:var(--color-blue-4);--search-suggested-item-font-size:var(--font-size-base);--search-suggested-item-font-weight:var(--font-weight-regular);--search-suggested-item-line-height:var(--line-height-base);--search-suggested-item-padding:var(--spacing-xs) var(--spacing-lg);--search-suggested-item-text-color:var(--search-item-text-color);--search-suggested-item-text-color-hover:var(--search-item-text-color-hover);--search-suggested-item-bg-color-hover:var(--search-item-bg-color-hover);--search-suggested-item-title-font-size:var(--font-size-base);--search-suggested-item-title-font-weight:var(--font-weight-semibold);--search-suggested-item-title-line-height:var(--line-height-base);--search-suggested-item-title-text-color:var(--text-color-primary);--search-suggested-item-title-padding:var(--spacing-md) var(--spacing-lg) var(--spacing-xxs) var(--spacing-lg);--search-suggested-item-bg-color-active:var(--layer-color);--search-suggested-item-border-color-focused:var(--color-blue-4);--search-shortcuts-gap:var(--spacing-xs);--search-message-font-size:var(--font-size-lg);--search-message-font-weight:var(--font-weight-regular);--search-message-line-height:var(--line-height-lg);--search-message-text-color:var(--text-color-secondary);--search-message-gap:var(--spacing-md);--search-header-buttons-gap:var(--spacing-sm);--search-header-buttons-padding-left:var(--spacing-sm);--search-header-buttons-border-left:1px solid var(--border-color-primary);--search-filter-width:450px;--search-filter-bg-color:var(--search-modal-bg-color);--search-filter-padding:var(--spacing-lg);--search-filter-font-size:var(--font-size-base);--search-filter-font-weight:var(--font-weight-regular);--search-filter-line-height:var(--line-height-base);--search-filter-header-padding:var(--spacing-md) 0;--search-filter-header-text-color:var(--text-color-helper);--search-filter-header-z-index:var(--z-index-raised);--search-filter-fields-gap:var(--spacing-base);--search-filter-field-select-option-gap:var(--spacing-unit);--search-filter-field-select-option-text-padding:0 0 0 var(--spacing-unit);--search-filter-field-select-footer-padding:0 0 0 var(--spacing-unit);--search-filter-field-select-footer-text-color:var(--text-color-helper);--search-filter-field-tags-gap:var(--spacing-unit);--search-filter-field-tags-tag-margin:var(--spacing-unit) 0 0 0;--search-trigger-gap:var(--spacing-xs);--search-trigger-border-width:var(--border-width);--search-trigger-border-style:var(--border-style);--search-trigger-border-color:var(--input-border-color);--search-trigger-border-color-hover:var(--input-border-color-hover);--search-trigger-border-radius:var(--border-radius-md);--search-trigger-padding-vertical:var(--input-padding-vertical);--search-trigger-padding-horizontal:var(--input-padding-horizontal);--search-trigger-padding:var(--search-trigger-padding-vertical) var(--search-trigger-padding-horizontal);--search-trigger-color:var(--input-content-placeholder-color);--search-trigger-bg-color:var(--navbar-bg-color);--search-trigger-icon-size:16px;--search-trigger-line-height:var(--line-height-base);--search-ai-spinner-icon-color:var(--icon-color-interactive);--search-ai-checkmark-icon-color:var(--icon-color-interactive);--search-ai-response-padding:var(--spacing-lg);--search-ai-response-gap:var(--spacing-sm);--search-ai-response-header-gap:var(--spacing-md);--search-ai-question-font-size:var(--font-size-xl);--search-ai-question-font-weight:var(--font-weight-semibold);--search-ai-question-line-height:var(--line-height-xl);--search-ai-question-text-color:var(--text-color-primary);--search-ai-response-body-gap:var(--spacing-xl);--search-ai-response-body-padding:0 40px;--search-ai-response-text-color:var(--text-color-secondary);--search-ai-response-text-font-size:var(--font-size-lg);--search-ai-response-text-line-height:var(--line-height-lg);--search-ai-resources-gap:var(--spacing-base);--search-ai-resources-title-font-weight:var(--font-weight-medium);--search-ai-resources-title-font-size:var(--font-size-lg);--search-ai-resources-title-line-height:var(--line-height-lg);--search-ai-resource-tags-gap:var(--spacing-base);--search-ai-resource-tag-text-color:var(--text-color-secondary);--search-ai-resource-tag-icon-color:var(--text-color-secondary);"]);
  }
});

// node_modules/@redocly/theme/src/components/Menu/variables.ts
var menu, mobileMenu;
var init_variables20 = __esm({
  "node_modules/@redocly/theme/src/components/Menu/variables.ts"() {
    init_styled_components_esm();
    menu = Ne(["--menu-padding:0px;--menu-margin:0px;--menu-list-style:none;--menu-content-color:var(--text-color-secondary);--menu-content-title-color:var(--text-color-description);--menu-content-color-active:var(--text-color-primary);--menu-content-color-disabled:var(--text-color-disabled);--menu-item-font-family:var(--sidebar-font-family);--menu-item-font-size:var(--sidebar-font-size);--menu-item-font-weight:var(--font-weight-regular);--menu-item-line-height:var(--line-height-base);--menu-item-text-color:var(--sidebar-text-color);--menu-item-bg-color:transparent;--menu-item-bg-color-hover:var(--color-hover-base);--menu-item-bg-color-active:var(--tree-bg-color-active);--menu-item-color-hover:var(--tree-content-color-hover);--menu-item-color-active:var(--tree-content-color-default);--menu-item-padding-vertical:var(--spacing-unit);--menu-item-padding-horizontal:var(--spacing-xxs);--menu-item-nested-offset:var(--spacing-sm);--menu-item-label-align-items:center;--menu-item-label-transition:background-color 0.3s,color 0.3s;--menu-item-label-word-break:break-word;--menu-item-label-margin-horizontal:var(--sidebar-margin-horizontal);--menu-item-label-margin-vertical:0;--menu-item-label-margin:var(--menu-item-label-margin-vertical) var(--menu-item-label-margin-horizontal);--menu-item-label-padding:var(--menu-item-padding-vertical) var(--menu-item-padding-horizontal);--menu-item-label-gap:var(--spacing-xs);--menu-item-label-border-radius:6px;--menu-item-label-chevron-size:12px;--menu-item-label-chevron-offset:calc(var(--menu-item-label-gap) + var(--menu-item-label-chevron-size));--menu-item-sublabel-font-family:inherit;--menu-item-sublabel-font-size:var(--font-size-sm);--menu-item-sublabel-font-weight:var(--font-weight-regular);--menu-item-sublabel-text-color:var(--menu-item-text-color);--menu-item-sublabel-margin:0 0 0 var(--spacing-base);--menu-item-icon-size:var(--spacing-base);--menu-item-icon-margin:0px;--menu-item-icon-border-radius:100%;--menu-item-external-icon-size:10px;--menu-item-separator-line-height:1px;--menu-item-separator-line-bg-color:var(--border-color-secondary);--menu-back-button-font-family:var(--menu-item-font-family);--menu-back-button-font-size:var(--menu-item-font-size);--menu-back-button-transform:inherit;--menu-back-button-text-color:var(--menu-item-text-color);--menu-back-button-bg-color:transparent;--menu-back-button-text-color-hover:var(--menu-item-color-active);--menu-back-button-bg-color-hover:transparent;--menu-back-button-icon-size:var(--menu-item-label-chevron-size);--menu-back-button-icon-color:var(--menu-item-text-color);--menu-back-button-margin:0 0 var(--spacing-base) var(--sidebar-margin-horizontal);--menu-back-padding-left:var(--spacing-xs);--menu-back-button-gap:var(--spacing-xs);--menu-back-button-icon:none;.menu-item-type-separator{--menu-item-label-chevron-offset:0px;}.menu-item-type-separator-primary{--menu-item-font-weight:var(--font-weight-bold);--menu-item-text-color:var(--text-color-primary);--menu-item-font-size:var(--sidebar-font-size);--menu-item-line-height:var(--line-height-base);}.menu-item-type-separator-secondary{--menu-item-font-weight:var(--font-weight-bold);--menu-item-text-color:var(--text-color-secondary);--menu-item-font-size:var(--font-size-sm);--menu-item-line-height:var(--line-height-sm);}"]);
    mobileMenu = Ne(["--menu-mobile-height:calc(100vh - var(--navbar-height));--menu-mobile-width:100%;--menu-mobile-z-index:var(--z-index-raised);--menu-mobile-left:0;--menu-mobile-top:var(--navbar-height);--menu-mobile-transition:0.5s;--menu-mobile-bg:var(--bg-color);--menu-mobile-margin:var(--menu-mobile-items-margin-top) var(--menu-mobile-margin-horizontal) 0 var(--menu-mobile-margin-horizontal);--menu-mobile-line-height:var(--line-height-base);--menu-mobile-padding-top:var(--spacing-sm);--menu-mobile-margin-horizontal:var(--spacing-xs);--menu-mobile-items-margin-top:var(--spacing-xxs);--menu-mobile-profile-bg-color:var(--bg-color);--menu-mobile-profile-border-color:var(--border-color-secondary);--menu-mobile-control-button-padding-vertical:var(--spacing-xxs);--menu-mobile-control-button-padding-horizontal:var(--spacing-xxs);--menu-mobile-control-button-padding:var(--menu-mobile-control-button-padding-vertical) var(--menu-mobile-control-button-padding-horizontal);--menu-mobile-control-button-margin-vertical:0;--menu-mobile-control-button-margin-horizontal:var(--spacing-xs);--menu-mobile-control-button-margin:var(--menu-mobile-control-button-margin-vertical) var(--menu-mobile-control-button-margin-horizontal);--menu-mobile-control-button-font-size:var(--font-size-sm);--menu-mobile-control-button-weight:var(--font-weight-regular);--menu-mobile-control-button-line-height:var(--line-height-sm);--menu-mobile-control-button-color:var(--menu-item-text-color);--menu-mobile-control-button-color-hover:var(--text-color-primary);--menu-mobile-control-button-text-align:center;--menu-mobile-product-name-font-size:var(--menu-item-font-size);--menu-mobile-product-name-font-weight:var(--font-weight-bold);--menu-mobile-product-name-line-height:var(--line-height-base);--menu-mobile-product-name-text-color:var(--menu-item-text-color);--menu-mobile-product-name-border-radius:var(--menu-item-label-border-radius);--menu-mobile-product-name-border:none;--menu-mobile-product-name-padding:var(--menu-item-padding-vertical) var(--menu-item-padding-horizontal);--menu-mobile-product-name-margin:var(--menu-item-label-margin);--menu-container-padding-top:var(--sidebar-offset-top);"]);
  }
});

// node_modules/@redocly/theme/src/components/CodeBlock/variables.ts
var code2;
var init_variables21 = __esm({
  "node_modules/@redocly/theme/src/components/CodeBlock/variables.ts"() {
    init_styled_components_esm();
    code2 = Ne(["@font-face{font-family:'TreeViewIcons';src:url('data:application/font-woff;base64,d09GRgABAAAAAAgYAAsAAAAAEGAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAPwAAAFY1UkH9Y21hcAAAAYQAAAB/AAACCtvO7yxnbHlmAAACBAAAA+MAAAlACm1VqmhlYWQAAAXoAAAAKgAAADZfxj5jaGhlYQAABhQAAAAYAAAAJAFbAMFobXR4AAAGLAAAAA4AAAA0CGQAAGxvY2EAAAY8AAAAHAAAABwM9A9CbWF4cAAABlgAAAAfAAAAIAEgAHZuYW1lAAAGeAAAATcAAAJSfUrk+HBvc3QAAAewAAAAZgAAAIka0DSfeJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGRYyjiBgZWBgaGQoRZISkLpUAYOBj0GBiYGVmYGrCAgzTWFweEV4ysehs1ArgDDFgZGIA3CDAB2tQjAAHic7ZHLEcMwCESfLCz/VEoKSEE5parURxMOC4c0Ec283WGFdABgBXrwCAzam4bOK9KWeefM3Hhmjyn3ed+hTRq1pS7Ra/HjYGPniHcXMy4G/zNTP7/KW5HTXArkvdBW3ArN19dCG/NRIN8K5HuB/CiQn4U26VeBfBbML9NEH78AeJyVVc1u20YQ3pn905JcSgr/YsuSDTEg3cR1bFEkYyS1HQcQ2jQF2hot6vYSoECKnnPLA/SWUy9NTr31Bfp+6azsNI0SGiolzu7ODnfn+2Z2lnHG3rxhr9nfLGKbLGesncAYYnUHpsVnMG/uwyzNdFIVd6HI6twp8+R3LpT4TSglLoTHwwJgG2/dFvKrl9yI507/p5CCq4LTxB/PlPjkFaMHnWB/0S9je7RTPS+utnGtom1T2q5pk/e3H0M1S18rsXAL7wgpxQuhAmteGGvNjmcfGXuwnFNOPCXxeOGmnjrBLWNyBeNtVq2Hs03yus1aPS3mzSyNVSfu588iW1Q93x/4fjcHn+5EkS2tMxr4xIRa8ese+4L9uKZnxEqs8+ldyN9atU02a5t5uQ8hZGms1QTKpaKYqnipiNNOAIeIADC0JNEOYY+jtSgFoOchiAjRGFACpUTRje8bwIYWGCDEgENY8MEu9bnCYCdAxftoNg0KiSpUtPaHcanYwzXRu6T4r40b5npal3V7UHWCPJW9niyl1vIHgoujEXZjudBkeWkOeMQBRmbEPhKzij1i52t6/TadL+3q7H0U1eq4E8cG4gIIwQLx8VX7ToPXgPrehVc5QXHR7gMSmwjKfaYAP4KvZV+yn9bE18y2IY37LvtyrSg3i7ZK++B603ndlg/gBJpZRsfpBI6hyiaQ6FjlnThz8lAC3LgBIMnXDOAXxBQ4SIgiEhx2AcGCAwAhwjXRpCQms42bwAUt75BvAwgONzdgOfWEwzk4Ylzj4mz+5YEzzXzWX9aNlk7ot65y5QnBHsNlm6zDTu7sspRqG4V+fgJ1lVBZ07Nm7s5nemo3Lf3PO7iwtnroQ5/YDGwPRUip6fV6L+27p+wCHwSvPs85UnHqId8NAn5IBsKdv95KrL9m31Gsf2a/rluDslk1y1J9GE+LUmmVT/OyOHaFKGnapt2H5XeJTmKd6qYNoVVZOy+pWzr7rMip3ndG/4mQSoUcMbAqG/YNIAdXhkAqTVruXhocSKN0iS4Rwj7vSS4fcF/La07BfeQSuRAcFeW+9igjwPhhYPpGCBCBHhxiKMyFMFT7ziRH7RtfIWdiha+TdW+Rqs7bLHdN2ZJIKl0um0x3op9saYr0REeRdj09pl43pMzz4tjztrY8L4o8bzT+oLY27PR/eFtXs/YY5vtwB5Iqad14eYN0ujveMaGWqkdU3TKbQSC5Uvxaf4fA7SAQ3r2tEfIhd4duld91bwMisjqBw22orthNcroXl7KqO1329HBgAexgoCfGAwiDPoBnriki3lmNojrzvD0tjo6E3vPYP6E2BMIAeJxjYGRgYADiY8t3FsTz23xl4GbYzIAB/v9nWM6wBcjgYGAC8QH+QQhZAAB4nGNgZGBg2MzAACeXMzAyoAJeADPyAh14nGNgAILNpGEA0fgIZQAAAAAAAAA2AHIAvgE+AZgCCAKMAv4DlgPsBEYEoHicY2BkYGDgZchi4GQAASYg5gJCBob/YD4DABTSAZcAeJx9kU1uwjAQhV/4qwpqhdSqi67cTTeVEmBXDgBbhBD7AHYISuLUMSD2PUdP0HNwjp6i676k3qQS9Ujjb968mYUNoI8zPJTHw02Vy9PAFatfbpLuHbfIT47b6MF33KH+6riLF0wc93CHN27wWtdUHvHuuIFbfDhuUv903CKfHbfxgC/HHerfjrtYen3HPTx7ambiIl0YKQ+xPM5ltE9CU9NqxVKaItaZGPqDmj6VmTShlRuxOoniEI2sVUIZnYqJzqxMEi1yo3dybf2ttfk4CJTT/bVOMYNBjAIpFiTJOLCWOGLOHGGPBCE7l32XO0tmw04MjQwCQ7774B//lDmrZkJY3hvOrHBiLuiJMKJqoVgrejQ3CP5Yubt0JwxNJa96Oypr6j621VSOMQKG+uP36eKmHylcb0MAeJxtwdEOgjAMBdBeWEFR/Mdl7bTJtMsygc/nwVfPoYF+QP+tGDAigDFhxgVXLLjhjhUPCtmKTtmLaGN7x6dy/Io5bybqoevRQ3LRObb0sk3HKpn1SFqW6ru26vbpYfcmRCccJhqsAAA=') format('woff');}--code-font-size:var(--font-size-sm);--code-font-family:var(--font-family-monospaced);--code-font-weight:var(--font-weight-regular);--code-line-height:var(--line-height-sm);--code-wrap:pre;--code-word-break:break-word;--inline-code-font-size:var(--code-font-size);--inline-code-font-family:var(--code-font-family);--inline-code-font-weight:var(--code-font-weight);--inline-code-line-height:var(--code-line-height);--inline-code-text-color:var(--text-color-secondary);--inline-code-bg-color:var(--border-color-secondary);--inline-code-border-color:var(--border-color-primary);--inline-code-border-radius:var(--border-radius);--code-block-font-size:var(--code-font-size);--code-block-font-family:var(--code-font-family);--code-block-line-height:var(--code-line-height);--code-block-font-weight:var(--code-font-weight);--code-block-text-color:var(--text-color-secondary);--code-block-bg-color:var(--layer-color);--code-block-padding:var(--spacing-xs) 0 var(--spacing-xs) var(--spacing-sm);--code-block-margin:0;--code-block-max-height:calc(100vh - 300px);--code-block-word-break:initial;--code-block-controls-font-size:var(--font-size-base);--code-block-controls-font-family:var(--font-family-base);--code-block-controls-text-color:var(--text-color-primary);--code-block-controls-font-weight:var(--font-weight-medium);--code-block-controls-bg-color:transparent;--code-block-controls-border:1px solid var(--border-color-secondary);--code-block-icon-controls-bg-color:var(--code-block-controls-bg-color);--code-block-text-controls-bg-color:var(--code-block-controls-bg-color);--code-block-controls-padding:var(--spacing-unit) var(--spacing-unit) var(--spacing-unit) var(--spacing-base);--code-block-controls-height:20px;--code-block-controls-width:20px;--code-block-tokens-default-color:var(--text-color-secondary);--code-block-tokens-comment-color:var(--input-content-placeholder-color);--code-block-tokens-prolog-color:var(--code-block-tokens-comment-color);--code-block-tokens-doctype-color:var(--code-block-tokens-comment-color);--code-block-tokens-cdata-color:var(--code-block-tokens-comment-color);--code-block-tokens-property-color:var(--code-block-tokens-default-color);--code-block-tokens-tag-color:var(--code-block-tokens-default-color);--code-block-tokens-number-color:var(--code-block-tokens-default-color);--code-block-tokens-constant-color:var(--code-block-tokens-default-color);--code-block-tokens-symbol-color:var(--code-block-tokens-default-color);--code-block-tokens-boolean-color:var(--color-green-7);--code-block-tokens-string-color:var(--color-blue-7);--code-block-tokens-property-string-color:var(--color-blue-7);--code-block-tokens-selector-color:var(--code-block-tokens-string-color);--code-block-tokens-attr-name-color:var(--code-block-tokens-string-color);--code-block-tokens-char-color:var(--code-block-tokens-string-color);--code-block-tokens-builtin-color:var(--code-block-tokens-string-color);--code-block-tokens-inserted-color:var(--code-block-tokens-string-color);--code-block-tokens-link-color:var(--color-blue-7);--code-block-tokens-operator-color:var(--color-carrot-7);--code-block-tokens-entity-color:var(--code-block-tokens-operator-color);--code-block-tokens-url-color:var(--code-block-tokens-operator-color);--code-block-tokens-variable-color:var(--code-block-tokens-operator-color);--code-block-tokens-keyword-color:var(--color-magenta-7);--code-block-tokens-atrule-color:var(--code-block-tokens-keyword-color);--code-block-tokens-attr-value-color:var(--code-block-tokens-keyword-color);--code-block-tokens-regex-color:var(--color-carrot-7);--code-block-tokens-regex-char-escape-color:var(--color-grass-8);--code-block-tokens-important-color:var(--code-block-tokens-regex-color);--code-block-tokens-deleted-color:var(--color-red-7);--code-block-tokens-class-name-color:var(--color-carrot-7);--code-block-tokens-function-color:var(--color-carrot-7);--code-block-tokens-invalid-color:var(--color-orange-8);--code-block-tokens-message-error-color:var(--code-block-tokens-invalid-color);--code-block-tokens-unmatched-color:var(--code-block-tokens-invalid-color);--code-block-tokens-markup-bg-color:var(--color-grass-1);--code-block-tokens-markup-foreground-color:var(--color-grass-8);--code-block-tokens-markup-changed-color:var(--color-carrot-1);--code-block-tokens-markup-deleted-color:var(--color-magenta-1);--code-block-tokens-markup-quote-color:var(--color-grass-8);--code-block-tokens-markup-ignored-color:var(--color-blue-1);--code-block-tokens-warm-bg-color:var(--color-warm-grey-2);--code-block-tokens-warm-foreground-color:var(--color-warm-grey-8);--code-block-tokens-meta-diff-range-color:var(--color-purple-8);--code-block-tree-view-icon-font-family:'TreeViewIcons';--code-block-tree-view-lines-color:var(--border-color-primary);"]);
  }
});

// node_modules/@redocly/theme/src/components/Product/variables.ts
var productPicker;
var init_variables22 = __esm({
  "node_modules/@redocly/theme/src/components/Product/variables.ts"() {
    init_styled_components_esm();
    productPicker = Ne(["--product-logo-gap:var(--spacing-xs);--product-picker-dropdown-font-size:var(--dropdown-menu-font-size);--product-picker-dropdown-font-weight:var(--dropdown-menu-font-weight);--product-picker-dropdown-line-height:var(--dropdown-menu-line-height);--product-picker-dropdown-text-color:var(--dropdown-menu-text-color);--product-picker-dropdown-min-width:var(--dropdown-menu-min-width);--product-picker-dropdown-max-width:var(--dropdown-menu-max-width);--product-picker-dropdown-max-height:var(--dropdown-menu-max-height);--product-picker-dropdown-padding:var(--dropdown-menu-padding );--product-picker-dropdown-border-radius:var(--dropdown-menu-border-radius);--product-picker-dropdown-box-shadow:var(--dropdown-menu-box-shadow);--product-picker-dropdown-border-color:var(--dropdown-menu-border-color);--product-picker-dropdown-bg-color:var(--dropdown-menu-bg-color);--product-picker-dropdown-item-padding-horizontal:20px;--product-picker-dropdown-item-padding-vertical:var(--dropdown-menu-item-padding-vertical);--product-picker-dropdown-item-separator-padding-top:var(--dropdown-menu-item-separator-padding-top );--product-picker-dropdown-item-separator-padding-bottom:var(--dropdown-menu-item-separator-padding-bottom );--product-picker-dropdown-item-border-radius:var(--dropdown-menu-item-border-radius );--product-picker-dropdown-item-bg-color-active:var(--dropdown-menu-item-bg-color-active);--product-picker-dropdown-item-bg-color-hover:var(--dropdown-menu-item-bg-color-hover);--product-picker-dropdown-item-bg-color-disabled:var(--dropdown-menu-item-bg-color-disabled);--product-picker-dropdown-item-separator-border-color:var(--dropdown-menu-item-separator-border-color);--product-picker-dropdown-item-color-dangerous:var(--dropdown-menu-item-color-dangerous);--product-picker-dropdown-item-color-disabled:var(--dropdown-menu-item-color-disabled);--product-picker-dropdown-item-color-active:var(--dropdown-menu-item-color-active);--product-picker-dropdown-item-color-hover:var(--dropdown-menu-item-color-hover);--product-picker-dropdown-item-border-color-focused:var(--dropdown-menu-item-border-color-focused);"]);
  }
});

// node_modules/@redocly/theme/src/components/Markdown/variables.ts
var markdown;
var init_variables23 = __esm({
  "node_modules/@redocly/theme/src/components/Markdown/variables.ts"() {
    init_styled_components_esm();
    markdown = Ne(["--md-content-max-width:688px;--md-content-padding:25px 0px 25px 0px;--md-content-font-size:var(--font-size-base);--md-content-font-family:var(--font-family-base);--md-content-line-height:var(--line-height-base);--md-content-font-weight:var(--font-weight-regular);--md-content-text-color:var(--text-color-secondary);--md-blockquote-margin-vertical:1.5em;--md-blockquote-margin-horizontal:0;--md-blockquote-padding-vertical:0;--md-blockquote-padding-horizontal:var(--spacing-base);--md-blockquote-border-color:var(--border-color-primary);--md-blockquote-bg-color:transparent;--md-blockquote-border-left:4px solid var(--md-blockquote-border-color);--md-blockquote-text-color:var(--text-color-secondary);--md-blockquote-box-shadow:none;--md-paragraph-margin:0 0 var(--spacing-xs) 0;--md-table-font-size:var(--md-content-font-size);--md-table-line-height:var(--line-height-md);--md-table-margin-vertical:20px;--md-table-bg-color:transparent;--md-table-border-radius:var(--border-radius);--md-table-border-width:1px;--md-table-header-bg-color:var(--layer-color);--md-table-border-color:var(--border-color-secondary);--md-table-stripe-bg-color:var(--md-table-bg-color);--md-table-cell-text-color:var(--text-color-secondary);--md-table-cell-padding:var(--spacing-xs) var(--spacing-sm);--md-table-footer-cell-padding:var(--spacing-xxs) var(--spacing-sm);--md-table-head-bg-color:var(--md-table-bg-color);--md-table-head-text-color:var(--text-color-primary);--md-table-head-font-weight:var(--font-weight-medium);--md-hr-bg-color:transparent;--md-hr-border-color:var(--border-color-secondary);--md-hr-height:unset;--md-hr-margin-vertical:20px;--md-list-left-padding:1.25rem;--md-list-margin:0 0 var(--spacing-xs) 0;--md-list-item-margin:0.25rem;--md-list-item-style:inherit;--md-checkbox-list-item-style:none;--md-numbered-list-number-display:none;--md-numbered-list-item-style:var(--md-list-item-style);--md-numbered-list-number-text-color:var(--md-content-text-color);--md-numbered-list-number-font-size:var(--md-content-font-size);--md-numbered-list-number-font-family:var(--md-content-font-family);--md-numbered-list-number-font-weight:var(--md-content-font-weight);--md-numbered-list-number-bg-color:var(--bg-color-active);--md-numbered-list-number-border-radius:10px;--md-numbered-list-number-margin-right:5px;--md-numbered-list-number-padding:0 5px;--md-pre-margin:0 0 var(--spacing-xs) 0;"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Tabs/variables.ts
var markdownTabs;
var init_variables24 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Tabs/variables.ts"() {
    init_styled_components_esm();
    markdownTabs = Ne(["--md-tabs-container-text-color:inherit;--md-tabs-container-font-size:var(--md-content-font-size);--md-tabs-container-font-family:var(--md-content-font-family);--md-tabs-container-font-style:normal;--md-tabs-container-font-weight:var(--font-weight-regular);--md-tabs-container-bg-color:inherit;--md-tabs-container-margin:10px 0;--md-tabs-container-padding:0;--md-tabs-container-border:none;--md-tabs-border:solid var(--border-color-primary);--md-tabs-border-width:0 0 1px 0;--md-tabs-padding:0;--md-tabs-content-text-color:inherit;--md-tabs-content-font-size:var(--md-content-font-size);--md-tabs-content-font-family:var(--md-content-font-family);--md-tabs-content-font-style:normal;--md-tabs-content-font-weight:var(--font-weight-regular);--md-tabs-content-bg-color:inherit;--md-tabs-content-margin:0;--md-tabs-content-padding:var(--spacing-base) 0;--md-tabs-content-border:none;--md-tabs-tab-text-color:var(--text-color-primary);--md-tabs-tab-font-size:var(--font-size-lg);--md-tabs-tab-font-family:var(--md-content-font-family);--md-tabs-tab-font-style:normal;--md-tabs-tab-font-weight:var(--font-weight-bold);--md-tabs-tab-bg-color:none;--md-tabs-tab-margin:0 0 -1px 0;--md-tabs-tab-padding:var(--spacing-sm) var(--spacing-base);--md-tabs-tab-border:none;--md-tabs-tab-border-width:0;--md-tabs-tab-border-radius:0;--md-tabs-active-tab-text-color:var(--text-color-primary);--md-tabs-active-tab-font-size:var(--md-tabs-tab-font-size);--md-tabs-active-tab-font-family:var(--md-tabs-tab-font-family);--md-tabs-active-tab-font-style:normal;--md-tabs-active-tab-font-weight:var(--md-tabs-tab-font-weight);--md-tabs-active-tab-bg-color:var(--bg-color);--md-tabs-active-tab-padding:var(--md-tabs-tab-padding);--md-tabs-active-tab-border-color:var(--text-color-primary);--md-tabs-active-tab-border-width:0 0 2px 0;--md-tabs-active-tab-border-radius:var(--md-tabs-tab-border-radius);--md-tabs-hover-tab-text-color:var(--md-tabs-tab-text-color);--md-tabs-hover-tab-font-size:var(--md-tabs-tab-font-size);--md-tabs-hover-tab-font-family:var(--md-tabs-tab-font-family);--md-tabs-hover-tab-font-style:normal;--md-tabs-hover-tab-font-weight:var(--md-tabs-tab-font-weight);--md-tabs-hover-tab-bg-color:var(--md-tabs-tab-bg-color);--md-tabs-hover-tab-padding:var(--md-tabs-tab-padding);--md-tabs-hover-tab-border-color:var(--border-color-secondary);--md-tabs-hover-tab-border-width:0 0 1.5px 0;--md-tabs-hover-tab-border-radius:var(--md-tabs-tab-border-radius);"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Mermaid/variables.ts
var mermaid;
var init_variables25 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Mermaid/variables.ts"() {
    init_styled_components_esm();
    mermaid = Ne(["--mermaid-bg-color:var(--bg-color-raised);--mermaid-border-radius:var(--border-radius-lg);--mermaid-font-family:var(--font-family-base);"]);
  }
});

// node_modules/@redocly/theme/src/components/LastUpdated/variables.ts
var lastUpdated;
var init_variables26 = __esm({
  "node_modules/@redocly/theme/src/components/LastUpdated/variables.ts"() {
    init_styled_components_esm();
    lastUpdated = Ne(["--last-updated-text-color:var(--text-color-secondary);--last-updated-font-size:var(--font-size-sm);--last-updated-font-family:var(--font-family-base);--last-updated-line-height:var(--line-height-base);"]);
  }
});

// node_modules/@redocly/theme/src/components/Logo/variables.ts
var logo;
var init_variables27 = __esm({
  "node_modules/@redocly/theme/src/components/Logo/variables.ts"() {
    init_styled_components_esm();
    logo = Ne(["--logo-height:2rem;--logo-width:auto;--logo-margin:16px;--logo-max-width:285px;--logo-max-height:285px;"]);
  }
});

// node_modules/@redocly/theme/src/components/StatusCode/variables.ts
var statusCode;
var init_variables28 = __esm({
  "node_modules/@redocly/theme/src/components/StatusCode/variables.ts"() {
    init_styled_components_esm();
    statusCode = Ne(["--status-code-500-bg-color:var(--color-error-base);--status-code-400-bg-color:var(--color-error-base);--status-code-300-bg-color:var(--color-warning-base);--status-code-200-bg-color:var(--color-success-base);--status-code-100-bg-color:var(--color-info-base);--status-code-border:1px solid var(--bg-color);--status-code-width:6px;--status-code-height:6px;"]);
  }
});

// node_modules/@redocly/theme/src/components/Segmented/variables.ts
var segmented;
var init_variables29 = __esm({
  "node_modules/@redocly/theme/src/components/Segmented/variables.ts"() {
    init_styled_components_esm();
    segmented = Ne(["--segmented-font-size:var(--font-size-base);--segmented-font-weight:var(--font-weight-regular);--segmented-text-color:var(--text-color-secondary);--segmented-line-height:var(--line-height-base);--segmented-font-size-active:var(--font-size-base);--segmented-font-weight-active:var(--font-weight-medium);--segmented-text-color-active:var(--text-color-primary);--segmented-buttons-content-color:var(--color-warm-grey-8);--segmented-buttons-content-color-hover:var(--color-warm-grey-11);--segmented-buttons-content-color-active:var(--color-blue-11);--segmented-buttons-bg-color-inner:var(--color-white);--segmented-buttons-bg-color-main:var(--color-warm-grey-2);"]);
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/variables.ts
var userMenu;
var init_variables30 = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/variables.ts"() {
    init_styled_components_esm();
    userMenu = Ne(["--user-menu-navbar-button-width:var(--control-height-base);--user-menu-navbar-button-height:var(--control-height-base);--user-menu-avatar-width:var(--spacing-xxl);--user-menu-avatar-height:var(--spacing-xxl);--user-menu-avatar-border-radius:50%;--user-menu-avatar-bg-color:var(--button-bg-color-secondary);--user-menu-avatar-font-family:var(--navbar-item-font-family);--user-menu-avatar-font-size:var(--navbar-item-font-size);--user-menu-avatar-font-weight:var(--font-weight-regular);--user-menu-avatar-line-height:var(--line-height-base);--user-menu-user-details-padding-vertical:var(--spacing-base);--user-menu-user-details-padding-horizontal:var(--spacing-md);--user-menu-user-details-bg-color:var(--layer-color);--user-menu-name-font-weight:var(--font-weight-medium);--user-menu-name-font-size:var(--font-size-lg);--user-menu-name-line-height:var(--line-height-lg);--user-menu-user-info-items-gap:var(--spacing-base);--user-menu-email-font-size:var(--font-size-sm);--user-menu-email-line-height:var(--line-height-sm);--user-menu-dropdown-font-size:var(--dropdown-menu-font-size);--user-menu-dropdown-font-weight:var(--dropdown-menu-font-weight);--user-menu-dropdown-line-height:var(--dropdown-menu-line-height);--user-menu-dropdown-text-color:var(--dropdown-menu-text-color);--user-menu-dropdown-min-width:180px;--user-menu-dropdown-max-width:var(--dropdown-menu-max-width);--user-menu-dropdown-max-height:none;--user-menu-dropdown-padding:var(--dropdown-menu-padding );--user-menu-dropdown-border-radius:var(--dropdown-menu-border-radius);--user-menu-dropdown-box-shadow:var(--dropdown-menu-box-shadow);--user-menu-dropdown-border-color:var(--dropdown-menu-border-color);--user-menu-dropdown-bg-color:var(--dropdown-menu-bg-color);--user-menu-dropdown-item-padding-horizontal:20px;--user-menu-dropdown-item-padding-vertical:var(--dropdown-menu-item-padding-vertical);--user-menu-dropdown-item-separator-padding-top:var(--dropdown-menu-item-separator-padding-top );--user-menu-dropdown-item-separator-padding-bottom:var(--dropdown-menu-item-separator-padding-bottom );--user-menu-dropdown-item-border-radius:var(--dropdown-menu-item-border-radius );--user-menu-dropdown-item-bg-color-active:var(--dropdown-menu-item-bg-color-active);--user-menu-dropdown-item-bg-color-hover:var(--dropdown-menu-item-bg-color-hover);--user-menu-dropdown-item-bg-color-disabled:var(--dropdown-menu-item-bg-color-disabled);--user-menu-dropdown-item-separator-border-color:var(--dropdown-menu-item-separator-border-color);--user-menu-dropdown-item-color-dangerous:var(--dropdown-menu-item-color-dangerous);--user-menu-dropdown-item-color-disabled:var(--dropdown-menu-item-color-disabled);--user-menu-dropdown-item-color-active:var(--dropdown-menu-item-color-active);--user-menu-dropdown-item-color-hover:var(--dropdown-menu-item-color-hover);--user-menu-dropdown-item-border-color-focused:var(--dropdown-menu-item-border-color-focused);"]);
  }
});

// node_modules/@redocly/theme/src/components/Tags/variables.ts
var httpTag;
var init_variables31 = __esm({
  "node_modules/@redocly/theme/src/components/Tags/variables.ts"() {
    init_styled_components_esm();
    httpTag = Ne(["--http-tag-width:45px;--http-tag-height:22px;--http-tag-font-family:var(--font-family-monospaced);--http-tag-font-size:var(--font-size-sm);--http-tag-font-weight:var(--font-weight-bold);--http-tag-line-height:var(--line-height-sm);--http-tag-margin:0px;--http-tag-padding:2px 0 0 0;--http-tag-border:none;--http-tag-bg-color:none;--counter-tag-padding:0px var(--spacing-xxs);--counter-tag-border-radius:var(--border-radius);--counter-tag-min-width:var(--spacing-md);"]);
  }
});

// node_modules/@redocly/theme/src/components/VersionPicker/variables.ts
var versionPicker;
var init_variables32 = __esm({
  "node_modules/@redocly/theme/src/components/VersionPicker/variables.ts"() {
    init_styled_components_esm();
    versionPicker = Ne(["--version-picker-font-size:var(--font-size-base);--version-picker-font-weight:var(--select-font-weight);--version-picker-line-height:var(--select-line-height);--version-picker-text-color:var(--select-text-color);--version-picker-border-radius:var(--select-border-radius);--version-picker-padding-vertical:10px;--version-picker-padding-horizontal:var(--sidebar-margin-horizontal);--version-picker-border-bottom:1px solid var(--border-color-primary);--version-picker-label-font-size:var(--font-size-base);--version-picker-label-font-weight:var(--font-weight-bold);--version-picker-input-padding-horizontal:var(--select-input-padding-horizontal);--version-picker-input-padding-vertical:var(--select-input-padding-vertical);--version-picker-input-border:1px solid var(--border-color-primary);--version-picker-input-border-radius:var(--select-input-border-radius);--version-picker-list-min-width:var(--select-list-min-width);--version-picker-list-max-width:var(--select-list-max-width);--version-picker-list-padding:var(--select-list-padding);--version-picker-list-border-radius:var(--select-list-border-radius);--version-picker-list-bg-color:var(--select-list-bg-color);--version-picker-list-box-shadow:var(--select-list-box-shadow);--version-picker-list-item-padding-horizontal:var(--select-list-item-padding-horizontal);--version-picker-list-item-padding-vertical:var(--select-list-item-padding-vertical);--version-picker-list-item-border-radius:var(--select-list-item-border-radius);--version-picker-list-item-bg-color-active:var(--select-list-item-bg-color-active);--version-picker-list-item-bg-color-hover:var(--select-list-item-bg-color-hover);"]);
  }
});

// node_modules/@redocly/theme/src/components/DatePicker/variables.ts
var datePicker;
var init_variables33 = __esm({
  "node_modules/@redocly/theme/src/components/DatePicker/variables.ts"() {
    init_styled_components_esm();
    datePicker = Ne(["--date-picker-nav-color:#000000;--date-picker-tile-bg-color:var(--color-blue-2);--date-picker-tile-color:var(--text-color-primary);--date-picker-tile-bg-color-hover:var(--color-blue-3) --date-picker-tile-color-hover:var(--text-color-primary);--date-picker-input-width:var(--spacing-md);--date-picker-invalid-input-bg-color:var(--bg-color-raised);--date-picker-button-padding:var(--spacing-xxs);--date-picker-icon-stroke:var(--text-color-secondary);--date-picker-icon-width:var(--spacing-sm);--date-picker-icon-stroke-hover:var(--text-color-primary);--date-picker-weekend-days-color:var(--color-error-base);--date-picker-week-days-color:var(--color-warm-grey-6);--date-picker-neighboring-month-color:var(--color-warm-grey-6);--date-picker-wrapper-border-color:var(--border-color-primary);--date-picker-wrapper-radius:var(--border-radius-md);--date-picker-wrapper-padding:calc(var(--spacing-xxs) / 2) var(--spacing-xs);"]);
  }
});

// node_modules/@redocly/theme/src/components/Switch/variables.ts
var switcher;
var init_variables34 = __esm({
  "node_modules/@redocly/theme/src/components/Switch/variables.ts"() {
    init_styled_components_esm();
    switcher = Ne(["--switch-bg-color:var(--color-warm-grey-4);--switch-bg-color-selected:var(--color-warm-grey-9);--switch-bg-color-hover:var(--color-warm-grey-5);--switch-bg-color-pressed:var(--color-warm-grey-6);--switch-bg-color-disabled:var(--color-warm-grey-3);--switch-knob-bg-color:var(--color-white);--switch-knob-bg-color-selected:var(--color-white);--switch-border-radius:var(--border-radius);--switch-knob-border-radius:calc(var(--border-radius) / 2);--switch-width:32px;--switch-height:18px;--switch-padding:calc(var(--spacing-xxs) / 2);--switch-bg-transition:background-color 0.3s;--switch-knob-height:14px;--switch-knob-width:14px;--switch-knob-transition:transform 0.3s;"]);
  }
});

// node_modules/@redocly/theme/src/markdoc/components/Cards/variables.ts
var cards2;
var init_variables35 = __esm({
  "node_modules/@redocly/theme/src/markdoc/components/Cards/variables.ts"() {
    init_styled_components_esm();
    cards2 = Ne(["--cards-gap:var(--spacing-sm);--card-icon-bg-color:var(--color-warm-grey-1);--card-icon-border-color:var(--border-color-secondary);--card-text-color:var(--text-color-secondary);--card-title-text-color:var(--h2-text-color);--card-icon-color:var(--card-title-text-color);--card-border-radius:var(--border-radius-md);--card-border-style:solid;--card-link-cursor:pointer;--card-link-icon-width:var(--h3-font-size);--card-link-icon-height:var(--h3-font-size);--card-border-width:1px;--card-icon-border-radius:var(--border-radius-md);--card-icon-padding:var(--spacing-xs);--card-icon-size:24px;--card-icon-height:var(--card-icon-size);--card-icon-width:var(--card-icon-size);--card-icon-gap:var(--spacing-base);--card-title-margin:0;--card-title-font-weight:var(--font-weight-semibold);--card-content-gap:4px;--card-padding:16px 20px;--card-body-font-size:var(--font-size-base);--card-body-line-height:var(--line-height-base);.card-variant-filled{--card-bg-color:var(--color-warm-grey-1);--card-bg-color-hover:var(--color-warm-grey-2);--card-border-color:var(--color-warm-grey-2);--card-border-color-hover:var(--color-warm-grey-1);--card-icon-bg-color:var(--color-white);--card-icon-border-color:var(--card-border-color);}.card-variant-outlined{--card-bg-color:transparent;--card-border-color:var(--color-warm-grey-2);--card-border-color-hover:var(--color-warm-grey-3);}.card-variant-elevated{--card-bg-color:transparent;--card-border-color:transparent;--card-border-color-hover:transparent;--card-box-shadow:0px 8px 24px -4px #232A6114,0px 6px 12px -6px #232A611F;--card-box-shadow-hover:0px 14px 64px -4px #232A611F,0px 8px 22px -6px #232A611F;}.card-variant-ghost{--card-bg-color:transparent;--card-border-width:0;}"]);
  }
});

// node_modules/@redocly/theme/src/core/styles/global.ts
var themeColors, typography2, sizeAndSpace, borders, headingsTypography, links, apiReferenceDocs, badges, loadProgressBar, inputs, docsDropdown, tile, pages, error2, modal, zIndexDepth, scorecardColors, browserOverrides, tab2, icon, tree, replay, styles, GlobalStyle;
var init_global = __esm({
  "node_modules/@redocly/theme/src/core/styles/global.ts"() {
    init_styled_components_esm();
    init_dark();
    init_variables();
    init_variables2();
    init_variables3();
    init_variables4();
    init_variables5();
    init_variables6();
    init_variables7();
    init_variables8();
    init_variables9();
    init_variables10();
    init_variables11();
    init_variables12();
    init_variables13();
    init_variables14();
    init_variables15();
    init_variables16();
    init_variables17();
    init_variables18();
    init_variables19();
    init_variables20();
    init_variables21();
    init_variables22();
    init_variables23();
    init_variables24();
    init_variables25();
    init_variables26();
    init_variables27();
    init_variables28();
    init_variables29();
    init_variables30();
    init_variables31();
    init_variables32();
    init_variables33();
    init_variables34();
    init_variables35();
    themeColors = Ne(["--color-warm-grey-1:#fbfbfc;--color-warm-grey-2:#ededf2;--color-warm-grey-3:#dcdde5;--color-warm-grey-4:#c4c6d1;--color-warm-grey-5:#9b9ca8;--color-warm-grey-6:#6e6f7a;--color-warm-grey-7:#555761;--color-warm-grey-8:#3b3c45;--color-warm-grey-9:#2a2b33;--color-warm-grey-10:#22242b;--color-warm-grey-11:#1a1c21;--color-purple-1:#f3f1fe;--color-purple-2:#e6e1fe;--color-purple-3:#cec4fd;--color-purple-4:#b3a6f9;--color-purple-5:#9c8ef4;--color-purple-6:#7a69ee;--color-purple-7:#5b4ccc;--color-purple-8:#4034ab;--color-purple-9:#291f99;--color-purple-10:#2b2480;--color-purple-11:#2c2770;--color-blueberry-1:#F0F4FF;--color-blueberry-2:#dfe8ff;--color-blueberry-3:#bfd0ff;--color-blueberry-4:#9fb7ff;--color-blueberry-5:#87a3ff;--color-blueberry-6:#5f81ff;--color-blueberry-7:#4561db;--color-blueberry-8:#2f46b7;--color-blueberry-9:#1e2f93;--color-blueberry-10:#222d7a;--color-blueberry-11:#232a61;--color-blue-1:#edf5fc;--color-blue-2:#d9ebfc;--color-blue-3:#b3d7fc;--color-blue-4:#90c2fc;--color-blue-5:#6eabfa;--color-blue-6:#1f7cff;--color-blue-7:#3072db;--color-blue-8:#2558b8;--color-blue-9:#1f4399;--color-blue-10:#223d7a;--color-blue-11:#233061;--color-sky-1:#eafefe;--color-sky-2:#cefdfe;--color-sky-3:#9df4fe;--color-sky-4:#6ce5fe;--color-sky-5:#47d2fe;--color-sky-6:#0bb4fe;--color-sky-7:#088cda;--color-sky-8:#0569b6;--color-sky-9:#155393;--color-sky-10:#1d4479;--color-sky-11:#1f3757;--color-turquoise-1:#ebfdf9;--color-turquoise-2:#ccfdf3;--color-turquoise-3:#9afbef;--color-turquoise-4:#67f5ef;--color-turquoise-5:#41e6ec;--color-turquoise-6:#08c7e0;--color-turquoise-7:#059cc0;--color-turquoise-8:#0475a1;--color-turquoise-9:#125a81;--color-turquoise-10:#1c496b;--color-turquoise-11:#1c394f;--color-persian-green-1:#ebfaf3;--color-persian-green-2:#cafae4;--color-persian-green-3:#97f5d2;--color-persian-green-4:#5fe2be;--color-persian-green-5:#37c6ab;--color-persian-green-6:#06a192;--color-persian-green-7:#048a89;--color-persian-green-8:#036a73;--color-persian-green-9:#0f4f5d;--color-persian-green-10:#143d4d;--color-persian-green-11:#193b47;--color-green-1:#edfbec;--color-green-2:#d2fbd0;--color-green-3:#a3f7a9;--color-green-4:#72e985;--color-green-5:#4dd470;--color-green-6:#1cb854;--color-green-7:#149e53;--color-green-8:#0e8450;--color-green-9:#195848;--color-green-10:#1a4d40;--color-grass-1:#f0faeb;--color-grass-2:#e3fad6;--color-grass-3:#c2f6ae;--color-grass-4:#93e380;--color-grass-5:#66c95b;--color-grass-6:#2fa52d;--color-grass-7:#208d28;--color-grass-8:#167625;--color-grass-9:#135f25;--color-grass-10:#164f29;--color-grass-11:#1f4d2d;--color-carrot-1:#fff8e8;--color-carrot-2:#fff0cc;--color-carrot-3:#FFE4AB;--color-carrot-4:#FFD181;--color-carrot-5:#ffbe62;--color-carrot-6:#ffa02e;--color-carrot-7:#db7e21;--color-carrot-8:#b75f17;--color-carrot-9:#934c1a;--color-carrot-10:#7a4222;--color-carrot-11:#5c3721;--color-orange-1:#fff4e8;--color-orange-2:#ffead2;--color-orange-3:#ffcea6;--color-orange-4:#ffad7a;--color-orange-5:#ff8c59;--color-orange-6:#ff5722;--color-orange-7:#db3918;--color-orange-8:#b72111;--color-orange-9:#931e1a;--color-orange-10:#7a2024;--color-orange-11:#612729;--color-red-1:#fef1ea;--color-red-2:#fee3d4;--color-red-3:#fdc0ab;--color-red-4:#fb9580;--color-red-5:#f86d60;--color-red-6:#f42d2d;--color-red-7:#d12030;--color-red-8:#af1631;--color-red-9:#8d1c37;--color-red-10:#752137;--color-red-11:#612235;--color-raspberry-1:#fef0ef;--color-raspberry-2:#fed9d5;--color-raspberry-3:#feacad;--color-raspberry-4:#fd838f;--color-raspberry-5:#fb6382;--color-raspberry-6:#f9316d;--color-raspberry-7:#d6236a;--color-raspberry-8:#b3185e;--color-raspberry-9:#901d56;--color-raspberry-10:#77214c;--color-raspberry-11:#612241;--color-magenta-1:#feeff5;--color-magenta-2:#fecce0;--color-magenta-3:#fe99c3;--color-magenta-4:#fe66aa;--color-magenta-5:#fe409c;--color-magenta-6:#fe0184;--color-magenta-7:#da0078;--color-magenta-8:#b6006a;--color-magenta-9:#931a65;--color-magenta-10:#791f5a;--color-magenta-11:#5e1a48;--color-black:#000000;--color-white:#ffffff;--color-primary-bg:var(--color-blueberry-1);--color-primary-bg-hover:var(--color-blueberry-2);--color-primary-border:var(--color-blueberry-3);--color-primary-border-hover:var(--color-blueberry-4);--color-primary-hover:var(--color-blueberry-5);--color-primary-base:var(--color-blueberry-6);--color-primary-active:var(--color-blueberry-7);--color-primary-text-hover:var(--color-blueberry-8);--color-primary-text:var(--color-blueberry-9);--color-primary-text-active:var(--color-blueberry-10);--color-success-bg:var(--color-green-1);--color-success-bg-hover:var(--color-green-2);--color-success-border:var(--color-green-3);--color-success-border-hover:var(--color-green-4);--color-success-hover:var(--color-green-5);--color-success-base:var(--color-green-6);--color-success-active:var(--color-green-7);--color-success-text-hover:var(--color-green-8);--color-success-text:var(--color-green-9);--color-success-text-active:var(--color-green-10);--color-warning-bg:var(--color-carrot-1);--color-warning-bg-hover:var(--color-carrot-2);--color-warning-border:var(--color-carrot-3);--color-warning-border-hover:var(--color-carrot-4);--color-warning-hover:var(--color-carrot-5);--color-warning-base:var(--color-carrot-6);--color-warning-active:var(--color-carrot-7);--color-warning-text-hover:var(--color-carrot-8);--color-warning-text:var(--color-carrot-9);--color-warning-text-active:var(--color-carrot-10);--color-error-bg:var(--color-raspberry-1);--color-error-bg-hover:var(--color-raspberry-2);--color-error-border:var(--color-raspberry-3);--color-error-border-hover:var(--color-raspberry-4);--color-error-hover:var(--color-raspberry-5);--color-error-base:var(--color-raspberry-6);--color-error-active:var(--color-raspberry-7);--color-error-text-hover:var(--color-raspberry-8);--color-error-text:var(--color-raspberry-9);--color-error-text-active:var(--color-raspberry-10);--color-info-bg:var(--color-blue-1);--color-info-bg-hover:var(--color-blue-2);--color-info-border:var(--color-blue-3);--color-info-border-hover:var(--color-blue-4);--color-info-hover:var(--color-blue-5);--color-info-base:var(--color-blue-6);--color-info-active:var(--color-blue-7);--color-info-text-hover:var(--color-blue-8);--color-info-text:var(--color-blue-9);--color-info-text-active:var(--color-blue-10);--color-hover-base:#F3F3F6;--bg-color:var(--color-white);--bg-color-hover:var(--color-hover-base);--bg-color-active:var(--color-warm-grey-2);--bg-color-tonal:var(--color-warm-grey-1);--bg-color-tonal-hover:var(--color-white);--bg-color-tonal-active:var(--color-white);--bg-color-raised:var(--color-white);--bg-color-modal-overlay:rgba(0,0,0,0.2);--bg-raised-shadow:0px 8px 24px 8px #0000000A,0px 4px 12px 0px #00000014;--bg-raised-gradient:linear-gradient(270deg,var(--color-warm-grey-1) 18.75%,rgba(251,251,252,0) 100%);--layer-color:var(--color-warm-grey-1);--layer-color-hover:var(--color-warm-grey-2);--layer-color-active:var(--color-warm-grey-3);--layer-color-ontonal:var(--color-white);--layer-color-ontonal-hover:var(--color-hover-base);--layer-color-ontonal-active:var(--color-warm-grey-3);--layer-color-accent:var(--color-warm-grey-10);--layer-accent-hover:var(--color-warm-grey-9);--layer-color-onraised:var(--color-warm-grey-2);--layer-color-raised:var(--color-white);"]);
    typography2 = Ne(["--font-family-base:system-ui,-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',Arial,sans-serif;--font-family-monospaced:ui-monospace,Menlo,Monaco,'Cascadia Mono','Segoe UI Mono','Roboto Mono','Oxygen Mono','Ubuntu Mono','Fira Mono','Droid Sans Mono','Courier New',monospace;--text-color-primary:var(--color-warm-grey-11);--text-color-secondary:var(--color-warm-grey-8);--text-color-description:var(--color-warm-grey-7);--text-color-helper:var(--color-warm-grey-6);--text-color-disabled:var(--color-warm-grey-5);--text-color-on-color:var(--color-warm-grey-1);--text-color-inverse:var(--color-white);--font-weight-regular:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--font-weight-italic:'Regular Italic';--line-height-base:22px;--line-height-sm:20px;--line-height-md:var(--line-height-base);--line-height-lg:24px;--line-height-xl:28px;--line-height-xxl:30px;--font-size-base:14px;--font-size-sm:12px;--font-size-lg:16px;--font-size-xl:20px;--text-smoothing:antialiased;--text-rendering:optimizeSpeed;"]);
    sizeAndSpace = Ne(["--container-width:1200px;--container-max-width:100%;--spacing-unit:4px;--spacing-base:calc(var(--spacing-unit) * 4);--spacing-xxs:var(--spacing-unit);--spacing-xs:calc(var(--spacing-unit) * 2);--spacing-sm:calc(var(--spacing-unit) * 3);--spacing-md:calc(var(--spacing-unit) * 5);--spacing-lg:calc(var(--spacing-unit) * 6);--spacing-xl:calc(var(--spacing-unit) * 8);--spacing-xxl:calc(var(--spacing-unit) * 12);--spacing-horizontal:var(--spacing-xl);--spacing-vertical:var(--spacing-base);--control-height-base:32px;--control-height-xs:16px;--control-height-sm:24px;--control-height-lg:40px;"]);
    borders = Ne(["--border-width:1px;--border-style:solid;--border-color-primary:var(--color-warm-grey-3);--border-color-secondary:var(--color-warm-grey-2);--border-color-invers:var(--color-warm-grey-10);--border-radius:4px;--border-radius-md:calc(var(--border-radius) * 1.5);--border-radius-lg:calc(var(--border-radius) * 2);--border-radius-xl:calc(var(--border-radius) * 3);--border-radius-xxl:calc(var(--border-radius) * 4);"]);
    headingsTypography = Ne(["*{box-sizing:border-box;}--heading-font-family:var(--font-family-base);--heading-font-weight:var(--font-weight-semibold);--heading-text-color:var(--text-color-primary);--heading-anchor-offset-right:4px;--heading-anchor-color:var(--button-content-color-primary);--heading-anchor-icon:none;--h1-font-family:var(--heading-font-family);--h1-font-weight:var(--heading-font-weight);--h1-font-size:36px;--h1-line-height:44px;--h1-margin-top:var(--spacing-xl);--h1-margin-bottom:var(--spacing-base);--h1-text-color:var(--heading-text-color);--h1-code-line-height:60px;--h2-font-family:var(--heading-font-family);--h2-font-weight:var(--heading-font-weight);--h2-font-size:28px;--h2-line-height:36px;--h2-margin-top:var(--spacing-xl);--h2-margin-bottom:var(--spacing-base);--h2-text-color:var(--heading-text-color);--h2-code-line-height:48px;--h3-font-family:var(--heading-font-family);--h3-font-weight:var(--heading-font-weight);--h3-font-size:24px;--h3-line-height:32px;--h3-margin-top:var(--spacing-lg);--h3-margin-bottom:var(--spacing-base);--h3-text-color:var(--heading-text-color);--h3-code-line-height:var(--line-height-xxl);--h4-font-family:var(--heading-font-family);--h4-font-weight:var(--font-weight-semibold);--h4-font-size:20px;--h4-line-height:28px;--h4-margin-top:var(--spacing-base);--h4-margin-bottom:var(--spacing-base);--h4-text-color:var(--heading-text-color);--h4-code-line-height:var(--line-height-xl);--h5-font-family:var(--heading-font-family);--h5-font-weight:var(--heading-font-weight);--h5-font-size:14px;--h5-line-height:14px;--h5-margin-top:var(--spacing-xs);--h5-margin-bottom:var(--spacing-sm);--h5-text-color:var(--heading-text-color);--h5-code-line-height:var(--line-height-lg);--h6-font-family:var(--heading-font-family);--h6-font-weight:var(--heading-font-weight);--h6-font-size:12px;--h6-line-height:12px;--h6-margin-top:var(--spacing-xxs);--h6-margin-bottom:var(--spacing-xs);--h6-text-color:var(--heading-text-color);--h6-code-line-height:var(--line-height-md);"]);
    links = Ne(["--link-color-primary:var(--color-blue-6);--link-decoration:none;--link-font-weight:var(--font-weight-regular);--link-color-primary-hover:var(--color-blue-7);--link-color-primary-pressed:var(--color-blue-8);--link-decoration-hover:underline;--link-color-inverse:var(--color-blue-5);--link-color-visited:var(--color-purple-7);--link-visited-decoration:none;"]);
    apiReferenceDocs = Ne(["--layout-controls-margin:20px;--layout-controls-height:36px;--layout-controls-width:36px;--layout-stacked-small-max-width:90%;--layout-stacked-medium-max-width:75%;--layout-stacked-large-max-width:1200px;--layout-three-panel-small-max-width:100%;--layout-three-panel-medium-max-width:100%;--layout-three-panel-large-max-width:1800px;--layout-panel-schemas-small-max-width:none;--layout-panel-schemas-medium-max-width:none;--layout-panel-schemas-large-max-width:none;--schemas-mime-type-dropdown-padding:0px 26px 0px 4px;--schemas-mime-type-dropdown-border:var(--docs-dropdown-border);--schemas-mime-type-dropdown-font-size:var(--docs-dropdown-font-size);--schemas-mime-type-dropdown-text-color:var(--docs-dropdown-text-color);--schemas-discriminator-dropdown-padding:2px 24px 2px 8px;--schemas-discriminator-dropdown-border:1px solid var(--border-color-primary);--schemas-discriminator-font-size:var(--docs-dropdown-font-size);--schemas-discriminator-dropdown-text-color:var(--docs-dropdown-text-color);--schema-type-title-text-color:var(--text-color-secondary);--schema-type-text-color:var(--text-color-description);--schema-labels-font-size:var(--font-size-base);--schema-labels-line-height:var(--line-height-base);--schema-labels--text-color:var(--text-color-secondary);--schemas-lines-color:var(--border-color-primary);--schema-inline-code-font-family:var(--inline-code-font-family);--schema-inline-code-font-size:var(--inline-code-font-size);--schema-inline-code-font-weight:var(--inline-code-font-weight);--schema-inline-code-text-color:var(--text-color-secondary);--schema-inline-code-line-height:var(--inline-code-line-height);--schema-inline-bg-color:var(--border-color-secondary);--schema-inline-border-color:var(--border-color-primary);--schema-inline-border:1px solid var(--schema-inline-border-color);--schema-example-text-color:var(--schema-inline-code-text-color);--schema-example-bg-color:var(--schema-inline-bg-color);--schema-example-border-color:var(--schema-inline-border-color);--schema-constraint-text-color:var(--schema-inline-code-text-color);--schema-constraint-bg-color:var(--schema-inline-bg-color);--schema-constraint-border-color:var(--schema-inline-border-color);--schema-enum-text-color:var(--schema-inline-code-text-color);--schema-enum-bg-color:var(--schema-inline-bg-color);--schema-enum-border-color:var(--schema-inline-border-color);--schema-default-text-color:var(--schema-inline-code-text-color);--schema-default-bg-color:var(--schema-inline-bg-color);--schema-default-border-color:var(--schema-inline-border-color);--schema-recursive-text-color:var(--text-color-on-color);--schema-recursive-bg-color:var(--color-persian-green-6);--schema-recursive-border-color:var(--schema-recursive-bg-color);--schema-nested-offset:calc(var(--spacing-unit) * 2.5);--schema-nested-bg-color:var(--tree-bg-color-active);--schema-required-color:#E20C0C;--schema-buttons-font-family:var(--code-font-family);--schema-buttons-font-weight:var(--code-font-weight);--schema-buttons-font-size:var(--code-font-size);--schema-buttons-text-color:var(--text-color-secondary);--schema-buttons-bg-color:transparent;--schema-buttons-border-color:var(--border-color-primary);--schema-buttons-bg-color-hover:var(--button-bg-color-secondary-hover);--schema-buttons-bg-color-active:var(--button-bg-color-secondary-pressed);--schema-buttons-selected-text-color:var(--schema-buttons-text-color);--schema-buttons-selected-bg-color:var(--button-bg-color-secondary-pressed);--schema-buttons-selected-border-color:var(--schema-buttons-border-color);--schema-buttons-selected-bg-color-hover:var(--button-bg-color-secondary-hover);--schema-buttons-selected-bg-color-active:var(--button-bg-color-secondary-pressed);--schemas-property-name-text-color:var(--text-color-primary);--schemas-property-name-font-size:var(--font-size-base);--schemas-property-name-font-family:var(--code-font-family);--schemas-property-name-font-weight:var(--font-weight-regular);--schemas-property-name-line-height:var(--line-height-base);--schemas-property-name-text-transform:none;--schemas-property-deprecated-text-color:var(--text-color-primary);--schema-property-labels-font-size:var(--schema-labels-font-size);--schema-property-required-label-text-color:var(--schema-required-color);--schema-property-additional-label-text-color:var(--text-color-secondary);--schema-property-access-label-text-color:var(--text-color-secondary);--schema-property-details-width:70%;--schema-property-details-spacing:var(--spacing-base);--schema-fist-property-details-spacing:var(--spacing-sm);--schema-chevron-color:var(--text-color-secondary);--schema-chevron-size:9px;--schema-property-deep-link-icon-color:var(--color-primary-base);--schema-property-deep-link-icon:none;--loading-spinner-color:var(--color-primary-base);--linear-progress-color:var(--color-info-base);--linear-progress-bg-color:var(--color-info-bg);--fab-bg-color:var(--color-primary-base);--fab-box-shadow:var(--bg-raised-shadow);--fab-bg-color-hover:var(--color-primary-base);--fab-box-shadow-hover:var(--bg-raised-shadow);--fab-bg-color-active:var(--color-primary-base);--fab-box-shadow-active:var(--bg-raised-shadow);--fab-icon-color:var(--navbar-text-color);"]);
    badges = Ne(["--badge-text-color:var(--text-color-inverse);--badge-bg-color:var(--color-purple-6);--badge-border-radius:var(--border-radius);--badge-deprecated-text-color:var(--text-color-on-color);--badge-deprecated-bg-color:var(--color-warning-base);--badge-deprecated-border-radius:var(--border-radius);"]);
    loadProgressBar = Ne(["--load-progress-bar-color:var(--color-info-base);--load-progress-bar-shadow:0 0 10px var(--load-progress-bar-color),0 0 5px var(--load-progress-bar-color);--load-progress-bar-height:2px;#nprogress{pointer-events:none;}#nprogress .bar{background:var(--load-progress-bar-color);position:fixed;z-index:var(--z-index-popover);top:0;left:0;width:100%;height:var(--load-progress-bar-height);}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:var(--load-progress-bar-shadow);opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px);}.nprogress-custom-parent{overflow:hidden;position:relative;}.nprogress-custom-parent #nprogress .bar{position:absolute;}"]);
    inputs = Ne(["--input-bg-color:var(--color-white);--input-bg-color-ghost:var(--color-white);--input-font-size:var(--font-size-base);--input-font-family:var(--font-family-base);--input-line-height:1.15em;--input-text-indent:16px;--input-padding:var(--spacing-xs);--input-padding-horizontal:var(--spacing-sm);--input-padding-vertical:var(--spacing-xxs);--input-height:40px;--input-border-radius:var(--border-radius-lg);--input-border-color:var(--color-warm-grey-3);--input-border:1px solid var(--input-border-color);--input-border-color-hover:var(--color-warm-grey-4);--input-border-hover:1px solid var(--input-border-color-hover);--input-border-color-focused:var(--color-info-base);--input-border-focus:1px solid var(--input-border-color-focused);--input-content-color-disabled:var(--color-warm-grey-4);--input-bg-color-disabled:var(--color-warm-grey-1);--input-border-color-disabled:var(--color-warm-grey-3);--input-border-disabled:1px solid var(--input-border-color-disabled);--input-content-color-active:var(--color-warm-grey-11);--input-content-placeholder-color:var(--color-warm-grey-5);--input-t-icon-color:var(--color-warm-grey-5);--checkbox-bg-color:var(--bg-color);--checkbox-checked-bg-color:var(--color-primary-base);"]);
    docsDropdown = Ne(["--docs-dropdown-font-size:var(--font-size-base);--docs-dropdown-text-color:var(--text-color-secondary);--docs-dropdown-padding-vertical:6px;--docs-dropdown-padding-left:10px;--docs-dropdown-padding-right:26px;--docs-dropdown-padding:var(--docs-dropdown-padding-vertical) var(--docs-dropdown-padding-right) var(--docs-dropdown-padding-vertical) var(--docs-dropdown-padding-left);--docs-dropdown-border:1px solid var(--border-color-primary);"]);
    tile = Ne(["--wide-tile-bg-color:var(--bg-color-raised);--thin-tile-bg-color:var(--bg-color-raised);"]);
    pages = Ne(["--page-404-font-family:var(--font-family-base);--page-404-margin-vertical:var(--spacing-xl);--page-404-margin-horizontal:calc(var(--spacing-xxl) * 2);--page-404-gap:var(--spacing-lg);--page-404-max-width:680px;--page-404-status-text-color:var(--text-color-helper);--page-404-status-font-size:var(--font-size-lg);--page-404-status-font-weight:var(--font-weight-semibold);--page-404-status-line-height:var(--line-height-lg);--page-404-title-text-color:var(--text-color-primary);--page-404-title-font-size:42px;--page-404-title-font-weight:var(--font-weight-bold);--page-404-title-line-height:50px;--page-404-status-line-height:var(--line-height-lg);--page-404-description-text-color:var(--text-color-secondary);--page-404-description-font-size:var(--font-size-xl);--page-404-description-font-weight:var(--font-weight-regular);--page-404-description-line-height:var(--line-height-xl);--page-403-font-family:var(--font-family-base);--page-403-header-text-color:var(--h1-text-color);--page-403-header-font-size:var(--h1-font-size);--page-403-header-font-weight:var(--h1-font-weight);--page-403-header-line-height:var(--h1-line-height);--page-403-header-margin:0;--page-403-description-text-color:var(--text-color-secondary);--page-403-description-font-size:1.5em;--page-403-description-font-weight:var(--font-weight-regular);--page-403-description-line-height:1;--page-403-description-margin:0;--page-403-button-margin:4em;--page-403-oidc-description-font-size:var(--font-size-lg);--page-403-oidc-description-margin:var(--spacing-md) var(--spacing-sm);"]);
    error2 = Ne(["--error-bubble-padding:var(--spacing-sm);--error-bubble-gap:var(--spacing-xxs);--error-bubble-font-family:var(--font-family-base);--error-bubble-font-size:var(--font-size-base);--error-bubble-z-index:var(--z-index-popover);--error-bubble-bg-color:var(--color-raspberry-1);--error-bubble-bg-color-hover:var(--color-raspberry-2);--error-bubble-bg-color-pressed:var(--color-raspberry-3);--error-bubble-content-color:var(--color-raspberry-6);--error-bubble-content-color-hover:var(--color-raspberry-6);--error-bubble-content-color-pressed:var(--color-raspberry-6);--detailed-error-overlay-bg-color:#4f4f4f;--detailed-error-overlay-opacity:0.9;--detailed-error-overlay-z-index:var(--z-index-raised);--detailed-error-modal-width:calc(100% - var(--spacing-lg) * 2);--detailed-error-modal-height:calc(100vh - var(--navbar-height) - var(--spacing-lg) * 2);--detailed-error-modal-top:calc(var(--spacing-lg) + var(--navbar-height));--detailed-error-modal-border-radius:var(--border-radius-md);--detailed-error-modal-bg-color:var(--bg-color-raised);--detailed-error-modal-color:var(--text-color-primary);--detailed-error-modal-box-shadow:var(--bg-raised-shadow);--detailed-error-modal-z-index:var(--z-index-popover);--detailed-error-modal-font-family:var(--font-family-base);--detailed-error-modal-padding:var(--spacing-md);--detailed-error-modal-wapper-text-align:right;--detailed-error-content-margin-top:var(--spacing-md);--detailed-error-content-height:100%;--detailed-error-close-button-color:var(--text-color-description);--detailed-error-close-button-text-transform:uppercase;--detailed-error-message-margin:var(--spacing-base) auto var(--spacing-lg);--detailed-error-message-padding:var(--spacing-base);--detailed-error-message-border-radius:var(--border-radius);--detailed-error-message-color:var(--code-block-text-color);--detailed-error-message-bg-color:var(--code-block-bg-color);--detailed-error-message-width:100%;--detailed-error-message-font-size:var(--font-size-base);--detailed-error-message-font-family:var(--code-block-controls-font-family);"]);
    modal = Ne(["body:has(.scroll-lock){overflow:hidden;}--modal-box-shadow:var(--bg-raised-shadow);--modal-bg-color:var(--bg-color);"]);
    zIndexDepth = Ne(["--z-index-surface:10;--z-index-raised:100;--z-index-popover:200;--z-index-overlay:1000;"]);
    scorecardColors = Ne(["--scorecard-color-error:var(--color-error-base);--scorecard-color-warning:var(--color-warning-base);--scorecard-color-success:var(--color-persian-green-7);"]);
    browserOverrides = Ne(["button{font-family:var(--font-family-base);font-size:var(--font-size-base);font-weight:var(--font-weight-regular);line-height:var(--line-height-base);background-color:inherit;cursor:pointer;border:none;color:var(--text-color-primary);}"]);
    tab2 = Ne(["--tab-content-color-default:var(--color-warm-grey-8);--tab-content-color-active:var(--color-warm-grey-11);--tab-bg-color-filled:var(--color-warm-grey-2);--tab-content-color-disabled:var(--color-warm-grey-6);--tab-bg-color-disabled:var(--color-warm-grey-2);--tab-border-color-active:var(--color-warm-grey-11);"]);
    icon = Ne([`--icon-color-primary:var(--color-warm-grey-11);--icon-color-secondary:var(--color-warm-grey-8);--icon-color-on-color:var(--color-warm-grey-1);--icon-color-interactive:var(--color-blueberry-6);--icon-color-inverse:var(--color-white);--icon-color-disabled:var(--color-warm-grey-5);--icon-color-additional:var(--color-warm-grey-7);--icon-color-helper:var(--color-warm-grey-6);--plus-square-outlined-icon:url("data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 10 10' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M3.20312 5.3125H4.6875V6.79687C4.6875 6.83984 4.72266 6.875 4.76562 6.875H5.23438C5.27734 6.875 5.3125 6.83984 5.3125 6.79687V5.3125H6.79688C6.83984 5.3125 6.875 5.27734 6.875 5.23437V4.76562C6.875 4.72266 6.83984 4.6875 6.79688 4.6875H5.3125V3.20312C5.3125 3.16016 5.27734 3.125 5.23438 3.125H4.76562C4.72266 3.125 4.6875 3.16016 4.6875 3.20312V4.6875H3.20312C3.16016 4.6875 3.125 4.72266 3.125 4.76562V5.23437C3.125 5.27734 3.16016 5.3125 3.20312 5.3125Z' fill='%23555761'/%3E%3Cpath d='M8.59375 1.09375H1.40625C1.2334 1.09375 1.09375 1.2334 1.09375 1.40625V8.59375C1.09375 8.7666 1.2334 8.90625 1.40625 8.90625H8.59375C8.7666 8.90625 8.90625 8.7666 8.90625 8.59375V1.40625C8.90625 1.2334 8.7666 1.09375 8.59375 1.09375ZM8.20312 8.20312H1.79688V1.79687H8.20312V8.20312Z' fill='%23555761'/%3E%3C/svg%3E%0A");--minus-square-outlined-icon:url("data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 10 10' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M3.20312 5.3125H6.79688C6.83984 5.3125 6.875 5.27734 6.875 5.23437V4.76562C6.875 4.72266 6.83984 4.6875 6.79688 4.6875H3.20312C3.16016 4.6875 3.125 4.72266 3.125 4.76562V5.23437C3.125 5.27734 3.16016 5.3125 3.20312 5.3125Z' fill='%23555761'/%3E%3Cpath d='M8.59375 1.09375H1.40625C1.2334 1.09375 1.09375 1.2334 1.09375 1.40625V8.59375C1.09375 8.7666 1.2334 8.90625 1.40625 8.90625H8.59375C8.7666 8.90625 8.90625 8.7666 8.90625 8.59375V1.40625C8.90625 1.2334 8.7666 1.09375 8.59375 1.09375ZM8.20312 8.20312H1.79688V1.79687H8.20312V8.20312Z' fill='%23555761'/%3E%3C/svg%3E%0A");`]);
    tree = Ne(["--tree-content-color-default:var(--color-warm-grey-8);--tree-content-color-disabled:var(--color-warm-grey-5);--tree-content-color-hover:var(--color-warm-grey-9);--tree-border-color-default:var(--color-warm-grey-3);--tree-border-color-active:var(--color-warm-grey-3);--tree-bg-color-hover:var(--color-hover-base);--tree-bg-color-active:var(--color-warm-grey-2);*::-webkit-scrollbar{width:6px;height:6px;}*::-webkit-scrollbar-track{background-color:transparent;}*::-webkit-scrollbar-thumb{background-color:var(--color-warm-grey-2);border-radius:var(--border-radius);}*::-webkit-scrollbar-thumb:hover{background:var(--bg-color-tonal);}*::-webkit-scrollbar-corner{background-color:transparent;}"]);
    replay = Ne(["--replay-undefined-variable-color:var(--color-raspberry-6);--replay-defined-variable-color:var(--color-blue-6);--replay-server-variable-color:var(--color-purple-6);--replay-undefined-variable-bg-color:rgba(249,49,109,0.08);--replay-defined-variable-bg-color:rgba(31,124,255,0.08);--replay-server-variable-bg-color:rgba(119,45,240,0.08);--replay-undefined-variable-bg-color-hover:var(--color-raspberry-2);--replay-defined-variable-bg-color-hover:var(--color-blue-2);--replay-server-variable-bg-color-hover:var(--color-purple-2);"]);
    styles = Ne([":root{", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " --api-catalog-card-min-width:250px;background-color:var(--bg-color);color:var(--text-color-primary);font-family:var(--font-family-base);}:root.dark{", ";}:root.notransition *{transition:none !important;}", ""], admonition2, apiReferenceDocs, apiReferencePanels, badges, borders, breadcrumbs, button, cards2, catalog, code2, docsDropdown, dropdown, error2, filter, footer, headingsTypography, httpTag, inputs, languagePicker, lastUpdated, links, loadProgressBar, logo, markdown, markdownTabs, mermaid, menu, mobileMenu, modal, navbar, pages, productPicker, responsePanelColors, search, select, sidebar, sizeAndSpace, tag, themeColors, tile, toc, tooltip, typography2, userMenu, versionPicker, zIndexDepth, scorecardColors, statusCode, tab2, icon, tree, segmented, switcher, checkbox, feedback, scorecard, datePicker, replay, darkMode, browserOverrides);
    GlobalStyle = He(["", ";"], styles);
  }
});

// node_modules/@redocly/theme/src/components/Switch/Switch.tsx
import React41 from "react";
function Switch({
  value = false,
  disabled = false,
  onChange
}) {
  const handleClick = () => {
    if (disabled)
      return;
    onChange(!value);
  };
  return /* @__PURE__ */ React41.createElement(SwitchWrapper, { onClick: handleClick, role: "switch", selected: value, disabled }, /* @__PURE__ */ React41.createElement(Knob, { selected: value }));
}
var SwitchWrapper, Knob;
var init_Switch = __esm({
  "node_modules/@redocly/theme/src/components/Switch/Switch.tsx"() {
    init_styled_components_esm();
    SwitchWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Switch__SwitchWrapper",
      componentId: "sc-4wv3ha-0"
    })(["width:var(--switch-width);height:var(--switch-height);border-radius:var(--switch-border-radius);background-color:", ";display:flex;align-items:center;padding:var(--switch-padding);cursor:", ";transition:var(--switch-bg-transition);", " &:active{background-color:var(--switch-bg-color-pressed);}"], ({
      selected,
      disabled
    }) => disabled ? "var(--switch-bg-color-disabled)" : selected ? "var(--switch-bg-color-selected)" : "var(--switch-bg-color)", ({
      disabled
    }) => disabled ? "not-allowed" : "pointer", ({
      disabled
    }) => !disabled && Ne(["&:hover{background-color:var(--switch-bg-color-hover);}"]));
    Knob = styled_components_esm_default.div.withConfig({
      displayName: "Switch__Knob",
      componentId: "sc-4wv3ha-1"
    })(["width:var(--switch-knob-width);height:var(--switch-knob-height);border-radius:var(--switch-knob-border-radius);background-color:", ";transform:", ";transition:var(--switch-knob-transition);"], ({
      selected
    }) => selected ? "var(--switch-knob-bg-color-selected)" : "var(--switch-knob-bg-color)", ({
      selected
    }) => selected ? "translateX(var(--switch-knob-width))" : "translateX(0)");
  }
});

// node_modules/@redocly/theme/src/core/hoc/typedMemo.ts
import { memo as memo3 } from "react";
var typedMemo;
var init_typedMemo = __esm({
  "node_modules/@redocly/theme/src/core/hoc/typedMemo.ts"() {
    typedMemo = memo3;
  }
});

// node_modules/@redocly/theme/src/components/Segmented/Segmented.tsx
import React42 from "react";
function SegmentedComponent({
  options,
  onChange,
  value,
  className = "",
  size = "regular"
}) {
  return /* @__PURE__ */ React42.createElement(SegmentedGroup, { "data-component-name": "Segmented/Segmented", className: `tag-grey ${size} ${className}`, role: "tablist" }, options.map((opt) => /* @__PURE__ */ React42.createElement(SegmentedItem, { key: opt.label, role: "tab", title: opt.label, onClick: () => onChange(opt), $isActive: value == opt.value, $size: size }, opt.label)));
}
var Segmented, SegmentedGroup, SegmentedItem;
var init_Segmented = __esm({
  "node_modules/@redocly/theme/src/components/Segmented/Segmented.tsx"() {
    init_styled_components_esm();
    init_typedMemo();
    Segmented = typedMemo(SegmentedComponent);
    SegmentedGroup = styled_components_esm_default.div.withConfig({
      displayName: "Segmented__SegmentedGroup",
      componentId: "sc-ni93on-0"
    })(["display:flex;background:var(--segmented-buttons-bg-color-main);padding:calc(var(--spacing-xxs) / 2);gap:calc(var(--spacing-xxs) / 2);border-radius:var(--border-radius-md);max-width:100%;width:fit-content;"]);
    SegmentedItem = styled_components_esm_default.button.withConfig({
      displayName: "Segmented__SegmentedItem",
      componentId: "sc-ni93on-1"
    })(["", " ", " line-height:var(--segmented-line-height);border-radius:var(--border-radius);padding:", " var(--spacing-sm);white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"], ({
      $size
    }) => $size === "small" && Ne(["--segmented-font-size:var(--font-size-sm);--segmented-font-size-active:var(--font-size-sm);--segmented-line-height:var(--line-height-sm);"]), ({
      $isActive
    }) => $isActive ? Ne(["font-size:var(--segmented-font-size-active);font-weight:var(--segmented-font-weight-active);background:var(--segmented-buttons-bg-color-inner);color:var(--segmented-text-color-active);cursor:default;"]) : Ne(["font-size:var(--segmented-font-size);font-weight:var(--segmented-font-weight);color:var(--segmented-text-color);cursor:pointer;"]), ({
      $size
    }) => $size === "small" ? 0 : "3px");
  }
});

// node_modules/@redocly/theme/src/icons/ArrowUpRightIcon/ArrowUpRightIcon.tsx
import React43 from "react";
var Icon19, ArrowUpRightIcon;
var init_ArrowUpRightIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ArrowUpRightIcon/ArrowUpRightIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon19 = (props) => /* @__PURE__ */ React43.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React43.createElement("path", { d: "M5 3V4H11.295L3 12.295L3.705 13L12 4.705V11H13V3H5Z" }));
    ArrowUpRightIcon = styled_components_esm_default(Icon19).attrs(() => ({
      "data-component-name": "icons/ArrowUpRightIcon/ArrowUpRightIcon"
    })).withConfig({
      displayName: "ArrowUpRightIcon",
      componentId: "sc-14vucy5-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Typography/Typography.ts
var Typography;
var init_Typography = __esm({
  "node_modules/@redocly/theme/src/components/Typography/Typography.ts"() {
    init_styled_components_esm();
    Typography = styled_components_esm_default.span.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/Typography",
      className
    })).withConfig({
      displayName: "Typography",
      componentId: "sc-yzdbik-0"
    })(["color:", ";font-family:", ";font-size:", ";font-style:", ";font-weight:", ";line-height:", ";letter-spacing:", ";margin-bottom:", ";margin-top:", ";text-align:", ";"], ({
      color
    }) => color || "var(--text-color-primary)", ({
      fontFamily
    }) => fontFamily || "var(--font-family-base)", ({
      fontSize
    }) => fontSize || "var(--font-size-base)", ({
      fontStyle
    }) => fontStyle, ({
      fontWeight
    }) => fontWeight || "var(--font-weight-regular)", ({
      lineHeight
    }) => lineHeight || "var(--line-height-base)", ({
      letterSpacing
    }) => letterSpacing, ({
      marginBottom
    }) => marginBottom, ({
      marginTop
    }) => marginTop, ({
      textAlign
    }) => textAlign);
  }
});

// node_modules/@redocly/theme/src/components/Typography/H4.ts
var H4;
var init_H4 = __esm({
  "node_modules/@redocly/theme/src/components/Typography/H4.ts"() {
    init_styled_components_esm();
    init_utils();
    H4 = styled_components_esm_default.h4.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/H4",
      className
    })).withConfig({
      displayName: "H4",
      componentId: "sc-19pe7pj-0"
    })(["color:var(--h4-text-color);margin:var(--h4-margin-top) 0 var(--h4-margin-bottom);", ";"], typography("h4"));
  }
});

// node_modules/@redocly/theme/src/components/Catalog/CatalogInfoBlock.tsx
import React44 from "react";
function CatalogInfoBlock(props) {
  const scorecardBadge = props.metadata?.scorecardLevel ? /* @__PURE__ */ React44.createElement(ScorecardBadge, { level: props.metadata.scorecardLevel, slug: props.metadata?.scoreCardSlug, colorVariable: getScorecardColorVariable(props.metadata?.scorecardLevelIdx || 0, Object.keys(props.metadata?.scorecardLevels || {}).length) }) : null;
  return /* @__PURE__ */ React44.createElement(CatalogInfoBlockWrapper, null, /* @__PURE__ */ React44.createElement(CatalogBadgesWrapper, { "data-component-name": "Catalog/CatalogInfoBlock" }, scorecardBadge));
}
function ScorecardBadge(props) {
  const {
    level,
    slug: slug2,
    colorVariable
  } = props;
  const {
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  return /* @__PURE__ */ React44.createElement(Link, { to: slug2 }, /* @__PURE__ */ React44.createElement(Tag, { onClick: () => telemetry.send("scorecard_link_clicked", {
    action: "click"
  }), withStatusDot: true, statusDotColor: `var(${colorVariable})` }, level));
}
var CatalogInfoBlockWrapper, CatalogBadgesWrapper;
var init_CatalogInfoBlock = __esm({
  "node_modules/@redocly/theme/src/components/Catalog/CatalogInfoBlock.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_utils();
    init_Tag();
    init_Link();
    CatalogInfoBlockWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CatalogInfoBlock__CatalogInfoBlockWrapper",
      componentId: "sc-kzpas9-0"
    })(["position:relative;width:100%;"]);
    CatalogBadgesWrapper = styled_components_esm_default.div.withConfig({
      displayName: "CatalogInfoBlock__CatalogBadgesWrapper",
      componentId: "sc-kzpas9-1"
    })(["&:empty{display:none;}position:absolute;z-index:10;right:0;margin-top:var(--panel-gap-vertical);--badge-border-radius:var(--catalog-page-badge-border-radius);--badge-padding:var(--catalog-page-badge-padding);--badge-font-size:var(--catalog-page-badge-font-size);--badge-line-height:var(--catalog-page-badge-line-height);--badge-dot-size:var(--catalog-page-badge-dot-size);--badge-dot-border-color:var(--catalog-page-badge-dot-border-color);"]);
  }
});

// node_modules/@redocly/theme/src/components/StatusCode/StatusCode.ts
var StatusCode;
var init_StatusCode = __esm({
  "node_modules/@redocly/theme/src/components/StatusCode/StatusCode.ts"() {
    init_styled_components_esm();
    StatusCode = styled_components_esm_default.button.attrs({
      "data-component-name": "StatusCode/StatusCode"
    }).withConfig({
      displayName: "StatusCode",
      componentId: "sc-fjemrt-0"
    })(["background:none;padding:0;display:flex;align-items:center;&:before{display:inline-block;content:'';border-radius:50%;margin-right:4px;height:var(--status-code-height);width:var(--status-code-width);border:var(--status-code-border);background-color:", ""], ({
      status
    }) => {
      if (Math.floor(Number(status) / 100) === 2) {
        return "var(--status-code-200-bg-color)";
      } else if (Math.floor(Number(status) / 100) === 4) {
        return "var(--status-code-400-bg-color)";
      } else if (Math.floor(Number(status) / 100) === 5) {
        return "var(--status-code-500-bg-color)";
      } else if (Math.floor(Number(status) / 100) === 3) {
        return "var(--status-code-300-bg-color)";
      } else {
        return "var(--status-code-100-bg-color)";
      }
    });
  }
});

// node_modules/@redocly/theme/src/icons/BookmarkAddIcon/BookmarkAddIcon.tsx
import React45 from "react";
var Icon20, BookmarkAddIcon;
var init_BookmarkAddIcon = __esm({
  "node_modules/@redocly/theme/src/icons/BookmarkAddIcon/BookmarkAddIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon20 = (props) => /* @__PURE__ */ React45.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React45.createElement("path", { d: "M12 8V13.3757L8 11.3525L4 13.374V2H9V1H4C3.73478 1 3.48043 1.10536 3.29289 1.29289C3.10536 1.48043 3 1.73478 3 2V15L8 12.4732L13 15V8H12Z" }), /* @__PURE__ */ React45.createElement("path", { d: "M13 3V1H12V3H10V4H12V6H13V4H15V3H13Z" }));
    BookmarkAddIcon = styled_components_esm_default(Icon20).attrs(() => ({
      "data-component-name": "icons/BookmarkAddIcon/BookmarkAddIcon"
    })).withConfig({
      displayName: "BookmarkAddIcon",
      componentId: "sc-3leux0-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SpinnerIcon/SpinnerIcon.tsx
import React46 from "react";
var Icon21, SpinnerIcon;
var init_SpinnerIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SpinnerIcon/SpinnerIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon21 = (props) => /* @__PURE__ */ React46.createElement("svg", { viewBox: "0 -1 38 40", strokeOpacity: ".5", ...props }, /* @__PURE__ */ React46.createElement("g", { fill: "none", fillRule: "evenodd" }, /* @__PURE__ */ React46.createElement("g", { transform: "translate(1 1)", strokeWidth: "4" }, /* @__PURE__ */ React46.createElement("circle", { strokeOpacity: ".3", cx: "18", cy: "18", r: "18" }), /* @__PURE__ */ React46.createElement("path", { d: "M36 18c0-9.94-8.06-18-18-18" }, /* @__PURE__ */ React46.createElement("animateTransform", { attributeName: "transform", type: "rotate", from: "0 18 18", to: "360 18 18", dur: "1s", repeatCount: "indefinite" })))));
    SpinnerIcon = styled_components_esm_default(Icon21).attrs(() => ({
      "data-component-name": "icons/SpinnerIcon/SpinnerIcon"
    })).withConfig({
      displayName: "SpinnerIcon",
      componentId: "sc-1uvzy83-0"
    })(["path{fill:", ";}height:", ";width:", ";cursor:pointer;left:0.8em;stroke:var(--search-input-text-color);@media screen and (min-width:", "){width:1.2em;height:1.2em;}"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "1em", ({
      size
    }) => size || "1em", breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/icons/FileStorageIcon/FileStorageIcon.tsx
import React47 from "react";
var Icon22, FileStorageIcon;
var init_FileStorageIcon = __esm({
  "node_modules/@redocly/theme/src/icons/FileStorageIcon/FileStorageIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon22 = (props) => /* @__PURE__ */ React47.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React47.createElement("path", { d: "M14 10H13V11H14V14H2V11H3V10H2C1.73488 10.0003 1.48071 10.1058 1.29324 10.2932C1.10578 10.4807 1.00032 10.7349 1 11V14C1.00032 14.2651 1.10578 14.5193 1.29324 14.7068C1.48071 14.8942 1.73488 14.9997 2 15H14C14.2651 14.9997 14.5193 14.8942 14.7068 14.7068C14.8942 14.5193 14.9997 14.2651 15 14V11C14.9997 10.7349 14.8942 10.4807 14.7068 10.2932C14.5193 10.1058 14.2651 10.0003 14 10Z" }), /* @__PURE__ */ React47.createElement("path", { d: "M3.5 13C3.77614 13 4 12.7761 4 12.5C4 12.2239 3.77614 12 3.5 12C3.22386 12 3 12.2239 3 12.5C3 12.7761 3.22386 13 3.5 13Z" }), /* @__PURE__ */ React47.createElement("path", { d: "M11.3535 3.6465L8.8535 1.1465C8.75975 1.05273 8.6326 1.00003 8.5 1H5.5C5.23488 1.0003 4.9807 1.10576 4.79323 1.29323C4.60576 1.4807 4.5003 1.73488 4.5 2V10C4.5003 10.2651 4.60576 10.5193 4.79323 10.7068C4.9807 10.8942 5.23488 10.9997 5.5 11H10.5C10.7651 10.9997 11.0193 10.8942 11.2068 10.7068C11.3942 10.5193 11.4997 10.2651 11.5 10V4C11.5 3.8674 11.4473 3.74025 11.3535 3.6465ZM10.2928 4H8.5V2.20705L10.2928 4ZM5.5 10V2H7.5V4C7.5003 4.26512 7.60576 4.5193 7.79323 4.70677C7.9807 4.89424 8.23488 4.9997 8.5 5H10.5V10H5.5Z" }));
    FileStorageIcon = styled_components_esm_default(Icon22).attrs(() => ({
      "data-component-name": "icons/FileStorageIcon/FileStorageIcon"
    })).withConfig({
      displayName: "FileStorageIcon",
      componentId: "sc-f89zj8-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/FolderAddIcon/FolderAddIcon.tsx
import React48 from "react";
var Icon23, FolderAddIcon;
var init_FolderAddIcon = __esm({
  "node_modules/@redocly/theme/src/icons/FolderAddIcon/FolderAddIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon23 = (props) => /* @__PURE__ */ React48.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React48.createElement("path", { d: "M13 10H12V12H10V13H12V15H13V13H15V12H13V10Z" }), /* @__PURE__ */ React48.createElement("path", { d: "M14 4H8L6.3 2.3C6.1 2.1 5.85 2 5.6 2H2C1.45 2 1 2.45 1 3V13C1 13.55 1.45 14 2 14H9V13H2V3H5.6L7.6 5H14V9H15V5C15 4.45 14.55 4 14 4Z" }));
    FolderAddIcon = styled_components_esm_default(Icon23).attrs(() => ({
      "data-component-name": "icons/FolderAddIcon/FolderAddIcon"
    })).withConfig({
      displayName: "FolderAddIcon",
      componentId: "sc-1l7j3xn-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/FolderIcon/FolderIcon.tsx
import React49 from "react";
var Icon24, FolderIcon;
var init_FolderIcon = __esm({
  "node_modules/@redocly/theme/src/icons/FolderIcon/FolderIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon24 = (props) => /* @__PURE__ */ React49.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 14 14", fill: "none", ...props }, /* @__PURE__ */ React49.createElement("path", { d: "M4.88688 2.625L6.38313 4.11688L6.63688 4.375H12.25V11.375H1.75V2.625H4.88688ZM4.88688 1.75H1.75C1.51794 1.75 1.29538 1.84219 1.13128 2.00628C0.967187 2.17038 0.875 2.39294 0.875 2.625V11.375C0.875 11.6071 0.967187 11.8296 1.13128 11.9937C1.29538 12.1578 1.51794 12.25 1.75 12.25H12.25C12.4821 12.25 12.7046 12.1578 12.8687 11.9937C13.0328 11.8296 13.125 11.6071 13.125 11.375V4.375C13.125 4.14294 13.0328 3.92038 12.8687 3.75628C12.7046 3.59219 12.4821 3.5 12.25 3.5H7L5.50813 2.00813C5.42672 1.92624 5.32992 1.86127 5.2233 1.81697C5.11667 1.77267 5.00234 1.74991 4.88688 1.75Z" }));
    FolderIcon = styled_components_esm_default(Icon24).attrs(() => ({
      "data-component-name": "icons/FolderIcon/FolderIcon"
    })).withConfig({
      displayName: "FolderIcon",
      componentId: "sc-a68q0v-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CloseOutlineIcon/CloseOutlineIcon.tsx
import React50 from "react";
var Icon25, CloseOutlineIcon;
var init_CloseOutlineIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CloseOutlineIcon/CloseOutlineIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon25 = (props) => /* @__PURE__ */ React50.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "14", height: "14", fill: "none", ...props }, /* @__PURE__ */ React50.createElement("g", null, /* @__PURE__ */ React50.createElement("path", { d: "M7 0.875C3.5875 0.875 0.875 3.5875 0.875 7C0.875 10.4125 3.5875 13.125 7 13.125C10.4125 13.125 13.125 10.4125 13.125 7C13.125 3.5875 10.4125 0.875 7 0.875ZM7 12.25C4.1125 12.25 1.75 9.8875 1.75 7C1.75 4.1125 4.1125 1.75 7 1.75C9.8875 1.75 12.25 4.1125 12.25 7C12.25 9.8875 9.8875 12.25 7 12.25Z" }), /* @__PURE__ */ React50.createElement("path", { d: "M9.3625 10.0625L7 7.7L4.6375 10.0625L3.9375 9.3625L6.3 7L3.9375 4.6375L4.6375 3.9375L7 6.3L9.3625 3.9375L10.0625 4.6375L7.7 7L10.0625 9.3625L9.3625 10.0625Z" })));
    CloseOutlineIcon = styled_components_esm_default(Icon25).attrs(() => ({
      "data-component-name": "icons/CloseOutlineIcon/CloseOutlineIcon"
    })).withConfig({
      displayName: "CloseOutlineIcon",
      componentId: "sc-1m81rur-0"
    })(["path{fill:", ";}height:", ";width:", ";cursor:pointer;"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/DataFormatIcon/DataFormatIcon.tsx
import React51 from "react";
var Icon26, DataFormatIcon;
var init_DataFormatIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DataFormatIcon/DataFormatIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon26 = (props) => /* @__PURE__ */ React51.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React51.createElement("path", { d: "M13 5.5H9V6.5H13V5.5Z" }), /* @__PURE__ */ React51.createElement("path", { d: "M7 9.5H3V10.5H7V9.5Z" }), /* @__PURE__ */ React51.createElement("path", { d: "M5 8C4.60444 8 4.21776 7.8827 3.88886 7.66294C3.55996 7.44318 3.30362 7.13082 3.15224 6.76537C3.00087 6.39991 2.96126 5.99778 3.03843 5.60982C3.1156 5.22186 3.30608 4.86549 3.58579 4.58579C3.86549 4.30608 4.22186 4.1156 4.60982 4.03843C4.99778 3.96126 5.39991 4.00087 5.76537 4.15224C6.13082 4.30362 6.44318 4.55996 6.66294 4.88886C6.8827 5.21776 7 5.60444 7 6C6.9994 6.53025 6.7885 7.03861 6.41356 7.41356C6.03861 7.7885 5.53025 7.9994 5 8ZM5 5C4.80222 5 4.60888 5.05865 4.44443 5.16853C4.27998 5.27841 4.15181 5.43459 4.07612 5.61732C4.00043 5.80004 3.98063 6.00111 4.01921 6.19509C4.0578 6.38907 4.15304 6.56725 4.29289 6.70711C4.43275 6.84696 4.61093 6.9422 4.80491 6.98079C4.99889 7.01937 5.19996 6.99957 5.38268 6.92388C5.56541 6.84819 5.72159 6.72002 5.83147 6.55557C5.94135 6.39112 6 6.19778 6 6C5.99974 5.73486 5.89429 5.48066 5.70681 5.29319C5.51934 5.10571 5.26514 5.00026 5 5Z" }), /* @__PURE__ */ React51.createElement("path", { d: "M11 12C10.6044 12 10.2178 11.8827 9.88886 11.6629C9.55996 11.4432 9.30362 11.1308 9.15224 10.7654C9.00087 10.3999 8.96126 9.99778 9.03843 9.60982C9.1156 9.22186 9.30608 8.86549 9.58579 8.58579C9.86549 8.30608 10.2219 8.1156 10.6098 8.03843C10.9978 7.96126 11.3999 8.00087 11.7654 8.15224C12.1308 8.30362 12.4432 8.55996 12.6629 8.88886C12.8827 9.21776 13 9.60444 13 10C12.9994 10.5303 12.7885 11.0386 12.4136 11.4136C12.0386 11.7885 11.5303 11.9994 11 12ZM11 9C10.8022 9 10.6089 9.05865 10.4444 9.16853C10.28 9.27841 10.1518 9.43459 10.0761 9.61732C10.0004 9.80004 9.98063 10.0011 10.0192 10.1951C10.0578 10.3891 10.153 10.5673 10.2929 10.7071C10.4327 10.847 10.6109 10.9422 10.8049 10.9808C10.9989 11.0194 11.2 10.9996 11.3827 10.9239C11.5654 10.8482 11.7216 10.72 11.8315 10.5556C11.9414 10.3911 12 10.1978 12 10C11.9997 9.73487 11.8943 9.48066 11.7068 9.29319C11.5193 9.10571 11.2651 9.00027 11 9Z" }), /* @__PURE__ */ React51.createElement("path", { d: "M14 15H2C1.73487 14.9997 1.48068 14.8943 1.2932 14.7068C1.10572 14.5193 1.00028 14.2651 1 14V2C1.00028 1.73487 1.10572 1.48068 1.2932 1.2932C1.48068 1.10572 1.73487 1.00028 2 1H14C14.2651 1.00028 14.5193 1.10572 14.7068 1.2932C14.8943 1.48068 14.9997 1.73487 15 2V14C14.9997 14.2651 14.8943 14.5193 14.7068 14.7068C14.5193 14.8943 14.2651 14.9997 14 15ZM2 2V14H14V2H2Z" }));
    DataFormatIcon = styled_components_esm_default(Icon26).attrs(() => ({
      "data-component-name": "icons/DataFormatIcon/DataFormatIcon"
    })).withConfig({
      displayName: "DataFormatIcon",
      componentId: "sc-14783po-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/DownloadIcon/DownloadIcon.tsx
import React52 from "react";
var Icon27, DownloadIcon;
var init_DownloadIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DownloadIcon/DownloadIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon27 = (props) => /* @__PURE__ */ React52.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React52.createElement("path", { d: "M13 12V14H3V12H2V14C2 14.2652 2.10536 14.5196 2.29289 14.7071C2.48043 14.8946 2.73478 15 3 15H13C13.2652 15 13.5196 14.8946 13.7071 14.7071C13.8946 14.5196 14 14.2652 14 14V12H13Z" }), /* @__PURE__ */ React52.createElement("path", { d: "M13 7L12.295 6.295L8.5 10.085V1H7.5V10.085L3.705 6.295L3 7L8 12L13 7Z" }));
    DownloadIcon = styled_components_esm_default(Icon27).attrs(() => ({
      "data-component-name": "icons/DownloadIcon/DownloadIcon"
    })).withConfig({
      displayName: "DownloadIcon",
      componentId: "sc-b7ija6-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/DocumentAddIcon/DocumentAddIcon.tsx
import React53 from "react";
var Icon28, DocumentAddIcon;
var init_DocumentAddIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DocumentAddIcon/DocumentAddIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon28 = (props) => /* @__PURE__ */ React53.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React53.createElement("path", { d: "M15 11.9999H13V9.99993H12V11.9999H10V12.9999H12V14.9999H13V12.9999H15V11.9999Z" }), /* @__PURE__ */ React53.createElement("path", { d: "M8 13.9999H4V1.99993H8V4.99993C8.00077 5.26491 8.10637 5.51882 8.29374 5.70619C8.48111 5.89356 8.73502 5.99916 9 5.99993H12V7.99993H13V4.99993C13.0018 4.93421 12.9893 4.86889 12.9634 4.80847C12.9375 4.74804 12.8988 4.69395 12.85 4.64993L9.35 1.14993C9.30599 1.10109 9.2519 1.06239 9.19147 1.03649C9.13104 1.01059 9.06572 0.99812 9 0.999928H4C3.73502 1.00069 3.48111 1.1063 3.29374 1.29367C3.10637 1.48104 3.00077 1.73495 3 1.99993V13.9999C3.00077 14.2649 3.10637 14.5188 3.29374 14.7062C3.48111 14.8936 3.73502 14.9992 4 14.9999H8V13.9999ZM9 2.19993L11.8 4.99993H9V2.19993Z" }));
    DocumentAddIcon = styled_components_esm_default(Icon28).attrs(() => ({
      "data-component-name": "icons/DocumentAddIcon/DocumentAddIcon"
    })).withConfig({
      displayName: "DocumentAddIcon",
      componentId: "sc-yfxszp-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SaveIcon/SaveIcon.tsx
import React54 from "react";
var Icon29, SaveIcon;
var init_SaveIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SaveIcon/SaveIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon29 = (props) => /* @__PURE__ */ React54.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React54.createElement("path", { d: "M13.855 4.64501L11.355 2.14501C11.3083 2.09867 11.2529 2.06201 11.192 2.03712C11.131 2.01224 11.0658 1.99963 11 2.00001H3C2.73478 2.00001 2.48043 2.10537 2.29289 2.2929C2.10536 2.48044 2 2.73479 2 3.00001V13C2 13.2652 2.10536 13.5196 2.29289 13.7071C2.48043 13.8947 2.73478 14 3 14H13C13.2652 14 13.5196 13.8947 13.7071 13.7071C13.8946 13.5196 14 13.2652 14 13V5.00001C14.0004 4.93421 13.9878 4.86897 13.9629 4.80806C13.938 4.74714 13.9013 4.69173 13.855 4.64501ZM6 3.00001H10V5.00001H6V3.00001ZM10 13H6V9.00001H10V13ZM11 13V9.00001C11 8.73479 10.8946 8.48044 10.7071 8.2929C10.5196 8.10537 10.2652 8.00001 10 8.00001H6C5.73478 8.00001 5.48043 8.10537 5.29289 8.2929C5.10536 8.48044 5 8.73479 5 9.00001V13H3V3.00001H5V5.00001C5 5.26523 5.10536 5.51958 5.29289 5.70712C5.48043 5.89465 5.73478 6.00001 6 6.00001H10C10.2652 6.00001 10.5196 5.89465 10.7071 5.70712C10.8946 5.51958 11 5.26523 11 5.00001V3.20501L13 5.20501V13H11Z" }));
    SaveIcon = styled_components_esm_default(Icon29).attrs(() => ({
      "data-component-name": "icons/SaveIcon/SaveIcon"
    })).withConfig({
      displayName: "SaveIcon",
      componentId: "sc-91j804-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CloudUploadIcon/CloudUploadIcon.tsx
import React55 from "react";
var Icon30, CloudUploadIcon;
var init_CloudUploadIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CloudUploadIcon/CloudUploadIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon30 = (props) => /* @__PURE__ */ React55.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React55.createElement("path", { d: "M5.50001 8.99979L6.20501 9.70479L7.50001 8.41479V14.4998H8.50001V8.41479L9.79501 9.70479L10.5 8.99979L8.00001 6.49979L5.50001 8.99979Z" }), /* @__PURE__ */ React55.createElement("path", { d: "M11.75 10.9998H11.5V9.99979H11.75C12.3467 10.0237 12.9285 9.80949 13.3674 9.40442C13.8062 8.99934 14.0661 8.43652 14.09 7.83979C14.1139 7.24305 13.8997 6.66127 13.4946 6.22243C13.0896 5.7836 12.5267 5.52365 11.93 5.49979H11.5L11.45 5.08979C11.3391 4.24801 10.9259 3.47526 10.2876 2.91548C9.64916 2.3557 8.82906 2.04706 7.98001 2.04706C7.13095 2.04706 6.31085 2.3557 5.67246 2.91548C5.03407 3.47526 4.62093 4.24801 4.51001 5.08979L4.50001 5.49979H4.07001C3.47327 5.52365 2.91045 5.7836 2.50538 6.22243C2.1003 6.66127 1.88614 7.24305 1.91001 7.83979C1.93387 8.43652 2.19382 8.99934 2.63265 9.40442C3.07149 9.80949 3.65327 10.0237 4.25001 9.99979H4.50001V10.9998H4.25001C3.44821 10.9947 2.67659 10.6934 2.0835 10.1538C1.49041 9.61425 1.11771 8.87447 1.03707 8.07672C0.956428 7.27898 1.17353 6.47957 1.64663 5.83221C2.11974 5.18485 2.81545 4.73523 3.60001 4.56979C3.81586 3.56305 4.37042 2.66077 5.17116 2.01352C5.9719 1.36627 6.97038 1.01318 8.00001 1.01318C9.02963 1.01318 10.0281 1.36627 10.8288 2.01352C11.6296 2.66077 12.1842 3.56305 12.4 4.56979C13.1846 4.73523 13.8803 5.18485 14.3534 5.83221C14.8265 6.47957 15.0436 7.27898 14.9629 8.07672C14.8823 8.87447 14.5096 9.61425 13.9165 10.1538C13.3234 10.6934 12.5518 10.9947 11.75 10.9998Z" }));
    CloudUploadIcon = styled_components_esm_default(Icon30).attrs(() => ({
      "data-component-name": "icons/CloudUploadIcon/CloudUploadIcon"
    })).withConfig({
      displayName: "CloudUploadIcon",
      componentId: "sc-qjbozy-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SecurityIcon/SecurityIcon.tsx
import React56 from "react";
var Icon31, SecurityIcon;
var init_SecurityIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SecurityIcon/SecurityIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon31 = (props) => /* @__PURE__ */ React56.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React56.createElement("path", { d: "M7 8.295L5.705 7L5 7.705L7 9.705L11 5.705L10.295 5L7 8.295Z" }), /* @__PURE__ */ React56.createElement("path", { d: "M8 15L4.9121 13.3535C4.03174 12.8852 3.29552 12.186 2.78248 11.3309C2.26944 10.4758 1.99893 9.49718 2 8.5V2C2.00028 1.73487 2.10573 1.48068 2.2932 1.2932C2.48068 1.10572 2.73487 1.00028 3 1H13C13.2651 1.00028 13.5193 1.10572 13.7068 1.2932C13.8943 1.48068 13.9997 1.73487 14 2V8.5C14.0011 9.49718 13.7306 10.4758 13.2175 11.3309C12.7045 12.186 11.9683 12.8852 11.0879 13.3535L8 15ZM3 2V8.5C2.99914 9.3159 3.22048 10.1166 3.64028 10.8163C4.06007 11.5159 4.66246 12.088 5.3828 12.4712L8 13.8666L10.6172 12.4712C11.3375 12.088 11.9399 11.5159 12.3597 10.8163C12.7795 10.1166 13.0009 9.3159 13 8.5V2H3Z" }));
    SecurityIcon = styled_components_esm_default(Icon31).attrs(() => ({
      "data-component-name": "icons/SecurityIcon/SecurityIcon"
    })).withConfig({
      displayName: "SecurityIcon",
      componentId: "sc-13qqlcz-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CodeIcon/CodeIcon.tsx
import React57 from "react";
var Icon32, CodeIcon;
var init_CodeIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CodeIcon/CodeIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon32 = (props) => /* @__PURE__ */ React57.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React57.createElement("path", { d: "M15.5 8.00002L12 11.5L11.295 10.795L14.085 8.00002L11.295 5.20502L12 4.50002L15.5 8.00002Z" }), /* @__PURE__ */ React57.createElement("path", { d: "M0.5 8.00002L4 4.50002L4.705 5.20502L1.915 8.00002L4.705 10.795L4 11.5L0.5 8.00002Z" }), /* @__PURE__ */ React57.createElement("path", { d: "M8.81944 3.00049L6.20925 12.7418L7.17518 13.0007L9.78537 3.25931L8.81944 3.00049Z" }));
    CodeIcon = styled_components_esm_default(Icon32).attrs(() => ({
      "data-component-name": "icons/CodeIcon/CodeIcon"
    })).withConfig({
      displayName: "CodeIcon",
      componentId: "sc-ruruhl-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/TimeIcon/TimeIcon.tsx
import React58 from "react";
var Icon33, TimeIcon;
var init_TimeIcon = __esm({
  "node_modules/@redocly/theme/src/icons/TimeIcon/TimeIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon33 = (props) => /* @__PURE__ */ React58.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React58.createElement("path", { d: "M8 15C6.61553 15 5.26216 14.5895 4.11101 13.8203C2.95987 13.0511 2.06266 11.9579 1.53285 10.6788C1.00303 9.3997 0.86441 7.99224 1.13451 6.63437C1.4046 5.2765 2.07129 4.02922 3.05026 3.05026C4.02922 2.07129 5.2765 1.4046 6.63437 1.13451C7.99224 0.86441 9.3997 1.00303 10.6788 1.53285C11.9579 2.06266 13.0511 2.95987 13.8203 4.11101C14.5895 5.26216 15 6.61553 15 8C15 9.85652 14.2625 11.637 12.9497 12.9497C11.637 14.2625 9.85652 15 8 15ZM8 2C6.81332 2 5.65328 2.3519 4.66658 3.01119C3.67989 3.67047 2.91085 4.60755 2.45673 5.7039C2.0026 6.80026 1.88378 8.00666 2.11529 9.17054C2.3468 10.3344 2.91825 11.4035 3.75736 12.2426C4.59648 13.0818 5.66558 13.6532 6.82946 13.8847C7.99335 14.1162 9.19975 13.9974 10.2961 13.5433C11.3925 13.0892 12.3295 12.3201 12.9888 11.3334C13.6481 10.3467 14 9.18669 14 8C14 6.4087 13.3679 4.88258 12.2426 3.75736C11.1174 2.63214 9.5913 2 8 2Z" }), /* @__PURE__ */ React58.createElement("path", { d: "M10.295 11L7.5 8.205V3.5H8.5V7.79L11 10.295L10.295 11Z" }));
    TimeIcon = styled_components_esm_default(Icon33).attrs(() => ({
      "data-component-name": "icons/TimeIcon/TimeIcon"
    })).withConfig({
      displayName: "TimeIcon",
      componentId: "sc-18xyrzk-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CookieIcon/CookieIcon.tsx
import React59 from "react";
var Icon34, CookieIcon;
var init_CookieIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CookieIcon/CookieIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon34 = (props) => /* @__PURE__ */ React59.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React59.createElement("path", { d: "M5 11.5C5.55228 11.5 6 11.0523 6 10.5C6 9.94771 5.55228 9.5 5 9.5C4.44772 9.5 4 9.94771 4 10.5C4 11.0523 4.44772 11.5 5 11.5Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M11.5 11C12.0523 11 12.5 10.5523 12.5 10C12.5 9.44771 12.0523 9 11.5 9C10.9477 9 10.5 9.44771 10.5 10C10.5 10.5523 10.9477 11 11.5 11Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M6.5 6C7.05228 6 7.5 5.55228 7.5 5C7.5 4.44772 7.05228 4 6.5 4C5.94772 4 5.5 4.44772 5.5 5C5.5 5.55228 5.94772 6 6.5 6Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M7 8C7.27614 8 7.5 7.77614 7.5 7.5C7.5 7.22386 7.27614 7 7 7C6.72386 7 6.5 7.22386 6.5 7.5C6.5 7.77614 6.72386 8 7 8Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M11.5 3.5C12.0523 3.5 12.5 3.05228 12.5 2.5C12.5 1.94772 12.0523 1.5 11.5 1.5C10.9477 1.5 10.5 1.94772 10.5 2.5C10.5 3.05228 10.9477 3.5 11.5 3.5Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M14.5 2C14.7761 2 15 1.77614 15 1.5C15 1.22386 14.7761 1 14.5 1C14.2239 1 14 1.22386 14 1.5C14 1.77614 14.2239 2 14.5 2Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M8 12C8.27614 12 8.5 11.7761 8.5 11.5C8.5 11.2239 8.27614 11 8 11C7.72386 11 7.5 11.2239 7.5 11.5C7.5 11.7761 7.72386 12 8 12Z" }), /* @__PURE__ */ React59.createElement("path", { d: "M8 15C4.15 15 1 11.85 1 8C1 4.15 4.15 1 8 1C8.05 1 8.1 1 8.15 1L8.85 1.05L8.7 1.65C8.65 1.85 8.6 2.1 8.6 2.3C8.6 3.7 9.7 4.8 11.1 4.8C11.6 4.8 12.1 4.65 12.55 4.35L13.2 5.1C13 5.3 12.9 5.55 12.9 5.8C12.9 6.45 13.55 7 14.25 6.75L14.85 6.5L14.95 7.15C15 7.45 15 7.75 15 8C15 11.85 11.85 15 8 15ZM7.65 2C4.5 2.2 2 4.8 2 8C2 11.3 4.7 14 8 14C11.3 14 14 11.3 14 8C14 7.95 14 7.85 14 7.8C12.85 7.85 11.9 6.95 11.9 5.8C11.9 5.75 11.9 5.75 11.9 5.7C11.65 5.75 11.4 5.8 11.1 5.8C9.15 5.8 7.6 4.25 7.6 2.3C7.6 2.2 7.6 2.1 7.65 2Z" }));
    CookieIcon = styled_components_esm_default(Icon34).attrs(() => ({
      "data-component-name": "icons/CookieIcon/CookieIcon"
    })).withConfig({
      displayName: "CookieIcon",
      componentId: "sc-byebar-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ViewIcon/ViewIcon.tsx
import React60 from "react";
var Icon35, ViewIcon;
var init_ViewIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ViewIcon/ViewIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon35 = (props) => /* @__PURE__ */ React60.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React60.createElement("path", { d: "M15.47 7.83C14.8819 6.30882 13.861 4.99331 12.5334 4.04604C11.2058 3.09878 9.62971 2.56129 7.99997 2.5C6.37023 2.56129 4.79416 3.09878 3.46657 4.04604C2.13898 4.99331 1.11805 6.30882 0.52997 7.83C0.490254 7.93985 0.490254 8.06015 0.52997 8.17C1.11805 9.69118 2.13898 11.0067 3.46657 11.954C4.79416 12.9012 6.37023 13.4387 7.99997 13.5C9.62971 13.4387 11.2058 12.9012 12.5334 11.954C13.861 11.0067 14.8819 9.69118 15.47 8.17C15.5097 8.06015 15.5097 7.93985 15.47 7.83ZM7.99997 12.5C5.34997 12.5 2.54997 10.535 1.53497 8C2.54997 5.465 5.34997 3.5 7.99997 3.5C10.65 3.5 13.45 5.465 14.465 8C13.45 10.535 10.65 12.5 7.99997 12.5Z" }), /* @__PURE__ */ React60.createElement("path", { d: "M7.99997 5C7.40663 5 6.82661 5.17595 6.33326 5.50559C5.83991 5.83524 5.45539 6.30377 5.22833 6.85195C5.00127 7.40013 4.94186 8.00333 5.05761 8.58527C5.17337 9.16721 5.45909 9.70176 5.87865 10.1213C6.29821 10.5409 6.83276 10.8266 7.4147 10.9424C7.99664 11.0581 8.59984 10.9987 9.14802 10.7716C9.6962 10.5446 10.1647 10.1601 10.4944 9.66671C10.824 9.17336 11 8.59334 11 8C11 7.20435 10.6839 6.44129 10.1213 5.87868C9.55868 5.31607 8.79562 5 7.99997 5ZM7.99997 10C7.60441 10 7.21773 9.8827 6.88883 9.66294C6.55993 9.44318 6.30359 9.13082 6.15221 8.76537C6.00084 8.39991 5.96123 7.99778 6.0384 7.60982C6.11557 7.22186 6.30605 6.86549 6.58576 6.58579C6.86546 6.30608 7.22183 6.1156 7.60979 6.03843C7.99775 5.96126 8.39988 6.00087 8.76534 6.15224C9.13079 6.30362 9.44315 6.55996 9.66291 6.88886C9.88267 7.21776 9.99997 7.60444 9.99997 8C9.99997 8.53043 9.78926 9.03914 9.41418 9.41421C9.03911 9.78929 8.5304 10 7.99997 10Z" }));
    ViewIcon = styled_components_esm_default(Icon35).attrs(() => ({
      "data-component-name": "icons/ViewIcon/ViewIcon"
    })).withConfig({
      displayName: "ViewIcon",
      componentId: "sc-1159qgl-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ViewOffIcon/ViewOffIcon.tsx
import React61 from "react";
var Icon36, ViewOffIcon;
var init_ViewOffIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ViewOffIcon/ViewOffIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon36 = (props) => /* @__PURE__ */ React61.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React61.createElement("path", { d: "M2.62 11.255L3.335 10.545C2.55211 9.84206 1.93699 8.97234 1.535 8C2.55 5.465 5.35 3.5 8 3.5C8.68195 3.509 9.35772 3.63064 10 3.86L10.775 3.08C9.89633 2.70866 8.95385 2.51167 8 2.5C6.37026 2.56129 4.79419 3.09878 3.4666 4.04604C2.13901 4.99331 1.11808 6.30882 0.530001 7.83C0.490285 7.93985 0.490285 8.06015 0.530001 8.17C0.974124 9.34851 1.69021 10.4055 2.62 11.255Z" }), /* @__PURE__ */ React61.createElement("path", { d: "M6 7.865C6.03477 7.38586 6.24085 6.93524 6.58054 6.59554C6.92024 6.25584 7.37086 6.04977 7.85 6.015L8.755 5.105C8.24788 4.97147 7.71462 4.97321 7.20838 5.11003C6.70214 5.24685 6.24061 5.51399 5.8698 5.8848C5.49899 6.25561 5.23186 6.71714 5.09503 7.22338C4.95821 7.72962 4.95647 8.26288 5.09 8.77L6 7.865Z" }), /* @__PURE__ */ React61.createElement("path", { d: "M15.47 7.83C14.8967 6.3366 13.899 5.04351 12.6 4.11L15 1.705L14.295 1L1 14.295L1.705 15L4.255 12.45C5.39194 13.117 6.68202 13.4787 8 13.5C9.62974 13.4387 11.2058 12.9012 12.5334 11.954C13.861 11.0067 14.8819 9.69118 15.47 8.17C15.5097 8.06015 15.5097 7.93985 15.47 7.83ZM10 8C9.9979 8.35005 9.90395 8.69342 9.72755 8.99578C9.55116 9.29815 9.29849 9.54892 8.99481 9.72303C8.69112 9.89714 8.34705 9.9885 7.997 9.98797C7.64694 9.98744 7.30316 9.89503 7 9.72L9.72 7C9.89975 7.30287 9.99634 7.64783 10 8ZM8 12.5C6.95103 12.4817 5.92195 12.2107 5 11.71L6.27 10.44C6.84767 10.8408 7.54777 11.026 8.24807 10.9632C8.94836 10.9005 9.60437 10.5937 10.1015 10.0965C10.5987 9.59937 10.9055 8.94336 10.9682 8.24307C11.031 7.54277 10.8458 6.84267 10.445 6.265L11.88 4.83C13.0273 5.61749 13.9245 6.71771 14.465 8C13.45 10.535 10.65 12.5 8 12.5Z" }));
    ViewOffIcon = styled_components_esm_default(Icon36).attrs(() => ({
      "data-component-name": "icons/ViewOffIcon/ViewOffIcon"
    })).withConfig({
      displayName: "ViewOffIcon",
      componentId: "sc-qps71v-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/RestartIcon/RestartIcon.tsx
import React62 from "react";
var Icon37, RestartIcon;
var init_RestartIcon = __esm({
  "node_modules/@redocly/theme/src/icons/RestartIcon/RestartIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon37 = (props) => /* @__PURE__ */ React62.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React62.createElement("path", { d: "M13 9C13 9.98891 12.7068 10.9556 12.1574 11.7779C11.6079 12.6001 10.8271 13.241 9.91342 13.6194C8.99979 13.9978 7.99446 14.0969 7.02455 13.9039C6.05465 13.711 5.16373 13.2348 4.46447 12.5355C3.76521 11.8363 3.289 10.9454 3.09608 9.97545C2.90315 9.00555 3.00217 8.00021 3.38061 7.08658C3.75904 6.17295 4.39991 5.39206 5.22215 4.84265C6.0444 4.29324 7.0111 4 8 4H11.0911L9.29885 5.7927L10 6.5L13 3.5L10 0.5L9.29885 1.207L11.0926 3H8C6.81331 3 5.65328 3.35189 4.66658 4.01118C3.67989 4.67047 2.91085 5.60754 2.45673 6.7039C2.0026 7.80026 1.88378 9.00666 2.11529 10.1705C2.3468 11.3344 2.91825 12.4035 3.75736 13.2426C4.59648 14.0818 5.66558 14.6532 6.82946 14.8847C7.99335 15.1162 9.19975 14.9974 10.2961 14.5433C11.3925 14.0892 12.3295 13.3201 12.9888 12.3334C13.6481 11.3467 14 10.1867 14 9H13Z" }));
    RestartIcon = styled_components_esm_default(Icon37).attrs(() => ({
      "data-component-name": "icons/RestartIcon/RestartIcon"
    })).withConfig({
      displayName: "RestartIcon",
      componentId: "sc-xzhtfx-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/OverflowMenuVerticalIcon/OverflowMenuVerticalIcon.tsx
import React63 from "react";
var Icon38, OverflowMenuVerticalIcon;
var init_OverflowMenuVerticalIcon = __esm({
  "node_modules/@redocly/theme/src/icons/OverflowMenuVerticalIcon/OverflowMenuVerticalIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon38 = (props) => /* @__PURE__ */ React63.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React63.createElement("path", { d: "M7.99999 4.4C8.66273 4.4 9.19999 3.86274 9.19999 3.2C9.19999 2.53726 8.66273 2 7.99999 2C7.33725 2 6.79999 2.53726 6.79999 3.2C6.79999 3.86274 7.33725 4.4 7.99999 4.4Z" }), /* @__PURE__ */ React63.createElement("path", { d: "M7.99999 9.2C8.66273 9.2 9.19999 8.66274 9.19999 8C9.19999 7.33726 8.66273 6.8 7.99999 6.8C7.33725 6.8 6.79999 7.33726 6.79999 8C6.79999 8.66274 7.33725 9.2 7.99999 9.2Z" }), /* @__PURE__ */ React63.createElement("path", { d: "M7.99999 14C8.66273 14 9.19999 13.4627 9.19999 12.8C9.19999 12.1373 8.66273 11.6 7.99999 11.6C7.33725 11.6 6.79999 12.1373 6.79999 12.8C6.79999 13.4627 7.33725 14 7.99999 14Z" }));
    OverflowMenuVerticalIcon = styled_components_esm_default(Icon38).attrs(() => ({
      "data-component-name": "icons/OverflowMenuVerticalIcon/OverflowMenuVerticalIcon"
    })).withConfig({
      displayName: "OverflowMenuVerticalIcon",
      componentId: "sc-3nfrru-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/TrashCanIcon/TrashCanIcon.tsx
import React64 from "react";
var Icon39, TrashCanIcon;
var init_TrashCanIcon = __esm({
  "node_modules/@redocly/theme/src/icons/TrashCanIcon/TrashCanIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon39 = (props) => /* @__PURE__ */ React64.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React64.createElement("path", { d: "M7 6H6V12H7V6Z" }), /* @__PURE__ */ React64.createElement("path", { d: "M10 6H9V12H10V6Z" }), /* @__PURE__ */ React64.createElement("path", { d: "M2 3V4H3V14C3 14.2652 3.10536 14.5196 3.29289 14.7071C3.48043 14.8946 3.73478 15 4 15H12C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V4H14V3H2ZM4 14V4H12V14H4Z" }), /* @__PURE__ */ React64.createElement("path", { d: "M10 1H6V2H10V1Z" }));
    TrashCanIcon = styled_components_esm_default(Icon39).attrs(() => ({
      "data-component-name": "icons/TrashCanIcon/TrashCanIcon"
    })).withConfig({
      displayName: "TrashCanIcon",
      componentId: "sc-i369oj-0"
    })(["path{fill:", ";}height:", ";width:", ";cursor:pointer;"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/IBMCloudHyperProtectCryptoServicesIcon/IBMCloudHyperProtectCryptoServicesIcon.tsx
import React65 from "react";
var Icon40, IBMCloudHyperProtectCryptoServicesIcon;
var init_IBMCloudHyperProtectCryptoServicesIcon = __esm({
  "node_modules/@redocly/theme/src/icons/IBMCloudHyperProtectCryptoServicesIcon/IBMCloudHyperProtectCryptoServicesIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon40 = (props) => /* @__PURE__ */ React65.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React65.createElement("path", { d: "M12.5 15L11.45 14.5C10.6 14.1 10 13.2 10 12.25V9H15V12.25C15 13.2 14.45 14.1 13.55 14.5L12.5 15ZM11 10V12.25C11 12.85 11.35 13.35 11.85 13.6L12.5 13.9L13.15 13.6C13.65 13.35 14 12.8 14 12.25V10H11Z" }), /* @__PURE__ */ React65.createElement("path", { d: "M11 6C11.5523 6 12 5.55228 12 5C12 4.44772 11.5523 4 11 4C10.4477 4 10 4.44772 10 5C10 5.55228 10.4477 6 11 6Z" }), /* @__PURE__ */ React65.createElement("path", { d: "M10.5 1C8 1 6 3 6 5.5C6 5.95 6.05 6.4 6.2 6.8L1 12V15H4L9 10L8.3 9.3L6.9 10.7L6.2 10L5.5 10.7L6.2 11.4L5.4 12.2L4.7 11.5L4 12.2L4.7 12.9L3.6 14H2V12.4L7.3 7.1L7.15 6.5C7.05 6.15 7 5.85 7 5.5C7 3.55 8.55 2 10.5 2C12.45 2 14 3.55 14 5.5C14 6.25 13.75 6.95 13.35 7.5H14.5C14.8 6.9 14.95 6.2 14.95 5.5C15 3 13 1 10.5 1Z" }));
    IBMCloudHyperProtectCryptoServicesIcon = styled_components_esm_default(Icon40).attrs(() => ({
      "data-component-name": "icons/IBMCloudHyperProtectCryptoServicesIcon/IBMCloudHyperProtectCryptoServicesIcon"
    })).withConfig({
      displayName: "IBMCloudHyperProtectCryptoServicesIcon",
      componentId: "sc-h2sqdq-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/TableBuiltIcon/TableBuiltIcon.tsx
import React66 from "react";
var Icon41, TableBuiltIcon;
var init_TableBuiltIcon = __esm({
  "node_modules/@redocly/theme/src/icons/TableBuiltIcon/TableBuiltIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon41 = (props) => /* @__PURE__ */ React66.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React66.createElement("path", { d: "M14 4H12V2C11.9997 1.73489 11.8942 1.48072 11.7067 1.29326C11.5193 1.10579 11.2651 1.00033 11 1H2C1.73489 1.00033 1.48072 1.10579 1.29326 1.29326C1.10579 1.48072 1.00033 1.73489 1 2V11C1.00033 11.2651 1.10579 11.5193 1.29326 11.7067C1.48072 11.8942 1.73489 11.9997 2 12H4V14C4.00033 14.2651 4.10579 14.5193 4.29326 14.7067C4.48072 14.8942 4.73488 14.9997 5 15H14C14.2651 14.9997 14.5193 14.8942 14.7067 14.7067C14.8942 14.5193 14.9997 14.2651 15 14V5C14.9997 4.73488 14.8942 4.48072 14.7067 4.29326C14.5193 4.10579 14.2651 4.00033 14 4ZM11 11H7V8.5H11V11ZM11 7.5H7V5H11V7.5ZM6 7.5H2V5H6V7.5ZM11 2V4H2V2H11ZM2 11V8.5H6V11H2ZM14 14H5V12H11C11.2651 11.9997 11.5193 11.8942 11.7067 11.7067C11.8942 11.5193 11.9997 11.2651 12 11V5H14V14Z" }));
    TableBuiltIcon = styled_components_esm_default(Icon41).attrs(() => ({
      "data-component-name": "icons/TableBuiltIcon/TableBuiltIcon"
    })).withConfig({
      displayName: "TableBuiltIcon",
      componentId: "sc-9bew53-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ValueVariableIcon/ValueVariableIcon.tsx
import React67 from "react";
var Icon42, ValueVariableIcon;
var init_ValueVariableIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ValueVariableIcon/ValueVariableIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon42 = (props) => /* @__PURE__ */ React67.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React67.createElement("path", { d: "M4.14282 2C2.95936 2 1.99997 2.95939 1.99997 4.14286V6.61312C1.99997 7.03547 1.7628 7.42181 1.38676 7.61313C1.24248 7.68211 1.14282 7.82942 1.14282 8C1.14282 8.17057 1.24248 8.31791 1.38676 8.38683C1.7628 8.57814 1.99997 8.96454 1.99997 9.38686V11.8571C1.99997 13.0406 2.95936 14 4.14282 14C4.37951 14 4.57139 13.8081 4.57139 13.5714C4.57139 13.3348 4.37951 13.1429 4.14282 13.1429C3.43274 13.1429 2.85711 12.5672 2.85711 11.8571V9.38686C2.85711 8.85963 2.64758 8.3642 2.28997 8C2.64759 7.63581 2.85711 7.14037 2.85711 6.61312V4.14286C2.85711 3.43277 3.43274 2.85714 4.14282 2.85714C4.37951 2.85714 4.57139 2.66526 4.57139 2.42857C4.57139 2.19188 4.37951 2 4.14282 2ZM11.8571 2C13.0406 2 14 2.95939 14 4.14286V6.61312C14 7.03547 14.2371 7.42181 14.6132 7.61313C14.7574 7.68211 14.8571 7.82942 14.8571 8C14.8571 8.17057 14.7574 8.31791 14.6132 8.38683C14.2371 8.57814 14 8.96454 14 9.38686V11.8571C14 13.0406 13.0406 14 11.8571 14C11.6205 14 11.4285 13.8081 11.4285 13.5714C11.4285 13.3348 11.6205 13.1429 11.8571 13.1429C12.5672 13.1429 13.1428 12.5672 13.1428 11.8571V9.38686C13.1428 8.85963 13.3523 8.3642 13.71 8C13.3523 7.63581 13.1428 7.14037 13.1428 6.61312V4.14286C13.1428 3.43277 12.5672 2.85714 11.8571 2.85714C11.6205 2.85714 11.4285 2.66526 11.4285 2.42857C11.4285 2.19188 11.6205 2 11.8571 2Z" }), /* @__PURE__ */ React67.createElement("path", { d: "M5.14282 10.4507C5.14011 10.3693 5.15893 10.2886 5.1974 10.2167C5.23586 10.1449 5.2926 10.0845 5.36188 10.0416C5.43116 9.99875 5.51053 9.97491 5.59197 9.97253C5.67341 9.97015 5.75404 9.98931 5.82571 10.0281C5.8925 10.0638 5.95238 10.1029 6.00651 10.1455C6.06063 10.187 6.10785 10.2261 6.15046 10.2618C6.1872 10.2958 6.23516 10.3151 6.28519 10.316C6.34507 10.316 6.42338 10.2699 6.51896 10.1812C6.61454 10.0914 6.72049 9.97164 6.83334 9.82078C6.9485 9.67107 7.06481 9.51216 7.18458 9.34403C7.30434 9.17589 7.41489 9.00546 7.51854 8.83157L7.77879 8.38245C7.85019 8.25578 7.90201 8.15329 7.93195 8.07613C7.88445 7.87411 7.83339 7.67293 7.77879 7.4727C7.72422 7.27286 7.67316 7.07207 7.62563 6.87043C7.58427 6.70554 7.53312 6.54327 7.47247 6.38446C7.42248 6.25257 7.34957 6.13054 7.25713 6.02401C7.17471 5.92766 7.06937 5.85361 6.95081 5.80867C6.81131 5.76185 6.66596 5.73472 6.51896 5.72806C6.39217 5.72715 6.26562 5.73911 6.14124 5.76376V5.5392L7.79492 5.24209C8.02286 5.48841 8.2029 5.77506 8.3258 6.08735C8.38568 6.23706 8.4375 6.39022 8.47896 6.54683C8.52156 6.7023 8.56648 6.87273 8.61369 7.05929C8.70351 6.92685 8.81522 6.75988 8.94765 6.55489C9.08551 6.34321 9.2387 6.14191 9.40598 5.95262C9.57872 5.75454 9.76297 5.58987 9.95413 5.45743C10.1314 5.33112 10.3403 5.25657 10.5576 5.24209C10.7073 5.24209 10.842 5.28124 10.9618 5.3584C11.0827 5.43671 11.1426 5.55993 11.1426 5.72691C11.1426 6.05165 10.9802 6.21402 10.6566 6.21402C10.5403 6.21531 10.4255 6.1876 10.3226 6.13341C10.2205 6.0792 10.1066 6.05111 9.99098 6.05165C9.87583 6.05165 9.75721 6.10923 9.63054 6.22209C9.49724 6.34457 9.37684 6.4804 9.27124 6.62744C9.07212 6.90042 8.88575 7.18248 8.71273 7.4727L9.22633 9.60543C9.24678 9.74114 9.28272 9.87406 9.33343 10.0016C9.35969 10.0722 9.39617 10.1385 9.44168 10.1985C9.45808 10.2228 9.47933 10.2434 9.50411 10.2591C9.52889 10.2747 9.55665 10.2851 9.58563 10.2895C9.67502 10.2828 9.76005 10.2482 9.82861 10.1904C10.0197 10.0357 10.1867 9.8533 10.3238 9.64919C10.3837 9.56052 10.4309 9.47646 10.4677 9.39815L10.6831 9.5064C10.6142 9.65578 10.5296 9.79744 10.4309 9.92903C10.3081 10.1006 10.173 10.263 10.0267 10.415C9.8822 10.5655 9.72585 10.7041 9.55914 10.8296C9.39677 10.9493 9.24936 11.0058 9.11808 11C8.99903 11.0045 8.88293 10.9624 8.79449 10.8825C8.70702 10.8011 8.62828 10.7108 8.55957 10.6131C8.49245 10.4815 8.44142 10.3423 8.40756 10.1985C8.35614 10.0054 8.31082 9.81064 8.27167 9.61465C8.23128 9.41074 8.19251 9.20652 8.15536 9.00201C8.12866 8.83936 8.08624 8.6797 8.02869 8.52525L7.79492 8.95709C7.69785 9.13721 7.59018 9.31141 7.47247 9.47876C7.3458 9.65956 7.21682 9.84266 7.08439 10.0281C6.95957 10.2061 6.81467 10.3692 6.65255 10.514C6.49708 10.6522 6.34738 10.7685 6.20343 10.8653C6.06911 10.9583 5.90839 11.0055 5.7451 11C5.5928 11.0015 5.44525 10.947 5.33053 10.8468C5.27243 10.7983 5.22556 10.7378 5.19315 10.6694C5.16074 10.601 5.14357 10.5264 5.14282 10.4507Z" }));
    ValueVariableIcon = styled_components_esm_default(Icon42).attrs(() => ({
      "data-component-name": "icons/ValueVariableIcon/ValueVariableIcon"
    })).withConfig({
      displayName: "ValueVariableIcon",
      componentId: "sc-vb7lq9-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/InformationIcon/InformationIcon.tsx
import React68 from "react";
var Icon43, InformationIcon;
var init_InformationIcon = __esm({
  "node_modules/@redocly/theme/src/icons/InformationIcon/InformationIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon43 = (props) => /* @__PURE__ */ React68.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React68.createElement("path", { d: "M8.5 11V7H6.5V8H7.5V11H6V12H10V11H8.5Z" }), /* @__PURE__ */ React68.createElement("path", { d: "M8 4C7.85167 4 7.70666 4.04399 7.58333 4.1264C7.45999 4.20881 7.36386 4.32595 7.30709 4.46299C7.25033 4.60004 7.23548 4.75084 7.26441 4.89632C7.29335 5.04181 7.36478 5.17544 7.46967 5.28033C7.57456 5.38522 7.7082 5.45665 7.85369 5.48559C7.99917 5.51453 8.14997 5.49968 8.28701 5.44291C8.42406 5.38615 8.54119 5.29002 8.6236 5.16668C8.70602 5.04334 8.75 4.89834 8.75 4.75C8.75 4.55109 8.67098 4.36033 8.53033 4.21967C8.38968 4.07902 8.19892 4 8 4Z" }), /* @__PURE__ */ React68.createElement("path", { d: "M8 15C6.61553 15 5.26216 14.5895 4.11101 13.8203C2.95987 13.0511 2.06266 11.9579 1.53285 10.6788C1.00303 9.3997 0.86441 7.99224 1.13451 6.63437C1.4046 5.2765 2.07129 4.02922 3.05026 3.05026C4.02922 2.07129 5.2765 1.4046 6.63437 1.13451C7.99224 0.86441 9.3997 1.00303 10.6788 1.53285C11.9579 2.06266 13.0511 2.95987 13.8203 4.11101C14.5895 5.26216 15 6.61553 15 8C15 9.85652 14.2625 11.637 12.9497 12.9497C11.637 14.2625 9.85652 15 8 15ZM8 2C6.81332 2 5.65328 2.3519 4.66658 3.01119C3.67989 3.67047 2.91085 4.60755 2.45673 5.7039C2.0026 6.80026 1.88378 8.00666 2.11529 9.17054C2.3468 10.3344 2.91825 11.4035 3.75736 12.2426C4.59648 13.0818 5.66558 13.6532 6.82946 13.8847C7.99335 14.1162 9.19975 13.9974 10.2961 13.5433C11.3925 13.0892 12.3295 12.3201 12.9888 11.3334C13.6481 10.3467 14 9.18669 14 8C14 6.4087 13.3679 4.88258 12.2426 3.75736C11.1174 2.63214 9.5913 2 8 2Z" }));
    InformationIcon = styled_components_esm_default(Icon43).attrs(() => ({
      "data-component-name": "icons/InformationIcon/InformationIcon"
    })).withConfig({
      displayName: "InformationIcon",
      componentId: "sc-zu180g-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ChevronSortIcon/ChevronSortIcon.tsx
import React69 from "react";
var Icon44, ChevronSortIcon;
var init_ChevronSortIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ChevronSortIcon/ChevronSortIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon44 = ({
      className,
      onClick
    }) => /* @__PURE__ */ React69.createElement("svg", { className, onClick, xmlns: "http://www.w3.org/2000/svg", width: "14", height: "14", viewBox: "0 0 14 14", fill: "inherit" }, /* @__PURE__ */ React69.createElement("path", { d: "M7 12.25L3.9375 9.1875L4.55437 8.57063L7 11.0119L9.44563 8.57063L10.0625 9.1875L7 12.25Z" }), /* @__PURE__ */ React69.createElement("path", { d: "M7 1.75L10.0625 4.8125L9.44563 5.42937L7 2.98812L4.55437 5.42937L3.9375 4.8125L7 1.75Z" }));
    ChevronSortIcon = styled_components_esm_default(Icon44).attrs(() => ({
      "data-component-name": "icons/ChevronSortIcon/ChevronSortIcon"
    })).withConfig({
      displayName: "ChevronSortIcon",
      componentId: "sc-gqbspn-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size, ({
      size
    }) => size);
  }
});

// node_modules/@redocly/theme/src/icons/CharacterIcon/CharacterIcon.tsx
import React70 from "react";
var Icon45, CharacterIcon;
var init_CharacterIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CharacterIcon/CharacterIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon45 = (props) => /* @__PURE__ */ React70.createElement("svg", { viewBox: "0 0 13 8", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React70.createElement("path", { d: "M13.5 7.5H11C10.7349 7.49964 10.4807 7.39417 10.2933 7.20671C10.1058 7.01925 10.0004 6.76511 10 6.5V3.5C10.0003 3.23488 10.1058 2.9807 10.2932 2.79323C10.4807 2.60576 10.7349 2.5003 11 2.5H13.5V3.5H11V6.5H13.5V7.5Z" }), /* @__PURE__ */ React70.createElement("path", { d: "M8 2.5H6V0.5H5V7.5H8C8.26511 7.49964 8.51925 7.39417 8.70671 7.20671C8.89417 7.01925 8.99964 6.76511 9 6.5V3.5C8.9997 3.23488 8.89424 2.9807 8.70677 2.79323C8.5193 2.60576 8.26512 2.5003 8 2.5ZM6 6.5V3.5H8V6.5H6Z" }), /* @__PURE__ */ React70.createElement("path", { d: "M3 0.5H1C0.734865 0.500265 0.480665 0.605707 0.293186 0.793186C0.105707 0.980665 0.000264738 1.23486 0 1.5V7.5H1V5H3V7.5H4V1.5C3.99974 1.23486 3.89429 0.980665 3.70681 0.793186C3.51934 0.605707 3.26514 0.500265 3 0.5ZM1 4V1.5H3V4H1Z" }));
    CharacterIcon = styled_components_esm_default(Icon45).attrs(() => ({
      "data-component-name": "icons/CharacterIcon/CharacterIcon"
    })).withConfig({
      displayName: "CharacterIcon",
      componentId: "sc-bwv4jd-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/FileIcon/FileIcon.tsx
import React71 from "react";
var Icon46, FileIcon;
var init_FileIcon = __esm({
  "node_modules/@redocly/theme/src/icons/FileIcon/FileIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon46 = (props) => /* @__PURE__ */ React71.createElement("svg", { viewBox: "0 0 10 14", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React71.createElement("path", { d: "M9.85 3.65006L6.35 0.150055C6.30601 0.101196 6.25192 0.0624773 6.19149 0.036578C6.13106 0.0106787 6.06572 -0.00178282 6 5.53814e-05H1C0.735023 0.000833625 0.481121 0.10644 0.293753 0.293808C0.106385 0.481176 0.000778244 0.735078 0 1.00006V13.0001C0.000778244 13.265 0.106385 13.5189 0.293753 13.7063C0.481121 13.8937 0.735023 13.9993 1 14.0001H9C9.26498 13.9993 9.51888 13.8937 9.70625 13.7063C9.89362 13.5189 9.99922 13.265 10 13.0001V4.00006C10.0018 3.93433 9.98938 3.869 9.96348 3.80857C9.93758 3.74813 9.89886 3.69405 9.85 3.65006ZM6 1.20006L8.8 4.00006H6V1.20006ZM9 13.0001H1V1.00006H5V4.00006C5.00078 4.26503 5.10638 4.51893 5.29375 4.7063C5.48112 4.89367 5.73502 4.99928 6 5.00006H9V13.0001Z" }));
    FileIcon = styled_components_esm_default(Icon46).attrs(() => ({
      "data-component-name": "icons/FileIcon/FileIcon"
    })).withConfig({
      displayName: "FileIcon",
      componentId: "sc-26n9ds-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ExportIcon/ExportIcon.tsx
import React72 from "react";
var Icon47, ExportIcon;
var init_ExportIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ExportIcon/ExportIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon47 = (props) => /* @__PURE__ */ React72.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React72.createElement("path", { d: "M13 12V14H3V12H2V14L2.0038 13.9976C2.00333 14.1288 2.02873 14.2589 2.07854 14.3803C2.12836 14.5017 2.20163 14.6121 2.29414 14.7052C2.38666 14.7983 2.49662 14.8723 2.61774 14.9229C2.73885 14.9734 2.86875 14.9997 3 15H13C13.2652 15 13.5196 14.8946 13.7071 14.7071C13.8946 14.5196 14 14.2652 14 14V12H13Z" }), /* @__PURE__ */ React72.createElement("path", { d: "M3 6L3.7055 6.7025L7.5 2.9125V12H8.5V2.9125L12.2955 6.7025L13 6L8 1L3 6Z" }));
    ExportIcon = styled_components_esm_default(Icon47).attrs(() => ({
      "data-component-name": "icons/ExportIcon/ExportIcon"
    })).withConfig({
      displayName: "ExportIcon",
      componentId: "sc-jpbws3-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/layouts/ThreePanelLayout.tsx
import React73 from "react";
function ThreePanelLayout({
  children,
  ...props
}) {
  return /* @__PURE__ */ React73.createElement(Wrapper2, { "data-component-name": "Layout/ThreePanelLayout", ...props }, children);
}
var Wrapper2;
var init_ThreePanelLayout = __esm({
  "node_modules/@redocly/theme/src/layouts/ThreePanelLayout.tsx"() {
    init_styled_components_esm();
    init_lib_esm();
    init_media_css();
    Wrapper2 = styled_components_esm_default.div.withConfig({
      displayName: "ThreePanelLayout__Wrapper",
      componentId: "sc-1r23xib-0"
    })(["position:relative;display:flex;flex-direction:column;align-items:center;margin:0 auto;width:100%;", ";"], ({
      layout = LayoutVariant.THREE_PANEL,
      collapsedSidebar
    }) => {
      return Ne(["max-width:", ";@media screen and (min-width:", "){width:", ";max-width:var(--layout-", "-small-max-width);}@media screen and (min-width:", "){max-width:var(--layout-", "-medium-max-width);}@media screen and (min-width:", "){max-width:var(--layout-", "-large-max-width);}@media print{width:100%;padding:0;}"], layout === LayoutVariant.THREE_PANEL ? "100%" : "", breakpoints.small, collapsedSidebar ? `var(--layout-${layout}-small-max-width)` : "calc(100% - var(--sidebar-width))", layout, breakpoints.medium, layout, breakpoints.large, layout);
    });
  }
});

// node_modules/@redocly/theme/src/core/hoc/index.ts
var init_hoc = __esm({
  "node_modules/@redocly/theme/src/core/hoc/index.ts"() {
    init_typedMemo();
  }
});

// node_modules/@redocly/theme/src/core/types/breadcrumb.ts
var init_breadcrumb = __esm({
  "node_modules/@redocly/theme/src/core/types/breadcrumb.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/catalog.ts
var init_catalog = __esm({
  "node_modules/@redocly/theme/src/core/types/catalog.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/l10n.ts
var init_l10n = __esm({
  "node_modules/@redocly/theme/src/core/types/l10n.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/feedback.ts
var init_feedback = __esm({
  "node_modules/@redocly/theme/src/core/types/feedback.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/hooks.ts
var init_hooks2 = __esm({
  "node_modules/@redocly/theme/src/core/types/hooks.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/markdown.ts
var init_markdown = __esm({
  "node_modules/@redocly/theme/src/core/types/markdown.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/navbar.ts
var init_navbar = __esm({
  "node_modules/@redocly/theme/src/core/types/navbar.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/search.ts
var init_search = __esm({
  "node_modules/@redocly/theme/src/core/types/search.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/select.ts
var init_select = __esm({
  "node_modules/@redocly/theme/src/core/types/select.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/sidebar.ts
var init_sidebar = __esm({
  "node_modules/@redocly/theme/src/core/types/sidebar.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/filter.ts
var init_filter = __esm({
  "node_modules/@redocly/theme/src/core/types/filter.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/user-menu.ts
var init_user_menu = __esm({
  "node_modules/@redocly/theme/src/core/types/user-menu.ts"() {
  }
});

// node_modules/@redocly/theme/src/core/types/index.ts
var init_types = __esm({
  "node_modules/@redocly/theme/src/core/types/index.ts"() {
    init_breadcrumb();
    init_catalog();
    init_l10n();
    init_feedback();
    init_hooks2();
    init_markdown();
    init_navbar();
    init_search();
    init_select();
    init_sidebar();
    init_filter();
    init_user_menu();
  }
});

// node_modules/@redocly/theme/src/core/styles/index.ts
var init_styles = __esm({
  "node_modules/@redocly/theme/src/core/styles/index.ts"() {
    init_global();
    init_dark();
  }
});

// node_modules/@redocly/theme/src/core/index.ts
var init_core = __esm({
  "node_modules/@redocly/theme/src/core/index.ts"() {
    init_constants();
    init_contexts();
    init_hoc();
    init_hooks();
    init_types();
    init_utils();
    init_styles();
  }
});

// node_modules/@redocly/theme/src/config.ts
var init_config = __esm({
  "node_modules/@redocly/theme/src/config.ts"() {
  }
});

// node_modules/@redocly/theme/src/components/JsonViewer/helpers.tsx
import React74, { useEffect as useEffect4 } from "react";
function JsonValue(props) {
  const {
    standalone,
    defaultExpandLevel,
    level,
    value,
    expandAllSignal
  } = props;
  const indent = " ".repeat(level * 2);
  const [isExpandedState, setExpanded] = React74.useState(expandAllSignal ?? level < defaultExpandLevel);
  const isExpanded = expandAllSignal !== void 0 && level > 0 ? expandAllSignal : isExpandedState;
  useEffect4(() => {
    if (expandAllSignal !== void 0) {
      if (expandAllSignal === false && level === 0) {
        return;
      }
      setExpanded(expandAllSignal);
    }
  }, [expandAllSignal, level]);
  const keys = value && Object.keys(value).filter((key) => value[key] !== void 0) || [];
  const valueType = typeof value;
  const isPrimitive2 = valueType !== "object" && value !== null || keys.length === 0;
  if (isPrimitive2) {
    return /* @__PURE__ */ React74.createElement(React74.Fragment, null, standalone ? indent : null, /* @__PURE__ */ React74.createElement("span", { className: "token " + valueType }, JSON.stringify(value)));
  }
  const openingPunctuation = Array.isArray(value) ? "[" : "{";
  const closingPunctuation = Array.isArray(value) ? "]" : "}";
  const valueElement = Array.isArray(value) ? value.map((item2, index) => /* @__PURE__ */ React74.createElement(React74.Fragment, { key: index }, /* @__PURE__ */ React74.createElement(JsonValue, { value: item2, level: level + 1, standalone: true, defaultExpandLevel, expandAllSignal }), index < value.length - 1 ? ",\n" : null)) : keys.map((key, index) => /* @__PURE__ */ React74.createElement(React74.Fragment, { key }, /* @__PURE__ */ React74.createElement(JsonKeyValue, { name: key, value: value[key], level: level + 1, defaultExpandLevel, expandAllSignal }), index < keys.length - 1 ? ",\n" : null));
  const openingPunctuationElement = standalone ? /* @__PURE__ */ React74.createElement(React74.Fragment, null, indent, level > 0 ? /* @__PURE__ */ React74.createElement(ExpandIcon, { onClick: () => setExpanded((v) => !v), isExpanded }) : null, openingPunctuation, isExpanded ? "\n" : null) : null;
  const closingPunctuationElement = standalone ? /* @__PURE__ */ React74.createElement(React74.Fragment, null, isExpanded ? "\n" : "", isExpanded ? indent : "", closingPunctuation) : null;
  return /* @__PURE__ */ React74.createElement(React74.Fragment, null, openingPunctuationElement, isExpanded || !standalone ? valueElement : " \u2026 ", closingPunctuationElement);
}
function JsonKeyValue(props) {
  const {
    defaultExpandLevel,
    level,
    name,
    value,
    expandAllSignal
  } = props;
  const indent = " ".repeat(level * 2);
  const keys = value && Object.keys(value).filter((key) => value[key] !== void 0) || [];
  const isCollapsible = typeof value === "object" && value !== null && keys.length > 0;
  const [isExpandedState, setExpanded] = React74.useState(expandAllSignal ?? level < defaultExpandLevel);
  const isExpanded = expandAllSignal !== void 0 ? expandAllSignal : isExpandedState;
  useEffect4(() => {
    if (expandAllSignal !== void 0) {
      setExpanded(expandAllSignal);
    }
  }, [expandAllSignal]);
  const openingPunctuation = Array.isArray(value) ? "[" : "{";
  const closingPunctuation = Array.isArray(value) ? "]" : "}";
  const valueElement = isCollapsible ? /* @__PURE__ */ React74.createElement(React74.Fragment, null, openingPunctuation, isExpanded ? /* @__PURE__ */ React74.createElement(React74.Fragment, null, "\n", /* @__PURE__ */ React74.createElement(JsonValue, { value, level, defaultExpandLevel, expandAllSignal }), "\n") : " \u2026 ", isExpanded ? indent : null, closingPunctuation) : /* @__PURE__ */ React74.createElement(JsonValue, { value, level, defaultExpandLevel, expandAllSignal });
  return /* @__PURE__ */ React74.createElement(React74.Fragment, null, indent, isCollapsible ? /* @__PURE__ */ React74.createElement(ExpandIcon, { onClick: () => setExpanded((v) => !v), isExpanded }) : null, /* @__PURE__ */ React74.createElement("span", { className: "property token string" }, `"${name}"`), ": ", valueElement);
}
function ExpandIcon({
  isExpanded,
  onClick
}) {
  return /* @__PURE__ */ React74.createElement(ExpandButton, { "aria-label": "collapse", className: isExpanded ? "expanded" : "", size: "small", variant: "text", onClick, icon: /* @__PURE__ */ React74.createElement(ChevronDownIcon, { color: "var(--text-color-helper)" }) });
}
var ExpandButton;
var init_helpers = __esm({
  "node_modules/@redocly/theme/src/components/JsonViewer/helpers.tsx"() {
    init_styled_components_esm();
    init_Button();
    init_ChevronDownIcon();
    ExpandButton = styled_components_esm_default(Button).withConfig({
      displayName: "helpers__ExpandButton",
      componentId: "sc-1vk9wjt-0"
    })(["position:absolute;left:-10px;user-select:none;& > svg{transform:rotate(270deg);}&.expanded > svg{transform:none;}&&.button-size-small{--button-icon-size:14px;--button-icon-padding:3px;margin-left:0;}"]);
  }
});

// node_modules/@redocly/theme/src/components/JsonViewer/JsonViewer.tsx
import React75, { memo as memo4 } from "react";
function JsonComponent({
  data,
  expandLevel = 1,
  className,
  onCopyClick,
  title
}) {
  const showFoldingButtons = data && Object.values(data).some((value) => typeof value === "object" && value !== null);
  const [expandAllSignal, setExpandAllSignal] = React75.useState(void 0);
  const expandAll = () => {
    setExpandAllSignal(true);
    setTimeout(() => {
      setExpandAllSignal(void 0);
    });
  };
  const collapseAll = () => {
    setExpandAllSignal(false);
    setTimeout(() => {
      setExpandAllSignal(void 0);
    });
  };
  const source = JSON.stringify(data, null, 2);
  return /* @__PURE__ */ React75.createElement(JsonViewerWrap, { "data-testid": "json-viewer", "data-component-name": "JsonViewer/JsonViewer", className }, /* @__PURE__ */ React75.createElement(CodeBlock, { header: {
    title,
    className: "code-block-header",
    controls: {
      copy: {
        data,
        onClick: onCopyClick,
        handleOutside: true
      },
      expand: showFoldingButtons ? {
        onClick: expandAll
      } : void 0,
      collapse: showFoldingButtons ? {
        onClick: collapseAll
      } : void 0
    }
  }, source }, /* @__PURE__ */ React75.createElement(FoldingWrap, null, /* @__PURE__ */ React75.createElement(JsonValue, { value: data, level: 0, standalone: true, expandAllSignal, defaultExpandLevel: Math.max(1, expandLevel) }))));
}
var JsonViewer, FoldingWrap, JsonViewerWrap;
var init_JsonViewer = __esm({
  "node_modules/@redocly/theme/src/components/JsonViewer/JsonViewer.tsx"() {
    init_styled_components_esm();
    init_CodeBlock();
    init_helpers();
    JsonViewer = memo4(JsonComponent);
    FoldingWrap = styled_components_esm_default.div.withConfig({
      displayName: "JsonViewer__FoldingWrap",
      componentId: "sc-118o7c8-0"
    })(["position:relative;"]);
    JsonViewerWrap = styled_components_esm_default.div.withConfig({
      displayName: "JsonViewer__JsonViewerWrap",
      componentId: "sc-118o7c8-1"
    })(["display:flex;flex-direction:column;flex:1;& > div{border:none;margin:0;}pre{contain:content;overflow-x:auto;position:relative;border-radius:0 0 var(--border-radius) var(--border-radius);}.code-block-header{border-bottom:0;padding-right:var(--spacing-sm);}"]);
  }
});

// node_modules/@redocly/theme/src/icons/ContrastIcon/ContrastIcon.tsx
import React76 from "react";
var Icon48, ContrastIcon;
var init_ContrastIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ContrastIcon/ContrastIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon48 = (props) => /* @__PURE__ */ React76.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React76.createElement("path", { d: "M14.685 5.92C14.5508 5.48498 14.3732 5.06454 14.155 4.665C13.8323 4.07201 13.4265 3.52818 12.95 3.05C11.971 2.07111 10.7237 1.40449 9.36586 1.13445C8.00801 0.864415 6.60058 1.00308 5.32154 1.53291C4.0425 2.06275 2.94929 2.95996 2.18015 4.11109C1.41101 5.26221 1.00049 6.61556 1.00049 8C1.00049 9.38444 1.41101 10.7378 2.18015 11.8889C2.94929 13.04 4.0425 13.9373 5.32154 14.4671C6.60058 14.9969 8.00801 15.1356 9.36586 14.8656C10.7237 14.5955 11.971 13.9289 12.95 12.95C13.4265 12.4718 13.8323 11.928 14.155 11.335C14.3732 10.9355 14.5508 10.515 14.685 10.08C15.1065 8.72538 15.1065 7.27463 14.685 5.92ZM1.99998 8C1.99998 6.4087 2.63212 4.88258 3.75734 3.75736C4.88256 2.63214 6.40868 2 7.99998 2V14C6.40868 14 4.88256 13.3679 3.75734 12.2426C2.63212 11.1174 1.99998 9.5913 1.99998 8Z" }));
    ContrastIcon = styled_components_esm_default(Icon48).attrs(() => ({
      "data-component-name": "icons/ContrastIcon/ContrastIcon"
    })).withConfig({
      displayName: "ContrastIcon",
      componentId: "sc-yxahqe-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/MoonIcon/MoonIcon.tsx
import React77 from "react";
var Icon49, MoonIcon;
var init_MoonIcon = __esm({
  "node_modules/@redocly/theme/src/icons/MoonIcon/MoonIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon49 = (props) => /* @__PURE__ */ React77.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React77.createElement("path", { d: "M6.75126 2.7068C6.52204 3.68541 6.49085 4.69999 6.65953 5.69083C6.82821 6.68168 7.19334 7.62878 7.73346 8.47643C8.27357 9.32407 8.97776 10.0551 9.80458 10.6266C10.6314 11.1981 11.5642 11.5984 12.548 11.8041C12.0307 12.3392 11.4112 12.765 10.7263 13.0561C10.0413 13.3472 9.30482 13.4977 8.56056 13.4987C8.49131 13.4987 8.42146 13.5013 8.35166 13.4987C7.05599 13.4529 5.81731 12.9547 4.85075 12.0906C3.88418 11.2265 3.25081 10.0512 3.06063 8.76875C2.87044 7.48629 3.13547 6.17773 3.80967 5.07034C4.48387 3.96295 5.52466 3.12669 6.75126 2.7068ZM7.49001 1.5C7.46074 1.50005 7.43153 1.50266 7.40271 1.5078C5.81059 1.79059 4.37942 2.65251 3.38485 3.92753C2.39029 5.20254 1.90269 6.80048 2.01597 8.41355C2.12925 10.0266 2.8354 11.5407 3.9984 12.6642C5.1614 13.7877 6.69899 14.4412 8.31501 14.4986C8.39706 14.5016 8.47911 14.4986 8.56046 14.4986C9.60987 14.4992 10.644 14.2471 11.5754 13.7636C12.5068 13.2801 13.308 12.5794 13.9115 11.7208C13.9604 11.6469 13.9889 11.5613 13.9943 11.4728C13.9996 11.3842 13.9815 11.2958 13.9418 11.2165C13.902 11.1372 13.8421 11.0698 13.7681 11.021C13.694 10.9722 13.6084 10.9438 13.5198 10.9387C12.5209 10.851 11.5555 10.5349 10.6983 10.0146C9.84106 9.49439 9.11494 8.784 8.57605 7.93837C8.03716 7.09274 7.69993 6.13452 7.59045 5.13777C7.48096 4.14102 7.60213 3.13245 7.94461 2.19C7.97375 2.1146 7.98445 2.03332 7.97582 1.95295C7.96719 1.87257 7.93949 1.79542 7.89501 1.72792C7.85054 1.66042 7.79058 1.60452 7.72014 1.56487C7.64969 1.52523 7.57079 1.50299 7.49001 1.5Z" }));
    MoonIcon = styled_components_esm_default(Icon49).attrs(() => ({
      "data-component-name": "icons/MoonIcon/MoonIcon"
    })).withConfig({
      displayName: "MoonIcon",
      componentId: "sc-1a2pxcb-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SunIcon/SunIcon.tsx
import React78 from "react";
var Icon50, SunIcon;
var init_SunIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SunIcon/SunIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon50 = (props) => /* @__PURE__ */ React78.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React78.createElement("path", { d: "M8 6.00293C8.39556 6.00293 8.78224 6.12023 9.11114 6.33999C9.44004 6.55975 9.69638 6.87211 9.84776 7.23756C9.99913 7.60301 10.0387 8.00515 9.96157 8.39311C9.8844 8.78107 9.69392 9.13744 9.41421 9.41714C9.13451 9.69685 8.77814 9.88733 8.39018 9.9645C8.00222 10.0417 7.60009 10.0021 7.23463 9.85069C6.86918 9.69931 6.55682 9.44297 6.33706 9.11407C6.1173 8.78517 6 8.39849 6 8.00293C6.0006 7.47268 6.2115 6.96432 6.58644 6.58937C6.96139 6.21443 7.46975 6.00353 8 6.00293ZM8 5.00293C7.40666 5.00293 6.82664 5.17888 6.33329 5.50852C5.83994 5.83817 5.45542 6.3067 5.22836 6.85488C5.0013 7.40306 4.94189 8.00626 5.05764 8.5882C5.1734 9.17014 5.45912 9.70469 5.87868 10.1243C6.29824 10.5438 6.83279 10.8295 7.41473 10.9453C7.99667 11.061 8.59987 11.0016 9.14805 10.7746C9.69623 10.5475 10.1648 10.163 10.4944 9.66964C10.8241 9.17629 11 8.59627 11 8.00293C11 7.20728 10.6839 6.44422 10.1213 5.88161C9.55871 5.319 8.79565 5.00293 8 5.00293Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M3.40382 2.6997L2.69679 3.40674L4.4497 5.15966L5.15674 4.45262L3.40382 2.6997Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M3.5 7.50293H1V8.50293H3.5V7.50293Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M4.4497 10.8462L2.69678 12.5991L3.40382 13.3062L5.15674 11.5532L4.4497 10.8462Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M8.5 12.5029H7.5V15.0029H8.5V12.5029Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M11.5503 10.8462L10.8433 11.5532L12.5962 13.3062L13.3032 12.5991L11.5503 10.8462Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M15 7.50293H12.5V8.50293H15V7.50293Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M12.5962 2.69971L10.8433 4.45263L11.5503 5.15966L13.3032 3.40674L12.5962 2.69971Z" }), /* @__PURE__ */ React78.createElement("path", { d: "M8.5 1.00293H7.5V3.50293H8.5V1.00293Z" }));
    SunIcon = styled_components_esm_default(Icon50).attrs(() => ({
      "data-component-name": "icons/MoonIcon/MoonIcon"
    })).withConfig({
      displayName: "SunIcon",
      componentId: "sc-1w67x44-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/ColorModeSwitcher/ColorModeIcon.tsx
import React79 from "react";
function ColorModeIcon(props) {
  return /* @__PURE__ */ React79.createElement(ColorModeIconComponent, { ...props, "data-component-name": "ColorModeSwitcher/ColorModeIcon" });
}
function Icon51({
  mode,
  className
}) {
  switch (mode) {
    case "dark":
      return /* @__PURE__ */ React79.createElement(SunIcon, { "data-testid": "dark" });
    case "light":
      return /* @__PURE__ */ React79.createElement(MoonIcon, { "data-testid": "light" });
    default:
      return /* @__PURE__ */ React79.createElement(ContrastIcon, { "data-testid": "custom", className: className + (mode ? " " + mode : "") });
  }
}
var ColorModeIconComponent;
var init_ColorModeIcon = __esm({
  "node_modules/@redocly/theme/src/components/ColorModeSwitcher/ColorModeIcon.tsx"() {
    init_styled_components_esm();
    init_ContrastIcon();
    init_MoonIcon();
    init_SunIcon();
    ColorModeIconComponent = styled_components_esm_default(Icon51).withConfig({
      displayName: "ColorModeIcon__ColorModeIconComponent",
      componentId: "sc-hucx2m-0"
    })(["box-sizing:border-box;"]);
  }
});

// node_modules/@redocly/theme/src/components/ColorModeSwitcher/ColorModeSwitcher.tsx
import React80 from "react";
function ColorModeSwitcher({ className }) {
  const { isSwitcherHidden, initActiveColorMode, switchColorMode, activeColorMode } = useColorSwitcher();
  useMount(() => {
    initActiveColorMode();
  });
  if (isSwitcherHidden) {
    return null;
  }
  return /* @__PURE__ */ React80.createElement(
    Button,
    {
      "data-component-name": "ColorModeSwitcher/ColorModeSwitcher",
      "data-testid": "color-mode-switcher",
      onClick: () => switchColorMode(),
      extraClass: className,
      variant: "secondary",
      size: "medium",
      icon: /* @__PURE__ */ React80.createElement(ColorModeIcon, { mode: activeColorMode })
    }
  );
}
var init_ColorModeSwitcher = __esm({
  "node_modules/@redocly/theme/src/components/ColorModeSwitcher/ColorModeSwitcher.tsx"() {
    init_hooks();
    init_ColorModeIcon();
    init_Button();
  }
});

// node_modules/@redocly/theme/src/components/Badge/Badge.tsx
import React81 from "react";
function Badge(props) {
  return /* @__PURE__ */ React81.createElement(BadgeComponent, { ...props, "data-component-name": "Badge/Badge" });
}
var BadgeComponent;
var init_Badge = __esm({
  "node_modules/@redocly/theme/src/components/Badge/Badge.tsx"() {
    init_styled_components_esm();
    BadgeComponent = styled_components_esm_default.span.withConfig({
      displayName: "Badge__BadgeComponent",
      componentId: "sc-13t4lw8-0"
    })(["display:inline-block;padding:0 var(--spacing-xs);vertical-align:middle;line-height:var(--line-height-base);color:var(--badge-text-color);background-color:", ";border-radius:var(--badge-border-radius);margin:0 0 0 0.5em;font-size:var(--font-size-base);font-weight:var(--font-weight-regular);", ""], ({
      color
    }) => color || "var(--badge-bg-color)", ({
      deprecated
    }) => deprecated && Ne(["color:var(--badge-deprecated-text-color);background-color:var(--badge-deprecated-bg-color);border-radius:var(--badge-deprecated-border-radius);"]));
  }
});

// node_modules/@redocly/theme/src/components/Loaders/Loading.tsx
import React82 from "react";
function Loading({
  color
}) {
  return /* @__PURE__ */ React82.createElement("div", { style: {
    textAlign: "center"
  } }, /* @__PURE__ */ React82.createElement(LoadingMessage, { color }, "Loading ..."), /* @__PURE__ */ React82.createElement(Spinner, { color }));
}
var LoadingMessage;
var init_Loading = __esm({
  "node_modules/@redocly/theme/src/components/Loaders/Loading.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_Spinner();
    LoadingMessage = styled_components_esm_default.div.withConfig({
      displayName: "Loading__LoadingMessage",
      componentId: "sc-bt70ke-0"
    })(["font-family:helvetica,sans,sans-serif;width:100%;text-align:center;font-size:25px;margin:30px 0 20px 0;color:", ";"], ({
      color
    }) => getCssColorVariable(color));
  }
});

// node_modules/@redocly/theme/src/icons/GlobalOutlinedIcon/GlobalOutlinedIcon.tsx
import React83 from "react";
var Icon52, GlobalOutlinedIcon;
var init_GlobalOutlinedIcon = __esm({
  "node_modules/@redocly/theme/src/icons/GlobalOutlinedIcon/GlobalOutlinedIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon52 = (props) => /* @__PURE__ */ React83.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React83.createElement("path", { d: "M13.35 12.5141C13.3531 12.5094 13.3578 12.5047 13.3609 12.5C14.3844 11.2828 15 9.71406 15 8C15 6.28594 14.3844 4.71719 13.3625 3.5C13.3594 3.49531 13.3547 3.49219 13.3516 3.4875C13.3344 3.46719 13.3187 3.44844 13.3016 3.42969C13.2953 3.42188 13.2891 3.41563 13.2828 3.40781L13.2188 3.33437L13.2172 3.33281C13.1938 3.30625 13.1687 3.27969 13.1453 3.25312L13.1438 3.25156C13.0938 3.19844 13.0437 3.14531 12.9922 3.09375L12.9906 3.09219L12.9156 3.01719L12.9109 3.0125C12.8875 2.98906 12.8641 2.96719 12.8406 2.94531C12.8328 2.9375 12.825 2.92969 12.8156 2.92188C12.8 2.90625 12.7844 2.89219 12.7688 2.87812C12.7641 2.87344 12.7578 2.86875 12.7531 2.8625C11.5063 1.70625 9.83594 1 8 1C6.16406 1 4.49375 1.70625 3.24531 2.8625C3.24062 2.86719 3.23438 2.87187 3.22969 2.87812C3.21406 2.89219 3.19844 2.90781 3.18281 2.92344C3.175 2.93125 3.16719 2.93906 3.15781 2.94688C3.13438 2.96875 3.11094 2.99219 3.0875 3.01406L3.08281 3.01875L3.00781 3.09375L3.00625 3.09531C2.95469 3.14688 2.90469 3.2 2.85469 3.25312L2.85313 3.25469C2.82813 3.28125 2.80469 3.30781 2.78125 3.33437L2.77969 3.33594C2.75781 3.35938 2.73594 3.38437 2.71563 3.40937C2.70938 3.41719 2.70313 3.42344 2.69688 3.43125C2.67969 3.45 2.66406 3.47031 2.64687 3.48906C2.64375 3.49375 2.63906 3.49688 2.63594 3.50156C1.61562 4.71719 1 6.28594 1 8C1 9.71406 1.61563 11.2828 2.6375 12.5C2.64062 12.5047 2.64531 12.5094 2.64844 12.5141L2.69688 12.5719C2.70313 12.5797 2.70938 12.5859 2.71563 12.5938L2.77969 12.6672C2.77969 12.6687 2.78125 12.6688 2.78125 12.6703C2.80469 12.6969 2.82813 12.7234 2.85313 12.7484L2.85469 12.75C2.90469 12.8031 2.95469 12.8562 3.00469 12.9078L3.00625 12.9094C3.03125 12.9344 3.05469 12.9594 3.07969 12.9828L3.08437 12.9875C3.13594 13.0391 3.18906 13.0891 3.24219 13.1375C4.49375 14.2937 6.16406 15 8 15C9.83594 15 11.5062 14.2937 12.7547 13.1375C12.8079 13.0887 12.86 13.0387 12.9109 12.9875L12.9156 12.9828C12.9406 12.9578 12.9656 12.9344 12.9891 12.9094L12.9906 12.9078C13.0422 12.8562 13.0922 12.8031 13.1406 12.75L13.1422 12.7484C13.1656 12.7219 13.1906 12.6969 13.2141 12.6703C13.2141 12.6688 13.2156 12.6687 13.2156 12.6672C13.2375 12.6438 13.2594 12.6187 13.2797 12.5938C13.2859 12.5859 13.2922 12.5797 13.2984 12.5719C13.3161 12.553 13.3333 12.5338 13.35 12.5141ZM13.4141 10.2859C13.1984 10.7953 12.9141 11.2672 12.5672 11.6953C12.1765 11.3577 11.7494 11.0647 11.2937 10.8219C11.475 10.0891 11.5875 9.28438 11.6172 8.4375H13.8594C13.8125 9.07656 13.6625 9.69687 13.4141 10.2859ZM13.8594 7.5625H11.6172C11.5875 6.71562 11.475 5.91094 11.2937 5.17812C11.7516 4.93437 12.1781 4.64062 12.5672 4.30469C13.3212 5.23277 13.7722 6.3699 13.8594 7.5625ZM10.2859 2.58594C10.9062 2.84844 11.4703 3.21094 11.9672 3.66719C11.6785 3.91296 11.3679 4.13159 11.0391 4.32031C10.7937 3.61719 10.4797 3.00625 10.1141 2.51719C10.1719 2.53906 10.2297 2.5625 10.2859 2.58594ZM8.87031 13.5328C8.72656 13.6453 8.58281 13.7312 8.4375 13.7891V10.8906C9.05749 10.9339 9.66717 11.0719 10.2453 11.3C10.1156 11.6844 9.96562 12.0391 9.79219 12.3594C9.52031 12.8656 9.20156 13.2703 8.87031 13.5328ZM9.79219 3.64062C9.96406 3.9625 10.1156 4.31719 10.2453 4.7C9.66717 4.92806 9.05749 5.06612 8.4375 5.10938V2.2125C8.58125 2.27031 8.72656 2.35469 8.87031 2.46875C9.20156 2.72969 9.52031 3.13438 9.79219 3.64062ZM8.4375 10.0141V8.4375H10.7422C10.7172 9.12813 10.6313 9.79844 10.4875 10.4344L10.4828 10.4531C9.82708 10.2045 9.13751 10.0564 8.4375 10.0141ZM8.4375 7.5625V5.98594C9.15312 5.94219 9.84063 5.79063 10.4828 5.54688L10.4875 5.56563C10.6313 6.20156 10.7172 6.87031 10.7422 7.5625H8.4375ZM7.5625 8.4375V10.0141C6.84688 10.0578 6.15938 10.2094 5.51719 10.4531L5.5125 10.4344C5.36875 9.79844 5.28281 9.12969 5.25781 8.4375H7.5625ZM5.25781 7.5625C5.28281 6.87187 5.36875 6.20156 5.5125 5.56563L5.51719 5.54688C6.15938 5.79063 6.84531 5.94219 7.5625 5.98594V7.5625H5.25781ZM7.5625 10.8906V13.7875C7.41875 13.7297 7.27344 13.6453 7.12969 13.5312C6.79844 13.2703 6.47813 12.8641 6.20625 12.3578C6.03438 12.0359 5.88281 11.6812 5.75313 11.2984C6.33438 11.0703 6.93906 10.9344 7.5625 10.8906ZM7.5625 5.10938C6.94251 5.06612 6.33283 4.92806 5.75469 4.7C5.88437 4.31562 6.03437 3.96094 6.20781 3.64062C6.47969 3.13438 6.79844 2.72812 7.13125 2.46719C7.275 2.35469 7.41875 2.26875 7.56406 2.21094V5.10938H7.5625ZM5.71406 2.58594C5.77188 2.5625 5.82812 2.53906 5.88594 2.51719C5.52031 3.00625 5.20625 3.61719 4.96094 4.32031C4.63281 4.13281 4.32188 3.91406 4.03281 3.66719C4.52969 3.21094 5.09375 2.84844 5.71406 2.58594ZM2.58594 5.71406C2.80156 5.20469 3.08594 4.73281 3.43281 4.30469C3.82187 4.64062 4.24844 4.93437 4.70625 5.17812C4.525 5.91094 4.4125 6.71562 4.38281 7.5625H2.14062C2.1875 6.92344 2.3375 6.30313 2.58594 5.71406ZM2.14062 8.4375H4.38281C4.4125 9.28438 4.525 10.0891 4.70625 10.8219C4.25059 11.0647 3.82347 11.3577 3.43281 11.6953C2.6788 10.7672 2.22776 9.6301 2.14062 8.4375ZM5.71406 13.4141C5.09375 13.1516 4.52969 12.7891 4.03281 12.3328C4.32188 12.0859 4.63281 11.8687 4.96094 11.6797C5.20625 12.3828 5.52031 12.9938 5.88594 13.4828C5.82812 13.4609 5.77031 13.4375 5.71406 13.4141ZM10.2859 13.4141C10.2281 13.4375 10.1719 13.4609 10.1141 13.4828C10.4797 12.9938 10.7937 12.3828 11.0391 11.6797C11.3672 11.8672 11.6781 12.0859 11.9672 12.3328C11.4731 12.7872 10.9043 13.1529 10.2859 13.4141Z" }));
    GlobalOutlinedIcon = styled_components_esm_default(Icon52).attrs(() => ({
      "data-component-name": "icons/GlobalOutlinedIcon/GlobalOutlinedIcon"
    })).withConfig({
      displayName: "GlobalOutlinedIcon",
      componentId: "sc-83cacj-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/LanguagePicker/LanguagePicker.tsx
import React84 from "react";
function LanguagePicker(props) {
  const {
    currentLocale,
    locales,
    setLocale
  } = useLanguagePicker();
  const {
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  if (locales.length < 2 || !currentLocale) {
    return null;
  }
  const languagePickerButton = /* @__PURE__ */ React84.createElement(Button, { icon: /* @__PURE__ */ React84.createElement(GlobalOutlinedIcon, { color: "--button-content-color" }), variant: "secondary", size: "medium" });
  const languageItems = locales.map((locale) => ({
    content: locale.name || locale.code || "",
    onAction: () => {
      setLocale(locale.code);
      props.onChangeLanguage(locale.code);
      telemetry.send("language_picker_locale_changed", {
        locale: locale.code
      });
    },
    active: locale.code === currentLocale.code,
    suffix: locale.code === currentLocale.code && /* @__PURE__ */ React84.createElement(CheckmarkIcon, null)
  }));
  return /* @__PURE__ */ React84.createElement(LanguageDropdown, { triggerEvent: "click", placement: props.placement, alignment: props.alignment, trigger: languagePickerButton }, /* @__PURE__ */ React84.createElement(DropdownMenu, { items: languageItems }));
}
var LanguageDropdown;
var init_LanguagePicker = __esm({
  "node_modules/@redocly/theme/src/components/LanguagePicker/LanguagePicker.tsx"() {
    init_styled_components_esm();
    init_DropdownMenu();
    init_utils();
    init_hooks();
    init_GlobalOutlinedIcon();
    init_Button();
    init_Dropdown();
    init_CheckmarkIcon();
    LanguageDropdown = styled_components_esm_default(Dropdown).attrs(() => ({
      dataAttributes: {
        "data-component-name": "LanguagePicker/LanguagePicker"
      }
    })).withConfig({
      displayName: "LanguagePicker__LanguageDropdown",
      componentId: "sc-k177uv-0"
    })(["display:none;@media screen and (min-width:", "){display:block;}--dropdown-menu-item-justify-content:space-between;--dropdown-menu-item-gap:var(--spacing-xxs);--dropdown-menu-font-size:var(--language-picker-dropdown-font-size);--dropdown-menu-font-weight:var(--language-picker-dropdown-font-weight);--dropdown-menu-line-height:var(--language-picker-dropdown-line-height);--dropdown-menu-text-color:var(--language-picker-dropdown-text-color);--dropdown-menu-min-width:var(--language-picker-dropdown-min-width);--dropdown-menu-max-width:var(--language-picker-dropdown-max-width);--dropdown-menu-max-height:var(--language-picker-dropdown-max-height);--dropdown-menu-padding:var(--language-picker-dropdown-padding);--dropdown-menu-border-radius:var(--language-picker-dropdown-border-radius);--dropdown-menu-box-shadow:var(--language-picker-dropdown-box-shadow);--dropdown-menu-border-color:var(--language-picker-dropdown-border-color);--dropdown-menu-bg-color:var(--language-picker-dropdown-bg-color);--dropdown-menu-item-padding-horizontal:var(--language-picker-dropdown-item-padding-horizontal);--dropdown-menu-item-padding-vertical:var(--language-picker-dropdown-item-padding-vertical);--dropdown-menu-item-separator-padding-top:var( --language-picker-dropdown-item-separator-padding-top );--dropdown-menu-item-separator-padding-bottom:var( --language-picker-dropdown-item-separator-padding-bottom );--dropdown-menu-item-border-radius:var(--language-picker-dropdown-item-border-radius);--dropdown-menu-item-bg-color-active:var(--language-picker-dropdown-item-bg-color-active);--dropdown-menu-item-bg-color-hover:var(--language-picker-dropdown-item-bg-color-hover);--dropdown-menu-item-bg-color-disabled:var(--language-picker-dropdown-item-bg-color-disabled);--dropdown-menu-item-separator-border-color:var( --language-picker-dropdown-item-separator-border-color );--dropdown-menu-item-color-dangerous:var(--language-picker-dropdown-item-color-dangerous);--dropdown-menu-item-color-disabled:var(--language-picker-dropdown-item-color-disabled);--dropdown-menu-item-color-active:var(--language-picker-dropdown-item-color-active);--dropdown-menu-item-color-hover:var(--language-picker-dropdown-item-color-hover);"], breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/components/Tags/HttpTag.tsx
var HttpTag;
var init_HttpTag = __esm({
  "node_modules/@redocly/theme/src/components/Tags/HttpTag.tsx"() {
    init_styled_components_esm();
    init_Tag();
    HttpTag = styled_components_esm_default(Tag).attrs({
      className: "tag-http",
      "data-component-name": "Tags/HttpTag"
    }).withConfig({
      displayName: "HttpTag",
      componentId: "sc-pg0vv-0"
    })(["display:flex;justify-content:flex-end;flex-shrink:0;margin:var(--http-tag-margin);padding:var(--http-tag-padding);width:var(--http-tag-width);height:var(--http-tag-height);font-size:var(--http-tag-font-size);font-family:var(--http-tag-font-family);font-weight:var(--http-tag-font-weight);line-height:var(--http-tag-line-height);border:var(--http-tag-border);background-color:var(--http-tag-bg-color);"]);
  }
});

// node_modules/@redocly/theme/src/components/VersionPicker/VersionPicker.tsx
import * as React85 from "react";
function VersionPicker(props) {
  const themeConfig = useThemeConfig();
  const {
    versionPicker: versionPicker2
  } = themeConfig;
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    versions = [],
    onChange
  } = props;
  const options = versions.map(({
    label,
    version,
    active
  }) => ({
    element: label || version,
    value: version,
    active
  }));
  const value = options.find((item2) => item2.active);
  if (versionPicker2?.hide) {
    return null;
  }
  const handleOnChange = (value2) => {
    const selectedVersion = versions.find((v) => v.version === value2);
    onChange(selectedVersion);
  };
  if (!options.length && !versionPicker2?.showForUnversioned)
    return null;
  return /* @__PURE__ */ React85.createElement(VersionsPickerWrapper, { "data-component-name": "VersionPicker/VersionPicker" }, /* @__PURE__ */ React85.createElement(VersionPickerLabel, { "data-translation-key": "versionPicker.label" }, translate("versionPicker.label", "Version:")), /* @__PURE__ */ React85.createElement(VersionPickerSelect, { placeholder: translate("versionPicker.unversioned", "All versions"), disabled: !options.length, options, value, onChange: handleOnChange }));
}
var VersionPickerLabel, VersionPickerSelect, VersionsPickerWrapper;
var init_VersionPicker = __esm({
  "node_modules/@redocly/theme/src/components/VersionPicker/VersionPicker.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Select();
    init_SelectInput();
    VersionPickerLabel = styled_components_esm_default.label.withConfig({
      displayName: "VersionPicker__VersionPickerLabel",
      componentId: "sc-1qb3ed6-0"
    })(["font-size:var(--version-picker-label-font-size);font-weight:var(--version-picker-label-font-weight);"]);
    VersionPickerSelect = styled_components_esm_default(Select).withConfig({
      displayName: "VersionPicker__VersionPickerSelect",
      componentId: "sc-1qb3ed6-1"
    })(["--select-list-item-bg-color-active:var(--version-picker-list-item-bg-color-active);--select-list-item-bg-color-hover:var(--version-picker-list-item-bg-color-hover);flex:1;font-size:var(--version-picker-font-size);font-weight:var(--version-picker-font-weight);border-radius:var(--version-picker-border-radius);line-height:var(--version-picker-line-height);color:var(--version-picker-text-color);", "{border:var(--version-picker-input-border);border-radius:var(--version-picker-input-border-radius);padding:var(--version-picker-input-padding-vertical) var(--version-picker-input-padding-horizontal);}"], SelectInputWrapper);
    VersionsPickerWrapper = styled_components_esm_default.div.withConfig({
      displayName: "VersionPicker__VersionsPickerWrapper",
      componentId: "sc-1qb3ed6-2"
    })(["display:flex;gap:10px;flex-direction:row;align-items:center;justify-content:space-between;padding:var(--version-picker-padding-vertical) var(--version-picker-padding-horizontal);border-bottom:var(--version-picker-border-bottom);"]);
  }
});

// node_modules/@redocly/theme/src/icons/EmailIcon/EmailIcon.tsx
import React86 from "react";
var Icon53, EmailIcon;
var init_EmailIcon = __esm({
  "node_modules/@redocly/theme/src/icons/EmailIcon/EmailIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon53 = (props) => /* @__PURE__ */ React86.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React86.createElement("path", { d: "M14 3H2C1.73478 3 1.48043 3.10536 1.29289 3.29289C1.10536 3.48043 1 3.73478 1 4V12C1 12.2652 1.10536 12.5196 1.29289 12.7071C1.48043 12.8946 1.73478 13 2 13H14C14.2652 13 14.5196 12.8946 14.7071 12.7071C14.8946 12.5196 15 12.2652 15 12V4C15 3.73478 14.8946 3.48043 14.7071 3.29289C14.5196 3.10536 14.2652 3 14 3ZM12.9 4L8 7.39L3.1 4H12.9ZM2 12V4.455L7.715 8.41C7.7987 8.46806 7.89813 8.49918 8 8.49918C8.10187 8.49918 8.2013 8.46806 8.285 8.41L14 4.455V12H2Z" }));
    EmailIcon = styled_components_esm_default(Icon53).attrs(() => ({
      "data-component-name": "icons/EmailIcon/EmailIcon"
    })).withConfig({
      displayName: "EmailIcon",
      componentId: "sc-1kmmoaj-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Buttons/EmailButton.tsx
import React87 from "react";
function EmailButton({ data, dataTestId = "email-button" }) {
  const onClick = () => {
    window.location.href = `mailto:${data}`;
  };
  return /* @__PURE__ */ React87.createElement("div", { "data-component-name": "Buttons/EmailButton" }, /* @__PURE__ */ React87.createElement(
    Button,
    {
      onClick,
      icon: /* @__PURE__ */ React87.createElement(EmailIcon, null),
      size: "small",
      variant: "text",
      "data-testid": dataTestId,
      "aria-label": "Email"
    }
  ));
}
var init_EmailButton = __esm({
  "node_modules/@redocly/theme/src/components/Buttons/EmailButton.tsx"() {
    init_Button();
    init_EmailIcon();
  }
});

// node_modules/@redocly/theme/src/components/Buttons/NewTabButton.tsx
import React88 from "react";
function NewTabButton({
  data,
  dataTestId = "new-tab-button"
}) {
  const onClick = () => {
    window.open(data, "_blank");
  };
  return /* @__PURE__ */ React88.createElement("div", { "data-component-name": "Buttons/NewTabButton" }, /* @__PURE__ */ React88.createElement(
    Button,
    {
      onClick,
      icon: /* @__PURE__ */ React88.createElement(ArrowUpRightIcon, null),
      "data-testid": dataTestId,
      "aria-label": "Open in new tab",
      size: "small",
      variant: "text"
    }
  ));
}
var init_NewTabButton = __esm({
  "node_modules/@redocly/theme/src/components/Buttons/NewTabButton.tsx"() {
    init_Button();
    init_ArrowUpRightIcon();
  }
});

// node_modules/@redocly/theme/src/components/ApiOnboarding/AppCustomAttributes.tsx
function AppCustomAttributes(_props) {
  return null;
}
var init_AppCustomAttributes = __esm({
  "node_modules/@redocly/theme/src/components/ApiOnboarding/AppCustomAttributes.tsx"() {
  }
});

// node_modules/@redocly/theme/src/components/Image/Image.tsx
import React89 from "react";
function Image2(props) {
  const {
    src,
    srcSet,
    alt,
    className
  } = props;
  const parsedSourceSetMap = React89.useMemo(() => {
    return srcSet ? parseSrcSet(srcSet) : /* @__PURE__ */ new Map();
  }, [srcSet]);
  return /* @__PURE__ */ React89.createElement(React89.Fragment, null, src ? /* @__PURE__ */ React89.createElement("img", { src, alt, className }) : Array.from(parsedSourceSetMap).map(([key, value]) => /* @__PURE__ */ React89.createElement(ColorModeAwareImage, { key, colorMode: key, src: value, alt, className })));
}
var ColorModeAwareImage;
var init_Image = __esm({
  "node_modules/@redocly/theme/src/components/Image/Image.tsx"() {
    init_styled_components_esm();
    init_utils();
    ColorModeAwareImage = styled_components_esm_default.img.withConfig({
      displayName: "Image__ColorModeAwareImage",
      componentId: "sc-6theql-0"
    })(["html:not(.", ") &&{display:none;}"], (props) => props.colorMode);
  }
});

// node_modules/@redocly/theme/src/components/Logo/Logo.tsx
import React90 from "react";
function Logo({
  config,
  className,
  ...otherProps
}) {
  const {
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  if (!config?.image && !config?.srcSet) {
    return null;
  }
  const image2 = /* @__PURE__ */ React90.createElement(Image2, { className, src: config.image, srcSet: config.srcSet, alt: config.altText });
  return /* @__PURE__ */ React90.createElement(LogoWrapper, { "data-component-name": "Logo/Logo", className, ...otherProps }, config.link ? /* @__PURE__ */ React90.createElement(Link, { to: config.link, onClick: () => telemetry.send("logo_clicked", {}) }, image2) : image2);
}
var LogoWrapper;
var init_Logo = __esm({
  "node_modules/@redocly/theme/src/components/Logo/Logo.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Link();
    init_Image();
    LogoWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Logo__LogoWrapper",
      componentId: "sc-1mholgd-0"
    })(["max-width:var(--logo-max-width);max-height:var(--logo-max-height);height:var(--logo-height);margin:var(--logo-margin);img{max-width:100%;max-height:100%;height:100%;}"]);
  }
});

// node_modules/@redocly/theme/src/components/Navbar/NavbarLogo.tsx
import React91 from "react";
function NavbarLogo(props) {
  return /* @__PURE__ */ React91.createElement(NavbarLogoComponent, { ...props, "data-component-name": "Navbar/NavbarLogo" });
}
var NavbarLogoComponent;
var init_NavbarLogo = __esm({
  "node_modules/@redocly/theme/src/components/Navbar/NavbarLogo.tsx"() {
    init_styled_components_esm();
    init_Logo();
    NavbarLogoComponent = styled_components_esm_default(Logo).withConfig({
      displayName: "NavbarLogo__NavbarLogoComponent",
      componentId: "sc-12rcv9a-0"
    })(["--logo-height:var(--navbar-logo-height);--logo-width:var(--navbar-logo-width);--logo-margin:var(--navbar-logo-margin);--logo-max-width:var(--navbar-logo-max-width);--logo-max-height:var(--navbar-logo-max-height);"]);
  }
});

// node_modules/@redocly/theme/src/icons/LaunchIcon/LaunchIcon.tsx
import React92 from "react";
var Icon54, LaunchIcon;
var init_LaunchIcon = __esm({
  "node_modules/@redocly/theme/src/icons/LaunchIcon/LaunchIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon54 = (props) => /* @__PURE__ */ React92.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React92.createElement("path", { d: "M13 14H3C2.73489 13.9996 2.48075 13.8942 2.29329 13.7067C2.10583 13.5193 2.00036 13.2651 2 13V3C2.00036 2.73489 2.10583 2.48075 2.29329 2.29329C2.48075 2.10583 2.73489 2.00036 3 2H8V3H3V13H13V8H14V13C13.9996 13.2651 13.8942 13.5193 13.7067 13.7067C13.5193 13.8942 13.2651 13.9996 13 14Z" }), /* @__PURE__ */ React92.createElement("path", { d: "M10 1V2H13.293L9 6.293L9.707 7L14 2.707V6H15V1H10Z" }));
    LaunchIcon = styled_components_esm_default(Icon54).attrs(() => ({
      "data-component-name": "icons/LaunchIcon/LaunchIcon"
    })).withConfig({
      displayName: "LaunchIcon",
      componentId: "sc-7fd1mp-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Navbar/NavbarItem.tsx
import React93 from "react";
import { useLocation as useLocation2 } from "react-router-dom";
function NavbarItem({
  navItem,
  className
}) {
  const {
    pathname
  } = useLocation2();
  const {
    useTranslate,
    useL10nConfig,
    useTelemetry
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    defaultLocale,
    currentLocale,
    locales
  } = useL10nConfig();
  const telemetry = useTelemetry();
  if (navItem.type !== "link" && !navItem.items)
    return null;
  const item2 = navItem;
  const normalizedPath = item2.link && item2.link !== "/" ? removeTrailingSlash(item2.link) : item2.link;
  const isActive = pathname === withPathPrefix(getPathnameForLocale(normalizedPath, defaultLocale, currentLocale, locales));
  const itemContent = /* @__PURE__ */ React93.createElement(NavbarMenuItem, { as: item2.link ? Link : void 0, active: isActive, className, onClick: () => telemetry.send("navbar_menu_item_clicked", {
    type: item2.type
  }), external: item2.external, target: item2.target, to: item2.link }, /* @__PURE__ */ React93.createElement(NavbarIcon, { url: item2.icon }), /* @__PURE__ */ React93.createElement(NavbarLabel, { "data-translation-key": item2.labelTranslationKey }, translate(item2.labelTranslationKey, item2.label)), item2.external ? /* @__PURE__ */ React93.createElement(ExternalLinkIcon, { size: "10px" }) : null);
  if (navItem.items) {
    const item3 = navItem;
    const groupItems = item3.items;
    const groupItemsComponents = groupItems.map((item4, index) => {
      if (item4.type !== "link" && item4.type !== "separator")
        return null;
      return /* @__PURE__ */ React93.createElement(DropdownMenuItem, { key: `${item4.label}_${index}`, to: item4.link, separator: item4.type === "separator", separatorLine: item4.separatorLine, "data-translation-key": item4.labelTranslationKey }, translate(item4.labelTranslationKey, item4.label));
    });
    return /* @__PURE__ */ React93.createElement("div", { "data-component-name": "Navbar/NavbarItem" }, /* @__PURE__ */ React93.createElement(NavbarMenuItemDropdown, { trigger: itemContent, triggerEvent: "hover" }, /* @__PURE__ */ React93.createElement(DropdownMenu, null, groupItemsComponents)));
  }
  return /* @__PURE__ */ React93.createElement("div", { "data-component-name": "Navbar/NavbarItem" }, itemContent);
}
var NavbarMenuItemDropdown, NavbarMenuItem, NavbarLabel, NavbarIcon, ExternalLinkIcon;
var init_NavbarItem = __esm({
  "node_modules/@redocly/theme/src/components/Navbar/NavbarItem.tsx"() {
    init_styled_components_esm();
    init_DropdownMenu();
    init_DropdownMenuItem();
    init_utils();
    init_hooks();
    init_LaunchIcon();
    init_Link();
    init_Dropdown();
    NavbarMenuItemDropdown = styled_components_esm_default(Dropdown).withConfig({
      displayName: "NavbarItem__NavbarMenuItemDropdown",
      componentId: "sc-16vobcz-0"
    })(["--dropdown-menu-item-separator-font-size:var(--navbar-separator-font-size);--dropdown-menu-item-separator-text-color:var(--navbar-separator-text-color);--dropdown-menu-item-separator-line-height:var(--navbar-separator-line-height);"]);
    NavbarMenuItem = styled_components_esm_default.li.withConfig({
      displayName: "NavbarItem__NavbarMenuItem",
      componentId: "sc-16vobcz-1"
    })(["display:inline-block;padding:var(--navbar-item-padding);text-align:center;line-height:var(--navbar-item-line-height);font-weight:var(--navbar-item-font-weight);border-radius:var(--navbar-item-border-radius);border-bottom:", ";background:", ";color:", ";text-decoration:", ";&:hover{color:var(--navbar-item-text-color-hover);text-decoration:var(--navbar-item-text-decoration-hover);border-bottom:", ";background:", ";}"], ({
      active
    }) => active ? "var(--navbar-item-bottom-border-active)" : "var(--navbar-item-bottom-border)", ({
      active
    }) => active && "var(--navbar-item-bg-color-active)", ({
      active
    }) => active ? "var(--navbar-item-text-color-active)" : "var(--navbar-text-color)", ({
      active
    }) => active ? "var(--navbar-item-text-decoration-active)" : "none", ({
      active
    }) => !active && "var(--navbar-item-bottom-border-hover)", ({
      active
    }) => active ? "var(--navbar-item-bg-color-active)" : "var(--navbar-item-bg-color-hover)");
    NavbarLabel = styled_components_esm_default.span.withConfig({
      displayName: "NavbarItem__NavbarLabel",
      componentId: "sc-16vobcz-2"
    })(["cursor:pointer;vertical-align:middle;"]);
    NavbarIcon = styled_components_esm_default.i.withConfig({
      displayName: "NavbarItem__NavbarIcon",
      componentId: "sc-16vobcz-3"
    })(["", ""], ({
      url
    }) => url && Ne(["background-image:url('", "');width:var(--navbar-item-icon-width);height:var(--navbar-item-icon-height);display:inline-block;background-size:contain;margin-right:var(--navbar-item-icon-margin-right);vertical-align:middle;background-position:center;background-repeat:no-repeat;"], url));
    ExternalLinkIcon = styled_components_esm_default(LaunchIcon).withConfig({
      displayName: "NavbarItem__ExternalLinkIcon",
      componentId: "sc-16vobcz-4"
    })(["margin-left:5px;"]);
  }
});

// node_modules/@redocly/theme/src/components/Navbar/NavbarMenu.tsx
import React94 from "react";
function NavbarMenu({
  menuItems,
  className
}) {
  if (isPrimitive(menuItems)) {
    return null;
  }
  return /* @__PURE__ */ React94.createElement(NavItemsContainer, { "data-component-name": "Navbar/NavbarMenu", className }, menuItems.map((navItem, index) => {
    return /* @__PURE__ */ React94.createElement(NavbarItem, { key: `${navItem.label}_${index}`, "data-testid": navItem.label, navItem });
  }));
}
var NavItemsContainer;
var init_NavbarMenu = __esm({
  "node_modules/@redocly/theme/src/components/Navbar/NavbarMenu.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_NavbarItem();
    NavItemsContainer = styled_components_esm_default.ul.withConfig({
      displayName: "NavbarMenu__NavItemsContainer",
      componentId: "sc-1u8ivqc-0"
    })(["list-style:none;padding:0;display:none;flex-wrap:nowrap;align-items:center;justify-content:var(--navbar-menu-justify-content);flex:1;gap:var(--navbar-menu-items-gap);@media screen and (min-width:", "){display:flex;}"], breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/components/Menu/MenuItem.tsx
import React95, { useRef as useRef3 } from "react";
function MenuItem(props) {
  const {
    item: item2,
    depth,
    className,
    onClick
  } = props;
  const {
    useTranslate,
    useTelemetry
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const type = getMenuItemType(item2);
  const nestedMenuRef = useRef3(null);
  const labelRef = useRef3(null);
  const {
    isExpanded,
    canUnmount,
    style,
    handleExpand
  } = useNestedMenu({
    ...props,
    type,
    labelRef,
    nestedMenuRef
  });
  const telemetry = useTelemetry();
  const isDrilldown = type === "drilldown" /* DrillDown */;
  const isNested = type === "group" /* Group */;
  const hasChevron = isNested && !isDrilldown;
  const isOperation = type === "operation" /* Operation */;
  const handleOnClick = () => {
    telemetry.send?.("sidebar_item_clicked", {
      label: item2.label,
      type: item2.type
    });
    onClick?.();
    if (isNested) {
      handleExpand();
    }
  };
  const chevron = hasChevron ? isExpanded ? /* @__PURE__ */ React95.createElement(ChevronDownIcon, { size: "var(--menu-item-label-chevron-size)", color: "--tree-content-color-default" }) : /* @__PURE__ */ React95.createElement(ChevronRightIcon, { size: "var(--menu-item-label-chevron-size)", color: "--tree-content-color-default" }) : null;
  const httpColor = item2.deprecated ? "http-deprecated" : item2.httpVerb;
  const label = item2.label && /* @__PURE__ */ React95.createElement(MenuItemLabelWrapper, { active: item2.active, deprecated: item2.deprecated, depth, withChevron: hasChevron, onClick: handleOnClick, ref: labelRef, role: item2.link ? "none" : "link" }, chevron, item2.icon ? /* @__PURE__ */ React95.createElement(MenuItemIcon, { src: item2.icon }) : null, /* @__PURE__ */ React95.createElement(MenuItemLabelTextWrapper, null, /* @__PURE__ */ React95.createElement(MenuItemLabel, null, /* @__PURE__ */ React95.createElement("span", null, translate(item2.labelTranslationKey, item2.label)), item2.badges?.map(({
    name,
    color
  }) => /* @__PURE__ */ React95.createElement(MenuItemBadge, { color, key: name }, name)), item2.external ? /* @__PURE__ */ React95.createElement(LaunchIcon, { size: "var(--menu-item-external-icon-size)" }) : null), item2.sublabel ? /* @__PURE__ */ React95.createElement(MenuItemSubLabel, null, translate(item2.subLabelTranslationKey, item2.sublabel)) : null), isDrilldown ? /* @__PURE__ */ React95.createElement(ArrowRightIcon, { size: "12px" }) : null, isOperation ? /* @__PURE__ */ React95.createElement(HttpTag, { color: httpColor || "" }, item2.httpVerb === "hook" ? "event" : item2.httpVerb) : null);
  return /* @__PURE__ */ React95.createElement(MenuItemWrapper, { "data-component-name": "Menu/MenuItem", className: generateClassName2({
    type,
    item: item2,
    className
  }) }, item2.link ? /* @__PURE__ */ React95.createElement(MenuItemLink, { to: item2.link, external: item2.external, target: item2.target, languageInsensitive: item2.languageInsensitive }, label) : label, isNested ? /* @__PURE__ */ React95.createElement(MenuItemNestedWrapper, { depth, ref: nestedMenuRef, style }, isExpanded || !canUnmount ? props.children : null) : null, item2.separatorLine ? /* @__PURE__ */ React95.createElement(MenuItemSeparatorLine, { depth, linePosition: item2.linePosition }) : null);
}
function generateClassName2({
  type,
  item: item2,
  className
}) {
  const classNames = [className, `menu-item-type-${type}`];
  if (type === "separator" /* Separator */) {
    classNames.push(`menu-item-type-${type}-${item2.variant || "primary"}`);
  }
  if (item2.menuStyle === "drilldown-header") {
    classNames.push(`menu-item-type-drilldown-header`);
    if (item2.link) {
      classNames.push(`menu-item-type-drilldown-header-link`);
    }
  }
  return classNames.filter((className2) => className2).join(" ").trim();
}
var MenuItemWrapper, MenuItemNestedWrapper, MenuItemLabelWrapper, MenuItemLabelTextWrapper, MenuItemSubLabel, MenuItemIcon, MenuItemLink, MenuItemSeparatorLine, MenuItemLabel, MenuItemBadge;
var init_MenuItem = __esm({
  "node_modules/@redocly/theme/src/components/Menu/MenuItem.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_LaunchIcon();
    init_Link();
    init_ChevronDownIcon();
    init_ChevronRightIcon();
    init_HttpTag();
    init_constants();
    init_utils();
    init_ArrowRightIcon();
    init_Badge();
    MenuItemWrapper = styled_components_esm_default.div.withConfig({
      displayName: "MenuItem__MenuItemWrapper",
      componentId: "sc-gvfd8v-0"
    })(["display:flex;flex-direction:column;background-color:var(--menu-item-bg-color);font-family:var(--menu-item-font-family);font-size:var(--menu-item-font-size);font-weight:var(--menu-item-font-weight);line-height:var(--menu-item-line-height);color:var(--menu-item-text-color);.tag-http{align-self:flex-start;margin-left:auto;}&.menu-item-type-separator{pointer-events:none;}> a{text-decoration:none;color:var(--menu-item-text-color);}"]);
    MenuItemNestedWrapper = styled_components_esm_default.div.withConfig({
      displayName: "MenuItem__MenuItemNestedWrapper",
      componentId: "sc-gvfd8v-1"
    })(["overflow:hidden;order:1;position:relative;&:hover:has(&:hover)::before{display:none;}&:hover::before{content:'';position:absolute;bottom:var(--spacing-unit);top:0;z-index:var(--z-index-surface);left:", ";border:0.5px solid var(--border-color-primary);}"], ({
      depth
    }) => `calc(
        var(--menu-item-label-margin-horizontal) +
        var(--menu-item-padding-horizontal) +
        (var(--menu-item-label-chevron-size) / 2 - 1px) +
        var(--menu-item-nested-offset) * ${depth})
      `);
    MenuItemLabelWrapper = styled_components_esm_default.li.withConfig({
      displayName: "MenuItem__MenuItemLabelWrapper",
      componentId: "sc-gvfd8v-2"
    })(["display:flex;position:relative;cursor:pointer;order:1;align-items:var(--menu-item-label-align-items);transition:var(--menu-item-label-transition);word-break:var(--menu-item-label-word-break);border-radius:var(--menu-item-label-border-radius);margin:var(--menu-item-label-margin);padding:var(--menu-item-label-padding);gap:var(--menu-item-label-gap);padding-left:", ";", ";", ";&:hover{color:var(--menu-item-color-hover);background:var(--menu-item-bg-color-hover);", " path{fill:var(--menu-item-color-hover);}", " path{fill:var(--menu-item-color-hover);}}&:active{color:var(--menu-item-color-active);background:var(--menu-item-bg-color-active);", " path{fill:var(--menu-item-color-active);}", " path{fill:var(--menu-item-color-active);}}&:empty{padding:0;}"], ({
      withChevron,
      depth
    }) => `calc(
      var(--menu-item-padding-horizontal) +
      ${!withChevron ? "var(--menu-item-label-chevron-offset)" : "0px"} +
      ${depth ? "var(--menu-item-nested-offset) * " + depth : "0px"}
    )`, ({
      active,
      deprecated
    }) => active && Ne(["color:", ";background-color:var(--menu-item-bg-color-active);", " path{fill:var(--menu-item-color-active);}", " path{fill:var(--menu-item-color-active);}&:hover{background:var(--menu-item-bg-color-active);}"], deprecated ? "var(--menu-content-color-disabled)" : "var(--menu-item-color-active)", ChevronDownIcon, ChevronRightIcon), ({
      deprecated
    }) => deprecated && Ne(["color:var(--menu-content-color-disabled);&:hover{color:var(--menu-content-color-disabled);}"]), ChevronDownIcon, ChevronRightIcon, ChevronDownIcon, ChevronRightIcon);
    MenuItemLabelTextWrapper = styled_components_esm_default.div.withConfig({
      displayName: "MenuItem__MenuItemLabelTextWrapper",
      componentId: "sc-gvfd8v-3"
    })(["display:flex;flex-direction:column;flex-grow:1;"]);
    MenuItemSubLabel = styled_components_esm_default.div.withConfig({
      displayName: "MenuItem__MenuItemSubLabel",
      componentId: "sc-gvfd8v-4"
    })(["margin:var(--menu-item-sublabel-margin);color:var(--menu-item-sublabel-text-color);font-weight:var(--menu-item-sublabel-font-weight);font-size:var(--menu-item-sublabel-font-size);font-family:var(--menu-item-sublabel-font-family);"]);
    MenuItemIcon = styled_components_esm_default.img.withConfig({
      displayName: "MenuItem__MenuItemIcon",
      componentId: "sc-gvfd8v-5"
    })(["width:var(--menu-item-icon-size);height:var(--menu-item-icon-size);margin:var(--menu-item-icon-margin);border-radius:var(--menu-item-icon-border-radius);flex-shrink:0;overflow:hidden;"]);
    MenuItemLink = styled_components_esm_default(Link).withConfig({
      displayName: "MenuItem__MenuItemLink",
      componentId: "sc-gvfd8v-6"
    })(["order:1;"]);
    MenuItemSeparatorLine = styled_components_esm_default.div.withConfig({
      displayName: "MenuItem__MenuItemSeparatorLine",
      componentId: "sc-gvfd8v-7"
    })(["height:var(--menu-item-separator-line-height);background-color:var(--menu-item-separator-line-bg-color);margin:", ";order:", ";"], ({
      depth
    }) => `
    var(--menu-item-padding-vertical)
    var(--sidebar-margin-horizontal)
    var(--menu-item-padding-vertical)
    calc(var(--sidebar-margin-horizontal) +
    ${depth ? "var(--menu-item-nested-offset) * " + depth : "0px"})
  `, ({
      linePosition
    }) => linePosition === "top" ? 0 : 1);
    MenuItemLabel = styled_components_esm_default.span.withConfig({
      displayName: "MenuItem__MenuItemLabel",
      componentId: "sc-gvfd8v-8"
    })(["& > *{margin-right:var(--spacing-xxs);}"]);
    MenuItemBadge = styled_components_esm_default(Badge).withConfig({
      displayName: "MenuItem__MenuItemBadge",
      componentId: "sc-gvfd8v-9"
    })(["margin-left:0;background-color:", ";font-size:var(--font-size-sm);line-height:var(--line-height-sm);padding:0 var(--spacing-xxs);max-width:80px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;"], ({
      color
    }) => color || "var(--color-info-base)");
  }
});

// node_modules/@redocly/theme/src/components/Menu/Menu.tsx
import React96 from "react";
function Menu({
  depth = 0,
  items,
  className,
  isMobile,
  onDrilldownOpen
}) {
  const activeItem = items.find(({
    active
  }) => active);
  return /* @__PURE__ */ React96.createElement(MenuWrapper, { className, "data-component-name": "Menu/Menu" }, items.map((item2, index) => {
    return /* @__PURE__ */ React96.createElement(MenuItem, { item: item2, key: `${item2.link || item2.label}-${index}`, activeItem, isMobile, depth, onClick: () => {
      if (getMenuItemType(item2) === "drilldown" /* DrillDown */) {
        onDrilldownOpen?.({
          previousLink: activeItem?.link,
          item: item2
        });
      }
    } }, item2.items?.length ? /* @__PURE__ */ React96.createElement(Menu, { items: item2.items, depth: depth + 1, isMobile, onDrilldownOpen }) : null);
  }));
}
var MenuWrapper;
var init_Menu = __esm({
  "node_modules/@redocly/theme/src/components/Menu/Menu.tsx"() {
    init_styled_components_esm();
    init_MenuItem();
    init_constants();
    init_utils();
    MenuWrapper = styled_components_esm_default.ul.withConfig({
      displayName: "Menu__MenuWrapper",
      componentId: "sc-1oobmm0-0"
    })(["padding:var(--menu-padding);margin:var(--menu-margin);list-style:var(--menu-list-style);color:var(--menu-content-color);position:relative;"]);
  }
});

// node_modules/@redocly/theme/src/icons/UserIcon/UserIcon.tsx
import React97 from "react";
var Icon55, UserIcon;
var init_UserIcon = __esm({
  "node_modules/@redocly/theme/src/icons/UserIcon/UserIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon55 = (props) => /* @__PURE__ */ React97.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React97.createElement("path", { d: "M8 2C8.49445 2 8.9778 2.14662 9.38893 2.42133C9.80005 2.69603 10.1205 3.08648 10.3097 3.54329C10.4989 4.00011 10.5484 4.50277 10.452 4.98773C10.3555 5.47268 10.1174 5.91814 9.76777 6.26777C9.41814 6.6174 8.97268 6.8555 8.48773 6.95196C8.00277 7.04843 7.50011 6.99892 7.04329 6.8097C6.58648 6.62048 6.19603 6.30005 5.92133 5.88893C5.64662 5.4778 5.5 4.99445 5.5 4.5C5.5 3.83696 5.76339 3.20107 6.23223 2.73223C6.70107 2.26339 7.33696 2 8 2ZM8 1C7.30777 1 6.63108 1.20527 6.0555 1.58986C5.47993 1.97444 5.03133 2.52107 4.76642 3.16061C4.50152 3.80015 4.4322 4.50388 4.56725 5.18282C4.7023 5.86175 5.03564 6.48539 5.52513 6.97487C6.01461 7.46436 6.63825 7.7977 7.31718 7.93275C7.99612 8.0678 8.69985 7.99849 9.33939 7.73358C9.97893 7.46867 10.5256 7.02007 10.9101 6.4445C11.2947 5.86892 11.5 5.19223 11.5 4.5C11.5 3.57174 11.1313 2.6815 10.4749 2.02513C9.8185 1.36875 8.92826 1 8 1Z", fill: "#1A1C21" }), /* @__PURE__ */ React97.createElement("path", { d: "M13 15H12V12.5C12 12.1717 11.9353 11.8466 11.8097 11.5433C11.6841 11.24 11.4999 10.9644 11.2678 10.7322C11.0356 10.5001 10.76 10.3159 10.4567 10.1903C10.1534 10.0647 9.8283 10 9.5 10H6.5C5.83696 10 5.20107 10.2634 4.73223 10.7322C4.26339 11.2011 4 11.837 4 12.5V15H3V12.5C3 11.5717 3.36875 10.6815 4.02513 10.0251C4.6815 9.36875 5.57174 9 6.5 9H9.5C10.4283 9 11.3185 9.36875 11.9749 10.0251C12.6313 10.6815 13 11.5717 13 12.5V15Z", fill: "#1A1C21" }));
    UserIcon = styled_components_esm_default(Icon55).attrs(() => ({
      "data-component-name": "icons/UserIcon/UserIcon"
    })).withConfig({
      displayName: "UserIcon",
      componentId: "sc-1cxlfmn-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/UserAvatar.tsx
import React98 from "react";
function UserAvatar({
  picture,
  className,
  height = "var(--user-menu-navbar-button-height)",
  width = "var(--user-menu-navbar-button-width)"
}) {
  return /* @__PURE__ */ React98.createElement(UserAvatarWrapper, { "data-component-name": "UserMenu/UserAvatar", className, height, width }, picture ? /* @__PURE__ */ React98.createElement("img", { src: picture, alt: "profile" }) : /* @__PURE__ */ React98.createElement(UserIcon, null));
}
var UserAvatarWrapper;
var init_UserAvatar = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/UserAvatar.tsx"() {
    init_styled_components_esm();
    init_UserIcon();
    UserAvatarWrapper = styled_components_esm_default.div.withConfig({
      displayName: "UserAvatar__UserAvatarWrapper",
      componentId: "sc-1xz5tq0-0"
    })(["width:", ";height:", ";display:flex;overflow:hidden;position:relative;align-items:center;flex-shrink:0;justify-content:center;user-select:none;font-family:var(--user-menu-avatar-font-family);font-size:var(--user-menu-avatar-font-size);line-height:var(--user-menu-avatar-line-height);font-weight:var(--user-menu-avatar-font-weight);border-radius:var(--user-menu-avatar-border-radius);background-color:var(--user-menu-avatar-bg-color);& > svg{width:", ";height:", ";}& > img{color:transparent;width:100%;height:100%;object-fit:cover;text-align:center;text-indent:10000px;}"], ({
      width
    }) => width, ({
      height
    }) => height, ({
      width
    }) => `calc(${width} - 14px)`, ({
      height
    }) => `calc(${height} - 14px)`);
  }
});

// node_modules/@redocly/theme/src/icons/LogoutIcon/LogoutIcon.tsx
import React99 from "react";
var Icon56, LogoutIcon;
var init_LogoutIcon = __esm({
  "node_modules/@redocly/theme/src/icons/LogoutIcon/LogoutIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon56 = (props) => /* @__PURE__ */ React99.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React99.createElement("path", { d: "M3 15H9C9.26512 14.9997 9.5193 14.8942 9.70677 14.7068C9.89424 14.5193 9.9997 14.2651 10 14V12.5H9V14H3V2H9V3.5H10V2C9.9997 1.73488 9.89424 1.4807 9.70677 1.29323C9.5193 1.10576 9.26512 1.0003 9 1H3C2.73488 1.0003 2.4807 1.10576 2.29323 1.29323C2.10576 1.4807 2.0003 1.73488 2 2V14C2.0003 14.2651 2.10576 14.5193 2.29323 14.7068C2.4807 14.8942 2.73488 14.9997 3 15Z" }), /* @__PURE__ */ React99.createElement("path", { d: "M10.293 10.293L12.086 8.5H5V7.5H12.086L10.293 5.707L11 5L14 8L11 11L10.293 10.293Z" }));
    LogoutIcon = styled_components_esm_default(Icon56).attrs(() => ({
      "data-component-name": "icons/LogoutIcon/LogoutIcon"
    })).withConfig({
      displayName: "LogoutIcon",
      componentId: "sc-1geqcmv-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/LogoutMenuItem.tsx
import React100 from "react";
function LogoutMenuItem({ iconOnly, className }) {
  const { useTranslate, useTelemetry, useUserMenu } = useThemeHooks();
  const { handleLogout } = useUserMenu();
  const telemetry = useTelemetry();
  const { translate } = useTranslate();
  const handleClick = () => {
    telemetry.send("logout_menu_item_clicked", {});
    handleLogout();
  };
  return /* @__PURE__ */ React100.createElement(
    DropdownMenuItem,
    {
      className,
      dangerous: true,
      "data-component-name": "UserMenu/LogoutMenuItem",
      onAction: handleClick,
      "data-translation-key": "userMenu.logout",
      prefix: /* @__PURE__ */ React100.createElement(LogoutIcon, null),
      style: { width: iconOnly ? "fit-content" : "100%" }
    },
    iconOnly ? null : translate("userMenu.logout", "Log out")
  );
}
var init_LogoutMenuItem = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/LogoutMenuItem.tsx"() {
    init_hooks();
    init_LogoutIcon();
    init_DropdownMenuItem();
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/LoginButton.tsx
import React101 from "react";
function LoginButton({ href, className }) {
  const { useTranslate, useTelemetry } = useThemeHooks();
  const { translate } = useTranslate();
  const telemetry = useTelemetry();
  return /* @__PURE__ */ React101.createElement("div", { "data-component-name": "UserMenu/LoginButton", className }, /* @__PURE__ */ React101.createElement(
    Button,
    {
      "data-translation-key": "userMenu.login",
      to: href,
      onClick: () => telemetry.send("login_button_clicked", {}),
      "data-testid": "login-btn",
      extraClass: className,
      variant: "primary",
      size: "medium"
    },
    translate("userMenu.login", "Login")
  ));
}
var init_LoginButton = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/LoginButton.tsx"() {
    init_hooks();
    init_Button();
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/UserMenuMobile.tsx
import React102 from "react";
function UserMenuMobile({
  className
}) {
  const {
    useUserMenu
  } = useThemeHooks();
  const {
    userData,
    loginUrl
  } = useUserMenu();
  const {
    userMenu: userMenuSettings
  } = useThemeConfig();
  if (!userData?.isAuthenticated) {
    if (loginUrl && !userMenuSettings?.hideLoginButton) {
      return /* @__PURE__ */ React102.createElement(UserMenuMobileWrapper, { "data-component-name": "UserMenu/UserMenuMobile", className }, /* @__PURE__ */ React102.createElement(UserMenuMobileLoginButton, { href: loginUrl }));
    } else {
      return null;
    }
  }
  return /* @__PURE__ */ React102.createElement(UserMenuMobileWrapper, { "data-component-name": "UserMenu/UserMenuMobile", className }, /* @__PURE__ */ React102.createElement(UserInfoWrapper, null, /* @__PURE__ */ React102.createElement(UserAvatar, { picture: userData.picture }), /* @__PURE__ */ React102.createElement("div", null, userData.name)), /* @__PURE__ */ React102.createElement(LogoutMenuItem, { iconOnly: true }));
}
var UserMenuMobileWrapper, UserMenuMobileLoginButton, UserInfoWrapper;
var init_UserMenuMobile = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/UserMenuMobile.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_UserAvatar();
    init_LogoutMenuItem();
    init_LoginButton();
    UserMenuMobileWrapper = styled_components_esm_default.div.withConfig({
      displayName: "UserMenuMobile__UserMenuMobileWrapper",
      componentId: "sc-1hup9dp-0"
    })(["display:flex;justify-content:space-between;align-items:center;width:100%;bottom:0;padding:18px 16px;border-top:1px solid var(--menu-mobile-profile-border-color);background:var(--menu-mobile-profile-bg-color);"]);
    UserMenuMobileLoginButton = styled_components_esm_default(LoginButton).withConfig({
      displayName: "UserMenuMobile__UserMenuMobileLoginButton",
      componentId: "sc-1hup9dp-1"
    })(["width:100%;& button{width:100%;}"]);
    UserInfoWrapper = styled_components_esm_default.div.withConfig({
      displayName: "UserMenuMobile__UserInfoWrapper",
      componentId: "sc-1hup9dp-2"
    })(["display:flex;align-items:center;gap:var(--spacing-base);"]);
  }
});

// node_modules/@redocly/theme/src/components/Product/Product.tsx
import React103 from "react";
function Product({
  product,
  className
}) {
  return /* @__PURE__ */ React103.createElement(ProductWrapper, { "data-component-name": "Product/Product", className }, product.icon && /* @__PURE__ */ React103.createElement(ProductLogo, { src: product.icon }), /* @__PURE__ */ React103.createElement("span", null, product.name));
}
var ProductWrapper, ProductLogo;
var init_Product = __esm({
  "node_modules/@redocly/theme/src/components/Product/Product.tsx"() {
    init_styled_components_esm();
    ProductWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Product__ProductWrapper",
      componentId: "sc-or14gf-0"
    })(["display:flex;align-items:center;gap:var(--product-logo-gap);"]);
    ProductLogo = styled_components_esm_default.img.withConfig({
      displayName: "Product__ProductLogo",
      componentId: "sc-or14gf-1"
    })(["max-height:var(--select-line-height);"]);
  }
});

// node_modules/@redocly/theme/src/components/Menu/MenuMobile.tsx
import React104, { useEffect as useEffect5, useState as useState2 } from "react";
import { useLocation as useLocation3 } from "react-router-dom";
function MenuMobile({
  className,
  hideUserProfile
}) {
  const location = useLocation3();
  const {
    useCurrentProduct
  } = useThemeHooks();
  const product = useCurrentProduct();
  const menuLevels = useMobileMenuLevels();
  const [menuLevel, setMenuLevel] = useState2(menuLevels.length - 1);
  useEffect5(() => {
    setMenuLevel(menuLevels.length - 1);
  }, [menuLevels, location]);
  const menuType = menuLevels[menuLevel]?.type || "MAIN_MENU" /* MAIN_MENU */;
  const {
    items: menuItems,
    pushDrilldownState,
    popDrilldownState,
    backLink
  } = useMobileMenuItems(menuType);
  const prevLevelName = menuLevels[menuLevel - 1]?.label;
  const nextLevelName = menuLevels[menuLevel + 1]?.label;
  const isButtonsSectionVisible = nextLevelName || prevLevelName;
  return /* @__PURE__ */ React104.createElement(MobileMenuWrapper, { "data-component-name": "Menu/MenuMobile", className }, /* @__PURE__ */ React104.createElement(ScrollableArea, { isButtonsSectionVisible: !!isButtonsSectionVisible }, isButtonsSectionVisible && /* @__PURE__ */ React104.createElement(ButtonsSection, { alignRight: !prevLevelName && !!nextLevelName }, prevLevelName && /* @__PURE__ */ React104.createElement(ControlButton3, { "data-testid": "control-button", onClick: () => {
    setMenuLevel(menuLevel - 1);
    popDrilldownState();
  } }, /* @__PURE__ */ React104.createElement(ChevronLeftIcon, { size: "12px", color: "--tree-content-color-default" }), /* @__PURE__ */ React104.createElement(ControlButtonLabel, { paddingDirection: "left" }, prevLevelName)), nextLevelName && /* @__PURE__ */ React104.createElement(ControlButton3, { "data-testid": "control-button", onClick: () => setMenuLevel(menuLevel + 1) }, /* @__PURE__ */ React104.createElement(ControlButtonLabel, { paddingDirection: "right" }, nextLevelName), /* @__PURE__ */ React104.createElement(ChevronRightIcon, { size: "12px", color: "--tree-content-color-default" }))), menuType === "PRODUCT" /* PRODUCT */ && product ? /* @__PURE__ */ React104.createElement(ProductNameWrapper, null, /* @__PURE__ */ React104.createElement(Product, { product })) : null, backLink ? /* @__PURE__ */ React104.createElement(DrilldownBackButton, { icon: /* @__PURE__ */ React104.createElement(ArrowLeftIcon, null), iconPosition: "left", variant: "ghost", size: "medium", to: backLink.slug, onClick: popDrilldownState }, `Back ${backLink.label ? "to " + backLink.label : ""}`) : null, /* @__PURE__ */ React104.createElement(MenuWrapper2, null, /* @__PURE__ */ React104.createElement(Menu, { onDrilldownOpen: pushDrilldownState, items: menuItems, isMobile: true }))), hideUserProfile ? null : /* @__PURE__ */ React104.createElement(UserMenuMobile, null));
}
var MobileMenuWrapper, ScrollableArea, ButtonsSection, MenuWrapper2, ControlButton3, ControlButtonLabel, ProductNameWrapper, DrilldownBackButton;
var init_MenuMobile = __esm({
  "node_modules/@redocly/theme/src/components/Menu/MenuMobile.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_hooks();
    init_constants();
    init_ChevronRightIcon();
    init_ChevronLeftIcon();
    init_Menu();
    init_Button();
    init_ArrowLeftIcon();
    init_UserMenuMobile();
    init_Product();
    MobileMenuWrapper = styled_components_esm_default.div.withConfig({
      displayName: "MenuMobile__MobileMenuWrapper",
      componentId: "sc-o74168-0"
    })(["height:var(--menu-mobile-height);width:var(--menu-mobile-width);position:fixed;z-index:var(--menu-mobile-z-index);left:var(--menu-mobile-left);top:var(--menu-mobile-top);overflow-x:hidden;transition:var(--menu-mobile-transition);display:flex;flex-direction:column;background:var(--menu-mobile-bg);@media screen and (min-width:", "){display:none;}"], breakpoints.medium);
    ScrollableArea = styled_components_esm_default.div.withConfig({
      displayName: "MenuMobile__ScrollableArea",
      componentId: "sc-o74168-1"
    })(["padding-top:", ";overflow-y:scroll;flex-grow:1;"], ({
      isButtonsSectionVisible
    }) => isButtonsSectionVisible ? "0px" : "var(--menu-mobile-padding-top)");
    ButtonsSection = styled_components_esm_default.div.withConfig({
      displayName: "MenuMobile__ButtonsSection",
      componentId: "sc-o74168-2"
    })(["align-items:center;display:flex;justify-content:space-between;padding:var(--spacing-xs);margin:0 0 var(--spacing-sm) 0;background:var(--layer-color);gap:var(--spacing-xs);", ";"], ({
      alignRight
    }) => alignRight && "justify-content: flex-end");
    MenuWrapper2 = styled_components_esm_default.div.withConfig({
      displayName: "MenuMobile__MenuWrapper",
      componentId: "sc-o74168-3"
    })(["margin:var(--menu-mobile-margin);line-height:var(--menu-mobile-line-height);background:var(--menu-mobile-bg);"]);
    ControlButton3 = styled_components_esm_default.li.withConfig({
      displayName: "MenuMobile__ControlButton",
      componentId: "sc-o74168-4"
    })(["display:inline-flex;align-items:center;padding:var(--menu-mobile-control-button-padding);margin:var(--menu-mobile-control-button-margin);text-align:var(--menu-mobile-control-button-text-align);font-size:var(--menu-mobile-control-button-font-size);line-height:var(--menu-mobile-control-button-line-height);font-weight:var(--menu-mobile-control-button-weight);color:var(--menu-mobile-control-button-color);cursor:pointer;svg{fill:var(--menu-mobile-control-button-color);}&:hover{color:var(--menu-mobile-control-button-color-hover);svg{fill:var(--menu-mobile-control-button-color-hover);}}"]);
    ControlButtonLabel = styled_components_esm_default.span.withConfig({
      displayName: "MenuMobile__ControlButtonLabel",
      componentId: "sc-o74168-5"
    })(["vertical-align:middle;", ";", ";"], ({
      paddingDirection
    }) => paddingDirection === "left" && "padding-left: 8px", ({
      paddingDirection
    }) => paddingDirection === "right" && "padding-right: 8px");
    ProductNameWrapper = styled_components_esm_default.div.withConfig({
      displayName: "MenuMobile__ProductNameWrapper",
      componentId: "sc-o74168-6"
    })(["font-size:var(--menu-mobile-product-name-font-size);font-weight:var(--menu-mobile-product-name-font-weight);line-height:var(--menu-mobile-product-name-line-height);color:var(--menu-mobile-product-name-text-color);border-radius:var(--menu-mobile-product-name-border-radius);border:var(--menu-mobile-product-name-border);padding:var(--menu-mobile-product-name-padding);margin:var(--menu-mobile-product-name-margin);"]);
    DrilldownBackButton = styled_components_esm_default(Button).withConfig({
      displayName: "MenuMobile__DrilldownBackButton",
      componentId: "sc-o74168-7"
    })(["margin:var(--menu-item-label-margin);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchTrigger.tsx
import * as React105 from "react";
function SearchTrigger({
  onClick,
  className
}) {
  const themeSettings = useThemeConfig();
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const keyShortcuts = themeSettings?.search?.shortcuts ?? ["/"];
  let mainShortcutKey = null;
  if (keyShortcuts) {
    if (Array.isArray(keyShortcuts)) {
      mainShortcutKey = keyShortcuts[0];
    } else {
      mainShortcutKey = keyShortcuts;
    }
  }
  mainShortcutKey = mainShortcutKey?.toUpperCase();
  return /* @__PURE__ */ React105.createElement(SearchTriggerWrapper, { onClick, className, "data-component-name": "Search/SearchTrigger" }, /* @__PURE__ */ React105.createElement(SearchTriggerButton, { "data-testid": "search-trigger-button", variant: "text", size: "medium", icon: /* @__PURE__ */ React105.createElement(SearchIcon, null) }), /* @__PURE__ */ React105.createElement(SearchTriggerInput, { "data-testid": "search-trigger-input", "data-translation-key": "search.navbar.label" }, /* @__PURE__ */ React105.createElement(SearchIcon, null), translate("search.navbar.label", "Search"), mainShortcutKey && /* @__PURE__ */ React105.createElement("span", null, mainShortcutKey)));
}
var SearchTriggerWrapper, SearchTriggerButton, SearchTriggerInput;
var init_SearchTrigger = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchTrigger.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Button();
    init_SearchIcon();
    init_utils();
    SearchTriggerWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchTrigger__SearchTriggerWrapper",
      componentId: "sc-i2ptuf-0"
    })(["color:var(--search-trigger-color);line-height:var(--search-trigger-line-height);svg{width:var(--search-trigger-icon-size);height:var(--search-trigger-icon-size);}"]);
    SearchTriggerButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchTrigger__SearchTriggerButton",
      componentId: "sc-i2ptuf-1"
    })(["display:inline-flex;@media screen and (min-width:", "){display:none;}"], breakpoints.medium);
    SearchTriggerInput = styled_components_esm_default.div.withConfig({
      displayName: "SearchTrigger__SearchTriggerInput",
      componentId: "sc-i2ptuf-2"
    })(["display:none;align-items:center;justify-content:center;gap:var(--search-trigger-gap);border:var(--search-trigger-border-width) var(--search-trigger-border-style) var(--search-trigger-border-color);border-radius:var(--search-trigger-border-radius);background:var(--search-trigger-bg-color);padding:var(--search-trigger-padding);&:hover{border-color:var(--search-trigger-border-color-hover);}@media screen and (min-width:", "){display:inline-flex;}"], breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchInput.tsx
import React106 from "react";
function SearchInput({
  placeholder,
  value,
  onChange,
  isLoading,
  showReturnButton,
  onReturn,
  onSubmit,
  className
}) {
  const {
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  const stopPropagation = (event) => event.stopPropagation();
  const handleOnChange = (event) => {
    onChange(event.target.value);
  };
  const handleOnReset = () => {
    onChange("");
    telemetry.send("search_input_reset_button_clicked", {});
  };
  const handleOnKeyUp = (e) => {
    if (!onSubmit) {
      return;
    }
    if (e.key === "Enter") {
      onSubmit();
    }
  };
  return /* @__PURE__ */ React106.createElement(SearchInputWrapper, { "data-component-name": "Search/SearchInput", className }, showReturnButton ? /* @__PURE__ */ React106.createElement(Button, { icon: /* @__PURE__ */ React106.createElement(ChevronLeftIcon, null), onClick: onReturn }) : value && isLoading ? /* @__PURE__ */ React106.createElement(Spinner, { size: "24px", color: "--search-input-icon-color" }) : /* @__PURE__ */ React106.createElement(SearchIcon, { size: "24px", color: "--search-input-icon-color" }), /* @__PURE__ */ React106.createElement(SearchInputField, { value, placeholder, onChange: handleOnChange, onClick: stopPropagation, onKeyUp: handleOnKeyUp }), !!value && /* @__PURE__ */ React106.createElement(ResetButton, { variant: "ghost", onClick: handleOnReset, icon: /* @__PURE__ */ React106.createElement(CloseFilledIcon, null) }));
}
var SearchInputWrapper, SearchInputField, ResetButton;
var init_SearchInput = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchInput.tsx"() {
    init_styled_components_esm();
    init_SearchIcon();
    init_Spinner();
    init_Button();
    init_hooks();
    init_CloseFilledIcon();
    init_ChevronLeftIcon();
    SearchInputWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchInput__SearchInputWrapper",
      componentId: "sc-1srz3np-0"
    })(["display:flex;flex-grow:1;align-items:center;padding:var(--search-input-padding);height:var(--search-input-height);gap:var(--search-input-gap);"]);
    SearchInputField = styled_components_esm_default.input.withConfig({
      displayName: "SearchInput__SearchInputField",
      componentId: "sc-1srz3np-1"
    })(["width:100%;outline:none;background-color:var(--search-input-bg-color);border-radius:var(--search-input-border-radius);border:var(--search-input-border);color:var(--search-input-text-color);font-size:var(--search-input-font-size);font-family:var(--search-input-font-family);font-weight:var(--search-input-font-weight);line-height:var(--search-input-line-height);&::placeholder{color:var(--search-input-placeholder-color);}"]);
    ResetButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchInput__ResetButton",
      componentId: "sc-1srz3np-2"
    })(["color:var(--color-warm-grey-5);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchShortcut.tsx
import * as React107 from "react";
function SearchShortcut({
  combination,
  text: text2,
  className
}) {
  return /* @__PURE__ */ React107.createElement(ShortcutWrapper, { "data-component-name": "Search/SearchShortcut", className }, /* @__PURE__ */ React107.createElement(ShortcutKey, null, combination), text2);
}
var ShortcutWrapper, ShortcutKey;
var init_SearchShortcut = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchShortcut.tsx"() {
    init_styled_components_esm();
    ShortcutWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchShortcut__ShortcutWrapper",
      componentId: "sc-ipm1ij-0"
    })(["display:flex;font-size:var(--font-size-sm);font-weight:var(--font-weight-regular);line-height:var(--line-height-sm);color:var(--search-item-text-color);gap:var(--spacing-xs);"]);
    ShortcutKey = styled_components_esm_default.span.withConfig({
      displayName: "SearchShortcut__ShortcutKey",
      componentId: "sc-ipm1ij-1"
    })(["background:var(--bg-color-active);border-radius:var(--border-radius);padding:0px var(--spacing-xxs);"]);
  }
});

// node_modules/@redocly/theme/src/icons/DocumentIcon/DocumentIcon.tsx
import React108 from "react";
var Icon57, DocumentIcon;
var init_DocumentIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DocumentIcon/DocumentIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon57 = (props) => /* @__PURE__ */ React108.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React108.createElement("path", { d: "M12.85 4.65L9.35 1.15C9.25 1.05 9.15 1 9 1H4C3.45 1 3 1.45 3 2V14C3 14.55 3.45 15 4 15H12C12.55 15 13 14.55 13 14V5C13 4.85 12.95 4.75 12.85 4.65ZM9 2.2L11.8 5H9V2.2ZM12 14H4V2H8V5C8 5.55 8.45 6 9 6H12V14Z" }), /* @__PURE__ */ React108.createElement("path", { d: "M11 11H5V12H11V11Z" }), /* @__PURE__ */ React108.createElement("path", { d: "M11 8H5V9H11V8Z" }));
    DocumentIcon = styled_components_esm_default(Icon57).attrs(() => ({
      "data-component-name": "icons/DocumentIcon/DocumentIcon"
    })).withConfig({
      displayName: "DocumentIcon",
      componentId: "sc-1w90gzp-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchAiResponse.tsx
import React109 from "react";
function SearchAiResponse(props) {
  const {
    useMarkdownText
  } = useThemeHooks();
  const {
    question,
    response,
    isGeneratingResponse,
    resources
  } = props;
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const markdownResponse = useMarkdownText(response || "");
  return /* @__PURE__ */ React109.createElement(ResponseWrapper, { "data-component-name": "Search/SearchAiResponse" }, /* @__PURE__ */ React109.createElement(ResponseHeader, null, isGeneratingResponse ? /* @__PURE__ */ React109.createElement(Spinner, { size: "20px", color: "--search-ai-spinner-icon-color" }) : /* @__PURE__ */ React109.createElement(CheckmarkFilledIcon, { size: "20px", color: "--search-ai-checkmark-icon-color" }), /* @__PURE__ */ React109.createElement(Question, null, question)), /* @__PURE__ */ React109.createElement(ResponseBody, null, response ? /* @__PURE__ */ React109.createElement(ResponseText, { children: markdownResponse, as: "div", ...props }) : /* @__PURE__ */ React109.createElement(ThinkingResponseText, { "data-translation-key": "search.ai.thinkingText" }, translate("search.ai.thinkingText", "Thinking...")), resources.length && !isGeneratingResponse ? /* @__PURE__ */ React109.createElement(Resources, null, /* @__PURE__ */ React109.createElement(ResourcesTitle, { "data-translation-key": "search.ai.resourcesFound" }, resources.length, " ", translate("search.ai.resourcesFound", "resources found")), /* @__PURE__ */ React109.createElement(ResourceTags, null, resources.map((resource, idx) => /* @__PURE__ */ React109.createElement(Link, { key: idx, to: resource.url }, /* @__PURE__ */ React109.createElement(ResourceTag, { borderless: true, icon: /* @__PURE__ */ React109.createElement(DocumentIcon, { color: "--search-ai-resource-tag-icon-color" }) }, resource.title))))) : null));
}
var ResponseWrapper, ResponseHeader, Question, ResponseBody, ResponseText, ThinkingResponseText, Resources, ResourcesTitle, ResourceTags, ResourceTag;
var init_SearchAiResponse = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchAiResponse.tsx"() {
    init_styled_components_esm();
    init_Spinner();
    init_CheckmarkFilledIcon();
    init_DocumentIcon();
    init_Tag();
    init_Link();
    init_hooks();
    init_Markdown();
    ResponseWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__ResponseWrapper",
      componentId: "sc-1ldmzno-0"
    })(["display:flex;flex-direction:column;flex:2;flex-grow:2;overflow-y:scroll;overscroll-behavior:contain;padding:var(--search-ai-response-padding);gap:var(--search-ai-response-gap);"]);
    ResponseHeader = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__ResponseHeader",
      componentId: "sc-1ldmzno-1"
    })(["display:flex;flex-direction:row;gap:var(--search-ai-response-header-gap);align-items:center;"]);
    Question = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__Question",
      componentId: "sc-1ldmzno-2"
    })(["font-size:var(--search-ai-question-font-size);font-weight:var(--search-ai-question-font-weight);line-height:var(--search-ai-question-line-height);color:var(--search-ai-question-text-color);"]);
    ResponseBody = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__ResponseBody",
      componentId: "sc-1ldmzno-3"
    })(["display:flex;flex-direction:column;gap:var(--search-ai-response-body-gap);padding:var(--search-ai-response-body-padding);"]);
    ResponseText = styled_components_esm_default(Markdown).withConfig({
      displayName: "SearchAiResponse__ResponseText",
      componentId: "sc-1ldmzno-4"
    })(["color:var(--search-ai-response-text-color);font-size:var(--search-ai-response-text-font-size);line-height:var(--search-ai-response-text-line-height);font-family:inherit;white-space:break-spaces;"]);
    ThinkingResponseText = styled_components_esm_default.pre.withConfig({
      displayName: "SearchAiResponse__ThinkingResponseText",
      componentId: "sc-1ldmzno-5"
    })(["color:var(--search-ai-response-text-color);font-size:var(--search-ai-response-text-font-size);line-height:var(--search-ai-response-text-line-height);font-family:inherit;white-space:break-spaces;margin:var(--md-pre-margin) 0;animation:fadeIn 2s ease-in-out infinite;@keyframes fadeIn{0%{opacity:1;}50%{opacity:0.3;}100%{opacity:1;}}"]);
    Resources = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__Resources",
      componentId: "sc-1ldmzno-6"
    })(["gap:var(--search-ai-resources-gap);display:flex;flex-direction:column;"]);
    ResourcesTitle = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__ResourcesTitle",
      componentId: "sc-1ldmzno-7"
    })(["font-weight:var(--search-ai-resources-title-font-weight);font-size:var(--search-ai-resources-title-font-size);line-height:var(--search-ai-resources-title-line-height);"]);
    ResourceTags = styled_components_esm_default.div.withConfig({
      displayName: "SearchAiResponse__ResourceTags",
      componentId: "sc-1ldmzno-8"
    })(["display:flex;flex-wrap:wrap;gap:var(--search-ai-resource-tags-gap);"]);
    ResourceTag = styled_components_esm_default(Tag).withConfig({
      displayName: "SearchAiResponse__ResourceTag",
      componentId: "sc-1ldmzno-9"
    })([".tag-default{--tag-color:--search-ai-resource-tag-text-color;}"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchHighlight.tsx
import * as React110 from "react";
function slicer(str, arr) {
  const markOpenIndex = str.indexOf("<mark>");
  const markCloseIndex = str.indexOf("</mark>");
  if (markOpenIndex !== -1 && markCloseIndex !== -1) {
    const pre = str.slice(0, markOpenIndex);
    const entry = str.slice(markOpenIndex + 6, markCloseIndex);
    const suf = str.slice(markCloseIndex + 7, str.length);
    return arr = [...arr, pre, {
      entry
    }, ...slicer(suf, arr)];
  } else
    return [...arr, str];
}
function searchHighlight(text2) {
  if (!Array.isArray(text2)) {
    const arr = slicer(text2, []);
    if (arr.length === 1)
      return text2;
    return /* @__PURE__ */ React110.createElement("span", null, arr.map((item2, index) => {
      if (typeof item2 === "object") {
        return /* @__PURE__ */ React110.createElement(Highlight, { key: index }, item2.entry);
      } else {
        return item2;
      }
    }));
  }
  const [pre, entry, suf] = text2;
  return /* @__PURE__ */ React110.createElement("span", { "data-component-name": "Search/SearchHighlight" }, pre, /* @__PURE__ */ React110.createElement(Highlight, null, entry), suf);
}
var Highlight;
var init_SearchHighlight = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchHighlight.tsx"() {
    init_styled_components_esm();
    Highlight = styled_components_esm_default.span.withConfig({
      displayName: "SearchHighlight__Highlight",
      componentId: "sc-jj53fw-0"
    })(["background-color:var(--search-highlight-bg-color);color:var(--search-highlight-text-color);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchItem.tsx
import React111, { useEffect as useEffect6, useRef as useRef4 } from "react";
function SearchItem({
  item: item2,
  className,
  product
}) {
  const ref = useRef4();
  useEffect6(() => {
    if (item2.active) {
      ref.current?.focus();
    }
  }, [item2.active]);
  const {
    document: document3,
    highlight
  } = item2;
  const parameter = highlight.parameters && highlight.parameters.length ? highlight.parameters[0] : null;
  const shouldShowPath = document3.path && document3.path?.length > 1;
  return /* @__PURE__ */ React111.createElement(SearchItemWrapper, { className, to: document3.url, tabIndex: 0, innerRef: ref, "data-component-name": "Search/SearchItem" }, /* @__PURE__ */ React111.createElement(SearchItemHeader, null, product && /* @__PURE__ */ React111.createElement(SearchItemProductTag, { "data-testid": "search-item-product-tag" }, /* @__PURE__ */ React111.createElement(Image2, { src: product.icon }), product.name), document3.httpMethod ? /* @__PURE__ */ React111.createElement(SearchItemOperation, null, /* @__PURE__ */ React111.createElement(SearchItemOperationTag, { color: document3.httpMethod }, document3.httpMethod.toUpperCase()), highlight.httpPath ? searchHighlight(highlight.httpPath) : document3.httpPath) : null, /* @__PURE__ */ React111.createElement(SearchItemTitleWrapper, null, /* @__PURE__ */ React111.createElement(SearchItemTitle, null, highlight.title ? searchHighlight(highlight.title) : document3.title), document3.deprecated ? /* @__PURE__ */ React111.createElement(SearchItemBadge, { deprecated: true }, "Deprecated") : null, document3.badges ? document3.badges.map(({
    name,
    color
  }) => /* @__PURE__ */ React111.createElement(SearchItemBadge, { color: color || "var(--color-info-base)", key: name }, name)) : null), /* @__PURE__ */ React111.createElement(SearchItemDescription, null, highlight.text ? searchHighlight(highlight.text) : trimText(document3.text))), parameter ? /* @__PURE__ */ React111.createElement(SearchItemPlace, null, /* @__PURE__ */ React111.createElement("div", null, searchHighlight(parameter.place), ` \u2192 `, parameter.path?.length ? searchHighlight(parameter.path?.join(" \u2192 ")) + " \u2192 " : "", searchHighlight(parameter.name)), /* @__PURE__ */ React111.createElement("div", null, searchHighlight(parameter.description))) : shouldShowPath && /* @__PURE__ */ React111.createElement(SearchItemPath, null, highlight.path && highlight.path.length ? searchHighlight(highlight.path.join(" \u2192 ")) : document3.path?.join(" \u2192 ")));
}
var SearchItemWrapper, SearchItemHeader, SearchItemTitleWrapper, SearchItemTitle, SearchItemBadge, SearchItemOperation, SearchItemDescription, SearchItemPath, SearchItemPlace, SearchItemProductTag, SearchItemOperationTag;
var init_SearchItem = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchItem.tsx"() {
    init_styled_components_esm();
    init_HttpTag();
    init_Link();
    init_Image();
    init_SearchHighlight();
    init_Badge();
    init_utils();
    SearchItemWrapper = styled_components_esm_default(Link).withConfig({
      displayName: "SearchItem__SearchItemWrapper",
      componentId: "sc-1pnlzy1-0"
    })(["display:block;padding:var(--search-item-padding);color:var(--search-item-text-color);background-color:var(--search-item-bg-color);transition:background-color 0.3s ease;text-decoration:none;white-space:normal;outline:none;border-top:1px solid var(--search-item-border-color);border-bottom:1px solid var(--search-item-border-color);&:hover{color:var(--search-item-text-color-hover);background-color:var(--search-item-bg-color-hover);}&:focus{background-color:var(--search-item-bg-color-active);border-top:1px solid var(--search-item-border-color-focused);border-bottom:1px solid var(--search-item-border-color-focused);}"]);
    SearchItemHeader = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemHeader",
      componentId: "sc-1pnlzy1-1"
    })(["position:relative;"]);
    SearchItemTitleWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemTitleWrapper",
      componentId: "sc-1pnlzy1-2"
    })(["display:flex;align-items:center;"]);
    SearchItemTitle = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemTitle",
      componentId: "sc-1pnlzy1-3"
    })(["overflow:hidden;text-overflow:ellipsis;color:var(--search-item-title-text-color);padding:var(--search-item-title-padding);font-size:var(--search-item-title-font-size);font-weight:var(--search-item-title-font-weight);line-height:var(--search-item-title-line-height);"]);
    SearchItemBadge = styled_components_esm_default(Badge).withConfig({
      displayName: "SearchItem__SearchItemBadge",
      componentId: "sc-1pnlzy1-4"
    })(["font-size:var(--font-size-sm);line-height:var(--line-height-sm);font-weight:var(--font-weight-regular);"]);
    SearchItemOperation = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemOperation",
      componentId: "sc-1pnlzy1-5"
    })(["display:inline-flex;align-items:baseline;overflow:hidden;text-overflow:ellipsis;font-size:var(--font-size-sm);line-height:var(--line-height-sm);font-weight:var(--font-weight-regular);color:var(--search-item-path-text-color);gap:var(--search-item-gap);"]);
    SearchItemDescription = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemDescription",
      componentId: "sc-1pnlzy1-6"
    })(["overflow:hidden;text-overflow:ellipsis;font-size:var(--font-size-base);line-height:var(--line-height-base);font-weight:var(--font-weight-regular);"]);
    SearchItemPath = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemPath",
      componentId: "sc-1pnlzy1-7"
    })(["overflow:hidden;text-overflow:ellipsis;font-size:var(--font-size-sm);line-height:var(--line-height-sm);font-weight:var(--font-weight-regular);margin-top:var(--spacing-sm);"]);
    SearchItemPlace = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemPlace",
      componentId: "sc-1pnlzy1-8"
    })(["display:flex;flex-direction:column;overflow:hidden;text-overflow:ellipsis;font-size:var(--font-size-sm);line-height:var(--line-height-sm);font-weight:var(--font-weight-regular);margin-top:var(--spacing-sm);&:first-child{padding-top:0;}"]);
    SearchItemProductTag = styled_components_esm_default.div.withConfig({
      displayName: "SearchItem__SearchItemProductTag",
      componentId: "sc-1pnlzy1-9"
    })(["position:absolute;display:flex;align-items:center;right:0;font-size:var(--font-size-base);line-height:var(--line-height-base);font-weight:var(--font-weight-regular);padding:var(--search-item-title-padding);gap:var(--spacing-xs);img{width:var(--search-item-product-icon-size);height:var(--search-item-product-icon-size);}"]);
    SearchItemOperationTag = styled_components_esm_default(HttpTag).withConfig({
      displayName: "SearchItem__SearchItemOperationTag",
      componentId: "sc-1pnlzy1-10"
    })(["--http-tag-width:auto;--http-tag-font-weight:var(--font-weight-semibold);"]);
  }
});

// node_modules/@redocly/theme/src/icons/RecentlyViewedIcon/RecentlyViewedIcon.tsx
import React112 from "react";
var Icon58, RecentlyViewedIcon;
var init_RecentlyViewedIcon = __esm({
  "node_modules/@redocly/theme/src/icons/RecentlyViewedIcon/RecentlyViewedIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon58 = (props) => /* @__PURE__ */ React112.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React112.createElement("path", { d: "M10.295 11L7.5 8.205V3.5H8.5V7.79L11 10.295L10.295 11Z" }), /* @__PURE__ */ React112.createElement("path", { d: "M8 1C7.06748 1.00013 6.14446 1.18739 5.28562 1.55068C4.42677 1.91397 3.64955 2.44591 3 3.115V1H2V5H6V4H3.54C4.47801 2.95765 5.75149 2.27676 7.13926 2.0756C8.52703 1.87444 9.94142 2.16571 11.1368 2.89882C12.3322 3.63193 13.233 4.76057 13.6829 6.08873C14.1327 7.41689 14.1032 8.86066 13.5993 10.1693C13.0955 11.4779 12.1492 12.5688 10.9249 13.2523C9.7005 13.9359 8.27537 14.1691 6.897 13.9113C5.51862 13.6535 4.27407 12.9211 3.3795 11.8412C2.48492 10.7614 1.99683 9.40227 2 8H1C1 9.38447 1.41054 10.7378 2.17971 11.889C2.94888 13.0401 4.04213 13.9373 5.32122 14.4672C6.6003 14.997 8.00776 15.1356 9.36563 14.8655C10.7235 14.5954 11.9708 13.9287 12.9497 12.9497C13.9287 11.9708 14.5954 10.7235 14.8655 9.36563C15.1356 8.00776 14.997 6.6003 14.4672 5.32122C13.9373 4.04213 13.0401 2.94888 11.889 2.17971C10.7378 1.41054 9.38447 1 8 1Z" }));
    RecentlyViewedIcon = styled_components_esm_default(Icon58).attrs(() => ({
      "data-component-name": "icons/RecentlyViewedIcon/RecentlyViewedIcon"
    })).withConfig({
      displayName: "RecentlyViewedIcon",
      componentId: "sc-1dq4j1q-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchRecent.tsx
import * as React113 from "react";
function SearchRecent({
  onSelect,
  className
}) {
  const {
    items,
    removeSearchHistoryItem
  } = useRecentSearches();
  const {
    useTranslate,
    useTelemetry
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const telemetry = useTelemetry();
  if (!items || !items.length)
    return null;
  const handleOnRemove = (e, item2) => {
    e.stopPropagation();
    removeSearchHistoryItem(item2);
    telemetry.send("search_recent_remove_button_clicked", {});
  };
  const handleKeyDown = (e, item2) => {
    if (e.key === "Enter") {
      onSelect(item2);
    }
  };
  return /* @__PURE__ */ React113.createElement(SearchRecentWrapper, { "data-component-name": "Search/SearchRecent", className }, /* @__PURE__ */ React113.createElement(SearchRecentTitle, { "data-translation-key": "search.recent" }, translate("search.recent", "Recent searches")), /* @__PURE__ */ React113.createElement(SearchRecentItems, null, items.map((item2) => /* @__PURE__ */ React113.createElement(SearchRecentItem, { key: item2, onClick: () => onSelect(item2), onKeyDown: (e) => handleKeyDown(e, item2), tabIndex: 0, role: "link" }, /* @__PURE__ */ React113.createElement(SearchRecentItemWrapper, null, /* @__PURE__ */ React113.createElement(RecentlyViewedIcon, { color: "--search-recent-item-text-color" }), item2), /* @__PURE__ */ React113.createElement(SearchRecentRemoveButton, { variant: "ghost", icon: /* @__PURE__ */ React113.createElement(CloseIcon, null), onClick: (e) => handleOnRemove(e, item2), size: "small" })))));
}
var SearchRecentWrapper, SearchRecentTitle, SearchRecentItems, SearchRecentRemoveButton, SearchRecentItem, SearchRecentItemWrapper;
var init_SearchRecent = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchRecent.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_hooks();
    init_CloseIcon();
    init_RecentlyViewedIcon();
    init_Button();
    SearchRecentWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchRecent__SearchRecentWrapper",
      componentId: "sc-q0jdgw-0"
    })(["display:flex;flex-direction:column;"]);
    SearchRecentTitle = styled_components_esm_default.div.withConfig({
      displayName: "SearchRecent__SearchRecentTitle",
      componentId: "sc-q0jdgw-1"
    })(["font-size:var(--search-recent-item-title-font-size);font-weight:var(--search-recent-item-title-font-weight);line-height:var(--search-recent-item-title-line-height);color:var(--search-recent-item-title-text-color);padding:var(--spacing-lg) var(--spacing-lg) var(--spacing-xxs) var(--spacing-lg);"]);
    SearchRecentItems = styled_components_esm_default.div.withConfig({
      displayName: "SearchRecent__SearchRecentItems",
      componentId: "sc-q0jdgw-2"
    })(["display:flex;flex-direction:column;align-items:flex-start;"]);
    SearchRecentRemoveButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchRecent__SearchRecentRemoveButton",
      componentId: "sc-q0jdgw-3"
    })([""]);
    SearchRecentItem = styled_components_esm_default.div.withConfig({
      displayName: "SearchRecent__SearchRecentItem",
      componentId: "sc-q0jdgw-4"
    })(["display:flex;justify-content:space-between;align-items:center;width:100%;font-size:var(--search-recent-item-font-size);font-weight:var(--search-recent-item-font-weight);line-height:var(--search-recent-item-line-height);padding:var(--search-recent-item-padding);color:var(--search-recent-item-text-color);cursor:pointer;", "{display:none;}:hover{background-color:var(--search-recent-item-bg-color-hover);color:var(--search-recent-item-text-color-hover);", "{display:flex;padding:0;}}:focus-visible{outline:1px solid var(--search-recent-item-border-color-focused);background-color:var(--search-recent-item-bg-color-active);}@media screen and (min-width:", "){", "{display:none;}}"], SearchRecentRemoveButton, SearchRecentRemoveButton, breakpoints.small, SearchRecentRemoveButton);
    SearchRecentItemWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchRecent__SearchRecentItemWrapper",
      componentId: "sc-q0jdgw-5"
    })(["display:flex;align-items:center;gap:var(--spacing-sm);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchSuggestedPages.tsx
import * as React114 from "react";
function SearchSuggestedPages({
  className
}) {
  const pages2 = useSuggestedPages();
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  if (!pages2.length)
    return null;
  return /* @__PURE__ */ React114.createElement(SearchSuggestedWrapper, { "data-component-name": "Search/SearchSuggestedPages", className }, /* @__PURE__ */ React114.createElement(SearchSuggestedTitle, { "data-translation-key": "search.suggested" }, translate("search.suggested", "Suggested pages")), /* @__PURE__ */ React114.createElement(SearchSuggestedItems, null, pages2.map((page) => page.link ? /* @__PURE__ */ React114.createElement(SearchSuggestedItem, { key: page.label, to: page.link, ...page }, /* @__PURE__ */ React114.createElement(SearchSuggestedItemWrapper, null, /* @__PURE__ */ React114.createElement(RecentlyViewedIcon, { color: "--search-item-text-color" }), page.label)) : null)));
}
var SearchSuggestedWrapper, SearchSuggestedTitle, SearchSuggestedItems, SearchSuggestedItem, SearchSuggestedItemWrapper;
var init_SearchSuggestedPages = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchSuggestedPages.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_RecentlyViewedIcon();
    init_Link();
    SearchSuggestedWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchSuggestedPages__SearchSuggestedWrapper",
      componentId: "sc-1vsuyab-0"
    })(["display:flex;flex-direction:column;"]);
    SearchSuggestedTitle = styled_components_esm_default.div.withConfig({
      displayName: "SearchSuggestedPages__SearchSuggestedTitle",
      componentId: "sc-1vsuyab-1"
    })(["color:var(--search-suggested-item-title-text-color);font-size:var(--search-suggested-item-title-font-size);font-weight:var(--search-suggested-item-title-font-weight);line-height:var(--search-suggested-item-title-line-height);padding:var(--search-suggested-item-title-padding);"]);
    SearchSuggestedItems = styled_components_esm_default.div.withConfig({
      displayName: "SearchSuggestedPages__SearchSuggestedItems",
      componentId: "sc-1vsuyab-2"
    })(["display:flex;flex-direction:column;align-items:flex-start;order:1;"]);
    SearchSuggestedItem = styled_components_esm_default(Link).withConfig({
      displayName: "SearchSuggestedPages__SearchSuggestedItem",
      componentId: "sc-1vsuyab-3"
    })(["width:100%;text-decoration:none;font-size:var(--search-suggested-item-font-size);font-weight:var(--search-suggested-item-font-weight);line-height:var(--search-suggested-item-line-height);color:var(--search-suggested-item-text-color);padding:var(--search-suggested-item-padding);cursor:pointer;&:hover{background-color:var(--search-suggested-item-bg-color-hover);color:var(--search-suggested-item-text-color-hover);}&:focus-visible{outline:1px solid var(--search-suggested-item-border-color-focused);background-color:var(--search-suggested-item-bg-color-active);}"]);
    SearchSuggestedItemWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchSuggestedPages__SearchSuggestedItemWrapper",
      componentId: "sc-1vsuyab-4"
    })(["display:flex;align-items:center;gap:var(--spacing-xs);"]);
  }
});

// node_modules/@redocly/theme/src/icons/ResetIcon/ResetIcon.tsx
import React115 from "react";
var Icon59, ResetIcon;
var init_ResetIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ResetIcon/ResetIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon59 = (props) => /* @__PURE__ */ React115.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React115.createElement("path", { d: "M9 14C10.1867 14 11.3467 13.6481 12.3334 12.9888C13.3201 12.3295 14.0892 11.3925 14.5433 10.2961C14.9974 9.19975 15.1162 7.99335 14.8847 6.82946C14.6532 5.66558 14.0818 4.59648 13.2426 3.75736C12.4035 2.91825 11.3344 2.3468 10.1705 2.11529C9.00666 1.88378 7.80026 2.0026 6.7039 2.45673C5.60754 2.91085 4.67047 3.67989 4.01118 4.66658C3.35189 5.65328 3 6.81331 3 8V11.1L1.2 9.3L0.5 10L3.5 13L6.5 10L5.8 9.3L4 11.1V8C4 7.0111 4.29324 6.0444 4.84265 5.22215C5.39206 4.39991 6.17295 3.75904 7.08658 3.38061C8.00021 3.00217 9.00555 2.90315 9.97545 3.09608C10.9454 3.289 11.8363 3.76521 12.5355 4.46447C13.2348 5.16373 13.711 6.05465 13.9039 7.02455C14.0969 7.99446 13.9978 8.99979 13.6194 9.91342C13.241 10.8271 12.6001 11.6079 11.7779 12.1574C10.9556 12.7068 9.98891 13 9 13V14Z", fill: "#1A1C21" }));
    ResetIcon = styled_components_esm_default(Icon59).attrs(() => ({
      "data-component-name": "icons/ResetIcon/ResetIcon"
    })).withConfig({
      displayName: "ResetIcon",
      componentId: "sc-1c9jto2-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Search/FilterFields/SearchFilterFieldSelect.tsx
import React116, { useEffect as useEffect7, useState as useState3 } from "react";
function SearchFilterFieldSelect({
  facet,
  filter: filter2,
  query,
  selectedValues,
  onChange
}) {
  const MAX_SELECT_OPTIONS = 20;
  const {
    useFacetQuery,
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    searchFacet,
    setSearchFacet,
    setSearchFacetQuery
  } = useFacetQuery(facet.field);
  const [selectOptions, setSelectOptions] = useState3([]);
  const isMultiple = facet.type === "multi-select";
  useEffect7(() => {
    setSelectOptions(getSelectOptions());
  }, [searchFacet, facet]);
  const onSearch = (value) => {
    if (value === null) {
      setSearchFacet(null);
      setSearchFacetQuery(null);
    } else if (typeof value === "string") {
      setSearchFacetQuery({
        query,
        filter: filter2,
        facetQuery: value
      });
    }
  };
  const getSelectOptions = () => {
    return searchFacet ? searchFacet.values.map(facetValueToSelectOption) : facet.values.map(facetValueToSelectOption);
  };
  const facetValueToSelectOption = (facetValue) => {
    if (!facetValue) {
      return {
        element: null,
        value: ""
      };
    }
    if (typeof facetValue === "string") {
      return {
        element: /* @__PURE__ */ React116.createElement(FilterSelectOptionWrapper, null, /* @__PURE__ */ React116.createElement(FilterSelectOptionText, null, facetValue)),
        value: facetValue
      };
    } else {
      const {
        value,
        count,
        isCounterVisible
      } = facetValue;
      return {
        element: /* @__PURE__ */ React116.createElement(FilterSelectOptionWrapper, null, /* @__PURE__ */ React116.createElement(FilterSelectOptionText, null, value), isCounterVisible && /* @__PURE__ */ React116.createElement(CounterTag, null, count)),
        value
      };
    }
  };
  return /* @__PURE__ */ React116.createElement(Select, { value: selectedValues.length ? isMultiple ? selectedValues.map((value) => facetValueToSelectOption(value)) : facetValueToSelectOption(selectedValues[0]) : void 0, options: selectOptions, onChange, placeholder: `${translate("search.filter.field.placeholder", "Search")} ${facet.name.toLowerCase()}...`, alignment: "start", multiple: isMultiple, searchable: true, footer: selectOptions.length === MAX_SELECT_OPTIONS ? /* @__PURE__ */ React116.createElement(FilterSelectFooter, null, "Search to show more items...") : null, onSearch, checkmarkIconPosition: "start" });
}
var FilterSelectOptionWrapper, FilterSelectOptionText, FilterSelectFooter;
var init_SearchFilterFieldSelect = __esm({
  "node_modules/@redocly/theme/src/components/Search/FilterFields/SearchFilterFieldSelect.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_Select();
    init_CounterTag();
    FilterSelectOptionWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilterFieldSelect__FilterSelectOptionWrapper",
      componentId: "sc-zwjcyq-0"
    })(["width:100%;display:flex;justify-content:space-between;align-items:center;gap:var(--search-filter-field-select-option-gap);"]);
    FilterSelectOptionText = styled_components_esm_default.span.withConfig({
      displayName: "SearchFilterFieldSelect__FilterSelectOptionText",
      componentId: "sc-zwjcyq-1"
    })(["overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;padding:var(--search-filter-field-select-option-text-padding);"]);
    FilterSelectFooter = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilterFieldSelect__FilterSelectFooter",
      componentId: "sc-zwjcyq-2"
    })(["display:flex;align-items:center;justify-content:center;padding:var(--search-filter-field-select-footer-padding);color:var(--search-filter-field-select-footer-text-color);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/FilterFields/SearchFilterFieldTags.tsx
import React117 from "react";
function SearchFilterFieldTags({
  className,
  facet,
  selectedValues,
  onChange
}) {
  return /* @__PURE__ */ React117.createElement(FilterTagsWrapper, { "data-component-name": "Search/FilterFields/SearchFilterFieldTags", className }, facet.values.map((facetCount, index) => {
    const {
      value,
      count,
      isCounterVisible
    } = facetCount;
    const active = selectedValues.includes(value);
    return /* @__PURE__ */ React117.createElement(FilterTagWrapper, { key: `${count}-${index}`, color: value, onClick: () => {
      const values = active ? selectedValues.filter((item2) => item2 !== value) : [...selectedValues, value];
      onChange(values);
    }, active, borderless: true }, value, " ", isCounterVisible && /* @__PURE__ */ React117.createElement("span", null, count));
  }));
}
var FilterTagsWrapper, FilterTagWrapper;
var init_SearchFilterFieldTags = __esm({
  "node_modules/@redocly/theme/src/components/Search/FilterFields/SearchFilterFieldTags.tsx"() {
    init_styled_components_esm();
    init_Tag();
    FilterTagsWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilterFieldTags__FilterTagsWrapper",
      componentId: "sc-1r1z27n-0"
    })(["display:flex;flex-wrap:wrap;gap:var(--search-filter-field-tags-gap);"]);
    FilterTagWrapper = styled_components_esm_default(Tag).withConfig({
      displayName: "SearchFilterFieldTags__FilterTagWrapper",
      componentId: "sc-1r1z27n-1"
    })(["text-transform:uppercase;cursor:pointer;", " margin:var(--search-filter-field-tags-tag-margin);"], ({
      color
    }) => color && `background-color: var(--tag-operation-bg-color-${color});`);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchFilterField.tsx
import React118 from "react";
function SearchFilterField({
  className,
  facet,
  filter: filter2,
  query,
  onFilterChange,
  onFacetReset
}) {
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const selectedValues = filter2.find((item2) => item2.field === facet.field)?.values || [];
  const onChange = (value) => {
    onFilterChange(facet.field, value, facet.isTop);
  };
  const onReset = () => {
    onFacetReset(facet.field);
  };
  return /* @__PURE__ */ React118.createElement(FilterFieldWrapper, { "data-component-name": "Search/SearchFilterField", className }, /* @__PURE__ */ React118.createElement(FilterFieldLabel, null, facet.name, selectedValues.length > 0 && /* @__PURE__ */ React118.createElement(Button, { "data-translation-key": "search.filter.field.reset", icon: /* @__PURE__ */ React118.createElement(ResetIcon, null), variant: "ghost", size: "small", onClick: onReset }, translate("search.filter.field.reset", "Reset"))), ["select", "multi-select"].includes(facet.type) && /* @__PURE__ */ React118.createElement(SearchFilterFieldSelect, { facet, filter: filter2, query, selectedValues, onChange }), facet.type === "tags" && /* @__PURE__ */ React118.createElement(SearchFilterFieldTags, { facet, selectedValues, onChange }));
}
var FilterFieldWrapper, FilterFieldLabel;
var init_SearchFilterField = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchFilterField.tsx"() {
    init_styled_components_esm();
    init_Button();
    init_ResetIcon();
    init_hooks();
    init_SearchFilterFieldSelect();
    init_SearchFilterFieldTags();
    FilterFieldWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilterField__FilterFieldWrapper",
      componentId: "sc-p4qbxk-0"
    })(["display:flex;flex-direction:column;gap:4px;"]);
    FilterFieldLabel = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilterField__FilterFieldLabel",
      componentId: "sc-p4qbxk-1"
    })(["display:flex;justify-content:space-between;align-items:center;"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchFilter.tsx
import * as React119 from "react";
function SearchFilter({
  className,
  facets,
  filter: filter2,
  query,
  onFilterChange,
  onFilterReset,
  onFacetReset
}) {
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  return /* @__PURE__ */ React119.createElement(SearchFilterWrapper, { "data-component-name": "Search/SearchFilter", className }, /* @__PURE__ */ React119.createElement(SearchFilterHeader, null, /* @__PURE__ */ React119.createElement("span", { "data-translation-key": "search.filter.title" }, translate("search.filter.title", "Advanced filter")), /* @__PURE__ */ React119.createElement(Button, { "data-translation-key": "search.filter.reset", onClick: onFilterReset, variant: "ghost", icon: /* @__PURE__ */ React119.createElement(CleanIcon, null) }, translate("search.filter.reset", "Reset filters"))), /* @__PURE__ */ React119.createElement(SearchFilterFields, null, facets.map((facet, index) => /* @__PURE__ */ React119.createElement(SearchFilterField, { key: `${facet.field}-${index}`, facet, onFilterChange, onFacetReset, filter: filter2, query }))));
}
var SearchFilterWrapper, SearchFilterHeader, SearchFilterFields;
var init_SearchFilter = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchFilter.tsx"() {
    init_styled_components_esm();
    init_Button();
    init_CleanIcon();
    init_SearchFilterField();
    init_hooks();
    SearchFilterWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilter__SearchFilterWrapper",
      componentId: "sc-1ixb373-0"
    })(["width:var(--search-filter-width);display:flex;flex-direction:column;padding:var(--search-filter-padding);font-size:var(--search-filter-font-size);font-weight:var(--search-filter-font-weight);line-height:var(--search-filter-line-height);"]);
    SearchFilterHeader = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilter__SearchFilterHeader",
      componentId: "sc-1ixb373-1"
    })(["position:sticky;top:0px;display:flex;justify-content:space-between;align-items:center;padding:var(--search-filter-header-padding);color:var(--search-filter-header-text-color);background-color:var(--search-filter-bg-color);z-index:var(--search-filter-header-z-index);"]);
    SearchFilterFields = styled_components_esm_default.div.withConfig({
      displayName: "SearchFilter__SearchFilterFields",
      componentId: "sc-1ixb373-2"
    })(["display:flex;flex-direction:column;gap:var(--search-filter-fields-gap);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchGroups.tsx
import * as React120 from "react";
function SearchGroups({
  facets,
  searchFilter,
  onFilterChange,
  onTopFacetsReset
}) {
  const groupFacets = facets.filter((facet) => facet.isTop);
  const handleGroupTagClick = (value, fieldId, active, currentValues) => {
    const values = active ? currentValues.filter((item2) => item2 !== value) : [...currentValues, value];
    onFilterChange(fieldId, values, true);
  };
  return /* @__PURE__ */ React120.createElement(SearchGroupsWrapper, null, /* @__PURE__ */ React120.createElement(GroupTag, { borderless: true, active: !searchFilter.some((item2) => item2.isTop), onClick: () => searchFilter.some((item2) => item2.isTop) && onTopFacetsReset() }, "All"), /* @__PURE__ */ React120.createElement(Divider, null), groupFacets.flatMap((facet) => facet.values.map((facetCount, index) => {
    const {
      value,
      count,
      isCounterVisible
    } = facetCount;
    const currentValues = searchFilter.find((item2) => item2.field === facet.field)?.values || [];
    const active = currentValues?.includes(value);
    return /* @__PURE__ */ React120.createElement(GroupTag, { key: `${facet.field}-${index}`, onClick: () => handleGroupTagClick(value, facet.field, active, currentValues), active, borderless: true }, value, " ", isCounterVisible && /* @__PURE__ */ React120.createElement("span", null, count));
  })));
}
var SearchGroupsWrapper, GroupTag, Divider;
var init_SearchGroups = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchGroups.tsx"() {
    init_styled_components_esm();
    init_Tag();
    SearchGroupsWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchGroups__SearchGroupsWrapper",
      componentId: "sc-aj7uns-0"
    })(["display:flex;gap:4px;padding:var(--spacing-md);"]);
    GroupTag = styled_components_esm_default(Tag).withConfig({
      displayName: "SearchGroups__GroupTag",
      componentId: "sc-aj7uns-1"
    })(["cursor:pointer;gap:4px;"]);
    Divider = styled_components_esm_default.div.withConfig({
      displayName: "SearchGroups__Divider",
      componentId: "sc-aj7uns-2"
    })(["border-right:1px solid var(--border-color-secondary);margin:5px 5px 5px 0;"]);
  }
});

// node_modules/@redocly/theme/src/components/Loaders/SpinnerLoader.tsx
import React121 from "react";
function SpinnerLoader({
  color,
  size
}) {
  return /* @__PURE__ */ React121.createElement(Spinner2, { color, size });
}
var Spinner2;
var init_SpinnerLoader = __esm({
  "node_modules/@redocly/theme/src/components/Loaders/SpinnerLoader.tsx"() {
    init_styled_components_esm();
    Spinner2 = styled_components_esm_default.div.withConfig({
      displayName: "SpinnerLoader__Spinner",
      componentId: "sc-m0fb06-0"
    })(["width:", ";height:", ";border:3px solid ", ";border-bottom-color:transparent;border-radius:50%;display:inline-block;box-sizing:border-box;animation:rotation 1s linear infinite;@keyframes rotation{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}"], ({
      size
    }) => size, ({
      size
    }) => size, ({
      color
    }) => color);
  }
});

// node_modules/@redocly/theme/src/icons/SettingsIcon/SettingsIcon.tsx
import React122 from "react";
var Icon60, SettingsIcon;
var init_SettingsIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SettingsIcon/SettingsIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon60 = (props) => {
      const {
        variant,
        ...rest
      } = props;
      return /* @__PURE__ */ React122.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...rest }, variant === "circle" ? /* @__PURE__ */ React122.createElement(React122.Fragment, null, /* @__PURE__ */ React122.createElement("path", { d: "M10.8116 7.33256C10.8116 7.22318 10.8116 7.11381 10.8116 7.00006C10.8116 6.88631 10.8116 6.77693 10.8116 6.66318L11.6516 5.92818C11.8064 5.7917 11.908 5.60488 11.9384 5.40073C11.9689 5.19658 11.9261 4.98825 11.8178 4.81256L10.7853 3.06256C10.7086 2.92967 10.5983 2.8193 10.4654 2.74251C10.3326 2.66572 10.1819 2.62521 10.0284 2.62506C9.93336 2.62433 9.83878 2.6391 9.74845 2.66881L8.68532 3.02756C8.50177 2.90558 8.31031 2.79597 8.1122 2.69943L7.88907 1.59693C7.84907 1.39551 7.73949 1.21457 7.57952 1.0858C7.41956 0.957028 7.21939 0.888621 7.01407 0.892556H4.96657C4.76125 0.888621 4.56109 0.957028 4.40112 1.0858C4.24116 1.21457 4.13158 1.39551 4.09157 1.59693L3.86845 2.69943C3.66892 2.79594 3.476 2.90556 3.29095 3.02756L2.2497 2.65131C2.15839 2.62752 2.06384 2.61865 1.9697 2.62506C1.81626 2.62521 1.66555 2.66572 1.53271 2.74251C1.39986 2.8193 1.28954 2.92967 1.21282 3.06256L0.180323 4.81256C0.0782047 4.98799 0.040258 5.19347 0.0729819 5.3938C0.105706 5.59414 0.207064 5.77686 0.359698 5.91068L1.18657 6.66756C1.18657 6.77693 1.18657 6.88631 1.18657 7.00006C1.18657 7.11381 1.18657 7.22318 1.18657 7.33693L0.359698 8.07193C0.202753 8.20668 0.0986221 8.39268 0.0657848 8.59691C0.0329474 8.80114 0.0735273 9.0104 0.180323 9.18756L1.21282 10.9376C1.28954 11.0704 1.39986 11.1808 1.53271 11.2576C1.66555 11.3344 1.81626 11.3749 1.9697 11.3751C2.06479 11.3758 2.15936 11.361 2.2497 11.3313L3.31282 10.9726C3.49637 11.0945 3.68784 11.2041 3.88595 11.3007L4.10907 12.4032C4.14908 12.6046 4.25866 12.7855 4.41862 12.9143C4.57859 13.0431 4.77875 13.1115 4.98407 13.1076H7.04907C7.25439 13.1115 7.45456 13.0431 7.61452 12.9143C7.77449 12.7855 7.88407 12.6046 7.92407 12.4032L8.1472 11.3007C8.34673 11.2042 8.53965 11.0946 8.7247 10.9726L9.78345 11.3313C9.87378 11.361 9.96836 11.3758 10.0634 11.3751C10.2169 11.3749 10.3676 11.3344 10.5004 11.2576C10.6333 11.1808 10.7436 11.0704 10.8203 10.9376L11.8178 9.18756C11.9199 9.01212 11.9579 8.80664 11.9252 8.60631C11.8924 8.40597 11.7911 8.22325 11.6384 8.08943L10.8116 7.33256ZM10.0284 10.5001L8.52782 9.99256C8.17654 10.2901 7.77506 10.5227 7.3422 10.6794L7.03157 12.2501H4.96657L4.65595 10.6969C4.22651 10.5357 3.8272 10.3036 3.4747 10.0101L1.9697 10.5001L0.937198 8.75006L2.1272 7.70006C2.0463 7.24718 2.0463 6.78356 2.1272 6.33068L0.937198 5.25006L1.9697 3.50006L3.47032 4.00756C3.82161 3.71001 4.22309 3.47742 4.65595 3.32068L4.96657 1.75006H7.03157L7.3422 3.30318C7.77164 3.46437 8.17095 3.69656 8.52345 3.99006L10.0284 3.50006L11.0609 5.25006L9.87095 6.30006C9.95184 6.75293 9.95184 7.21656 9.87095 7.66943L11.0609 8.75006L10.0284 10.5001Z", fill: "#22242B" }), /* @__PURE__ */ React122.createElement("path", { d: "M5.99907 9.62506C5.4799 9.62506 4.97238 9.4711 4.5407 9.18266C4.10902 8.89422 3.77257 8.48426 3.57389 8.0046C3.37521 7.52494 3.32323 6.99714 3.42451 6.48794C3.5258 5.97874 3.7758 5.51101 4.14292 5.1439C4.51003 4.77679 4.97776 4.52678 5.48696 4.42549C5.99616 4.32421 6.52396 4.37619 7.00362 4.57487C7.48327 4.77355 7.89324 5.11 8.18168 5.54168C8.47012 5.97336 8.62407 6.48088 8.62407 7.00006C8.62758 7.34575 8.56208 7.68867 8.43141 8.00874C8.30073 8.3288 8.10751 8.61958 7.86305 8.86403C7.61859 9.10849 7.32782 9.30171 7.00776 9.43239C6.68769 9.56306 6.34477 9.62857 5.99907 9.62506ZM5.99907 5.25006C5.76779 5.24467 5.53781 5.28625 5.32305 5.37229C5.1083 5.45833 4.91323 5.58703 4.74964 5.75062C4.58605 5.91421 4.45734 6.10928 4.37131 6.32404C4.28527 6.53879 4.24369 6.76877 4.24907 7.00006C4.24369 7.23134 4.28527 7.46132 4.37131 7.67607C4.45734 7.89083 4.58605 8.0859 4.74964 8.24949C4.91323 8.41308 5.1083 8.54178 5.32305 8.62782C5.53781 8.71386 5.76779 8.75544 5.99907 8.75006C6.23036 8.75544 6.46034 8.71386 6.67509 8.62782C6.88985 8.54178 7.08492 8.41308 7.24851 8.24949C7.41209 8.0859 7.5408 7.89083 7.62684 7.67607C7.71288 7.46132 7.75446 7.23134 7.74907 7.00006C7.75446 6.76877 7.71288 6.53879 7.62684 6.32404C7.5408 6.10928 7.41209 5.91421 7.24851 5.75062C7.08492 5.58703 6.88985 5.45833 6.67509 5.37229C6.46034 5.28625 6.23036 5.24467 5.99907 5.25006Z", fill: "#22242B" })) : /* @__PURE__ */ React122.createElement(React122.Fragment, null, /* @__PURE__ */ React122.createElement("path", { d: "M15.875 2.5H13.5687C13.2875 1.20625 12.1625 0.25 10.8125 0.25C9.4625 0.25 8.3375 1.20625 8.05625 2.5H0.125V3.625H8.05625C8.3375 4.91875 9.4625 5.875 10.8125 5.875C12.1625 5.875 13.2875 4.91875 13.5687 3.625H15.875V2.5ZM10.8125 4.75C9.85625 4.75 9.125 4.01875 9.125 3.0625C9.125 2.10625 9.85625 1.375 10.8125 1.375C11.7688 1.375 12.5 2.10625 12.5 3.0625C12.5 4.01875 11.7688 4.75 10.8125 4.75Z", fill: "#22242B" }), /* @__PURE__ */ React122.createElement("path", { d: "M0.125 11.5H2.43125C2.7125 12.7937 3.8375 13.75 5.1875 13.75C6.5375 13.75 7.6625 12.7937 7.94375 11.5H15.875V10.375H7.94375C7.6625 9.08125 6.5375 8.125 5.1875 8.125C3.8375 8.125 2.7125 9.08125 2.43125 10.375H0.125V11.5ZM5.1875 9.25C6.14375 9.25 6.875 9.98125 6.875 10.9375C6.875 11.8938 6.14375 12.625 5.1875 12.625C4.23125 12.625 3.5 11.8938 3.5 10.9375C3.5 9.98125 4.23125 9.25 5.1875 9.25Z", fill: "#22242B" })));
    };
    SettingsIcon = styled_components_esm_default(Icon60).attrs(() => ({
      "data-component-name": "icons/SettingsIcon/SettingsIcon"
    })).withConfig({
      displayName: "SettingsIcon",
      componentId: "sc-11m4fh5-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/AiStarsIcon/AiStarsIcon.tsx
import React123 from "react";
var Icon61, AiStarsIcon;
var init_AiStarsIcon = __esm({
  "node_modules/@redocly/theme/src/icons/AiStarsIcon/AiStarsIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon61 = (props) => /* @__PURE__ */ React123.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React123.createElement("path", { d: "M11.2597 9.12114C8.08498 8.40423 7.59322 7.91247 6.87631 4.73772C6.84346 4.59262 6.7143 4.48929 6.56505 4.48929C6.4158 4.48929 6.28664 4.59262 6.2538 4.73772C5.53657 7.91247 5.04513 8.40423 1.87038 9.12114C1.72495 9.1543 1.62163 9.28314 1.62163 9.43239C1.62163 9.58164 1.72495 9.71048 1.87038 9.74365C5.04513 10.4609 5.53657 10.9526 6.2538 14.1271C6.28664 14.2722 6.4158 14.3755 6.56505 14.3755C6.7143 14.3755 6.84346 14.2722 6.87631 14.1271C7.59354 10.9526 8.08498 10.4609 11.2597 9.74365C11.4052 9.71048 11.5082 9.58164 11.5082 9.43239C11.5082 9.28314 11.4048 9.1543 11.2597 9.12114Z", fill: "#1A1C21" }), /* @__PURE__ */ React123.createElement("path", { d: "M14.1299 4.17834C12.4423 3.79725 12.2053 3.5603 11.8242 1.87294C11.7911 1.72752 11.6622 1.62451 11.513 1.62451C11.3637 1.62451 11.2349 1.72752 11.2017 1.87294C10.8206 3.5603 10.5837 3.79725 8.8963 4.17834C8.75088 4.21151 8.64787 4.34035 8.64787 4.4896C8.64787 4.63885 8.75088 4.76769 8.8963 4.80086C10.5837 5.18195 10.8206 5.4189 11.2017 7.10658C11.2349 7.25168 11.3637 7.35501 11.513 7.35501C11.6622 7.35501 11.7911 7.25168 11.8242 7.10658C12.2053 5.4189 12.4423 5.18195 14.1299 4.80086C14.275 4.76769 14.3784 4.63885 14.3784 4.4896C14.3784 4.34035 14.275 4.21151 14.1299 4.17834Z", fill: "#1A1C21" }));
    AiStarsIcon = styled_components_esm_default(Icon61).attrs(() => ({
      "data-component-name": "icons/AiStarsIcon/AiStarsIcon"
    })).withConfig({
      displayName: "AiStarsIcon",
      componentId: "sc-mwjv8i-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Search/SearchDialog.tsx
import React124, { Fragment as Fragment2, useRef as useRef5, useState as useState4 } from "react";
function SearchDialog({
  onClose,
  className
}) {
  const {
    useTranslate,
    useCurrentProduct,
    useSearch,
    useProducts,
    useAiSearch
  } = useThemeHooks();
  const products = useProducts();
  const currentProduct = useCurrentProduct();
  const [product, setProduct] = useState4(currentProduct);
  const [mode, setMode] = useState4("search");
  const autoSearchDisabled = mode !== "search";
  const {
    query,
    setQuery,
    filter: filter2,
    setFilter,
    items,
    isSearchLoading,
    facets,
    setLoadMore,
    advancedSearch,
    askAi
  } = useSearch(product?.name, autoSearchDisabled);
  const {
    isFilterOpen,
    onFilterToggle,
    onFilterChange,
    onFilterReset,
    onFacetReset,
    onTopFacetsReset
  } = useSearchFilter(filter2, setFilter);
  const aiSearch = useAiSearch({
    filter: filter2
  });
  const modalRef = useRef5(null);
  const {
    translate
  } = useTranslate();
  useDialogHotKeys(modalRef, onClose);
  const handleOverlayClick = (event) => {
    const target = event.target;
    if (typeof target.className !== "string")
      return;
    if (target.className?.includes(" overlay")) {
      onClose();
    }
  };
  const mapItem = (item2, index) => {
    let itemProduct;
    if (!product && item2.document.product) {
      const resolvedProduct = products.find((product2) => product2.slug.match(`/${item2.document.product?.folder}/`));
      itemProduct = resolvedProduct ? {
        name: resolvedProduct.name,
        icon: resolvedProduct.icon
      } : void 0;
    }
    return /* @__PURE__ */ React124.createElement(SearchItem, { key: `${index}-${item2.document.id}`, item: item2, product: itemProduct });
  };
  const showLoadMore = (groupKey, currentCount = 0) => {
    const topFacet = facets.find((facet) => facet.isTop);
    let needLoadMore = false;
    if (topFacet) {
      const groupValue = topFacet.values.find((value) => {
        if (typeof value === "object") {
          return value.value === groupKey;
        } else
          return false;
      });
      needLoadMore = groupValue ? groupValue.count > currentCount : false;
    }
    return needLoadMore;
  };
  const showResults = !!(filter2 && filter2.length || query);
  const showSearchFilterButton = advancedSearch && mode === "search";
  const showAiSearchButton = askAi && mode === "search";
  const showHeaderButtons = showSearchFilterButton || showAiSearchButton;
  return /* @__PURE__ */ React124.createElement(SearchOverlay, { "data-component-name": "Search/SearchDialog", ref: modalRef, onClick: handleOverlayClick, className: concatClassNames("overlay", className) }, /* @__PURE__ */ React124.createElement(SearchDialogWrapper, { className: "scroll-lock", role: "dialog" }, /* @__PURE__ */ React124.createElement(SearchDialogHeader, null, product && /* @__PURE__ */ React124.createElement(React124.Fragment, null, /* @__PURE__ */ React124.createElement(SearchProductTag, { color: "product" }, product.name, /* @__PURE__ */ React124.createElement(CloseIcon, { onClick: () => setProduct(void 0), color: "--icon-color-additional" }))), /* @__PURE__ */ React124.createElement(SearchInput, { value: query, onChange: setQuery, placeholder: mode === "search" ? translate("search.label", "Search docs...") : translate("search.ai.label", "Ask a follow up question"), isLoading: isSearchLoading, showReturnButton: mode === "ai-dialog", onReturn: () => setMode("search"), onSubmit: mode === "ai-dialog" ? () => {
    setQuery("");
    aiSearch.askQuestion(query);
  } : void 0, "data-translation-key": mode === "search" ? "search.label" : "search.ai.label" }), showHeaderButtons && /* @__PURE__ */ React124.createElement(SearchHeaderButtons, null, showAiSearchButton ? /* @__PURE__ */ React124.createElement(SearchAiButton, { disabled: !query.trim(), icon: /* @__PURE__ */ React124.createElement(AiStarsIcon, null), onClick: () => {
    setMode("ai-dialog");
    setQuery("");
    aiSearch.askQuestion(query);
  } }, translate("search.aiButton", "Search with AI")) : null, showSearchFilterButton && /* @__PURE__ */ React124.createElement(SearchFilterToggleButton, { icon: /* @__PURE__ */ React124.createElement(SettingsIcon, null), onClick: onFilterToggle }))), /* @__PURE__ */ React124.createElement(SearchDialogBody, null, mode === "search" ? /* @__PURE__ */ React124.createElement(React124.Fragment, null, /* @__PURE__ */ React124.createElement(SearchDialogBodyMainView, null, /* @__PURE__ */ React124.createElement(SearchGroups, { facets, searchFilter: filter2, onFilterChange, onTopFacetsReset }), showResults ? items && Object.keys(items).some((key) => items[key]?.length) ? Object.keys(items).map((key) => items[key]?.length ? /* @__PURE__ */ React124.createElement(Fragment2, { key }, /* @__PURE__ */ React124.createElement(SearchGroupTitle, null, key), items[key]?.map(mapItem), showLoadMore(key, items[key]?.length || 0) && /* @__PURE__ */ React124.createElement(SearchGroupFooter, { "data-translation-key": "search.showMore", onClick: () => setLoadMore({
    groupKey: key,
    offset: items[key]?.length || 0
  }) }, translate("search.showMore", "Show more"))) : null) : isSearchLoading ? /* @__PURE__ */ React124.createElement(SearchMessage, null, /* @__PURE__ */ React124.createElement(SpinnerLoader, { size: "26px", color: "var(--search-input-icon-color)" }), translate("search.loading", "Loading...")) : /* @__PURE__ */ React124.createElement(SearchMessage, { "data-translation-key": "search.noResults" }, /* @__PURE__ */ React124.createElement("b", null, translate("search.noResults.title", "No results"))) : /* @__PURE__ */ React124.createElement(React124.Fragment, null, /* @__PURE__ */ React124.createElement(SearchRecent, { onSelect: setQuery }), /* @__PURE__ */ React124.createElement(SearchSuggestedPages, null))), advancedSearch && mode === "search" && isFilterOpen && /* @__PURE__ */ React124.createElement(SearchDialogBodyFilterView, null, /* @__PURE__ */ React124.createElement(SearchFilter, { facets, filter: filter2, query, onFilterChange, onFilterReset, onFacetReset }))) : /* @__PURE__ */ React124.createElement(SearchAiResponse, { question: aiSearch.question, isGeneratingResponse: aiSearch.isGeneratingResponse, response: aiSearch.response, resources: aiSearch.resources })), mode === "search" && /* @__PURE__ */ React124.createElement(SearchDialogFooter, null, /* @__PURE__ */ React124.createElement(SearchShortcuts, null, /* @__PURE__ */ React124.createElement(SearchShortcut, { "data-translation-key": "search.keys.navigate", combination: "Tab", text: translate("search.keys.navigate", "to navigate") }), /* @__PURE__ */ React124.createElement(SearchShortcut, { "data-translation-key": "search.keys.select", combination: "\u23CE", text: translate("search.keys.select", "to select") }), /* @__PURE__ */ React124.createElement(SearchShortcut, { "data-translation-key": "search.keys.exit", combination: "Esc", text: translate("search.keys.exit", "to exit") })), isSearchLoading && /* @__PURE__ */ React124.createElement(SearchLoading, null, /* @__PURE__ */ React124.createElement(SpinnerLoader, { size: "16px", color: "var(--search-input-icon-color)" }), translate("search.loading", "Loading...")), /* @__PURE__ */ React124.createElement(SearchCancelButton, { "data-translation-key": "search.cancel", variant: "secondary", size: "small", onClick: onClose }, translate("search.cancel", "Cancel")))));
}
var SearchOverlay, SearchDialogWrapper, SearchDialogHeader, SearchDialogBody, SearchDialogBodyMainView, SearchDialogBodyFilterView, SearchDialogFooter, SearchShortcuts, SearchMessage, SearchProductTag, SearchFilterToggleButton, SearchAiButton, SearchCancelButton, SearchGroupTitle, SearchGroupFooter, SearchLoading, SearchHeaderButtons;
var init_SearchDialog = __esm({
  "node_modules/@redocly/theme/src/components/Search/SearchDialog.tsx"() {
    init_styled_components_esm();
    init_SearchInput();
    init_SearchShortcut();
    init_SearchAiResponse();
    init_Button();
    init_utils();
    init_SearchItem();
    init_SearchRecent();
    init_SearchSuggestedPages();
    init_hooks();
    init_Tag();
    init_CloseIcon();
    init_SearchFilter();
    init_SearchGroups();
    init_SpinnerLoader();
    init_SettingsIcon();
    init_AiStarsIcon();
    SearchOverlay = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchOverlay",
      componentId: "sc-1xmoql7-0"
    })(["position:fixed;display:flex;align-items:center;justify-content:center;top:0;left:0;width:100vw;height:100vh;background:var(--bg-color-modal-overlay);z-index:var(--z-index-overlay);"]);
    SearchDialogWrapper = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchDialogWrapper",
      componentId: "sc-1xmoql7-1"
    })(["display:flex;flex-direction:column;overflow:auto;width:100vw;height:100vh;background:var(--search-modal-bg-color);box-shadow:var(--search-modal-box-shadow);border-radius:0;@media screen and (max-width:", "){width:100vw !important;height:100vh !important;}@media screen and (min-width:", "){border-radius:var(--search-modal-border-radius);width:var(--search-modal-width);min-height:var(--search-modal-min-height);min-width:var(--search-modal-min-width);max-width:95vw;max-height:95vh;height:var(--search-modal-min-height);resize:both;}"], breakpoints.small, breakpoints.small);
    SearchDialogHeader = styled_components_esm_default.header.withConfig({
      displayName: "SearchDialog__SearchDialogHeader",
      componentId: "sc-1xmoql7-2"
    })(["display:flex;align-items:center;border-bottom:var(--search-modal-border);background-color:var(--search-modal-header-bg-color);padding:var(--search-modal-header-padding);"]);
    SearchDialogBody = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchDialogBody",
      componentId: "sc-1xmoql7-3"
    })(["display:flex;flex-direction:row;flex-grow:1;overflow:hidden;"]);
    SearchDialogBodyMainView = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchDialogBodyMainView",
      componentId: "sc-1xmoql7-4"
    })(["flex:2;flex-grow:2;overflow-y:scroll;overscroll-behavior:contain;border-right:var(--search-modal-border);"]);
    SearchDialogBodyFilterView = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchDialogBodyFilterView",
      componentId: "sc-1xmoql7-5"
    })(["overflow:scroll;"]);
    SearchDialogFooter = styled_components_esm_default.footer.withConfig({
      displayName: "SearchDialog__SearchDialogFooter",
      componentId: "sc-1xmoql7-6"
    })(["display:flex;gap:var(--search-modal-footer-gap);padding:var(--search-modal-footer-padding);border-top:var(--search-modal-border);"]);
    SearchShortcuts = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchShortcuts",
      componentId: "sc-1xmoql7-7"
    })(["display:none;justify-content:flex-start;align-items:center;gap:var(--search-shortcuts-gap);@media screen and (min-width:", "){display:flex;}"], breakpoints.small);
    SearchMessage = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchMessage",
      componentId: "sc-1xmoql7-8"
    })(["display:flex;height:40%;justify-content:center;align-items:center;flex-direction:column;font-size:var(--search-message-font-size);font-weight:var(--search-message-font-weight);line-height:var(--search-message-line-height);color:var(--search-message-text-color);gap:var(--search-message-gap);"]);
    SearchProductTag = styled_components_esm_default(Tag).withConfig({
      displayName: "SearchDialog__SearchProductTag",
      componentId: "sc-1xmoql7-9"
    })(["--tag-border-radius:var(--border-radius);border:none;margin:var(--spacing-xs) var(--spacing-sm) !important;"]);
    SearchFilterToggleButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchDialog__SearchFilterToggleButton",
      componentId: "sc-1xmoql7-10"
    })(["margin-left:0;"]);
    SearchAiButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchDialog__SearchAiButton",
      componentId: "sc-1xmoql7-11"
    })(["margin-left:0;"]);
    SearchCancelButton = styled_components_esm_default(Button).withConfig({
      displayName: "SearchDialog__SearchCancelButton",
      componentId: "sc-1xmoql7-12"
    })(["width:100%;@media screen and (min-width:", "){display:none;}"], breakpoints.small);
    SearchGroupTitle = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchGroupTitle",
      componentId: "sc-1xmoql7-13"
    })(["border-bottom:var(--search-modal-border);padding:var(--search-group-title-padding);background-color:var(--search-group-title-bg-color);"]);
    SearchGroupFooter = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchGroupFooter",
      componentId: "sc-1xmoql7-14"
    })(["display:flex;justify-content:center;padding:var(--search-group-footer-padding);color:var(--search-group-footer-text-color);cursor:pointer;"]);
    SearchLoading = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchLoading",
      componentId: "sc-1xmoql7-15"
    })(["display:none;align-items:center;gap:var(--spacing-xs);@media screen and (min-width:", "){display:flex;}"], breakpoints.small);
    SearchHeaderButtons = styled_components_esm_default.div.withConfig({
      displayName: "SearchDialog__SearchHeaderButtons",
      componentId: "sc-1xmoql7-16"
    })(["display:flex;gap:var(--search-header-buttons-gap);padding-left:var(--search-header-buttons-padding-left);border-left:var(--search-header-buttons-border-left);"]);
  }
});

// node_modules/@redocly/theme/src/components/Search/Search.tsx
import React125 from "react";
function Search({
  className
}) {
  const {
    isOpen,
    onOpen,
    onClose
  } = useSearchDialog();
  return /* @__PURE__ */ React125.createElement(SearchWrapper, { "data-component-name": "Search/Search", className }, /* @__PURE__ */ React125.createElement(SearchTrigger, { onClick: onOpen }), isOpen && /* @__PURE__ */ React125.createElement(SearchDialog, { onClose }));
}
var SearchWrapper;
var init_Search = __esm({
  "node_modules/@redocly/theme/src/components/Search/Search.tsx"() {
    init_styled_components_esm();
    init_SearchTrigger();
    init_SearchDialog();
    init_hooks();
    SearchWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Search__SearchWrapper",
      componentId: "sc-12iab3f-0"
    })(["margin-left:auto;"]);
  }
});

// node_modules/@redocly/theme/src/icons/GridIcon/GridIcon.tsx
import React126 from "react";
var Icon62, GridIcon;
var init_GridIcon = __esm({
  "node_modules/@redocly/theme/src/icons/GridIcon/GridIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon62 = (props) => /* @__PURE__ */ React126.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React126.createElement("path", { d: "M6 2H3C2.73478 2 2.48043 2.10536 2.29289 2.29289C2.10536 2.48043 2 2.73478 2 3V6C2 6.26522 2.10536 6.51957 2.29289 6.70711C2.48043 6.89464 2.73478 7 3 7H6C6.26522 7 6.51957 6.89464 6.70711 6.70711C6.89464 6.51957 7 6.26522 7 6V3C7 2.73478 6.89464 2.48043 6.70711 2.29289C6.51957 2.10536 6.26522 2 6 2ZM6 6H3V3H6V6Z", fill: "#1A1C21" }), /* @__PURE__ */ React126.createElement("path", { d: "M13 2H10C9.73478 2 9.48043 2.10536 9.29289 2.29289C9.10536 2.48043 9 2.73478 9 3V6C9 6.26522 9.10536 6.51957 9.29289 6.70711C9.48043 6.89464 9.73478 7 10 7H13C13.2652 7 13.5196 6.89464 13.7071 6.70711C13.8946 6.51957 14 6.26522 14 6V3C14 2.73478 13.8946 2.48043 13.7071 2.29289C13.5196 2.10536 13.2652 2 13 2ZM13 6H10V3H13V6Z", fill: "#1A1C21" }), /* @__PURE__ */ React126.createElement("path", { d: "M6 9H3C2.73478 9 2.48043 9.10536 2.29289 9.29289C2.10536 9.48043 2 9.73478 2 10V13C2 13.2652 2.10536 13.5196 2.29289 13.7071C2.48043 13.8946 2.73478 14 3 14H6C6.26522 14 6.51957 13.8946 6.70711 13.7071C6.89464 13.5196 7 13.2652 7 13V10C7 9.73478 6.89464 9.48043 6.70711 9.29289C6.51957 9.10536 6.26522 9 6 9ZM6 13H3V10H6V13Z", fill: "#1A1C21" }), /* @__PURE__ */ React126.createElement("path", { d: "M13 9H10C9.73478 9 9.48043 9.10536 9.29289 9.29289C9.10536 9.48043 9 9.73478 9 10V13C9 13.2652 9.10536 13.5196 9.29289 13.7071C9.48043 13.8946 9.73478 14 10 14H13C13.2652 14 13.5196 13.8946 13.7071 13.7071C13.8946 13.5196 14 13.2652 14 13V10C14 9.73478 13.8946 9.48043 13.7071 9.29289C13.5196 9.10536 13.2652 9 13 9ZM13 13H10V10H13V13Z", fill: "#1A1C21" }));
    GridIcon = styled_components_esm_default(Icon62).attrs(() => ({
      "data-component-name": "icons/UserIcon/UserIcon"
    })).withConfig({
      displayName: "GridIcon",
      componentId: "sc-1h3mhao-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/UserInfoMenuItem.tsx
import React127 from "react";
function UserInfoMenuItem({
  name,
  picture,
  email,
  className
}) {
  return /* @__PURE__ */ React127.createElement(UserInfoMenuItemWrapper, { className, role: "none" }, /* @__PURE__ */ React127.createElement(React127.Fragment, null, /* @__PURE__ */ React127.createElement(UserAvatar, { width: "var(--user-menu-avatar-width)", height: "var(--user-menu-avatar-height)", picture }), /* @__PURE__ */ React127.createElement(UserInfoDetailsWrapper, null, name !== email ? /* @__PURE__ */ React127.createElement(UserName, null, name) : null, email ? /* @__PURE__ */ React127.createElement(Email, { title: email }, email) : null)));
}
var UserInfoMenuItemWrapper, UserName, Email, UserInfoDetailsWrapper;
var init_UserInfoMenuItem = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/UserInfoMenuItem.tsx"() {
    init_styled_components_esm();
    init_DropdownMenuItem();
    init_UserAvatar();
    UserInfoMenuItemWrapper = styled_components_esm_default(DropdownMenuItem).attrs({
      "data-component-name": "UserMenu/UserInfoMenuItem"
    }).withConfig({
      displayName: "UserInfoMenuItem__UserInfoMenuItemWrapper",
      componentId: "sc-1t6fmm6-0"
    })(["display:flex;flex-direction:column;align-items:center;width:100%;gap:var(--user-menu-user-info-items-gap);cursor:default;--dropdown-menu-item-padding-vertical:var(--user-menu-user-details-padding-vertical);--dropdown-menu-item-padding-horizontal:var(--user-menu-user-details-padding-horizontal);--dropdown-menu-item-bg-color:var(--user-menu-user-details-bg-color);--dropdown-menu-item-bg-color-hover:var(--user-menu-user-details-bg-color);"]);
    UserName = styled_components_esm_default.div.withConfig({
      displayName: "UserInfoMenuItem__UserName",
      componentId: "sc-1t6fmm6-1"
    })(["font-weight:var(--user-menu-name-font-weight);font-size:var(--user-menu-name-font-size);line-height:var(--user-menu-name-line-height);"]);
    Email = styled_components_esm_default.div.withConfig({
      displayName: "UserInfoMenuItem__Email",
      componentId: "sc-1t6fmm6-2"
    })(["font-size:var(--user-menu-email-font-size);line-height:var(--user-menu-email-line-height);overflow:hidden;text-overflow:ellipsis;max-width:100%;min-width:0;"]);
    UserInfoDetailsWrapper = styled_components_esm_default.div.withConfig({
      displayName: "UserInfoMenuItem__UserInfoDetailsWrapper",
      componentId: "sc-1t6fmm6-3"
    })(["display:flex;flex-direction:column;align-items:center;width:100%;"]);
  }
});

// node_modules/@redocly/theme/src/components/UserMenu/UserMenu.tsx
import React128 from "react";
function UserMenu({
  className
}) {
  const {
    userMenu: userMenu2
  } = useThemeConfig();
  const {
    useTranslate,
    useUserMenu
  } = useThemeHooks();
  const {
    userData,
    hasDeveloperOnboarding,
    loginUrl
  } = useUserMenu();
  const {
    translate
  } = useTranslate();
  if (!userData?.isAuthenticated) {
    if (loginUrl && !userMenu2?.hideLoginButton) {
      return /* @__PURE__ */ React128.createElement(UserMenuWrapper, { "data-component-name": "UserMenu/UserMenu" }, /* @__PURE__ */ React128.createElement(LoginButton, { href: loginUrl, "data-testid": "login-btn" }));
    } else {
      return null;
    }
  }
  const devOnboardingMenuItem = hasDeveloperOnboarding ? [/* @__PURE__ */ React128.createElement(DropdownMenuItem, { key: "my-apps", to: "/apps", "data-translation-key": "userMenu.devOnboardingLabel", prefix: /* @__PURE__ */ React128.createElement(GridIcon, null) }, translate("userMenu.devOnboardingLabel"))] : [];
  const menuItems = userMenu2?.["menu"] || [];
  const customItems = menuItems.map((item2) => /* @__PURE__ */ React128.createElement(DropdownMenuItem, { key: item2.label, external: item2.external, to: item2.link || "" }, item2.label));
  const items = [/* @__PURE__ */ React128.createElement(UserInfoMenuItem, { name: userData.name, picture: userData.picture, email: userData.email, key: "userinfo" }), /* @__PURE__ */ React128.createElement(DropdownMenuItem, { separatorLine: true, separator: true, key: "separator" }), ...devOnboardingMenuItem, ...customItems, /* @__PURE__ */ React128.createElement(LogoutMenuItem, { key: "logout" })];
  return /* @__PURE__ */ React128.createElement(UserMenuWrapper, { "data-component-name": "UserMenu/UserMenu" }, /* @__PURE__ */ React128.createElement(StyledDropdown, { className, alignment: "end", trigger: /* @__PURE__ */ React128.createElement(UserMenuTrigger, { role: "button" }, /* @__PURE__ */ React128.createElement(UserAvatar, { picture: userData.picture })) }, /* @__PURE__ */ React128.createElement(DropdownMenu, null, items)));
}
var UserMenuWrapper, UserMenuTrigger, StyledDropdown;
var init_UserMenu = __esm({
  "node_modules/@redocly/theme/src/components/UserMenu/UserMenu.tsx"() {
    init_styled_components_esm();
    init_DropdownMenu();
    init_DropdownMenuItem();
    init_GridIcon();
    init_hooks();
    init_LoginButton();
    init_UserAvatar();
    init_UserInfoMenuItem();
    init_Dropdown();
    init_LogoutMenuItem();
    init_utils();
    UserMenuWrapper = styled_components_esm_default.div.withConfig({
      displayName: "UserMenu__UserMenuWrapper",
      componentId: "sc-2zsrdm-0"
    })(["display:none;@media screen and (min-width:", "){display:block;}"], breakpoints.medium);
    UserMenuTrigger = styled_components_esm_default.div.attrs(() => ({
      "data-testid": "user-menu-button"
    })).withConfig({
      displayName: "UserMenu__UserMenuTrigger",
      componentId: "sc-2zsrdm-1"
    })(["display:flex;align-items:center;cursor:pointer;width:auto;padding:0;"]);
    StyledDropdown = styled_components_esm_default(Dropdown).attrs(() => ({
      dataAttributes: {
        "data-testid": "user-menu-dropdown"
      }
    })).withConfig({
      displayName: "UserMenu__StyledDropdown",
      componentId: "sc-2zsrdm-2"
    })(["--dropdown-menu-font-size:var(--user-menu-dropdown-font-size);--dropdown-menu-font-weight:var(--user-menu-dropdown-font-weight);--dropdown-menu-line-height:var(--user-menu-dropdown-line-height);--dropdown-menu-text-color:var(--user-menu-dropdown-text-color);--dropdown-menu-min-width:var(--user-menu-dropdown-min-width);--dropdown-menu-max-width:var(--user-menu-dropdown-max-width);--dropdown-menu-max-height:var(--user-menu-dropdown-max-height);--dropdown-menu-padding:var(--user-menu-dropdown-padding);--dropdown-menu-border-radius:var(--user-menu-dropdown-border-radius);--dropdown-menu-box-shadow:var(--user-menu-dropdown-box-shadow);--dropdown-menu-border-color:var(--user-menu-dropdown-border-color);--dropdown-menu-bg-color:var(--user-menu-dropdown-bg-color);--dropdown-menu-item-padding-horizontal:var(--user-menu-dropdown-item-padding-horizontal);--dropdown-menu-item-padding-vertical:var(--user-menu-dropdown-item-padding-vertical);--dropdown-menu-item-separator-padding-top:var(--user-menu-dropdown-item-separator-padding-top);--dropdown-menu-item-separator-padding-bottom:var( --user-menu-dropdown-item-separator-padding-bottom );--dropdown-menu-item-border-radius:var(--user-menu-dropdown-item-border-radius);--dropdown-menu-item-bg-color-active:var(--user-menu-dropdown-item-bg-color-active);--dropdown-menu-item-bg-color-hover:var(--user-menu-dropdown-item-bg-color-hover);--dropdown-menu-item-bg-color-disabled:var(--user-menu-dropdown-item-bg-color-disabled);--dropdown-menu-item-separator-border-color:var( --user-menu-dropdown-item-separator-border-color );--dropdown-menu-item-color-dangerous:var(--user-menu-dropdown-item-color-dangerous);--dropdown-menu-item-color-disabled:var(--user-menu-dropdown-item-color-disabled);--dropdown-menu-item-color-active:var(--user-menu-dropdown-item-color-active);--dropdown-menu-item-color-hover:var(--user-menu-dropdown-item-color-hover);"]);
  }
});

// node_modules/@redocly/theme/src/components/Product/ProductPicker.tsx
import React129 from "react";
function ProductPicker() {
  const {
    currentProduct,
    products,
    setProduct
  } = useProductPicker();
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const productComponents = products.map((product) => ({
    content: /* @__PURE__ */ React129.createElement(Product, { product }),
    suffix: currentProduct === product && /* @__PURE__ */ React129.createElement(CheckmarkIcon, null),
    onAction: () => {
      setProduct(product);
    },
    active: product === currentProduct
  }));
  return products.length ? /* @__PURE__ */ React129.createElement(ProductDropdown, { withArrow: true, trigger: /* @__PURE__ */ React129.createElement(Button, { variant: "ghost" }, currentProduct ? /* @__PURE__ */ React129.createElement(Product, { product: currentProduct }) : /* @__PURE__ */ React129.createElement("span", { "data-translation-key": "navbar.products" }, translate("navbar.products", "Products"))), triggerEvent: "hover" }, /* @__PURE__ */ React129.createElement(DropdownMenu, { items: productComponents })) : null;
}
var ProductDropdown;
var init_ProductPicker = __esm({
  "node_modules/@redocly/theme/src/components/Product/ProductPicker.tsx"() {
    init_styled_components_esm();
    init_DropdownMenu();
    init_Dropdown();
    init_Button();
    init_utils();
    init_hooks();
    init_Product();
    init_CheckmarkIcon();
    ProductDropdown = styled_components_esm_default(Dropdown).attrs(() => ({
      dataAttributes: {
        "data-component-name": "Product/ProductPicker"
      }
    })).withConfig({
      displayName: "ProductPicker__ProductDropdown",
      componentId: "sc-1d565c3-0"
    })(["display:none;@media screen and (min-width:", "){display:block;}--dropdown-menu-item-justify-content:space-between;--dropdown-menu-font-size:var(--product-picker-dropdown-font-size);--dropdown-menu-font-weight:var(--product-picker-dropdown-font-weight);--dropdown-menu-line-height:var(--product-picker-dropdown-line-height);--dropdown-menu-text-color:var(--product-picker-dropdown-text-color);--dropdown-menu-min-width:var(--product-picker-dropdown-min-width);--dropdown-menu-max-width:var(--product-picker-dropdown-max-width);--dropdown-menu-max-height:var(--product-picker-dropdown-max-height);--dropdown-menu-padding:var(--product-picker-dropdown-padding);--dropdown-menu-border-radius:var(--product-picker-dropdown-border-radius);--dropdown-menu-box-shadow:var(--product-picker-dropdown-box-shadow);--dropdown-menu-border-color:var(--product-picker-dropdow--border-color);--dropdown-menu-bg-color:var(--product-picker-dropdown-bg-color);--dropdown-menu-item-padding-horizontal:var(--product-picker-dropdown-item-padding-horizontal);--dropdown-menu-item-padding-vertical:var(--product-picker-dropdown-item-padding-vertical);--dropdown-menu-item-separator-padding-top:var( --product-picker-dropdown-item-separator-padding-top );--dropdown-menu-item-separator-padding-bottom:var( --product-picker-dropdown-item-separator-padding-bottom );--dropdown-menu-item-border-radius:var(--product-picker-dropdown-item-border-radius);--dropdown-menu-item-bg-color-active:var(--product-picker-dropdown-item-bg-color-active);--dropdown-menu-item-bg-color-hover:var(--product-picker-dropdown-item-bg-color-hover);--dropdown-menu-item-bg-color-disabled:var(--product-picker-dropdown-item-bg-color-disabled);--dropdown-menu-item-separator-border-color:var( --product-picker-dropdown-item-separator-border-color );--dropdown-menu-item-color-dangerous:var(--product-picker-dropdown-item-color-dangerous);--dropdown-menu-item-color-disabled:var(--product-picker-dropdown-item-color-disabled);--dropdown-menu-item-color-active:var(--product-picker-dropdown-item-color-active);--dropdown-menu-item-color-hover:var(--product-picker-dropdown-item-color-hover);"], breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/icons/MenuIcon/MenuIcon.tsx
import React130 from "react";
var Icon63, MenuIcon;
var init_MenuIcon = __esm({
  "node_modules/@redocly/theme/src/icons/MenuIcon/MenuIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon63 = (props) => /* @__PURE__ */ React130.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React130.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M1.5 3.5H14.5V4.5H1.5V3.5ZM1.5 7.5H14.5V8.5H1.5V7.5ZM1.5 11.5H14.5V12.5H1.5V11.5Z" }));
    MenuIcon = styled_components_esm_default(Icon63).attrs(() => ({
      "data-component-name": "icons/MenuIcon/MenuIcon"
    })).withConfig({
      displayName: "MenuIcon",
      componentId: "sc-w40w4q-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/Navbar/Navbar.tsx
import React131 from "react";
function Navbar({
  className
}) {
  const {
    isOpen,
    openMobileMenu,
    closeMobileMenu
  } = useMobileMenu(false);
  const themeConfig = useThemeConfig();
  const {
    useL10n,
    useTelemetry
  } = useThemeHooks();
  const {
    changeLanguage
  } = useL10n();
  const telemetry = useTelemetry();
  const menu2 = themeConfig.navbar?.items;
  const {
    search: searchSettings,
    navbar: navbar2,
    userMenu: userMenuSettings,
    logo: logo2
  } = themeConfig;
  if (navbar2?.hide) {
    return null;
  }
  const hideSearch = searchSettings?.hide || searchSettings?.placement && searchSettings?.placement !== "navbar";
  const hideUserMenu = userMenuSettings?.hide;
  return /* @__PURE__ */ React131.createElement(NavbarWrapper, { "data-component-name": "Navbar/Navbar", className }, isOpen && /* @__PURE__ */ React131.createElement(MenuMobile, { hideUserProfile: !!hideUserMenu }), /* @__PURE__ */ React131.createElement(NavbarRow, null, logo2 && /* @__PURE__ */ React131.createElement(NavbarLogo, { config: logo2 }), /* @__PURE__ */ React131.createElement(ProductPicker, null), menu2 && /* @__PURE__ */ React131.createElement(NavbarMenu, { menuItems: menu2 }), hideSearch ? null : /* @__PURE__ */ React131.createElement(Search, null), /* @__PURE__ */ React131.createElement(LanguagePicker, { onChangeLanguage: changeLanguage, onlyIcon: true, alignment: "end" }), /* @__PURE__ */ React131.createElement(ColorModeSwitcher, null), /* @__PURE__ */ React131.createElement(MobileMenuButton, { variant: "text", "data-testid": "mobile-menu-button", onClick: isOpen ? () => {
    closeMobileMenu();
    telemetry.send("mobile_menu_button_close_clicked", {});
  } : () => {
    openMobileMenu();
    telemetry.send("mobile_menu_button_open_clicked", {});
  }, icon: isOpen ? /* @__PURE__ */ React131.createElement(CloseIcon, null) : /* @__PURE__ */ React131.createElement(MenuIcon, null) }), hideUserMenu ? null : /* @__PURE__ */ React131.createElement(UserMenu, null)));
}
var NavbarWrapper, NavbarRow, MobileMenuButton;
var init_Navbar = __esm({
  "node_modules/@redocly/theme/src/components/Navbar/Navbar.tsx"() {
    init_styled_components_esm();
    init_utils();
    init_hooks();
    init_NavbarLogo();
    init_NavbarMenu();
    init_MenuMobile();
    init_ColorModeSwitcher();
    init_Search();
    init_UserMenu();
    init_LanguagePicker();
    init_ProductPicker();
    init_Button();
    init_MenuIcon();
    init_CloseIcon();
    NavbarWrapper = styled_components_esm_default.nav.withConfig({
      displayName: "Navbar__NavbarWrapper",
      componentId: "sc-14w3yh2-0"
    })(["--text-color:var(--navbar-text-color);position:sticky;display:flex;top:0;height:var(--navbar-height);flex-shrink:0;align-items:center;box-sizing:border-box;padding:var(--navbar-padding);border:var(--navbar-border);font-size:var(--navbar-font-size);font-family:var(--navbar-font-family);z-index:var(--z-index-raised);background:var(--navbar-bg-color);@media print{background:transparent;display:none;> :not(a,img){display:none !important;}img{padding:0;margin:0;}}"]);
    NavbarRow = styled_components_esm_default.div.withConfig({
      displayName: "Navbar__NavbarRow",
      componentId: "sc-14w3yh2-1"
    })(["display:flex;align-items:center;justify-content:space-between;width:100%;gap:8px;max-width:var(--navbar-container-max-width);@media screen and (min-width:", "){max-width:var(--container-max-width);margin-left:auto;margin-right:auto;}"], breakpoints.max);
    MobileMenuButton = styled_components_esm_default(Button).withConfig({
      displayName: "Navbar__MobileMenuButton",
      componentId: "sc-14w3yh2-2"
    })(["margin-left:0px !important;@media screen and (min-width:", "){display:none;}"], breakpoints.medium);
  }
});

// node_modules/@redocly/theme/src/components/Footer/FooterItem.tsx
import React132 from "react";
function FooterItem({
  item: item2,
  iconsOnly
}) {
  const {
    useTranslate,
    useTelemetry
  } = useThemeHooks();
  const telemetry = useTelemetry();
  const {
    translate
  } = useTranslate();
  if (item2.type === "error") {
    return null;
  }
  const hasIcon = Boolean(item2.icon || item2.srcSet);
  const iconWithoutLabel = Boolean(item2.label === item2.link && hasIcon);
  return /* @__PURE__ */ React132.createElement(FooterItemWrapper, { "data-component-name": "Footer/FooterItem", iconsOnly, item: item2 }, item2.type === "separator" ? /* @__PURE__ */ React132.createElement(FooterSeparator, { "data-translation-key": item2.labelTranslationKey }, translate(item2.labelTranslationKey, item2.label)) : /* @__PURE__ */ React132.createElement(FooterLink, { to: item2.link, external: item2.external, target: item2.target, "data-testid": item2.label, onClick: () => telemetry.send("footer_item_clicked", {}), "data-translation-key": item2.labelTranslationKey }, hasIcon ? /* @__PURE__ */ React132.createElement(FooterLinkIcon, { iconsOnly }, /* @__PURE__ */ React132.createElement(Image2, { src: item2.icon, srcSet: item2.srcSet })) : null, !iconWithoutLabel ? translate(item2.labelTranslationKey, item2.label) : null, item2.external ? /* @__PURE__ */ React132.createElement(LaunchIcon, { size: "10px" }) : null));
}
var FooterSeparator, FooterLinkIcon, FooterLink, FooterItemWrapper;
var init_FooterItem = __esm({
  "node_modules/@redocly/theme/src/components/Footer/FooterItem.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_LaunchIcon();
    init_Link();
    init_Image();
    init_utils();
    FooterSeparator = styled_components_esm_default.div.withConfig({
      displayName: "FooterItem__FooterSeparator",
      componentId: "sc-weodp0-0"
    })(["text-transform:uppercase;font-size:var(--footer-separator-item-font-size);margin:var(--footer-separator-item-margin);opacity:var(--footer-separator-item-opacity);"]);
    FooterLinkIcon = styled_components_esm_default.div.withConfig({
      displayName: "FooterItem__FooterLinkIcon",
      componentId: "sc-weodp0-1"
    })(["display:inline-flex;width:var(--footer-item-icon-width);height:var(--footer-item-icon-height);margin-right:", ";vertical-align:middle;border:1px solid var(--footer-item-icon-border-color);border-radius:var(--footer-item-icon-border-radius);padding:var(--footer-item-icon-padding);"], ({
      iconsOnly
    }) => iconsOnly ? "0" : "var(--footer-item-icon-margin-right)");
    FooterLink = styled_components_esm_default(Link).withConfig({
      displayName: "FooterItem__FooterLink",
      componentId: "sc-weodp0-2"
    })(["color:var(--footer-link-text-color);text-decoration:none;text-align:center;&:hover{color:var(--footer-link-color-hover);}@media screen and (min-width:", "){text-align:left;}"], breakpoints.small);
    FooterItemWrapper = styled_components_esm_default.div.withConfig({
      displayName: "FooterItem__FooterItemWrapper",
      componentId: "sc-weodp0-3"
    })(["margin:", ";"], ({
      iconsOnly,
      item: item2
    }) => iconsOnly ? "0 var(--footer-item-icon-margin-right) 0 0;" : item2.type === "link" ? "var(--footer-link-padding-vertical) var(--footer-link-padding-horizontal);" : "0");
  }
});

// node_modules/@redocly/theme/src/components/Footer/FooterCopyright.tsx
import React133 from "react";
function FooterCopyright({
  copyrightText = "",
  className
}) {
  const {
    useTranslate,
    useL10n
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    changeLanguage
  } = useL10n();
  return copyrightText ? /* @__PURE__ */ React133.createElement(FooterCopyrightWrapper, { className, "data-component-name": "Footer/FooterCopyright", "data-translation-key": "footer.copyrightText" }, /* @__PURE__ */ React133.createElement(FooterCopyrightLabel, { "data-translation-key": "footer.copyrightText" }, translate("footer.copyrightText", copyrightText)), /* @__PURE__ */ React133.createElement(LanguagePicker, { onChangeLanguage: changeLanguage, placement: "top", alignment: "end" })) : null;
}
var FooterCopyrightWrapper, FooterCopyrightLabel;
var init_FooterCopyright = __esm({
  "node_modules/@redocly/theme/src/components/Footer/FooterCopyright.tsx"() {
    init_styled_components_esm();
    init_hooks();
    init_LanguagePicker();
    FooterCopyrightWrapper = styled_components_esm_default.section.withConfig({
      displayName: "FooterCopyright__FooterCopyrightWrapper",
      componentId: "sc-5k4gqv-0"
    })(["display:flex;justify-content:space-between;align-items:center;font-size:var(--footer-copyright-font-size);background-color:var(--footer-bg-color);color:var(--footer-text-color);text-align:var(--footer-copyright-text-align);gap:var(--spacing-xs);span{max-width:var(--footer-container-max-width);}"]);
    FooterCopyrightLabel = styled_components_esm_default.div.withConfig({
      displayName: "FooterCopyright__FooterCopyrightLabel",
      componentId: "sc-5k4gqv-1"
    })(["padding:var(--footer-link-padding-vertical) var(--footer-link-padding-horizontal);"]);
  }
});

// node_modules/@redocly/theme/src/components/Footer/FooterColumn.tsx
import React134 from "react";
function FooterColumn({
  column,
  className
}) {
  const {
    useTranslate
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    items = []
  } = column;
  const iconsOnly = items.every((item2) => item2.label === item2.link && (item2.icon || item2.srcSet));
  const label = translate(column.labelTranslationKey, column.label);
  return /* @__PURE__ */ React134.createElement(FooterColumnWrapper, { "data-component-name": "Footer/FooterColumn", className }, /* @__PURE__ */ React134.createElement(FooterColumnTitle, null, isNavLinkItem(column) ? /* @__PURE__ */ React134.createElement(Link, { to: column.link, external: column.external, target: column.target }, label) : label), /* @__PURE__ */ React134.createElement(FooterColumnItems, { iconsOnly }, items?.map((columnItem, columnItemIndex) => /* @__PURE__ */ React134.createElement(FooterItem, { item: columnItem, iconsOnly, key: columnItemIndex }))));
}
var FooterColumnWrapper, FooterColumnTitle, FooterColumnItems;
var init_FooterColumn = __esm({
  "node_modules/@redocly/theme/src/components/Footer/FooterColumn.tsx"() {
    init_styled_components_esm();
    init_FooterItem();
    init_utils();
    init_hooks();
    init_Link();
    FooterColumnWrapper = styled_components_esm_default.div.withConfig({
      displayName: "FooterColumn__FooterColumnWrapper",
      componentId: "sc-85602l-0"
    })(["display:flex;flex:1;position:relative;flex-direction:column;text-align:center;word-break:break-word;min-width:var(--footer-column-min-width);align-content:center;flex-wrap:wrap;gap:var(--footer-column-title-gap);@media screen and (min-width:", "){text-align:left;&:not(:last-child){&::after{content:'';position:absolute;display:block;width:1px;height:100%;background-color:var(--footer-column-divider-color);right:calc(0px - var(--footer-column-gap) / 2);}}}"], breakpoints.small);
    FooterColumnTitle = styled_components_esm_default.div.withConfig({
      displayName: "FooterColumn__FooterColumnTitle",
      componentId: "sc-85602l-1"
    })(["display:inline-block;font-weight:var(--footer-title-font-weight);font-size:var(--footer-title-font-size);margin-top:0;color:var(--footer-title-text-color);margin-bottom:0;a{text-decoration:none;color:var(--footer-title-text-color);&:hover{color:var(--footer-title-text-color-hover);}}"]);
    FooterColumnItems = styled_components_esm_default.div.withConfig({
      displayName: "FooterColumn__FooterColumnItems",
      componentId: "sc-85602l-2"
    })(["display:flex;flex-wrap:wrap;justify-content:center;flex-direction:", ";@media screen and (min-width:", "){justify-content:flex-start;}"], (props) => props.iconsOnly ? "row" : "column", breakpoints.small);
  }
});

// node_modules/@redocly/theme/src/components/Footer/Footer.tsx
import React135 from "react";
function Footer({
  className
}) {
  const {
    footer: footer2
  } = useThemeConfig() || {};
  const {
    items = [],
    copyrightText
  } = footer2 || {};
  if (isEmptyArray(items) && !copyrightText || footer2?.hide) {
    return null;
  }
  const withColumns = items.some((item2) => (item2?.items?.length || 0) > 0);
  return /* @__PURE__ */ React135.createElement(FooterWrapper, { "data-component-name": "Footer/Footer", className, withColumns }, !!items.length && /* @__PURE__ */ React135.createElement(FooterColumnsSection, null, withColumns ? items.map((column, index) => /* @__PURE__ */ React135.createElement(FooterColumn, { key: `${column.label}_${index}`, column })) : items.map((item2, index) => /* @__PURE__ */ React135.createElement(FooterItem, { key: index, item: item2 }))), /* @__PURE__ */ React135.createElement(FooterCopyrightWrapper2, null, copyrightText && /* @__PURE__ */ React135.createElement(FooterCopyright, { copyrightText })));
}
var FooterCopyrightWrapper2, FooterColumnsSection, FooterWrapper;
var init_Footer = __esm({
  "node_modules/@redocly/theme/src/components/Footer/Footer.tsx"() {
    init_styled_components_esm();
    init_FooterItem();
    init_utils();
    init_hooks();
    init_FooterCopyright();
    init_FooterColumn();
    FooterCopyrightWrapper2 = styled_components_esm_default.div.withConfig({
      displayName: "Footer__FooterCopyrightWrapper",
      componentId: "sc-19dn4cx-0"
    })(["display:flex;flex-direction:row;align-items:start;align-self:center;@media screen and (min-width:", "){margin-top:0;}@media screen and (min-width:", "){max-width:var(--container-max-width);margin-left:auto;margin-right:auto;}"], breakpoints.medium, breakpoints.max);
    FooterColumnsSection = styled_components_esm_default.div.withConfig({
      displayName: "Footer__FooterColumnsSection",
      componentId: "sc-19dn4cx-1"
    })(["display:flex;flex-wrap:wrap;flex-direction:column;gap:var(--footer-column-gap);@media screen and (min-width:", "){flex-direction:row;}@media screen and (min-width:", "){max-width:var(--container-max-width);width:100%;margin-left:auto;margin-right:auto;}"], breakpoints.small, breakpoints.max);
    FooterWrapper = styled_components_esm_default.footer.withConfig({
      displayName: "Footer__FooterWrapper",
      componentId: "sc-19dn4cx-2"
    })(["padding:var(--mobile-footer-padding-vertical) var(--mobile-footer-padding-horizontal);border-top:1px solid var(--footer-border-color);font-size:var(--footer-font-size);flex-shrink:0;background-color:var(--footer-bg-color);color:var(--footer-text-color);font-weight:var(--footer-font-weight);gap:var(--spacing-md);display:flex;flex-direction:column;align-items:center;flex-wrap:wrap;@media screen and (min-width:", "){padding:var(--footer-padding-vertical) var(--footer-padding-horizontal);flex-direction:row;", "}"], breakpoints.small, ({
      withColumns
    }) => withColumns ? `
    flex-direction: column;
    align-items: stretch;
  ` : `justify-content: space-between;`);
  }
});

// node_modules/@redocly/theme/src/components/Footer/FooterLogo.tsx
import React136 from "react";
function FooterLogo(props) {
  return /* @__PURE__ */ React136.createElement(FooterLogoComponent, { ...props, "data-component-name": "Footer/FooterLogo" });
}
var FooterLogoComponent;
var init_FooterLogo = __esm({
  "node_modules/@redocly/theme/src/components/Footer/FooterLogo.tsx"() {
    init_styled_components_esm();
    init_Logo();
    FooterLogoComponent = styled_components_esm_default(Logo).withConfig({
      displayName: "FooterLogo__FooterLogoComponent",
      componentId: "sc-19a9tbe-0"
    })(["--logo-height:var(--footer-logo-height);--logo-width:var(--footer-logo-width);--logo-max-width:var(--footer-logo-max-width);--logo-max-height:var(--footer-logo-max-height);--logo-margin:0;display:var(--footer-logo-display);"]);
  }
});

// node_modules/@redocly/theme/src/components/Typography/CompactTypography.ts
var CompactTypography;
var init_CompactTypography = __esm({
  "node_modules/@redocly/theme/src/components/Typography/CompactTypography.ts"() {
    init_styled_components_esm();
    init_Typography();
    CompactTypography = styled_components_esm_default(Typography).attrs(() => ({
      mt: "0em",
      mb: "0em",
      "data-component-name": "Typography/CompactTypography"
    })).withConfig({
      displayName: "CompactTypography",
      componentId: "sc-18r56l5-0"
    })([""]);
  }
});

// node_modules/@redocly/theme/src/components/Typography/Emphasis.ts
var Emphasis;
var init_Emphasis = __esm({
  "node_modules/@redocly/theme/src/components/Typography/Emphasis.ts"() {
    init_styled_components_esm();
    Emphasis = styled_components_esm_default.strong.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/Emphasis",
      className
    })).withConfig({
      displayName: "Emphasis",
      componentId: "sc-1rtv4pr-0"
    })(["font-weight:var(--font-weight-bold);"]);
  }
});

// node_modules/@redocly/theme/src/components/Typography/H1.ts
var H1;
var init_H1 = __esm({
  "node_modules/@redocly/theme/src/components/Typography/H1.ts"() {
    init_styled_components_esm();
    init_utils();
    H1 = styled_components_esm_default.h1.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/H1",
      className
    })).withConfig({
      displayName: "H1",
      componentId: "sc-1oejb31-0"
    })(["color:var(--h1-text-color);margin:var(--h1-margin-top) 0 var(--h1-margin-bottom);", ";"], typography("h1"));
  }
});

// node_modules/@redocly/theme/src/components/Typography/H3.ts
var H3;
var init_H3 = __esm({
  "node_modules/@redocly/theme/src/components/Typography/H3.ts"() {
    init_styled_components_esm();
    init_utils();
    H3 = styled_components_esm_default.h3.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/H3",
      className
    })).withConfig({
      displayName: "H3",
      componentId: "sc-unaodq-0"
    })(["color:var(--h3-text-color);margin:var(--h3-margin-top) 0 var(--h3-margin-bottom);", ";"], typography("h3"));
  }
});

// node_modules/@redocly/theme/src/components/Typography/SectionHeader.ts
var SectionHeader;
var init_SectionHeader = __esm({
  "node_modules/@redocly/theme/src/components/Typography/SectionHeader.ts"() {
    init_styled_components_esm();
    SectionHeader = styled_components_esm_default.h2.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/SectionHeader",
      className
    })).withConfig({
      displayName: "SectionHeader",
      componentId: "sc-1k9va1l-0"
    })(["color:var(--h2-text-color);font-size:var(--h2-font-size);font-weight:var(--font-weight-regular);text-align:center;margin:2.65em 0;padding:0 20px;font-family:var(--h2-font-family);"]);
  }
});

// node_modules/@redocly/theme/src/components/SidebarLogo/SidebarLogo.tsx
import React137 from "react";
function SidebarLogo({
  imageUrl,
  href,
  altText,
  backgroundColor,
  dataTestId,
  className
} = {}) {
  if (!imageUrl) {
    return null;
  }
  const logo2 = /* @__PURE__ */ React137.createElement(LogoImgEl, { src: imageUrl, alt: altText || "logo" });
  return /* @__PURE__ */ React137.createElement(LogoWrap, { "data-testid": dataTestId, style: {
    backgroundColor
  }, "data-component-name": "SidebarLogo/SidebarLogo", className }, href ? /* @__PURE__ */ React137.createElement(Link2, { href }, logo2) : logo2);
}
var LogoImgEl, LogoWrap, Link2;
var init_SidebarLogo = __esm({
  "node_modules/@redocly/theme/src/components/SidebarLogo/SidebarLogo.tsx"() {
    init_styled_components_esm();
    LogoImgEl = styled_components_esm_default.img.withConfig({
      displayName: "SidebarLogo__LogoImgEl",
      componentId: "sc-pfheo5-0"
    })(["max-height:var(--sidebar-logo-max-height);max-width:var(--sidebar-logo-max-width);padding:var(--sidebar-logo-padding);width:100%;display:block;"]);
    LogoWrap = styled_components_esm_default.div.withConfig({
      displayName: "SidebarLogo__LogoWrap",
      componentId: "sc-pfheo5-1"
    })(["text-align:center;line-height:0;"]);
    Link2 = styled_components_esm_default.a.withConfig({
      displayName: "SidebarLogo__Link",
      componentId: "sc-pfheo5-2"
    })(["display:inline-block;"]);
  }
});

// node_modules/@redocly/theme/src/components/Panel/PanelBody.ts
var showPanel, showPanelAnimation, PanelBody;
var init_PanelBody = __esm({
  "node_modules/@redocly/theme/src/components/Panel/PanelBody.ts"() {
    init_styled_components_esm();
    showPanel = $e(["0%{transform:translateY(-10px);}100%{transform:translateY(0);}"]);
    showPanelAnimation = Ne(["animation:", " 0.2s;"], showPanel);
    PanelBody = styled_components_esm_default.div.attrs(({
      className
    }) => ({
      "data-component-name": "Panel/PanelBody",
      className
    })).withConfig({
      displayName: "PanelBody",
      componentId: "sc-1fb7ay5-0"
    })(["", ";", ";background-color:var(--panel-body-bg-color);font-family:var(--panel-body-font-family-local);font-size:var(--panel-body-font-size-local);font-weight:var(--panel-body-font-weight-local);border:var(--panel-body-border-local);padding:var(--panel-body-padding-local);color:var(--panel-body-text-color);border-top-left-radius:var(--panel-border-radius);border-top-right-radius:var(--panel-border-radius);border-bottom-right-radius:var(--panel-border-radius);border-bottom-left-radius:var(--panel-border-radius);"], ({
      animate
    }) => animate && showPanelAnimation, ({
      hidden
    }) => hidden && "visibility: hidden");
  }
});

// node_modules/@redocly/theme/src/components/Panel/PanelHeader.ts
var PanelHeader;
var init_PanelHeader = __esm({
  "node_modules/@redocly/theme/src/components/Panel/PanelHeader.ts"() {
    init_styled_components_esm();
    PanelHeader = styled_components_esm_default.div.attrs(({
      className
    }) => ({
      "data-component-name": "Panel/PanelHeader",
      className
    })).withConfig({
      displayName: "PanelHeader",
      componentId: "sc-6wbs76-0"
    })(["display:flex;flex-wrap:wrap;gap:var(--spacing-unit);align-items:center;justify-content:space-between;min-height:40px;white-space:var(--panel-heading-white-space-local);color:var(--panel-heading-text-color);cursor:", ";line-height:var(--panel-heading-line-height-local);font-size:var(--panel-heading-font-size-local);font-family:var(--panel-heading-font-family-local);padding:var(--panel-heading-padding-local);border:var(--panel-heading-border);border-bottom:", ";background-color:var(--panel-heading-bg-color);border-top-left-radius:var(--panel-border-radius);border-top-right-radius:var(--panel-border-radius);border-bottom-right-radius:", ";border-bottom-left-radius:", ";pointer-events:", ";"], ({
      isExpandable = true
    }) => isExpandable ? "pointer" : "unset", ({
      isExpandable = true
    }) => isExpandable ? "none" : "var(--panel-heading-border-bottom)", ({
      expanded,
      isExpandable = true
    }) => expanded || !isExpandable ? "0" : "var(--panel-border-radius)", ({
      expanded,
      isExpandable = true
    }) => expanded || !isExpandable ? "0" : "var(--panel-border-radius)", ({
      disabled
    }) => disabled ? "none" : "auto");
  }
});

// node_modules/@redocly/theme/src/components/Panel/PanelHeaderTitle.ts
var PanelHeaderTitle;
var init_PanelHeaderTitle = __esm({
  "node_modules/@redocly/theme/src/components/Panel/PanelHeaderTitle.ts"() {
    init_styled_components_esm();
    PanelHeaderTitle = styled_components_esm_default.span.attrs(({
      className
    }) => ({
      "data-component-name": "Panel/PanelHeaderTitle",
      className
    })).withConfig({
      displayName: "PanelHeaderTitle",
      componentId: "sc-z894y1-0"
    })(["margin-right:5px;font-weight:var(--panel-heading-font-weight-local);line-height:var(--line-height-base);overflow:hidden;text-overflow:ellipsis;color:var(--panel-heading-text-color);"]);
  }
});

// node_modules/@redocly/theme/src/components/Panel/Panel.tsx
import React138, { useEffect as useEffect8, useState as useState5 } from "react";
function Panel({
  expanded = true,
  isExpandable = true,
  renderChildrenHidden = false,
  header,
  footer: footer2,
  className = "panel-default",
  children,
  onToggle,
  description
}) {
  const [isExpanded, setExpanded] = useState5(expanded);
  const [animate, setAnimate] = useState5(false);
  const toggle = ({
    target
  }) => {
    if (target instanceof HTMLAnchorElement || !isExpandable)
      return;
    setAnimate(true);
    setExpanded(!isExpanded);
    onToggle?.(!isExpanded);
  };
  useEffect8(() => setExpanded(expanded), [expanded]);
  return /* @__PURE__ */ React138.createElement(PanelWrapper, { className, "data-testid": typeof header === "string" ? ("panel-" + header).replace(/ /g, "-").toLowerCase() : null, "data-component-name": "Panel/Panel" }, header && (typeof header === "function" ? header({
    expanded: isExpanded,
    toggle
  }) : /* @__PURE__ */ React138.createElement(PanelHeader, { "data-testid": "panel-header", onClick: toggle, expanded: isExpanded, isExpandable }, /* @__PURE__ */ React138.createElement(InlineBox, null, /* @__PURE__ */ React138.createElement(PanelHeaderTitle, { "data-testid": "title" }, header), isExpandable && (isExpanded ? /* @__PURE__ */ React138.createElement(ChevronDownIcon, { color: "--panel-chevron-icon-color" }) : /* @__PURE__ */ React138.createElement(ChevronRightIcon, { color: "--panel-chevron-icon-color" })), description))), (isExpanded || renderChildrenHidden) && /* @__PURE__ */ React138.createElement(PanelBody, { "data-testid": "panel-body", hidden: !isExpanded, animate }, children), footer2);
}
var PanelWrapper, InlineBox;
var init_Panel = __esm({
  "node_modules/@redocly/theme/src/components/Panel/Panel.tsx"() {
    init_styled_components_esm();
    init_PanelBody();
    init_PanelHeader();
    init_PanelHeaderTitle();
    init_ChevronDownIcon();
    init_ChevronRightIcon();
    PanelWrapper = styled_components_esm_default.div.withConfig({
      displayName: "Panel__PanelWrapper",
      componentId: "sc-1abbkx3-0"
    })(["background-color:var(--panel-bg-color);color:var(--panel-text-color);font-family:var(--panel-font-family-local);font-size:var(--panel-font-size-local);font-weight:var(--panel-font-weight-local);border-radius:var(--panel-border-radius-local);border:var(--panel-border-local);", " + ", "{border-top-left-radius:0;border-top-right-radius:0;}&:not(:last-child){margin-bottom:var(--panel-gap-vertical);}"], PanelHeader, PanelBody);
    InlineBox = styled_components_esm_default.div.withConfig({
      displayName: "Panel__InlineBox",
      componentId: "sc-1abbkx3-1"
    })(["display:inline-flex;align-items:center;"]);
  }
});

// node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/AfterOpenApiOperation.tsx
var AfterOpenApiOperation;
var init_AfterOpenApiOperation = __esm({
  "node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/AfterOpenApiOperation.tsx"() {
    AfterOpenApiOperation = null;
  }
});

// node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/AfterOpenApiTitle.tsx
var AfterOpenApiTitle;
var init_AfterOpenApiTitle = __esm({
  "node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/AfterOpenApiTitle.tsx"() {
    AfterOpenApiTitle = null;
  }
});

// node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/BeforeOpenApiOperation.tsx
var BeforeOpenApiOperation;
var init_BeforeOpenApiOperation = __esm({
  "node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/BeforeOpenApiOperation.tsx"() {
    BeforeOpenApiOperation = null;
  }
});

// node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/OpenApiFooter.tsx
var OpenApiFooter;
var init_OpenApiFooter = __esm({
  "node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/OpenApiFooter.tsx"() {
    OpenApiFooter = null;
  }
});

// node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/OpenApiHeader.tsx
var OpenApiHeader;
var init_OpenApiHeader = __esm({
  "node_modules/@redocly/theme/src/components/OpenApiDocs/hooks/OpenApiHeader.tsx"() {
    OpenApiHeader = null;
  }
});

// node_modules/@redocly/theme/src/icons/HorizontalViewIcon/HorizontalViewIcon.tsx
import React139 from "react";
var Icon64, HorizontalViewIcon;
var init_HorizontalViewIcon = __esm({
  "node_modules/@redocly/theme/src/icons/HorizontalViewIcon/HorizontalViewIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon64 = (props) => /* @__PURE__ */ React139.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React139.createElement("path", { d: "M14 15H2C1.73487 14.9997 1.48068 14.8943 1.2932 14.7068C1.10572 14.5193 1.00028 14.2651 1 14V10C1.00028 9.73487 1.10572 9.48068 1.2932 9.2932C1.48068 9.10572 1.73487 9.00028 2 9H14C14.2651 9.00028 14.5193 9.10572 14.7068 9.2932C14.8943 9.48068 14.9997 9.73487 15 10V14C14.9997 14.2651 14.8943 14.5193 14.7068 14.7068C14.5193 14.8943 14.2651 14.9997 14 15ZM2 10V14H14V10H2Z" }), /* @__PURE__ */ React139.createElement("path", { d: "M14 7H2C1.73487 6.99972 1.48068 6.89428 1.2932 6.7068C1.10572 6.51932 1.00028 6.26513 1 6V2C1.00028 1.73487 1.10572 1.48068 1.2932 1.2932C1.48068 1.10572 1.73487 1.00028 2 1H14C14.2651 1.00028 14.5193 1.10572 14.7068 1.2932C14.8943 1.48068 14.9997 1.73487 15 2V6C14.9997 6.26513 14.8943 6.51932 14.7068 6.7068C14.5193 6.89428 14.2651 6.99972 14 7ZM2 2V6H14V2H2Z" }));
    HorizontalViewIcon = styled_components_esm_default(Icon64).attrs(() => ({
      "data-component-name": "icons/HorizontalViewIcon/HorizontalViewIcon"
    })).withConfig({
      displayName: "HorizontalViewIcon",
      componentId: "sc-j7evdo-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/VerticalViewIcon/VerticalViewIcon.tsx
import React140 from "react";
var Icon65, VerticalViewIcon;
var init_VerticalViewIcon = __esm({
  "node_modules/@redocly/theme/src/icons/VerticalViewIcon/VerticalViewIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon65 = (props) => /* @__PURE__ */ React140.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React140.createElement("path", { d: "M6 15H2C1.73487 14.9997 1.48068 14.8943 1.2932 14.7068C1.10572 14.5193 1.00028 14.2651 1 14V2C1.00028 1.73487 1.10572 1.48068 1.2932 1.2932C1.48068 1.10572 1.73487 1.00028 2 1H6C6.26513 1.00028 6.51932 1.10572 6.7068 1.2932C6.89428 1.48068 6.99972 1.73487 7 2V14C6.99972 14.2651 6.89428 14.5193 6.7068 14.7068C6.51932 14.8943 6.26513 14.9997 6 15ZM2 2V14H6V2H2Z" }), /* @__PURE__ */ React140.createElement("path", { d: "M14 15H10C9.73487 14.9997 9.48068 14.8943 9.2932 14.7068C9.10572 14.5193 9.00028 14.2651 9 14V2C9.00028 1.73487 9.10572 1.48068 9.2932 1.2932C9.48068 1.10572 9.73487 1.00028 10 1H14C14.2651 1.00028 14.5193 1.10572 14.7068 1.2932C14.8943 1.48068 14.9997 1.73487 15 2V14C14.9997 14.2651 14.8943 14.5193 14.7068 14.7068C14.5193 14.8943 14.2651 14.9997 14 15ZM10 2V14H14V2H10Z" }));
    VerticalViewIcon = styled_components_esm_default(Icon65).attrs(() => ({
      "data-component-name": "icons/VerticalViewIcon/VerticalViewIcon"
    })).withConfig({
      displayName: "VerticalViewIcon",
      componentId: "sc-mhv8hf-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/components/SidebarActions/styled.tsx
var StyledChangeViewButton, StyledChangeViewButtonWrap, ControlsWrap, ControlsWrapChangeLayoutButtons;
var init_styled = __esm({
  "node_modules/@redocly/theme/src/components/SidebarActions/styled.tsx"() {
    init_styled_components_esm();
    init_utils();
    StyledChangeViewButton = styled_components_esm_default.span.withConfig({
      displayName: "styled__StyledChangeViewButton",
      componentId: "sc-1k37xxg-0"
    })(["display:flex;position:relative;flex-direction:", ";justify-content:center;align-items:center;cursor:pointer;border-radius:var(--border-radius);background:var(--segmented-buttons-bg-color-main);z-index:1;padding:calc(var(--spacing-unit) / 2);"], ({
      collapsedSidebar
    }) => collapsedSidebar ? "column" : "row");
    StyledChangeViewButtonWrap = styled_components_esm_default.span.withConfig({
      displayName: "styled__StyledChangeViewButtonWrap",
      componentId: "sc-1k37xxg-1"
    })(["width:20px;height:20px;border-radius:var(--border-radius);display:flex;align-items:center;justify-content:center;background-color:", ";"], ({
      active
    }) => active && "var(--segmented-buttons-bg-color-inner)");
    ControlsWrap = styled_components_esm_default.span.withConfig({
      displayName: "styled__ControlsWrap",
      componentId: "sc-1k37xxg-2"
    })(["display:none;justify-content:flex-end;bottom:0;flex-direction:row;gap:var(--spacing-xs);align-items:center;margin-left:var(--sidebar-controls-margin-left);z-index:2;background:var(--sidebar-bg-color);", " @media screen and (min-width:", "){display:flex;}@media print{display:none;}"], ({
      isCollapsed
    }) => isCollapsed && Ne(["flex-direction:column;margin-left:0;gap:var(--sidebar-controls-collapsed-gap);padding:var(--sidebar-controls-collapsed-padding-vertical) var(--sidebar-controls-collapsed-padding-horizontal);"]), breakpoints.small);
    ControlsWrapChangeLayoutButtons = styled_components_esm_default.span.withConfig({
      displayName: "styled__ControlsWrapChangeLayoutButtons",
      componentId: "sc-1k37xxg-3"
    })(["display:flex;bottom:0;flex-direction:", ";gap:", ";align-items:center;"], ({
      isCollapsed
    }) => isCollapsed ? "column-reverse" : "row", ({
      isCollapsed
    }) => isCollapsed ? "10px" : "var(--spacing-xs)");
  }
});

// node_modules/@redocly/theme/src/components/SidebarActions/SidebarActions.tsx
import React141 from "react";
var SidebarActions;
var init_SidebarActions = __esm({
  "node_modules/@redocly/theme/src/components/SidebarActions/SidebarActions.tsx"() {
    init_lib_esm();
    init_hooks();
    init_ChangeViewButton();
    init_Button();
    init_SidePanelCloseIcon();
    init_SidePanelOpenIcon();
    init_styled();
    SidebarActions = ({
      layout,
      hideCollapseSidebarButton = false,
      collapsedSidebar,
      isOpenapiDocs,
      onChangeViewClick,
      onChangeCollapseSidebarClick,
      requestAccessButton,
      className
    }) => {
      const { useTelemetry, useTranslate } = useThemeHooks();
      const { translate } = useTranslate();
      const telemetry = useTelemetry();
      return /* @__PURE__ */ React141.createElement(
        ControlsWrap,
        {
          className,
          isCollapsed: collapsedSidebar,
          "data-component-name": "Sidebar/SidebarActions"
        },
        !hideCollapseSidebarButton && /* @__PURE__ */ React141.createElement(
          Button,
          {
            onClick: () => {
              onChangeCollapseSidebarClick();
              if (collapsedSidebar) {
                telemetry.send?.("sidebar_item_expanded", {});
              } else {
                telemetry.send?.("sidebar_item_collapsed", {});
              }
            },
            title: collapsedSidebar ? translate("sidebar.actions.show", "Show sidebar") : translate("sidebar.actions.hide", "Hide sidebar"),
            size: "small",
            variant: "outlined",
            icon: collapsedSidebar ? /* @__PURE__ */ React141.createElement(SidePanelOpenIcon, null) : /* @__PURE__ */ React141.createElement(SidePanelCloseIcon, null)
          }
        ),
        isOpenapiDocs && /* @__PURE__ */ React141.createElement(ControlsWrapChangeLayoutButtons, { isCollapsed: collapsedSidebar }, /* @__PURE__ */ React141.createElement(
          ChangeViewButton,
          {
            collapsedSidebar,
            layout,
            onClick: () => {
              onChangeViewClick();
              telemetry.send?.("change_layout_button_clicked", {});
            }
          }
        )),
        !collapsedSidebar && requestAccessButton
      );
    };
  }
});

// node_modules/@redocly/theme/src/components/SidebarActions/ChangeViewButton.tsx
import React142 from "react";
var ChangeViewButton;
var init_ChangeViewButton = __esm({
  "node_modules/@redocly/theme/src/components/SidebarActions/ChangeViewButton.tsx"() {
    init_HorizontalViewIcon();
    init_VerticalViewIcon();
    init_SidebarActions();
    init_styled();
    init_hooks();
    ChangeViewButton = ({
      layout,
      onClick,
      collapsedSidebar
    }) => {
      const { useTranslate } = useThemeHooks();
      const { translate } = useTranslate();
      return /* @__PURE__ */ React142.createElement(
        StyledChangeViewButton,
        {
          title: translate("sidebar.actions.changeLayout", "Change layout"),
          onClick,
          collapsedSidebar
        },
        /* @__PURE__ */ React142.createElement(StyledChangeViewButtonWrap, { active: layout === LayoutVariant.STACKED }, /* @__PURE__ */ React142.createElement(HorizontalViewIcon, { size: "14px", color: "--segmented-buttons-content-color" })),
        /* @__PURE__ */ React142.createElement(StyledChangeViewButtonWrap, { active: layout === LayoutVariant.THREE_PANEL }, /* @__PURE__ */ React142.createElement(VerticalViewIcon, { size: "14px", color: "--segmented-buttons-content-color" }))
      );
    };
  }
});

// node_modules/@redocly/theme/src/icons/FolderMoveToIcon/FolderMoveToIcon.tsx
import React143 from "react";
var Icon66, FolderMoveToIcon;
var init_FolderMoveToIcon = __esm({
  "node_modules/@redocly/theme/src/icons/FolderMoveToIcon/FolderMoveToIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon66 = (props) => /* @__PURE__ */ React143.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React143.createElement("path", { d: "M9 6.5L8.295 7.205L9.585 8.5H5V9.5H9.585L8.295 10.795L9 11.5L11.5 9L9 6.5Z" }), /* @__PURE__ */ React143.createElement("path", { d: "M5.5858 3L7.5858 5H14V13H2V3H5.5858ZM5.5858 2H2C1.73478 2 1.48043 2.10536 1.29289 2.29289C1.10536 2.48043 1 2.73478 1 3V13C1 13.2652 1.10536 13.5196 1.29289 13.7071C1.48043 13.8946 1.73478 14 2 14H14C14.2652 14 14.5196 13.8946 14.7071 13.7071C14.8946 13.5196 15 13.2652 15 13V5C15 4.73478 14.8946 4.48043 14.7071 4.29289C14.5196 4.10536 14.2652 4 14 4H8L6.2929 2.2929C6.10537 2.10536 5.85102 2 5.5858 2Z" }));
    FolderMoveToIcon = styled_components_esm_default(Icon66).attrs(() => ({
      "data-component-name": "icons/FolderMoveToIcon/FolderMoveToIcon"
    })).withConfig({
      displayName: "FolderMoveToIcon",
      componentId: "sc-eb2jq7-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/ErrorIcon/ErrorIcon.tsx
import React144 from "react";
var Icon67, ErrorIcon;
var init_ErrorIcon = __esm({
  "node_modules/@redocly/theme/src/icons/ErrorIcon/ErrorIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon67 = (props) => /* @__PURE__ */ React144.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React144.createElement("path", { d: "M1 8C1 9.38447 1.41054 10.7378 2.17971 11.889C2.94888 13.0401 4.04213 13.9373 5.32122 14.4672C6.6003 14.997 8.00776 15.1356 9.36563 14.8655C10.7235 14.5954 11.9708 13.9287 12.9497 12.9497C13.9287 11.9708 14.5954 10.7235 14.8655 9.36563C15.1356 8.00776 14.997 6.6003 14.4672 5.32122C13.9373 4.04213 13.0401 2.94888 11.889 2.17971C10.7378 1.41054 9.38447 1 8 1C6.14348 1 4.36301 1.7375 3.05025 3.05025C1.7375 4.36301 1 6.14348 1 8ZM12.575 11.875L4.125 3.425C5.27532 2.4675 6.74196 1.97449 8.23708 2.04273C9.7322 2.11097 11.1478 2.73554 12.2062 3.79385C13.2645 4.85216 13.889 6.2678 13.9573 7.76292C14.0255 9.25804 13.5325 10.7247 12.575 11.875ZM4.12 12.58C2.90916 11.5518 2.1555 10.0853 2.02428 8.5022C1.89306 6.9191 2.39499 5.34858 3.42 4.135L11.865 12.58C10.7821 13.495 9.4102 13.997 7.9925 13.997C6.5748 13.997 5.20289 13.495 4.12 12.58Z" }));
    ErrorIcon = styled_components_esm_default(Icon67).attrs(() => ({
      "data-component-name": "icons/ErrorIcon/ErrorIcon"
    })).withConfig({
      displayName: "ErrorIcon",
      componentId: "sc-hnd8vi-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/RocketIcon/RocketIcon.tsx
import React145 from "react";
var Icon68, RocketIcon;
var init_RocketIcon = __esm({
  "node_modules/@redocly/theme/src/icons/RocketIcon/RocketIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon68 = (props) => /* @__PURE__ */ React145.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React145.createElement("path", { d: "M7.64273 7.64733L3.64404 11.646L4.35115 12.3531L8.34984 8.35443L7.64273 7.64733Z" }), /* @__PURE__ */ React145.createElement("path", { d: "M8.5 15C8.43668 15.0002 8.3739 14.9883 8.315 14.965C8.23309 14.9324 8.16127 14.8786 8.10682 14.8093C8.05238 14.7399 8.01725 14.6574 8.005 14.57L7.505 11.07L8.505 10.93L8.88 13.565L10.5 12.26V8.50003C10.4996 8.43423 10.5122 8.369 10.5371 8.30808C10.562 8.24716 10.5987 8.19175 10.645 8.14503L12.68 6.11003C13.0993 5.69356 13.4319 5.19806 13.6585 4.65222C13.885 4.10638 14.0011 3.52103 14 2.93003V2.00003H13.07C12.479 1.99891 11.8937 2.11499 11.3478 2.34157C10.802 2.56814 10.3065 2.90071 9.89 3.32003L7.855 5.35503C7.80828 5.40137 7.75287 5.43803 7.69196 5.46292C7.63104 5.4878 7.56581 5.50041 7.5 5.50003H3.74L2.435 7.13003L5.07 7.50503L4.93 8.50503L1.43 8.00503C1.34267 7.99278 1.26014 7.95765 1.19077 7.90321C1.1214 7.84877 1.06766 7.77695 1.035 7.69503C1.00194 7.61254 0.991465 7.52274 1.00465 7.43485C1.01783 7.34697 1.0542 7.26419 1.11 7.19503L3.11 4.69503C3.15606 4.63519 3.21508 4.58655 3.28263 4.55278C3.35017 4.51901 3.42449 4.50097 3.5 4.50003H7.295L9.18 2.61003C9.68959 2.09758 10.2958 1.6914 10.9636 1.41503C11.6313 1.13865 12.3473 0.997596 13.07 1.00003H14C14.2652 1.00003 14.5196 1.10539 14.7071 1.29292C14.8946 1.48046 15 1.73481 15 2.00003V2.93003C15.0024 3.65271 14.8614 4.36869 14.585 5.03645C14.3086 5.7042 13.9024 6.31045 13.39 6.82003L11.5 8.70503V12.5C11.4997 12.5751 11.4824 12.6492 11.4495 12.7167C11.4166 12.7842 11.3689 12.8435 11.31 12.89L8.81 14.89C8.72203 14.9606 8.61278 14.9994 8.5 15Z" }));
    RocketIcon = styled_components_esm_default(Icon68).attrs(() => ({
      "data-component-name": "icons/RocketIcon/RocketIcon"
    })).withConfig({
      displayName: "RocketIcon",
      componentId: "sc-1lpviu6-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/DatabaseIcon/DatabaseIcon.tsx
import React146 from "react";
var Icon69, DatabaseIcon;
var init_DatabaseIcon = __esm({
  "node_modules/@redocly/theme/src/icons/DatabaseIcon/DatabaseIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon69 = (props) => /* @__PURE__ */ React146.createElement("svg", { viewBox: "0 0 16 17", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React146.createElement("path", { d: "M8 2.01318C5.35105 2.01318 2.5 2.63918 2.5 4.01318V13.0132C2.5 14.3872 5.35105 15.0132 8 15.0132C10.649 15.0132 13.5 14.3872 13.5 13.0132V4.01318C13.5 2.63918 10.649 2.01318 8 2.01318ZM8 3.01318C10.8988 3.01318 12.3974 3.73023 12.4984 4.01318C12.3974 4.29613 10.8988 5.01318 8 5.01318C5.07935 5.01318 3.5803 4.28538 3.5 4.02198V4.01953C3.5803 3.74098 5.07935 3.01318 8 3.01318ZM3.5 5.22703C4.56395 5.76073 6.3213 6.01318 8 6.01318C9.6787 6.01318 11.4361 5.76073 12.5 5.22703V7.00683C12.4197 7.28538 10.9207 8.01318 8 8.01318C5.07495 8.01318 3.57545 7.28318 3.5 7.01318V5.22703ZM3.5 8.22703C4.56395 8.76073 6.3213 9.01318 8 9.01318C9.6787 9.01318 11.4361 8.76073 12.5 8.22703V10.0068C12.4197 10.2854 10.9207 11.0132 8 11.0132C5.07495 11.0132 3.57545 10.2832 3.5 10.0132V8.22703ZM8 14.0132C5.07495 14.0132 3.57545 13.2832 3.5 13.0132V11.227C4.56395 11.7607 6.3213 12.0132 8 12.0132C9.6787 12.0132 11.4361 11.7607 12.5 11.227V13.0068C12.4197 13.2854 10.9207 14.0132 8 14.0132Z" }));
    DatabaseIcon = styled_components_esm_default(Icon69).attrs(() => ({
      "data-component-name": "icons/DatabaseIcon/DatabaseIcon"
    })).withConfig({
      displayName: "DatabaseIcon",
      componentId: "sc-gew0k6-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/BareMetalServerIcon/BareMetalServerIcon.tsx
import React147 from "react";
var Icon70, BareMetalServerIcon;
var init_BareMetalServerIcon = __esm({
  "node_modules/@redocly/theme/src/icons/BareMetalServerIcon/BareMetalServerIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon70 = (props) => /* @__PURE__ */ React147.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React147.createElement("path", { d: "M4.5 3.5C4.77614 3.5 5 3.27614 5 3C5 2.72386 4.77614 2.5 4.5 2.5C4.22386 2.5 4 2.72386 4 3C4 3.27614 4.22386 3.5 4.5 3.5Z" }), /* @__PURE__ */ React147.createElement("path", { d: "M13 5H3C2.73487 4.99972 2.48068 4.89428 2.2932 4.7068C2.10572 4.51932 2.00028 4.26513 2 4V2C2.00028 1.73487 2.10572 1.48068 2.2932 1.2932C2.48068 1.10572 2.73487 1.00028 3 1H13C13.2651 1.00028 13.5193 1.10572 13.7068 1.2932C13.8943 1.48068 13.9997 1.73487 14 2V4C13.9997 4.26513 13.8943 4.51932 13.7068 4.7068C13.5193 4.89428 13.2651 4.99972 13 5ZM3 2V4H13V2H3Z" }), /* @__PURE__ */ React147.createElement("path", { d: "M4.5 8.5C4.77614 8.5 5 8.27614 5 8C5 7.72386 4.77614 7.5 4.5 7.5C4.22386 7.5 4 7.72386 4 8C4 8.27614 4.22386 8.5 4.5 8.5Z" }), /* @__PURE__ */ React147.createElement("path", { d: "M13 10H3C2.73487 9.99972 2.48068 9.89428 2.2932 9.7068C2.10572 9.51932 2.00028 9.26513 2 9V7C2.00028 6.73487 2.10572 6.48068 2.2932 6.2932C2.48068 6.10572 2.73487 6.00028 3 6H13C13.2651 6.00028 13.5193 6.10572 13.7068 6.2932C13.8943 6.48068 13.9997 6.73487 14 7V9C13.9997 9.26513 13.8943 9.51932 13.7068 9.7068C13.5193 9.89428 13.2651 9.99972 13 10ZM3 7V9H13V7H3Z" }), /* @__PURE__ */ React147.createElement("path", { d: "M4.5 13.5C4.77614 13.5 5 13.2761 5 13C5 12.7239 4.77614 12.5 4.5 12.5C4.22386 12.5 4 12.7239 4 13C4 13.2761 4.22386 13.5 4.5 13.5Z" }), /* @__PURE__ */ React147.createElement("path", { d: "M13 15H3C2.73487 14.9997 2.48068 14.8943 2.2932 14.7068C2.10572 14.5193 2.00028 14.2651 2 14V12C2.00028 11.7349 2.10572 11.4807 2.2932 11.2932C2.48068 11.1057 2.73487 11.0003 3 11H13C13.2651 11.0003 13.5193 11.1057 13.7068 11.2932C13.8943 11.4807 13.9997 11.7349 14 12V14C13.9997 14.2651 13.8943 14.5193 13.7068 14.7068C13.5193 14.8943 13.2651 14.9997 13 15ZM3 12V14H13V12H3Z" }));
    BareMetalServerIcon = styled_components_esm_default(Icon70).attrs(() => ({
      "data-component-name": "icons/BareMetalServerIcon/BareMetalServerIcon"
    })).withConfig({
      displayName: "BareMetalServerIcon",
      componentId: "sc-5200id-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/MobileSidebarIcon/MobileSidebarIcon.tsx
import React148 from "react";
var Icon71, MobileSidebarIcon;
var init_MobileSidebarIcon = __esm({
  "node_modules/@redocly/theme/src/icons/MobileSidebarIcon/MobileSidebarIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon71 = (props) => /* @__PURE__ */ React148.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "25px", height: "25px", viewBox: "0 0 294.842 294.842", ...props }, /* @__PURE__ */ React148.createElement("path", { d: "M292.128,214.846c-2.342-2.344-6.143-2.344-8.484,0l-59.512,59.511V6c0-3.313-2.687-6-6-6s-6,2.687-6,6v268.356 l-59.513-59.512c-2.342-2.342-6.142-2.343-8.485,0.001c-2.343,2.343-2.343,6.142,0.001,8.485l69.755,69.754 c1.171,1.171,2.707,1.757,4.242,1.757s3.071-0.586,4.242-1.758l69.754-69.754C294.472,220.987,294.472,217.188,292.128,214.846z" }), /* @__PURE__ */ React148.createElement("path", { d: "M6.956,12h180.137c3.313,0,6-2.687,6-6s-2.687-6-6-6H6.956c-3.313,0-6,2.687-6,6S3.643,12,6.956,12z" }), /* @__PURE__ */ React148.createElement("path", { d: "M6.956,82.228h180.137c3.313,0,6-2.687,6-6s-2.687-6-6-6H6.956c-3.313,0-6,2.687-6,6S3.643,82.228,6.956,82.228z" }), /* @__PURE__ */ React148.createElement("path", { d: "M6.956,152.456h180.137c3.313,0,6-2.687,6-6s-2.687-6-6-6H6.956c-3.313,0-6,2.687-6,6S3.643,152.456,6.956,152.456z" }), /* @__PURE__ */ React148.createElement("path", { d: "M124.438,210.685H6.956c-3.313,0-6,2.687-6,6s2.687,6,6,6h117.482c3.313,0,6-2.687,6-6S127.752,210.685,124.438,210.685z" }), /* @__PURE__ */ React148.createElement("path", { d: "M124.438,280.912H6.956c-3.313,0-6,2.687-6,6s2.687,6,6,6h117.482c3.313,0,6-2.687,6-6S127.752,280.912,124.438,280.912z" }));
    MobileSidebarIcon = styled_components_esm_default(Icon71).attrs(() => ({
      "data-component-name": "icons/MobileSidebarIcon/MobileSidebarIcon"
    })).withConfig({
      displayName: "MobileSidebarIcon",
      componentId: "sc-jcxxlc-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CopyLinkIcon/CopyLinkIcon.tsx
import React149 from "react";
var Icon72, CopyLinkIcon;
var init_CopyLinkIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CopyLinkIcon/CopyLinkIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon72 = (props) => /* @__PURE__ */ React149.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React149.createElement("path", { d: "M5.9737 9.50005C5.48436 9.50016 5.00598 9.35513 4.59907 9.08332C4.19217 8.81151 3.87501 8.42512 3.68773 7.97304C3.50045 7.52096 3.45145 7.02348 3.54693 6.54355C3.64242 6.06361 3.87809 5.62278 4.22415 5.2768L6.7768 2.72465C7.24077 2.26065 7.87006 1.99996 8.52624 1.99994C9.18241 1.99992 9.81172 2.26056 10.2757 2.72453C10.7397 3.1885 11.0004 3.81779 11.0004 4.47397C11.0005 5.13014 10.7398 5.75945 10.2759 6.22345L9.9997 6.49975L9.2918 5.7933L9.57065 5.51435C9.84599 5.23762 10.0004 4.86301 10 4.47263C9.99967 4.08224 9.84456 3.70793 9.5687 3.4317C9.28782 3.16364 8.91447 3.01408 8.5262 3.01408C8.13793 3.01408 7.76458 3.16364 7.4837 3.4317L4.93135 5.9837C4.79443 6.12056 4.68582 6.28305 4.61172 6.46189C4.53762 6.64073 4.49948 6.83242 4.49948 7.026C4.49948 7.21959 4.53762 7.41128 4.61172 7.59012C4.68582 7.76896 4.79443 7.93145 4.93135 8.0683C5.21223 8.33636 5.58558 8.48592 5.97385 8.48592C6.36212 8.48592 6.73547 8.33636 7.01635 8.0683L7.7235 8.77555C7.49421 9.00599 7.2215 9.18867 6.92115 9.31303C6.6208 9.43739 6.29878 9.50096 5.9737 9.50005Z" }), /* @__PURE__ */ React149.createElement("path", { d: "M9.9737 8.50005C9.48436 8.50016 9.00598 8.35513 8.59907 8.08332C8.19217 7.81151 7.87501 7.42512 7.68773 6.97304C7.50045 6.52096 7.45145 6.02348 7.54693 5.54355C7.64242 5.06361 7.87809 4.62278 8.22415 4.2768L8.50045 4.0005L9.2076 4.7078L8.9313 4.98395C8.79442 5.12081 8.68583 5.28329 8.61175 5.46212C8.53767 5.64095 8.49954 5.83261 8.49954 6.02618C8.49954 6.21974 8.53767 6.41141 8.61175 6.59024C8.68583 6.76906 8.79442 6.93154 8.9313 7.0684C9.21218 7.33646 9.58553 7.48602 9.9738 7.48602C10.3621 7.48602 10.7354 7.33646 11.0163 7.0684C11.1463 6.9384 13.3809 4.70375 13.5689 4.51615C13.8449 4.23954 14 3.86474 14 3.47398C14 3.08322 13.8449 2.70842 13.5689 2.4318C13.2881 2.16374 12.9147 2.01418 12.5265 2.01418C12.1382 2.01418 11.7648 2.16374 11.4839 2.4318L10.7768 1.72455C11.2409 1.26126 11.87 1.00118 12.5258 1.00147C13.1816 1.00175 13.8104 1.26239 14.2742 1.72609C14.7379 2.18979 14.9985 2.81863 14.9989 3.47442C14.9992 4.13021 14.7391 4.7593 14.2759 5.22345C14.0876 5.41145 11.8539 7.64485 11.724 7.7752C11.4946 8.00572 11.2218 8.18847 10.9214 8.31289C10.621 8.43731 10.2989 8.50092 9.9737 8.50005Z" }), /* @__PURE__ */ React149.createElement("path", { d: "M12 15.0001H2C1.73487 14.9998 1.48068 14.8943 1.2932 14.7069C1.10572 14.5194 1.00028 14.2652 1 14.0001V4.00005C1.00028 3.73492 1.10572 3.48073 1.2932 3.29325C1.48068 3.10578 1.73487 3.00033 2 3.00005H4V4.00005H2V14.0001H12V9.00005H13V14.0001C12.9997 14.2652 12.8943 14.5194 12.7068 14.7069C12.5193 14.8943 12.2651 14.9998 12 15.0001Z" }));
    CopyLinkIcon = styled_components_esm_default(Icon72).attrs(() => ({
      "data-component-name": "icons/CopyLinkIcon/CopyLinkIcon"
    })).withConfig({
      displayName: "CopyLinkIcon",
      componentId: "sc-12g3rxt-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/OverflowMenuHorizontalIcon/OverflowMenuHorizontalIcon.tsx
import React150 from "react";
var Icon73, OverflowMenuHorizontalIcon;
var init_OverflowMenuHorizontalIcon = __esm({
  "node_modules/@redocly/theme/src/icons/OverflowMenuHorizontalIcon/OverflowMenuHorizontalIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon73 = (props) => /* @__PURE__ */ React150.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React150.createElement("path", { d: "M3.2 9.1998C3.86274 9.1998 4.4 8.66255 4.4 7.9998C4.4 7.33706 3.86274 6.7998 3.2 6.7998C2.53726 6.7998 2 7.33706 2 7.9998C2 8.66255 2.53726 9.1998 3.2 9.1998Z" }), /* @__PURE__ */ React150.createElement("path", { d: "M8 9.1998C8.66274 9.1998 9.2 8.66255 9.2 7.9998C9.2 7.33706 8.66274 6.7998 8 6.7998C7.33726 6.7998 6.8 7.33706 6.8 7.9998C6.8 8.66255 7.33726 9.1998 8 9.1998Z" }), /* @__PURE__ */ React150.createElement("path", { d: "M12.8 9.1998C13.4627 9.1998 14 8.66255 14 7.9998C14 7.33706 13.4627 6.7998 12.8 6.7998C12.1373 6.7998 11.6 7.33706 11.6 7.9998C11.6 8.66255 12.1373 9.1998 12.8 9.1998Z" }));
    OverflowMenuHorizontalIcon = styled_components_esm_default(Icon73).attrs(() => ({
      "data-component-name": "icons/OverflowMenuHorizontalIcon/OverflowMenuHorizontalIcon"
    })).withConfig({
      displayName: "OverflowMenuHorizontalIcon",
      componentId: "sc-10vqh4u-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/RenewIcon/RenewIcon.tsx
import React151 from "react";
var Icon74, RenewIcon;
var init_RenewIcon = __esm({
  "node_modules/@redocly/theme/src/icons/RenewIcon/RenewIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon74 = (props) => /* @__PURE__ */ React151.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React151.createElement("path", { d: "M6 4.99986H3.39C4.03668 4.00602 4.98721 3.24777 6.09991 2.83815C7.21262 2.42852 8.4279 2.38944 9.56462 2.72675C10.7013 3.06405 11.6986 3.75967 12.4078 4.70992C13.117 5.66017 13.5001 6.81415 13.5 7.99986H14.5C14.5014 6.6626 14.0903 5.35747 13.3227 4.26241C12.5552 3.16736 11.4686 2.33568 10.2111 1.88079C8.95358 1.4259 7.58637 1.36994 6.29589 1.72053C5.00541 2.07112 3.85447 2.8112 3 3.83986V1.99986H2V5.99986H6V4.99986Z" }), /* @__PURE__ */ React151.createElement("path", { d: "M10 10.9999H12.61C11.9633 11.9937 11.0128 12.7519 9.90009 13.1616C8.78739 13.5712 7.5721 13.6103 6.43539 13.273C5.29867 12.9357 4.30139 12.24 3.59221 11.2898C2.88303 10.3395 2.49993 9.18556 2.5 7.99986H1.5C1.49863 9.33711 1.90973 10.6422 2.67727 11.7373C3.4448 12.8324 4.53141 13.664 5.78892 14.1189C7.04642 14.5738 8.41363 14.6298 9.70411 14.2792C10.9946 13.9286 12.1455 13.1885 13 12.1599V13.9999H14V9.99986H10V10.9999Z" }));
    RenewIcon = styled_components_esm_default(Icon74).attrs(() => ({
      "data-component-name": "icons/RenewIcon/RenewIcon"
    })).withConfig({
      displayName: "RenewIcon",
      componentId: "sc-ck900v-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/WarningAltIcon/WarningAltIcon.tsx
import React152 from "react";
var Icon75, WarningAltIcon;
var init_WarningAltIcon = __esm({
  "node_modules/@redocly/theme/src/icons/WarningAltIcon/WarningAltIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon75 = (props) => /* @__PURE__ */ React152.createElement("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React152.createElement("path", { d: "M8 11.5C7.85167 11.5 7.70666 11.544 7.58333 11.6264C7.45999 11.7088 7.36386 11.826 7.30709 11.963C7.25033 12.1 7.23548 12.2508 7.26441 12.3963C7.29335 12.5418 7.36478 12.6754 7.46967 12.7803C7.57456 12.8852 7.7082 12.9567 7.85369 12.9856C7.99917 13.0145 8.14997 12.9997 8.28702 12.9429C8.42406 12.8862 8.54119 12.79 8.62361 12.6667C8.70602 12.5433 8.75 12.3983 8.75 12.25C8.75 12.0511 8.67099 11.8603 8.53033 11.7197C8.38968 11.579 8.19892 11.5 8 11.5Z" }), /* @__PURE__ */ React152.createElement("path", { d: "M8.5 6.00001H7.5V10.5H8.5V6.00001Z" }), /* @__PURE__ */ React152.createElement("path", { d: "M14.5 15H1.5C1.4141 15 1.32965 14.9779 1.25478 14.9357C1.17992 14.8936 1.11718 14.8329 1.0726 14.7595C1.02802 14.686 1.00311 14.6024 1.00027 14.5165C0.997436 14.4307 1.01677 14.3455 1.0564 14.2693L7.5564 1.76931C7.59862 1.68812 7.66231 1.62008 7.74053 1.5726C7.81875 1.52511 7.9085 1.5 8 1.5C8.09151 1.5 8.18126 1.52511 8.25948 1.5726C8.3377 1.62008 8.40138 1.68812 8.4436 1.76931L14.9436 14.2693C14.9832 14.3455 15.0026 14.4307 14.9997 14.5165C14.9969 14.6024 14.972 14.686 14.9274 14.7595C14.8828 14.8329 14.8201 14.8936 14.7452 14.9357C14.6704 14.9779 14.5859 15 14.5 15ZM2.32535 14H13.6747L13.6757 13.9984L8.001 3.08571H7.999L2.32435 13.9984L2.32535 14Z" }));
    WarningAltIcon = styled_components_esm_default(Icon75).attrs(() => ({
      "data-component-name": "icons/WarningAltIcon/WarningAltIcon"
    })).withConfig({
      displayName: "WarningAltIcon",
      componentId: "sc-v5goxc-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/JsonIcon/JsonIcon.tsx
import React153 from "react";
var Icon76, JsonIcon;
var init_JsonIcon = __esm({
  "node_modules/@redocly/theme/src/icons/JsonIcon/JsonIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon76 = (props) => /* @__PURE__ */ React153.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React153.createElement("path", { d: "M15.5 5.5V10.5H14.5L13.5 7.5V10.5H12.5V5.5H13.5L14.5 8.5V5.5H15.5Z" }), /* @__PURE__ */ React153.createElement("path", { d: "M10.6667 10.5H9.33325C9.11234 10.4997 8.90054 10.4119 8.74433 10.2557C8.58812 10.0995 8.50025 9.88766 8.5 9.66675V6.33325C8.50025 6.11234 8.58812 5.90054 8.74433 5.74433C8.90054 5.58812 9.11234 5.50025 9.33325 5.5H10.6667C10.8877 5.50025 11.0995 5.58812 11.2557 5.74433C11.4119 5.90054 11.4997 6.11234 11.5 6.33325V9.66675C11.4997 9.88766 11.4119 10.0995 11.2557 10.2557C11.0995 10.4119 10.8877 10.4997 10.6667 10.5ZM9.5 9.5H10.5V6.5H9.5V9.5Z" }), /* @__PURE__ */ React153.createElement("path", { d: "M6.66675 10.5H4.5V9.5H6.5V8.5H5.5C5.23486 8.49974 4.98066 8.39429 4.79319 8.20681C4.60571 8.01934 4.50026 7.76514 4.5 7.5V6.33325C4.50025 6.11234 4.58812 5.90054 4.74433 5.74433C4.90054 5.58812 5.11234 5.50025 5.33325 5.5H7.5V6.5H5.5V7.5H6.5C6.76514 7.50026 7.01934 7.60571 7.20681 7.79319C7.39429 7.98066 7.49974 8.23486 7.5 8.5V9.66675C7.49975 9.88766 7.41188 10.0995 7.25567 10.2557C7.09946 10.4119 6.88766 10.4997 6.66675 10.5Z" }), /* @__PURE__ */ React153.createElement("path", { d: "M2.66675 10.5H1.33325C1.11234 10.4997 0.900541 10.4119 0.744331 10.2557C0.588121 10.0995 0.500251 9.88766 0.5 9.66675V8.5H1.5V9.5H2.5V5.5H3.5V9.66675C3.49975 9.88766 3.41188 10.0995 3.25567 10.2557C3.09946 10.4119 2.88766 10.4997 2.66675 10.5Z" }));
    JsonIcon = styled_components_esm_default(Icon76).attrs(() => ({
      "data-component-name": "icons/JsonIcon/JsonIcon"
    })).withConfig({
      displayName: "JsonIcon",
      componentId: "sc-cwqsng-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/SubtractIcon/SubtractIcon.tsx
import React154 from "react";
var Icon77, SubtractIcon;
var init_SubtractIcon = __esm({
  "node_modules/@redocly/theme/src/icons/SubtractIcon/SubtractIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon77 = (props) => /* @__PURE__ */ React154.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React154.createElement("path", { d: "M12 7.5H4V8.5H12V7.5Z" }));
    SubtractIcon = styled_components_esm_default(Icon77).attrs(() => ({
      "data-component-name": "icons/SubtractIcon/SubtractIcon"
    })).withConfig({
      displayName: "SubtractIcon",
      componentId: "sc-pdkel7-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/PlusCustomIcon/PlusCustomIcon.tsx
import React155 from "react";
var Icon78, PlusCustomIcon;
var init_PlusCustomIcon = __esm({
  "node_modules/@redocly/theme/src/icons/PlusCustomIcon/PlusCustomIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon78 = (props) => /* @__PURE__ */ React155.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React155.createElement("rect", { x: "2.5", y: "2.5", width: "19", height: "19", rx: "9.5", stroke: "#DCDDE5" }), /* @__PURE__ */ React155.createElement("path", { d: "M12.5 11.5V8H11.5V11.5H8V12.5H11.5V16H12.5V12.5H16V11.5H12.5Z", fill: "#3B3C45" }));
    PlusCustomIcon = styled_components_esm_default(Icon78).attrs(() => ({
      "data-component-name": "icons/PlusCustomIcon/PlusCustomIcon"
    })).withConfig({
      displayName: "PlusCustomIcon",
      componentId: "sc-91bd1j-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/icons/CertificateIcon/CertificateIcon.tsx
import React156 from "react";
var Icon79, CertificateIcon;
var init_CertificateIcon = __esm({
  "node_modules/@redocly/theme/src/icons/CertificateIcon/CertificateIcon.tsx"() {
    init_styled_components_esm();
    init_utils();
    Icon79 = (props) => /* @__PURE__ */ React156.createElement("svg", { viewBox: "0 0 14 14", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React156.createElement("path", { d: "M10.5 6.4375L11.3365 8.05756L13.125 8.31744L11.8125 9.5L12.1498 11.25L10.5 10.2656L8.85019 11.25L9.1875 9.5L7.875 8.31744L9.7125 8.05756L10.5 6.4375Z", fill: "#1A1C21" }), /* @__PURE__ */ React156.createElement("path", { d: "M5.25 6H2.625V6.875H5.25V6Z", fill: "#1A1C21" }), /* @__PURE__ */ React156.createElement("path", { d: "M7 4.25H2.625V5.125H7V4.25Z", fill: "#1A1C21" }), /* @__PURE__ */ React156.createElement("path", { d: "M7 2.5H2.625V3.375H7V2.5Z", fill: "#1A1C21" }), /* @__PURE__ */ React156.createElement("path", { d: "M7 10.375H1.75V1.625H12.25V6H13.125V1.625C13.125 1.39294 13.0328 1.17038 12.8687 1.00628C12.7046 0.842187 12.4821 0.75 12.25 0.75H1.75C1.51794 0.75 1.29538 0.842187 1.13128 1.00628C0.967187 1.17038 0.875 1.39294 0.875 1.625V10.375C0.875 10.6071 0.967187 10.8296 1.13128 10.9937C1.29538 11.1578 1.51794 11.25 1.75 11.25H7V10.375Z", fill: "#1A1C21" }));
    CertificateIcon = styled_components_esm_default(Icon79).attrs(() => ({
      "data-component-name": "icons/CertificateIcon/CertificateIcon"
    })).withConfig({
      displayName: "CertificateIcon",
      componentId: "sc-8zlhzo-0"
    })(["path{fill:", ";}height:", ";width:", ";"], ({
      color
    }) => getCssColorVariable(color), ({
      size
    }) => size || "16px", ({
      size
    }) => size || "16px");
  }
});

// node_modules/@redocly/theme/src/layouts/RootLayout.tsx
import React157 from "react";
function RootLayout({ children }) {
  return /* @__PURE__ */ React157.createElement("div", { "data-component-name": "layouts/RootLayout" }, /* @__PURE__ */ React157.createElement(Navbar, null), children, /* @__PURE__ */ React157.createElement(Footer, null));
}
var init_RootLayout = __esm({
  "node_modules/@redocly/theme/src/layouts/RootLayout.tsx"() {
    init_Navbar();
    init_Footer();
  }
});

// node_modules/@redocly/theme/src/layouts/PageLayout.tsx
import React158 from "react";
function PageLayout({
  sidebar: sidebar2,
  children
}) {
  return /* @__PURE__ */ React158.createElement(Container, { "data-component-name": "Layout/PageLayout" }, sidebar2, /* @__PURE__ */ React158.createElement(ContentContainer, null, children));
}
var Container, ContentContainer;
var init_PageLayout = __esm({
  "node_modules/@redocly/theme/src/layouts/PageLayout.tsx"() {
    init_styled_components_esm();
    init_utils();
    Container = styled_components_esm_default.div.withConfig({
      displayName: "PageLayout__Container",
      componentId: "sc-15e4ape-0"
    })(["display:flex;flex-direction:row;min-height:calc(100vh - var(--navbar-height));@media screen and (min-width:", "){max-width:var(--container-max-width);margin-left:auto;margin-right:auto;}"], breakpoints.max);
    ContentContainer = styled_components_esm_default.div.withConfig({
      displayName: "PageLayout__ContentContainer",
      componentId: "sc-15e4ape-1"
    })(["flex:1 0 0;width:0;max-width:100%;"]);
  }
});

// node_modules/@redocly/theme/src/index.ts
var src_exports = {};
__export(src_exports, {
  AddIcon: () => AddIcon,
  Admonition: () => Admonition,
  AfterOpenApiOperation: () => AfterOpenApiOperation,
  AfterOpenApiTitle: () => AfterOpenApiTitle,
  AppCustomAttributes: () => AppCustomAttributes,
  ArrowLeftIcon: () => ArrowLeftIcon,
  ArrowRightIcon: () => ArrowRightIcon,
  ArrowUpRightIcon: () => ArrowUpRightIcon,
  Badge: () => Badge,
  BareMetalServerIcon: () => BareMetalServerIcon,
  BeforeOpenApiOperation: () => BeforeOpenApiOperation,
  BookmarkAddIcon: () => BookmarkAddIcon,
  Breadcrumb: () => Breadcrumb,
  Breadcrumbs: () => Breadcrumbs,
  Button: () => Button,
  CatalogActions: () => CatalogActions,
  CatalogCard: () => CatalogCard,
  CatalogDescription: () => CatalogDescription,
  CatalogHighlight: () => CatalogHighlight,
  CatalogInfoBlock: () => CatalogInfoBlock,
  CatalogPageContent: () => CatalogPageContent,
  CatalogPageDescriptionWrapper: () => CatalogPageDescriptionWrapper,
  CatalogPageWrapper: () => CatalogPageWrapper,
  CatalogTitle: () => CatalogTitle,
  CertificateIcon: () => CertificateIcon,
  ChangeViewButton: () => ChangeViewButton,
  CharacterIcon: () => CharacterIcon,
  CheckboxIcon: () => CheckboxIcon,
  CheckmarkFilledIcon: () => CheckmarkFilledIcon,
  CheckmarkIcon: () => CheckmarkIcon,
  ChevronDownIcon: () => ChevronDownIcon,
  ChevronLeftIcon: () => ChevronLeftIcon,
  ChevronRightIcon: () => ChevronRightIcon,
  ChevronSortIcon: () => ChevronSortIcon,
  ChevronUpIcon: () => ChevronUpIcon,
  CircleDashIcon: () => CircleDashIcon,
  CleanIcon: () => CleanIcon,
  ClipboardService: () => ClipboardService,
  CloseFilledIcon: () => CloseFilledIcon,
  CloseIcon: () => CloseIcon,
  CloseOutlineIcon: () => CloseOutlineIcon,
  CloudUploadIcon: () => CloudUploadIcon,
  CodeBlock: () => CodeBlock,
  CodeBlockContainer: () => CodeBlockContainer,
  CodeBlockControls: () => CodeBlockControls,
  CodeIcon: () => CodeIcon,
  ColorModeSwitcher: () => ColorModeSwitcher,
  Comment: () => Comment,
  CompactTypography: () => CompactTypography,
  ContrastIcon: () => ContrastIcon,
  ControlsWrap: () => ControlsWrap,
  ControlsWrapChangeLayoutButtons: () => ControlsWrapChangeLayoutButtons,
  CookieIcon: () => CookieIcon,
  CopyButton: () => CopyButton,
  CopyIcon: () => CopyIcon,
  CopyLinkIcon: () => CopyLinkIcon,
  CounterTag: () => CounterTag,
  DEFAULT_FEEDBACK_TYPE: () => DEFAULT_FEEDBACK_TYPE,
  DEFAULT_LOCALE_PLACEHOLDER: () => DEFAULT_LOCALE_PLACEHOLDER,
  DataFormatIcon: () => DataFormatIcon,
  DatabaseIcon: () => DatabaseIcon,
  DatePicker: () => DatePicker,
  DeselectIcon: () => DeselectIcon,
  DocumentAddIcon: () => DocumentAddIcon,
  DocumentBlankIcon: () => DocumentBlankIcon,
  DocumentIcon: () => DocumentIcon,
  DownloadIcon: () => DownloadIcon,
  Dropdown: () => Dropdown,
  DropdownMenu: () => DropdownMenu,
  DropdownMenuItem: () => DropdownMenuItem,
  EditIcon: () => EditIcon,
  EditPageButton: () => EditPageButton,
  EmailButton: () => EmailButton,
  EmailIcon: () => EmailIcon,
  Emphasis: () => Emphasis,
  ErrorIcon: () => ErrorIcon,
  ExportIcon: () => ExportIcon,
  FEEDBACK_MAX_RATING: () => FEEDBACK_MAX_RATING,
  FEEDBACK_TYPES: () => FEEDBACK_TYPES,
  FaceDissatisfiedIcon: () => FaceDissatisfiedIcon,
  FaceNeutralIcon: () => FaceNeutralIcon,
  FaceSatisfiedIcon: () => FaceSatisfiedIcon,
  Feedback: () => Feedback,
  FileIcon: () => FileIcon,
  FileStorageIcon: () => FileStorageIcon,
  Filter: () => Filter,
  FilterCheckboxes: () => FilterCheckboxes,
  FilterContent: () => FilterContent,
  FilterDateRange: () => FilterDateRange,
  FilterIcon: () => FilterIcon,
  FilterInput: () => FilterInput,
  FilterOption: () => FilterOption,
  FilterOptionLabel: () => FilterOptionLabel,
  FilterOptions: () => FilterOptions,
  FilterPopover: () => FilterPopover,
  FilterSelect: () => FilterSelect,
  FilterTitle: () => FilterTitle,
  FolderAddIcon: () => FolderAddIcon,
  FolderIcon: () => FolderIcon,
  FolderMoveToIcon: () => FolderMoveToIcon,
  Footer: () => Footer,
  FooterColumn: () => FooterColumn,
  FooterCopyright: () => FooterCopyright,
  FooterItem: () => FooterItem,
  FooterLogo: () => FooterLogo,
  Forbidden: () => Forbidden,
  GlobalOutlinedIcon: () => GlobalOutlinedIcon,
  GlobalStyle: () => GlobalStyle,
  H1: () => H1,
  H2: () => H2,
  H3: () => H3,
  H4: () => H4,
  HighlightContext: () => HighlightContext,
  HorizontalViewIcon: () => HorizontalViewIcon,
  HttpTag: () => HttpTag,
  IBMCloudHyperProtectCryptoServicesIcon: () => IBMCloudHyperProtectCryptoServicesIcon,
  IS_BROWSER: () => IS_BROWSER,
  InformationFilledIcon: () => InformationFilledIcon,
  InformationIcon: () => InformationIcon,
  JsonIcon: () => JsonIcon,
  JsonViewer: () => JsonViewer,
  JsonViewerWrap: () => JsonViewerWrap,
  LanguagePicker: () => LanguagePicker,
  LaunchIcon: () => LaunchIcon,
  LayoutVariant: () => LayoutVariant,
  Link: () => Link,
  LinkIcon: () => LinkIcon,
  Loading: () => Loading,
  LoginButton: () => LoginButton,
  LogoutIcon: () => LogoutIcon,
  LogoutMenuItem: () => LogoutMenuItem,
  MAX_SCALE: () => MAX_SCALE,
  MOOD_STATES: () => MOOD_STATES,
  Markdown: () => Markdown,
  MaximizeIcon: () => MaximizeIcon,
  Menu: () => Menu,
  MenuContainer: () => MenuContainer,
  MenuIcon: () => MenuIcon,
  MenuItem: () => MenuItem,
  MenuItemType: () => MenuItemType,
  MenuMobile: () => MenuMobile,
  MinimizeIcon: () => MinimizeIcon,
  MobileMenuType: () => MobileMenuType,
  MobileSidebarIcon: () => MobileSidebarIcon,
  Mood: () => Mood,
  MoonIcon: () => MoonIcon,
  Navbar: () => Navbar,
  NavbarItem: () => NavbarItem,
  NavbarLogo: () => NavbarLogo,
  NavbarMenu: () => NavbarMenu,
  NewTabButton: () => NewTabButton,
  NotFound: () => NotFound,
  OIDCForbidden: () => OIDCForbidden,
  OpenApiFooter: () => OpenApiFooter,
  OpenApiHeader: () => OpenApiHeader,
  OverflowMenuHorizontalIcon: () => OverflowMenuHorizontalIcon,
  OverflowMenuVerticalIcon: () => OverflowMenuVerticalIcon,
  PageLayout: () => PageLayout,
  Panel: () => Panel,
  PanelBody: () => PanelBody,
  PanelHeader: () => PanelHeader,
  PanelHeaderTitle: () => PanelHeaderTitle,
  PlusCustomIcon: () => PlusCustomIcon,
  Portal: () => Portal,
  Product: () => Product,
  ProductPicker: () => ProductPicker,
  REDOCLY_TEAMS_RBAC: () => REDOCLY_TEAMS_RBAC,
  Rating: () => Rating,
  Reasons: () => Reasons,
  RecentlyViewedIcon: () => RecentlyViewedIcon,
  RenewIcon: () => RenewIcon,
  ReportDialog: () => ReportDialog,
  ResetIcon: () => ResetIcon,
  RestartIcon: () => RestartIcon,
  RocketIcon: () => RocketIcon,
  RootLayout: () => RootLayout,
  SaveIcon: () => SaveIcon,
  Scale: () => Scale,
  Search: () => Search,
  SearchAiResponse: () => SearchAiResponse,
  SearchDialog: () => SearchDialog,
  SearchFilter: () => SearchFilter,
  SearchFilterField: () => SearchFilterField,
  SearchFilterFieldSelect: () => SearchFilterFieldSelect,
  SearchFilterFieldTags: () => SearchFilterFieldTags,
  SearchGroups: () => SearchGroups,
  SearchIcon: () => SearchIcon,
  SearchInput: () => SearchInput,
  SearchItem: () => SearchItem,
  SearchRecent: () => SearchRecent,
  SearchShortcut: () => SearchShortcut,
  SearchSuggestedPages: () => SearchSuggestedPages,
  SearchTrigger: () => SearchTrigger,
  SectionHeader: () => SectionHeader,
  SecurityIcon: () => SecurityIcon,
  SecurityVariablesEnvSuffix: () => SecurityVariablesEnvSuffix,
  Segmented: () => Segmented,
  Select: () => Select,
  SelectIcon: () => SelectIcon,
  SelectWrapper: () => SelectWrapper,
  Sentiment: () => Sentiment,
  SettingsIcon: () => SettingsIcon,
  SidePanelCloseIcon: () => SidePanelCloseIcon,
  SidePanelOpenIcon: () => SidePanelOpenIcon,
  Sidebar: () => Sidebar,
  SidebarActions: () => SidebarActions,
  SidebarLogo: () => SidebarLogo,
  Spinner: () => Spinner,
  SpinnerIcon: () => SpinnerIcon,
  StarFilledIcon: () => StarFilledIcon,
  StarIcon: () => StarIcon,
  Stars: () => Stars,
  StatusCode: () => StatusCode,
  StyledChangeViewButton: () => StyledChangeViewButton,
  StyledChangeViewButtonWrap: () => StyledChangeViewButtonWrap,
  SubtractIcon: () => SubtractIcon,
  SunIcon: () => SunIcon,
  Switch: () => Switch,
  TableBuiltIcon: () => TableBuiltIcon,
  TableOfContent: () => TableOfContent,
  Tag: () => Tag,
  ThemeDataContext: () => ThemeDataContext,
  ThreePanelLayout: () => ThreePanelLayout,
  TimeIcon: () => TimeIcon,
  Tooltip: () => Tooltip,
  TooltipComponent: () => TooltipComponent,
  TrashCanIcon: () => TrashCanIcon,
  Typography: () => Typography,
  UserAvatar: () => UserAvatar,
  UserIcon: () => UserIcon,
  UserInfoMenuItem: () => UserInfoMenuItem,
  UserMenu: () => UserMenu,
  UserMenuMobile: () => UserMenuMobile,
  ValueVariableIcon: () => ValueVariableIcon,
  VersionPicker: () => VersionPicker,
  VersionPickerSelect: () => VersionPickerSelect,
  VerticalViewIcon: () => VerticalViewIcon,
  ViewIcon: () => ViewIcon,
  ViewOffIcon: () => ViewOffIcon,
  WarningAltIcon: () => WarningAltIcon,
  WarningFilledIcon: () => WarningFilledIcon,
  WarningSquareIcon: () => WarningSquareIcon,
  addLeadingSlash: () => addLeadingSlash,
  addLineNumbers: () => addLineNumbers,
  addTrailingSlash: () => addTrailingSlash,
  breakpoints: () => breakpoints,
  buildLanguagesGroup: () => buildLanguagesGroup,
  buildVersionSection: () => buildVersionSection,
  capitalize: () => capitalize,
  changeTextCasing: () => changeTextCasing,
  clearAnimationTimeout: () => clearAnimationTimeout,
  combineUrls: () => combineUrls,
  concatClassNames: () => concatClassNames,
  darkMode: () => darkMode,
  extendDetailsBehaviour: () => extendDetailsBehaviour,
  findDeepFirst: () => findDeepFirst,
  formatDateWithoutTimeZone: () => formatDateWithoutTimeZone,
  generateClassName: () => generateClassName,
  generateCodeBlockTokens: () => generateCodeBlockTokens,
  getAutoHeightDuration: () => getAutoHeightDuration,
  getCssColorVariable: () => getCssColorVariable,
  getDisplayedHeadings: () => getDisplayedHeadings,
  getDisplayedHeadingsIds: () => getDisplayedHeadingsIds,
  getElementHeight: () => getElementHeight,
  getLeastDepth: () => getLeastDepth,
  getLocaleFromPathname: () => getLocaleFromPathname,
  getMenuItemType: () => getMenuItemType,
  getNavbarElement: () => getNavbarElement,
  getPathPrefix: () => getPathPrefix,
  getPathnameForLocale: () => getPathnameForLocale,
  getScorecardColorVariable: () => getScorecardColorVariable,
  getTypographyCssRulesByComponentName: () => getTypographyCssRulesByComponentName,
  headingAnchorCss: () => headingAnchorCss,
  isBrowser: () => isBrowser,
  isEmptyArray: () => isEmptyArray,
  isFromToSelectedOptions: () => isFromToSelectedOptions,
  isItemActive: () => isItemActive,
  isNavLinkItem: () => isNavLinkItem,
  isNotNull: () => isNotNull,
  isNull: () => isNull,
  isObject: () => isObject,
  isPathInFolder: () => isPathInFolder,
  isPrimitive: () => isPrimitive,
  isString: () => isString,
  isTag: () => isTag,
  isUndefined: () => isUndefined,
  loadAndNavigate: () => loadAndNavigate,
  mapNavbarItems: () => mapNavbarItems,
  markdoc: () => default_exports2,
  markdownBaseTableCss: () => markdownBaseTableCss,
  markdownLinksCss: () => markdownLinksCss,
  normalizePathPrefix: () => normalizePathPrefix,
  onDocumentReady: () => onDocumentReady,
  parseSrcSet: () => parseSrcSet,
  removeLeadingSlash: () => removeLeadingSlash,
  removeTrailingSlash: () => removeTrailingSlash,
  setAnimationTimeout: () => setAnimationTimeout,
  slash: () => slash,
  slug: () => slug,
  stringToHslColor: () => stringToHslColor,
  styles: () => styles,
  toStringIfDefined: () => toStringIfDefined,
  trimText: () => trimText,
  typedMemo: () => typedMemo,
  typography: () => typography,
  useActiveHeading: () => useActiveHeading,
  useActiveSectionId: () => useActiveSectionId,
  useCodeBlockTabsControls: () => useCodeBlockTabsControls,
  useCollapse: () => useCollapse,
  useColorSwitcher: () => useColorSwitcher,
  useControl: () => useControl,
  useControlledState: () => useControlledState,
  useDialogHotKeys: () => useDialogHotKeys,
  useEvent: () => useEvent,
  useFocusTrap: () => useFocusTrap,
  useFullHeight: () => useFullHeight,
  useLanguagePicker: () => useLanguagePicker,
  useMenuItemExpanded: () => useMenuItemExpanded,
  useMobileMenu: () => useMobileMenu,
  useMobileMenuItems: () => useMobileMenuItems,
  useMobileMenuLevels: () => useMobileMenuLevels,
  useModalScrollLock: () => useModalScrollLock,
  useMount: () => useMount,
  useNavbarHeight: () => useNavbarHeight,
  useNestedMenu: () => useNestedMenu,
  useOutsideClick: () => useOutsideClick,
  useProductPicker: () => useProductPicker,
  useRecentSearches: () => useRecentSearches,
  useReportDialog: () => useReportDialog,
  useSearchDialog: () => useSearchDialog,
  useSearchFilter: () => useSearchFilter,
  useSuggestedPages: () => useSuggestedPages,
  useTabs: () => useTabs,
  useThemeConfig: () => useThemeConfig,
  useThemeHooks: () => useThemeHooks,
  useUnmount: () => useUnmount,
  withLoadProgress: () => withLoadProgress,
  withPathPrefix: () => withPathPrefix,
  withoutHash: () => withoutHash,
  withoutPathPrefix: () => withoutPathPrefix
});
var init_src = __esm({
  "node_modules/@redocly/theme/src/index.ts"() {
    init_core();
    init_config();
    init_Button();
    init_JsonViewer();
    init_Tag();
    init_TableOfContent();
    init_ColorModeSwitcher();
    init_Switch();
    init_Select();
    init_Badge();
    init_Dropdown();
    init_DropdownMenu();
    init_DropdownMenuItem();
    init_Loading();
    init_Link();
    init_Portal();
    init_Segmented();
    init_LanguagePicker();
    init_Tooltip();
    init_HttpTag();
    init_CounterTag();
    init_VersionPicker();
    init_CopyButton();
    init_EditPageButton();
    init_EmailButton();
    init_NewTabButton();
    init_Markdown();
    init_baseTable();
    init_headingAnchor();
    init_links();
    init_Admonition();
    init_AppCustomAttributes();
    init_Navbar();
    init_NavbarItem();
    init_NavbarLogo();
    init_NavbarMenu();
    init_Footer();
    init_FooterColumn();
    init_FooterCopyright();
    init_FooterItem();
    init_FooterLogo();
    init_CompactTypography();
    init_Emphasis();
    init_H1();
    init_H2();
    init_H3();
    init_H4();
    init_SectionHeader();
    init_Typography();
    init_SidebarLogo();
    init_CodeBlock();
    init_CodeBlockContainer();
    init_CodeBlockControls();
    init_Panel();
    init_PanelBody();
    init_PanelHeader();
    init_PanelHeaderTitle();
    init_Comment();
    init_Feedback();
    init_Mood();
    init_Rating();
    init_Reasons();
    init_ReportDialog();
    init_Scale();
    init_Sentiment();
    init_Stars();
    init_UserMenu();
    init_LoginButton();
    init_LogoutMenuItem();
    init_UserAvatar();
    init_UserInfoMenuItem();
    init_UserMenuMobile();
    init_Sidebar();
    init_AfterOpenApiOperation();
    init_AfterOpenApiTitle();
    init_BeforeOpenApiOperation();
    init_OpenApiFooter();
    init_OpenApiHeader();
    init_ChangeViewButton();
    init_SidebarActions();
    init_styled();
    init_Filter();
    init_FilterContent();
    init_FilterPopover();
    init_FilterCheckboxes();
    init_FilterDateRange();
    init_FilterInput();
    init_FilterSelect();
    init_FilterOptions();
    init_FilterOption();
    init_FilterTitle();
    init_FilterOptionLabel();
    init_Menu();
    init_MenuContainer();
    init_MenuItem();
    init_MenuMobile();
    init_Breadcrumb();
    init_Breadcrumbs();
    init_Catalog();
    init_CatalogCard();
    init_CatalogActions();
    init_CatalogHighlight();
    init_CatalogInfoBlock();
    init_Product();
    init_ProductPicker();
    init_StatusCode();
    init_Search();
    init_SearchDialog();
    init_SearchInput();
    init_SearchItem();
    init_SearchShortcut();
    init_SearchTrigger();
    init_SearchRecent();
    init_SearchSuggestedPages();
    init_SearchGroups();
    init_SearchFilter();
    init_SearchFilterField();
    init_SearchFilterFieldSelect();
    init_SearchFilterFieldTags();
    init_SearchAiResponse();
    init_ArrowRightIcon();
    init_ArrowUpRightIcon();
    init_ArrowLeftIcon();
    init_AddIcon();
    init_BookmarkAddIcon();
    init_SpinnerIcon();
    init_CopyIcon();
    init_CleanIcon();
    init_DeselectIcon();
    init_FileStorageIcon();
    init_FolderAddIcon();
    init_FolderIcon();
    init_FolderMoveToIcon();
    init_SelectIcon();
    init_SettingsIcon();
    init_CloseIcon();
    init_CloseOutlineIcon();
    init_CloseFilledIcon();
    init_LogoutIcon();
    init_CheckboxIcon();
    init_ErrorIcon();
    init_EditIcon();
    init_FaceSatisfiedIcon();
    init_DataFormatIcon();
    init_Spinner();
    init_CheckmarkIcon();
    init_DownloadIcon();
    init_DocumentAddIcon();
    init_EmailIcon();
    init_SaveIcon();
    init_CloudUploadIcon();
    init_RocketIcon();
    init_SidePanelOpenIcon();
    init_SidePanelCloseIcon();
    init_SearchIcon();
    init_FilterIcon();
    init_SecurityIcon();
    init_CodeIcon();
    init_DatabaseIcon();
    init_TimeIcon();
    init_CookieIcon();
    init_ViewIcon();
    init_ViewOffIcon();
    init_CircleDashIcon();
    init_RestartIcon();
    init_WarningFilledIcon();
    init_CheckmarkFilledIcon();
    init_InformationFilledIcon();
    init_BareMetalServerIcon();
    init_RecentlyViewedIcon();
    init_StarIcon();
    init_StarFilledIcon();
    init_ChevronLeftIcon();
    init_ChevronDownIcon();
    init_ChevronUpIcon();
    init_ChevronRightIcon();
    init_VerticalViewIcon();
    init_HorizontalViewIcon();
    init_MobileSidebarIcon();
    init_CopyLinkIcon();
    init_OverflowMenuHorizontalIcon();
    init_RenewIcon();
    init_ResetIcon();
    init_WarningAltIcon();
    init_MoonIcon();
    init_SunIcon();
    init_ContrastIcon();
    init_LinkIcon();
    init_LaunchIcon();
    init_MinimizeIcon();
    init_MaximizeIcon();
    init_DocumentBlankIcon();
    init_WarningSquareIcon();
    init_MenuIcon();
    init_GlobalOutlinedIcon();
    init_FaceDissatisfiedIcon();
    init_FaceNeutralIcon();
    init_OverflowMenuVerticalIcon();
    init_TrashCanIcon();
    init_UserIcon();
    init_IBMCloudHyperProtectCryptoServicesIcon();
    init_TableBuiltIcon();
    init_ValueVariableIcon();
    init_InformationIcon();
    init_ChevronSortIcon();
    init_DocumentIcon();
    init_JsonIcon();
    init_SubtractIcon();
    init_PlusCustomIcon();
    init_CharacterIcon();
    init_FileIcon();
    init_ExportIcon();
    init_CertificateIcon();
    init_RootLayout();
    init_PageLayout();
    init_NotFound();
    init_Forbidden();
    init_OIDCForbidden();
    init_ThreePanelLayout();
    init_default2();
    init_DatePicker();
  }
});

export {
  ChevronRightIcon,
  Badge,
  Menu,
  init_Menu,
  CircleDashIcon,
  Spinner,
  CloseFilledIcon,
  DocumentIcon,
  CleanIcon,
  RootLayout,
  init_RootLayout,
  PageLayout,
  init_PageLayout,
  WarningFilledIcon,
  init_WarningFilledIcon,
  Admonition,
  Admonition2,
  init_Admonition2 as init_Admonition,
  Portal,
  DocumentBlankIcon,
  CopyButton,
  MaximizeIcon,
  CodeBlock,
  LinkIcon,
  default_exports,
  Tag2 as Tag,
  ast_default,
  renderers_default,
  parse3,
  transform2,
  Markdoc,
  init_dist,
  tags,
  default_exports2,
  init_default2 as init_default,
  SidePanelCloseIcon,
  SidePanelOpenIcon,
  SidebarActions,
  init_SidebarActions,
  VersionPicker,
  init_VersionPicker,
  SubtractIcon,
  init_SubtractIcon,
  AddIcon,
  init_AddIcon,
  typedMemo,
  GlobalStyle,
  init_styles,
  JsonViewer,
  Switch,
  Segmented,
  EmailButton,
  ArrowUpRightIcon,
  NewTabButton,
  Typography,
  H1,
  H3,
  H4,
  SidebarLogo,
  PanelBody,
  PanelHeader,
  PanelHeaderTitle,
  Panel,
  AfterOpenApiOperation,
  AfterOpenApiTitle,
  BeforeOpenApiOperation,
  OpenApiFooter,
  OpenApiHeader,
  CatalogInfoBlock,
  init_CatalogInfoBlock,
  StatusCode,
  BookmarkAddIcon,
  SpinnerIcon,
  FileStorageIcon,
  FolderAddIcon,
  FolderIcon,
  CloseOutlineIcon,
  DataFormatIcon,
  DownloadIcon,
  DocumentAddIcon,
  SaveIcon,
  CloudUploadIcon,
  RocketIcon,
  SecurityIcon,
  CodeIcon,
  TimeIcon,
  CookieIcon,
  ViewIcon,
  ViewOffIcon,
  RestartIcon,
  OverflowMenuVerticalIcon,
  TrashCanIcon,
  IBMCloudHyperProtectCryptoServicesIcon,
  TableBuiltIcon,
  ValueVariableIcon,
  InformationIcon,
  ChevronSortIcon,
  JsonIcon,
  CharacterIcon,
  FileIcon,
  ExportIcon,
  ThreePanelLayout,
  init_ThreePanelLayout,
  src_exports,
  init_src
};
