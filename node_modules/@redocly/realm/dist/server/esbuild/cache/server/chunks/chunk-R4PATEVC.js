import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  __esm
} from "./chunk-35AYGKFE.js";

// node_modules/@redocly/config/lib-esm/constants.js
var DEFAULT_TEAM_CLAIM_NAME, AuthProviderType, ApigeeDevOnboardingIntegrationAuthType, REDOCLY_TEAMS_RBAC, REDOCLY_ROUTE_RBAC, LayoutVariant;
var init_constants = __esm({
  "node_modules/@redocly/config/lib-esm/constants.js"() {
    DEFAULT_TEAM_CLAIM_NAME = "https://redocly.com/sso/teams";
    (function(AuthProviderType2) {
      AuthProviderType2["OIDC"] = "OIDC";
      AuthProviderType2["SAML2"] = "SAML2";
    })(AuthProviderType || (AuthProviderType = {}));
    (function(ApigeeDevOnboardingIntegrationAuthType2) {
      ApigeeDevOnboardingIntegrationAuthType2["SERVICE_ACCOUNT"] = "SERVICE_ACCOUNT";
      ApigeeDevOnboardingIntegrationAuthType2["OAUTH2"] = "OAUTH2";
    })(ApigeeDevOnboardingIntegrationAuthType || (ApigeeDevOnboardingIntegrationAuthType = {}));
    REDOCLY_TEAMS_RBAC = "redocly::teams-rbac";
    REDOCLY_ROUTE_RBAC = "redocly::route-rbac";
    (function(LayoutVariant2) {
      LayoutVariant2["STACKED"] = "stacked";
      LayoutVariant2["THREE_PANEL"] = "three-panel";
    })(LayoutVariant || (LayoutVariant = {}));
  }
});

// node_modules/@redocly/config/lib-esm/feedback-config-schema.js
var reasonsBaseProperties, reasonsSettingsSchema, feedbackConfigSchema;
var init_feedback_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/feedback-config-schema.js"() {
    reasonsBaseProperties = {
      hide: {
        type: "boolean",
        default: false
      },
      component: {
        type: "string",
        enum: ["radio", "checkbox"],
        default: "checkbox"
      },
      label: { type: "string" },
      items: { type: "array", items: { type: "string" } }
    };
    reasonsSettingsSchema = {
      type: "object",
      properties: reasonsBaseProperties,
      additionalProperties: false
    };
    feedbackConfigSchema = {
      type: "object",
      properties: {
        hide: {
          type: "boolean",
          default: false
        },
        type: {
          type: "string",
          enum: ["rating", "sentiment", "comment", "reasons", "mood", "scale"],
          default: "sentiment"
        },
        settings: {
          type: "object",
          properties: {
            label: { type: "string" },
            submitText: { type: "string" },
            buttonText: { type: "string" },
            component: {
              type: "string",
              enum: ["radio", "checkbox"],
              default: "checkbox"
            },
            items: { type: "array", items: { type: "string" }, minItems: 1 },
            leftScaleLabel: { type: "string" },
            rightScaleLabel: { type: "string" },
            reasons: {
              type: "object",
              properties: Object.assign(Object.assign({}, reasonsBaseProperties), { like: reasonsSettingsSchema, dislike: reasonsSettingsSchema, satisfied: reasonsSettingsSchema, neutral: reasonsSettingsSchema, dissatisfied: reasonsSettingsSchema }),
              additionalProperties: false
            },
            comment: {
              type: "object",
              properties: {
                hide: {
                  type: "boolean",
                  default: false
                },
                label: { type: "string" },
                likeLabel: { type: "string" },
                dislikeLabel: { type: "string" },
                satisfiedLabel: { type: "string" },
                neutralLabel: { type: "string" },
                dissatisfiedLabel: { type: "string" }
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      },
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/graphql-config-schema.js
var typeGroupConfig, menuGroupConfig, menuGroupingConfig, graphqlConfigSchema;
var init_graphql_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/graphql-config-schema.js"() {
    init_feedback_config_schema();
    typeGroupConfig = {
      type: "object",
      properties: {
        includeByName: {
          type: "array",
          items: {
            type: "string"
          }
        },
        excludeByName: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      additionalProperties: false
    };
    menuGroupConfig = {
      type: "object",
      properties: {
        name: {
          type: "string"
        },
        items: typeGroupConfig,
        queries: typeGroupConfig,
        mutations: typeGroupConfig,
        subscriptions: typeGroupConfig,
        types: typeGroupConfig,
        directives: typeGroupConfig
      },
      required: ["name"],
      additionalProperties: false
    };
    menuGroupingConfig = {
      type: "object",
      properties: {
        requireExactGroups: {
          type: "boolean"
        },
        groups: {
          type: "array",
          items: menuGroupConfig
        },
        otherItemsGroupName: {
          type: "string"
        }
      },
      required: ["requireExactGroups", "groups", "otherItemsGroupName"],
      additionalProperties: false
    };
    graphqlConfigSchema = {
      type: "object",
      properties: {
        hidePaginationButtons: {
          type: "boolean"
        },
        menu: {
          type: "object",
          properties: Object.assign({}, menuGroupingConfig.properties),
          additionalProperties: false
        },
        sidebar: {
          type: "object",
          properties: {
            hide: {
              type: "boolean"
            }
          }
        },
        apiLogo: {
          type: "object",
          properties: {
            imageUrl: {
              type: "string"
            },
            href: {
              type: "string"
            },
            altText: {
              type: "string"
            },
            backgroundColor: {
              type: "string"
            }
          }
        },
        jsonSamplesDepth: {
          type: "number"
        },
        samplesMaxInlineArgs: {
          type: "number"
        },
        licenseKey: {
          type: "string"
        },
        fieldExpandLevel: {
          type: "number"
        },
        baseUrlPath: {
          type: "string"
        },
        feedback: feedbackConfigSchema
      },
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/redoc-config-schema.js
var codeSamplesConfigSchema, downloadUrlsSchema, redocConfigSchema;
var init_redoc_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/redoc-config-schema.js"() {
    init_feedback_config_schema();
    codeSamplesConfigSchema = {
      type: "object",
      properties: {
        languages: {
          type: "array",
          items: {
            type: "object",
            properties: {
              lang: {
                type: "string",
                enum: [
                  "curl",
                  "JavaScript",
                  "Node.js",
                  "Python",
                  "Java8+Apache",
                  "Java",
                  "C#",
                  "C#+Newtonsoft",
                  "PHP",
                  "Go",
                  "Ruby",
                  "R",
                  "Payload"
                ]
              },
              label: { type: "string" },
              options: {
                type: "object",
                properties: {
                  indent: { type: "string" },
                  withImports: { type: "boolean" },
                  withComments: { type: "boolean" },
                  binary: { type: "boolean" },
                  credentials: {
                    type: "string",
                    enum: ["omit", "same-origin", "include"]
                  }
                },
                additionalProperties: false
              }
            },
            required: ["lang"],
            additionalProperties: false
          }
        },
        skipOptionalParameters: { type: "boolean" },
        withOAuth2Call: { type: "boolean" }
      },
      required: ["languages"],
      additionalProperties: false
    };
    downloadUrlsSchema = {
      type: "array",
      items: {
        type: "object",
        properties: {
          title: { type: "string" },
          url: { type: "string" }
        },
        required: ["url"],
        additionalProperties: false
      }
    };
    redocConfigSchema = {
      type: "object",
      properties: {
        licenseKey: { type: "string" },
        hideLoading: { type: "boolean" },
        disableRouter: { type: "boolean" },
        hideSidebar: { type: "boolean" },
        feedback: feedbackConfigSchema,
        hideReplay: { type: "boolean" },
        oAuth2RedirectURI: { type: "string", nullable: true },
        corsProxyUrl: { type: "string" },
        sortRequiredPropsFirst: { type: "boolean" },
        sanitize: { type: "boolean" },
        hideDownloadButtons: { type: "boolean" },
        downloadUrls: downloadUrlsSchema,
        onlyRequiredInSamples: { type: "boolean" },
        generatedSamplesMaxDepth: { oneOf: [{ type: "number" }, { type: "string" }] },
        showExtensions: {
          oneOf: [
            { type: "boolean" },
            { type: "string" },
            { type: "array", items: { type: "string" } }
          ]
        },
        hideSchemaTitles: { type: "boolean" },
        jsonSamplesExpandLevel: { oneOf: [{ type: "number" }, { type: "string" }] },
        schemasExpansionLevel: { oneOf: [{ type: "number" }, { type: "string" }] },
        mockServer: {
          type: "object",
          properties: {
            url: { type: "string" },
            position: { type: "string", enum: ["first", "last", "replace", "off"] },
            description: { type: "string" }
          }
        },
        maxDisplayedEnumValues: { type: "number" },
        schemaDefinitionsTagName: { type: "string" },
        layout: { type: "string", enum: ["stacked", "three-panel"] },
        hideInfoMetadata: { type: "boolean" },
        events: { type: "object" },
        skipBundle: { type: "boolean" },
        routingBasePath: { type: "string" },
        codeSamples: codeSamplesConfigSchema,
        ignoreNamedSchemas: {
          oneOf: [{ type: "array", items: { type: "string" } }, { type: "string" }]
        },
        hidePropertiesPrefix: { type: "boolean" },
        excludeFromSearch: { type: "boolean" }
      },
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/reference-docs-config-schema.js
function pickObjectProps(object, keys) {
  return Object.fromEntries(keys.filter((key) => key in object).map((key) => [key, object[key]]));
}
function omitObjectProps(object, keys) {
  return Object.fromEntries(Object.entries(object).filter(([key]) => !keys.includes(key)));
}
var ConfigLanguage, ConfigLabels, CommonConfigSidebarLinks, ConfigSidebarLinks, CommonThemeColors, CommonColorProps, BorderThemeColors, HttpColors, ResponseColors, SecondaryColors, TextThemeColors, ThemeColors, SizeProps, Sizes, FontConfig, ButtonsConfig, BadgeFontConfig, BadgeSizes, HttpBadgesConfig, LabelControls, Panels, TryItButton, ConfigThemeComponents, Breakpoints, StackedConfig, ThreePanelConfig, Layout, SchemaColorsConfig, ConfigThemeSchema, GroupItemsConfig, Level1Items, SpacingConfig, Sidebar, Heading, CodeConfig, HeadingsConfig, LinksConfig, Typography, TokenProps, CodeBlock, ConfigThemeLogo, Fab, ButtonOverrides, Overrides, RightPanel, Shape, ThemeSpacing, ConfigTheme, GenerateCodeSamples, deprecatedRefDocsSchema;
var init_reference_docs_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/reference-docs-config-schema.js"() {
    ConfigLanguage = {
      type: "object",
      properties: {
        label: { type: "string" },
        lang: {
          enum: [
            "curl",
            "C#",
            "Go",
            "Java",
            "Java8+Apache",
            "JavaScript",
            "Node.js",
            "PHP",
            "Python",
            "R",
            "Ruby"
          ]
        }
      },
      required: ["lang"]
    };
    ConfigLabels = {
      type: "object",
      properties: {
        enum: { type: "string" },
        enumSingleValue: { type: "string" },
        enumArray: { type: "string" },
        default: { type: "string" },
        deprecated: { type: "string" },
        example: { type: "string" },
        examples: { type: "string" },
        nullable: { type: "string" },
        recursive: { type: "string" },
        arrayOf: { type: "string" },
        webhook: { type: "string" },
        authorizations: { type: "string" },
        tryItAuthBasicUsername: { type: "string" },
        tryItAuthBasicPassword: { type: "string" }
      }
    };
    CommonConfigSidebarLinks = {
      type: "object",
      properties: {
        label: { type: "string" },
        link: { type: "string" },
        target: { type: "string" }
      },
      required: ["label", "link"]
    };
    ConfigSidebarLinks = {
      type: "object",
      properties: {
        beforeInfo: { type: "array", items: CommonConfigSidebarLinks },
        end: { type: "array", items: CommonConfigSidebarLinks }
      }
    };
    CommonThemeColors = {
      type: "object",
      properties: {
        main: { type: "string" },
        light: { type: "string" },
        dark: { type: "string" },
        contrastText: { type: "string" }
      }
    };
    CommonColorProps = {
      type: "object",
      properties: {
        backgroundColor: { type: "string" },
        borderColor: { type: "string" },
        color: { type: "string" },
        tabTextColor: { type: "string" }
      }
    };
    BorderThemeColors = {
      type: "object",
      properties: pickObjectProps(CommonThemeColors.properties, ["light", "dark"])
    };
    HttpColors = {
      type: "object",
      properties: {
        basic: { type: "string" },
        delete: { type: "string" },
        get: { type: "string" },
        head: { type: "string" },
        link: { type: "string" },
        options: { type: "string" },
        patch: { type: "string" },
        post: { type: "string" },
        put: { type: "string" }
      }
    };
    ResponseColors = {
      type: "object",
      properties: {
        error: CommonColorProps,
        info: CommonColorProps,
        redirect: CommonColorProps,
        success: CommonColorProps
      }
    };
    SecondaryColors = {
      type: "object",
      properties: omitObjectProps(CommonThemeColors.properties, ["dark"])
    };
    TextThemeColors = {
      type: "object",
      properties: {
        primary: { type: "string" },
        secondary: { type: "string" },
        light: { type: "string" }
      }
    };
    ThemeColors = {
      type: "object",
      properties: {
        accent: CommonThemeColors,
        border: BorderThemeColors,
        error: CommonThemeColors,
        http: HttpColors,
        primary: CommonThemeColors,
        responses: ResponseColors,
        secondary: SecondaryColors,
        success: CommonThemeColors,
        text: TextThemeColors,
        tonalOffset: { type: "number" },
        warning: CommonThemeColors
      }
    };
    SizeProps = {
      type: "object",
      properties: {
        fontSize: { type: "string" },
        padding: { type: "string" },
        minWidth: { type: "string" }
      }
    };
    Sizes = {
      type: "object",
      properties: {
        small: SizeProps,
        medium: SizeProps,
        large: SizeProps,
        xlarge: SizeProps
      }
    };
    FontConfig = {
      type: "object",
      properties: {
        fontFamily: { type: "string" },
        fontSize: { type: "string" },
        fontWeight: { type: "string" },
        lineHeight: { type: "string" }
      }
    };
    ButtonsConfig = {
      type: "object",
      properties: Object.assign(Object.assign({}, omitObjectProps(FontConfig.properties, ["fontSize", "lineHeight"])), { borderRadius: { type: "string" }, hoverStyle: { type: "string" }, boxShadow: { type: "string" }, hoverBoxShadow: { type: "string" }, sizes: Sizes })
    };
    BadgeFontConfig = {
      type: "object",
      properties: pickObjectProps(FontConfig.properties, ["fontSize", "lineHeight"])
    };
    BadgeSizes = {
      type: "object",
      properties: {
        medium: BadgeFontConfig,
        small: BadgeFontConfig
      }
    };
    HttpBadgesConfig = {
      type: "object",
      properties: Object.assign(Object.assign({}, omitObjectProps(FontConfig.properties, ["fontSize", "lineHeight"])), { borderRadius: { type: "string" }, color: { type: "string" }, sizes: BadgeSizes })
    };
    LabelControls = {
      type: "object",
      properties: {
        top: { type: "string" },
        width: { type: "string" },
        height: { type: "string" }
      }
    };
    Panels = {
      type: "object",
      properties: {
        borderRadius: { type: "string" },
        backgroundColor: { type: "string" }
      }
    };
    TryItButton = {
      type: "object",
      properties: {
        fullWidth: { type: "boolean" }
      }
    };
    ConfigThemeComponents = {
      type: "object",
      properties: {
        buttons: ButtonsConfig,
        httpBadges: HttpBadgesConfig,
        layoutControls: LabelControls,
        panels: Panels,
        tryItButton: TryItButton,
        tryItSendButton: TryItButton
      }
    };
    Breakpoints = {
      type: "object",
      properties: {
        small: { type: "string" },
        medium: { type: "string" },
        large: { type: "string" }
      }
    };
    StackedConfig = {
      type: "object",
      properties: {
        maxWidth: Breakpoints
      }
    };
    ThreePanelConfig = {
      type: "object",
      properties: {
        maxWidth: Breakpoints,
        middlePanelMaxWidth: Breakpoints
      }
    };
    Layout = {
      type: "object",
      properties: {
        showDarkRightPanel: { type: "boolean" },
        stacked: StackedConfig,
        "three-panel": ThreePanelConfig
      }
    };
    SchemaColorsConfig = {
      type: "object",
      properties: {
        backgroundColor: { type: "string" },
        border: { type: "string" }
      }
    };
    ConfigThemeSchema = {
      type: "object",
      properties: {
        breakFieldNames: { type: "boolean" },
        caretColor: { type: "string" },
        caretSize: { type: "string" },
        constraints: SchemaColorsConfig,
        defaultDetailsWidth: { type: "string" },
        examples: SchemaColorsConfig,
        labelsTextSize: { type: "string" },
        linesColor: { type: "string" },
        nestedBackground: { type: "string" },
        nestingSpacing: { type: "string" },
        requireLabelColor: { type: "string" },
        typeNameColor: { type: "string" },
        typeTitleColor: { type: "string" }
      }
    };
    GroupItemsConfig = {
      type: "object",
      properties: {
        subItemsColor: { type: "string" },
        textTransform: { type: "string" },
        fontWeight: { type: "string" }
      }
    };
    Level1Items = {
      type: "object",
      properties: pickObjectProps(GroupItemsConfig.properties, ["textTransform"])
    };
    SpacingConfig = {
      type: "object",
      properties: {
        unit: { type: "number" },
        paddingHorizontal: { type: "string" },
        paddingVertical: { type: "string" },
        offsetTop: { type: "string" },
        offsetLeft: { type: "string" },
        offsetNesting: { type: "string" }
      }
    };
    Sidebar = {
      type: "object",
      properties: Object.assign(Object.assign({}, omitObjectProps(FontConfig.properties, ["fontWeight", "lineHeight"])), { activeBgColor: { type: "string" }, activeTextColor: { type: "string" }, backgroundColor: { type: "string" }, borderRadius: { type: "string" }, breakPath: { type: "boolean" }, caretColor: { type: "string" }, caretSize: { type: "string" }, groupItems: GroupItemsConfig, level1items: Level1Items, rightLineColor: { type: "string" }, separatorLabelColor: { type: "string" }, showAtBreakpoint: { type: "string" }, spacing: SpacingConfig, textColor: { type: "string" }, width: { type: "string" } })
    };
    Heading = {
      type: "object",
      properties: Object.assign(Object.assign({}, FontConfig.properties), { color: { type: "string" }, transform: { type: "string" } })
    };
    CodeConfig = {
      type: "object",
      properties: Object.assign(Object.assign({}, FontConfig.properties), { backgroundColor: { type: "string" }, color: { type: "string" }, wordBreak: {
        type: "string",
        enum: [
          "break-all",
          "break-word",
          "keep-all",
          "normal",
          "revert",
          "unset",
          "inherit",
          "initial"
        ]
      }, wrap: { type: "boolean" } })
    };
    HeadingsConfig = {
      type: "object",
      properties: omitObjectProps(FontConfig.properties, ["fontSize"])
    };
    LinksConfig = {
      type: "object",
      properties: {
        color: { type: "string" },
        hover: { type: "string" },
        textDecoration: { type: "string" },
        hoverTextDecoration: { type: "string" },
        visited: { type: "string" }
      }
    };
    Typography = {
      type: "object",
      properties: Object.assign(Object.assign({ code: CodeConfig, fieldName: FontConfig }, pickObjectProps(FontConfig.properties, ["fontSize", "fontFamily"])), { fontWeightBold: { type: "string" }, fontWeightLight: { type: "string" }, fontWeightRegular: { type: "string" }, heading1: Heading, heading2: Heading, heading3: Heading, headings: HeadingsConfig, lineHeight: { type: "string" }, links: LinksConfig, optimizeSpeed: { type: "boolean" }, rightPanelHeading: Heading, smoothing: {
        type: "string",
        enum: ["auto", "none", "antialiased", "subpixel-antialiased", "grayscale"]
      } })
    };
    TokenProps = {
      type: "object",
      properties: Object.assign({ color: { type: "string" } }, omitObjectProps(FontConfig.properties, ["fontWeight"]))
    };
    CodeBlock = {
      type: "object",
      properties: {
        backgroundColor: { type: "string" },
        borderRadius: { type: "string" },
        tokens: TokenProps
      }
    };
    ConfigThemeLogo = {
      type: "object",
      properties: {
        gutter: { type: "string" },
        maxHeight: { type: "string" },
        maxWidth: { type: "string" }
      }
    };
    Fab = {
      type: "object",
      properties: {
        backgroundColor: { type: "string" },
        color: { type: "string" }
      }
    };
    ButtonOverrides = {
      type: "object",
      properties: {
        custom: { type: "string" }
      }
    };
    Overrides = {
      type: "object",
      properties: {
        DownloadButton: ButtonOverrides,
        NextSectionButton: ButtonOverrides
      }
    };
    RightPanel = {
      type: "object",
      properties: {
        backgroundColor: { type: "string" },
        panelBackgroundColor: { type: "string" },
        panelControlsBackgroundColor: { type: "string" },
        showAtBreakpoint: { type: "string" },
        textColor: { type: "string" },
        width: { type: "string" }
      }
    };
    Shape = {
      type: "object",
      properties: { borderRadius: { type: "string" } }
    };
    ThemeSpacing = {
      type: "object",
      properties: {
        sectionHorizontal: { type: "number" },
        sectionVertical: { type: "number" },
        unit: { type: "number" }
      }
    };
    ConfigTheme = {
      type: "object",
      properties: {
        breakpoints: Breakpoints,
        codeBlock: CodeBlock,
        colors: ThemeColors,
        components: ConfigThemeComponents,
        layout: Layout,
        logo: ConfigThemeLogo,
        fab: Fab,
        overrides: Overrides,
        rightPanel: RightPanel,
        schema: ConfigThemeSchema,
        shape: Shape,
        sidebar: Sidebar,
        spacing: ThemeSpacing,
        typography: Typography,
        links: { properties: { color: { type: "string" } } },
        codeSample: { properties: { backgroundColor: { type: "string" } } }
      }
    };
    GenerateCodeSamples = {
      type: "object",
      properties: {
        skipOptionalParameters: { type: "boolean" },
        languages: { type: "array", items: ConfigLanguage }
      },
      required: ["languages"]
    };
    deprecatedRefDocsSchema = {
      type: "object",
      properties: {
        theme: ConfigTheme,
        ctrlFHijack: { type: "boolean" },
        defaultSampleLanguage: { type: "string" },
        disableDeepLinks: { type: "boolean" },
        disableSearch: { type: "boolean" },
        disableSidebar: { type: "boolean" },
        downloadDefinitionUrl: { type: "string" },
        expandDefaultServerVariables: { type: "boolean" },
        enumSkipQuotes: { type: "boolean" },
        expandDefaultRequest: { type: "boolean" },
        expandDefaultResponse: { type: "boolean" },
        expandResponses: { type: "string" },
        expandSingleSchemaField: { type: "boolean" },
        generateCodeSamples: GenerateCodeSamples,
        generatedPayloadSamplesMaxDepth: { type: "number" },
        hideDownloadButton: { type: "boolean" },
        hideHostname: { type: "boolean" },
        hideInfoSection: { type: "boolean" },
        hideLogo: { type: "boolean" },
        hideRequestPayloadSample: { type: "boolean" },
        hideRightPanel: { type: "boolean" },
        hideSchemaPattern: { type: "boolean" },
        hideSingleRequestSampleTab: { type: "boolean" },
        hideSecuritySection: { type: "boolean" },
        hideTryItPanel: { type: "boolean" },
        hideFab: { type: "boolean" },
        hideOneOfDescription: { type: "boolean" },
        htmlTemplate: { type: "string" },
        jsonSampleExpandLevel: {
          oneOf: [{ type: "number", minimum: 1 }, { type: "string" }]
        },
        labels: ConfigLabels,
        menuToggle: { type: "boolean" },
        nativeScrollbars: { type: "boolean" },
        noAutoAuth: { type: "boolean" },
        onDeepLinkClick: { type: "object" },
        pagination: { enum: ["none", "section", "item"] },
        pathInMiddlePanel: { type: "boolean" },
        payloadSampleIdx: { type: "number", minimum: 0 },
        requestInterceptor: { type: "object" },
        requiredPropsFirst: { type: "boolean" },
        routingStrategy: { type: "string" },
        samplesTabsMaxCount: { type: "number" },
        schemaExpansionLevel: {
          oneOf: [{ type: "number", minimum: 0 }, { type: "string" }]
        },
        minCharacterLengthToInitSearch: { type: "number", minimum: 1 },
        maxResponseHeadersToShowInTryIt: { type: "number", minimum: 0 },
        scrollYOffset: {
          oneOf: [{ type: "number" }, { type: "string" }]
        },
        searchAutoExpand: { type: "boolean" },
        searchFieldLevelBoost: { type: "number", minimum: 0 },
        searchMaxDepth: { type: "number", minimum: 1 },
        searchMode: { type: "string", enum: ["default", "path-only"] },
        searchOperationTitleBoost: { type: "number" },
        searchTagTitleBoost: { type: "number" },
        sendXUserAgentInTryIt: { type: "boolean" },
        showChangeLayoutButton: { type: "boolean" },
        showConsole: { type: "boolean" },
        showNextButton: { type: "boolean" },
        showRightPanelToggle: { type: "boolean" },
        showSecuritySchemeType: { type: "boolean" },
        showWebhookVerb: { type: "boolean" },
        showObjectSchemaExamples: { type: "boolean" },
        disableTryItRequestUrlEncoding: { type: "boolean" },
        sidebarLinks: ConfigSidebarLinks,
        sideNavStyle: { type: "string", enum: ["summary-only", "path-first", "id-only"] },
        simpleOneOfTypeLabel: { type: "boolean" },
        sortEnumValuesAlphabetically: { type: "boolean" },
        sortOperationsAlphabetically: { type: "boolean" },
        sortPropsAlphabetically: { type: "boolean" },
        sortTagsAlphabetically: { type: "boolean" },
        suppressWarnings: { type: "boolean" },
        unstable_externalDescription: { type: "boolean" },
        unstable_ignoreMimeParameters: { type: "boolean" },
        untrustedDefinition: { type: "boolean" },
        showAccessMode: { type: "boolean" },
        preserveOriginalExtensionsName: { type: "boolean" },
        markdownHeadingsAnchorLevel: { type: "number" }
      },
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/ex-theme-config-schemas.js
var hideConfigSchema, scriptConfigSchema, navItemSchema, navItemsSchema, productConfigSchema, aiSearchConfigSchema, searchFacetsConfigSchema, searchSuggestedPageSchema, logoConfigSchema, navbarConfigSchema, productsConfigSchema, footerConfigSchema, sidebarConfigSchema, scriptsConfigSchema, linksConfigSchema, searchConfigSchema, colorModeConfigSchema, navigationConfigSchema, codeSnippetConfigSchema, markdownConfigSchema, openapiConfigSchema, adobeAnalyticsConfigSchema, amplitudeAnalyticsConfigSchema, fullstoryAnalyticsConfigSchema, heapAnalyticsConfigSchema, rudderstackAnalyticsConfigSchema, segmentAnalyticsConfigSchema, gtmAnalyticsConfigSchema, productGoogleAnalyticsConfigSchema, googleAnalyticsConfigSchema, analyticsConfigSchema, userMenuConfigSchema, versionPickerConfigSchema, breadcrumbsConfigSchema, catalogFilterSchema, catalogSchema, catalogsConfigSchema, scorecardConfigSchema;
var init_ex_theme_config_schemas = __esm({
  "node_modules/@redocly/config/lib-esm/ex-theme-config-schemas.js"() {
    init_redoc_config_schema();
    init_reference_docs_config_schema();
    hideConfigSchema = {
      type: "object",
      properties: {
        hide: { type: "boolean" }
      },
      additionalProperties: false
    };
    scriptConfigSchema = {
      type: "object",
      properties: {
        src: { type: "string" },
        async: { type: "boolean" },
        crossorigin: { type: "string" },
        defer: { type: "boolean" },
        fetchpriority: { type: "string" },
        integrity: { type: "string" },
        module: { type: "boolean" },
        nomodule: { type: "boolean" },
        nonce: { type: "string" },
        referrerpolicy: { type: "string" },
        type: { type: "string" }
      },
      required: ["src"],
      additionalProperties: true
    };
    navItemSchema = {
      type: "object",
      properties: {
        page: { type: "string" },
        directory: { type: "string" },
        disconnect: { type: "boolean", default: false },
        group: { type: "string" },
        label: { type: "string" },
        href: { type: "string" },
        external: { type: "boolean" },
        labelTranslationKey: { type: "string" },
        groupTranslationKey: { type: "string" },
        icon: {
          oneOf: [
            { type: "string" },
            { type: "object", properties: { srcSet: { type: "string" } }, required: ["srcSet"] }
          ]
        },
        separator: { type: "string" },
        separatorLine: { type: "boolean" },
        linePosition: {
          type: "string",
          enum: ["top", "bottom"],
          default: "top"
        },
        version: { type: "string" },
        menuStyle: { type: "string", enum: ["drilldown"] },
        expanded: { type: "string", const: "always" },
        selectFirstItemOnExpand: { type: "boolean" },
        flatten: { type: "boolean" },
        linkedSidebars: {
          type: "array",
          items: { type: "string" }
        },
        // Allow users to eject the navbar and implement additional levels of nesting
        items: { type: "array", items: { type: "object", additionalProperties: true } }
      }
    };
    navItemsSchema = {
      type: "array",
      items: Object.assign(Object.assign({}, navItemSchema), { properties: Object.assign(Object.assign({}, navItemSchema.properties), { items: { type: "array", items: navItemSchema } }) })
    };
    productConfigSchema = {
      type: "object",
      properties: {
        name: { type: "string" },
        icon: { type: "string" },
        folder: { type: "string" }
      },
      additionalProperties: false,
      required: ["name", "folder"]
    };
    aiSearchConfigSchema = {
      type: "object",
      properties: {
        hide: {
          type: "boolean",
          default: false
        },
        prompt: {
          type: "string"
        }
      },
      additionalProperties: false
    };
    searchFacetsConfigSchema = {
      type: "array",
      items: {
        type: "object",
        required: ["name", "field", "type"],
        properties: {
          name: { type: "string" },
          field: { type: "string" },
          type: {
            type: "string",
            enum: ["multi-select", "select", "tags"]
          },
          isTop: { type: "boolean" }
        },
        additionalProperties: false
      }
    };
    searchSuggestedPageSchema = {
      type: "object",
      properties: {
        page: { type: "string" },
        label: { type: "string" },
        labelTranslationKey: { type: "string" }
      },
      required: ["page"]
    };
    logoConfigSchema = {
      type: "object",
      properties: {
        image: { type: "string" },
        srcSet: { type: "string" },
        altText: { type: "string" },
        link: { type: "string" },
        favicon: { type: "string" }
      },
      additionalProperties: false
    };
    navbarConfigSchema = {
      type: "object",
      properties: Object.assign({ items: navItemsSchema }, hideConfigSchema.properties),
      additionalProperties: false
    };
    productsConfigSchema = {
      type: "object",
      additionalProperties: productConfigSchema
    };
    footerConfigSchema = {
      type: "object",
      properties: Object.assign({ items: navItemsSchema, copyrightText: { type: "string" }, logo: hideConfigSchema }, hideConfigSchema.properties),
      additionalProperties: false
    };
    sidebarConfigSchema = {
      type: "object",
      properties: Object.assign({ separatorLine: { type: "boolean" }, linePosition: {
        type: "string",
        enum: ["top", "bottom"],
        default: "bottom"
      } }, hideConfigSchema.properties),
      additionalProperties: false
    };
    scriptsConfigSchema = {
      type: "object",
      properties: {
        head: { type: "array", items: scriptConfigSchema },
        body: { type: "array", items: scriptConfigSchema }
      },
      additionalProperties: false
    };
    linksConfigSchema = {
      type: "array",
      items: {
        type: "object",
        properties: {
          href: { type: "string" },
          as: { type: "string" },
          crossorigin: { type: "string" },
          fetchpriority: { type: "string" },
          hreflang: { type: "string" },
          imagesizes: { type: "string" },
          imagesrcset: { type: "string" },
          integrity: { type: "string" },
          media: { type: "string" },
          prefetch: { type: "string" },
          referrerpolicy: { type: "string" },
          rel: { type: "string" },
          sizes: { type: "string" },
          title: { type: "string" },
          type: { type: "string" }
        },
        required: ["href"],
        additionalProperties: true
      }
    };
    searchConfigSchema = {
      type: "object",
      properties: Object.assign({ engine: {
        type: "string",
        enum: ["flexsearch", "typesense"],
        default: "flexsearch"
      }, ai: aiSearchConfigSchema, facets: searchFacetsConfigSchema, placement: {
        type: "string",
        default: "navbar"
      }, shortcuts: {
        type: "array",
        items: { type: "string" },
        default: ["/"]
      }, suggestedPages: {
        type: "array",
        items: searchSuggestedPageSchema
      } }, hideConfigSchema.properties),
      additionalProperties: false
    };
    colorModeConfigSchema = {
      type: "object",
      properties: Object.assign({ ignoreDetection: { type: "boolean" }, modes: {
        type: "array",
        items: { type: "string" },
        default: ["light", "dark"]
      } }, hideConfigSchema.properties),
      additionalProperties: false
    };
    navigationConfigSchema = {
      type: "object",
      properties: {
        nextButton: {
          type: "object",
          properties: Object.assign({ text: { type: "string", default: "Next page" } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: {}
        },
        previousButton: {
          type: "object",
          properties: Object.assign({ text: { type: "string", default: "Previous page" } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: {}
        }
      },
      additionalProperties: false
    };
    codeSnippetConfigSchema = {
      type: "object",
      properties: {
        elementFormat: { type: "string", default: "icon" },
        copy: {
          type: "object",
          properties: Object.assign({}, hideConfigSchema.properties),
          additionalProperties: false,
          default: { hide: false }
        },
        report: {
          type: "object",
          properties: Object.assign({ tooltipText: { type: "string" }, buttonText: { type: "string" }, label: { type: "string" } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: { hide: false }
        },
        expand: {
          type: "object",
          properties: Object.assign({}, hideConfigSchema.properties),
          additionalProperties: false,
          default: { hide: false }
        },
        collapse: {
          type: "object",
          properties: Object.assign({}, hideConfigSchema.properties),
          additionalProperties: false,
          default: { hide: false }
        }
      },
      additionalProperties: false
    };
    markdownConfigSchema = {
      type: "object",
      properties: {
        frontMatterKeysToResolve: {
          type: "array",
          items: { type: "string" },
          default: ["image", "links"]
        },
        partialsFolders: {
          type: "array",
          items: { type: "string" },
          default: ["_partials"]
        },
        lastUpdatedBlock: {
          type: "object",
          properties: Object.assign({ format: {
            type: "string",
            enum: ["timeago", "iso", "long", "short"],
            default: "timeago"
          }, locale: { type: "string" } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: {}
        },
        toc: {
          type: "object",
          properties: Object.assign({ header: { type: "string", default: "On this page" }, depth: { type: "integer", default: 3, minimum: 1 } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: {}
        },
        editPage: {
          type: "object",
          properties: Object.assign({ baseUrl: { type: "string" } }, hideConfigSchema.properties),
          additionalProperties: false,
          default: {}
        }
      },
      additionalProperties: false,
      default: {}
    };
    openapiConfigSchema = Object.assign(Object.assign({}, redocConfigSchema), { properties: Object.assign(Object.assign({}, redocConfigSchema.properties), deprecatedRefDocsSchema.properties) });
    adobeAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        scriptUrl: { type: "string" },
        pageViewEventName: { type: "string" }
      },
      additionalProperties: false,
      required: ["scriptUrl"]
    };
    amplitudeAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        apiKey: { type: "string" },
        head: { type: "boolean" },
        respectDNT: { type: "boolean" },
        exclude: { type: "array", items: { type: "string" } },
        outboundClickEventName: { type: "string" },
        pageViewEventName: { type: "string" },
        amplitudeConfig: { type: "object", additionalProperties: true }
      },
      additionalProperties: false,
      required: ["apiKey"]
    };
    fullstoryAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        orgId: { type: "string" }
      },
      additionalProperties: false,
      required: ["orgId"]
    };
    heapAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        appId: { type: "string" }
      },
      additionalProperties: false,
      required: ["appId"]
    };
    rudderstackAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        writeKey: { type: "string", minLength: 10 },
        trackPage: { type: "boolean" },
        dataPlaneUrl: { type: "string" },
        controlPlaneUrl: { type: "string" },
        sdkUrl: { type: "string" },
        loadOptions: { type: "object", additionalProperties: true }
      },
      additionalProperties: false,
      required: ["writeKey"]
    };
    segmentAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        writeKey: { type: "string", minLength: 10 },
        trackPage: { type: "boolean" },
        includeTitleInPageCall: { type: "boolean" },
        host: { type: "string" }
      },
      additionalProperties: false,
      required: ["writeKey"]
    };
    gtmAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        trackingId: { type: "string" },
        gtmAuth: { type: "string" },
        gtmPreview: { type: "string" },
        defaultDataLayer: {},
        dataLayerName: { type: "string" },
        enableWebVitalsTracking: { type: "boolean" },
        selfHostedOrigin: { type: "string" },
        pageViewEventName: { type: "string" }
      },
      additionalProperties: false,
      required: ["trackingId"]
    };
    productGoogleAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        trackingId: { type: "string" },
        conversionId: { type: "string" },
        floodlightId: { type: "string" },
        optimizeId: { type: "string" },
        exclude: { type: "array", items: { type: "string" } }
      },
      additionalProperties: false,
      required: ["trackingId"]
    };
    googleAnalyticsConfigSchema = {
      type: "object",
      properties: {
        includeInDevelopment: { type: "boolean" },
        trackingId: { type: "string" },
        conversionId: { type: "string" },
        floodlightId: { type: "string" },
        head: { type: "boolean" },
        respectDNT: { type: "boolean" },
        exclude: { type: "array", items: { type: "string" } },
        optimizeId: { type: "string" },
        anonymizeIp: { type: "boolean" },
        cookieExpires: { type: "number" },
        // All enabled tracking configs
        trackers: {
          type: "object",
          additionalProperties: productGoogleAnalyticsConfigSchema
        }
      },
      additionalProperties: false,
      required: ["trackingId"]
    };
    analyticsConfigSchema = {
      type: "object",
      properties: {
        adobe: adobeAnalyticsConfigSchema,
        amplitude: amplitudeAnalyticsConfigSchema,
        fullstory: fullstoryAnalyticsConfigSchema,
        heap: heapAnalyticsConfigSchema,
        rudderstack: rudderstackAnalyticsConfigSchema,
        segment: segmentAnalyticsConfigSchema,
        gtm: gtmAnalyticsConfigSchema,
        ga: googleAnalyticsConfigSchema
      }
    };
    userMenuConfigSchema = {
      type: "object",
      properties: Object.assign({ items: {
        type: "array",
        items: {
          type: "object",
          properties: {
            label: { type: "string" },
            external: { type: "boolean" },
            link: { type: "string" },
            separatorLine: { type: "boolean" }
          },
          additionalProperties: true
        },
        default: []
      }, hideLoginButton: { type: "boolean" } }, hideConfigSchema.properties),
      additionalProperties: false
    };
    versionPickerConfigSchema = {
      type: "object",
      properties: {
        hide: { type: "boolean" },
        showForUnversioned: {
          type: "boolean"
        }
      }
    };
    breadcrumbsConfigSchema = {
      type: "object",
      properties: {
        hide: { type: "boolean" },
        prefixItems: {
          type: "array",
          items: {
            type: "object",
            properties: {
              label: { type: "string" },
              labelTranslationKey: { type: "string" },
              page: { type: "string" }
            },
            additionalProperties: false,
            default: {}
          }
        }
      },
      additionalProperties: false
    };
    catalogFilterSchema = {
      type: "object",
      additionalProperties: false,
      required: ["title", "property"],
      properties: {
        type: {
          type: "string",
          enum: ["select", "checkboxes", "date-range"],
          default: "checkboxes"
        },
        title: { type: "string" },
        titleTranslationKey: { type: "string" },
        property: { type: "string" },
        parentFilter: { type: "string" },
        valuesMapping: { type: "object", additionalProperties: { type: "string" } },
        missingCategoryName: { type: "string" },
        missingCategoryNameTranslationKey: { type: "string" },
        options: { type: "array", items: { type: "string" } }
      }
    };
    catalogSchema = {
      type: "object",
      additionalProperties: true,
      required: ["slug", "items"],
      properties: {
        slug: { type: "string" },
        filters: { type: "array", items: catalogFilterSchema },
        groupByFirstFilter: { type: "boolean" },
        filterValuesCasing: {
          type: "string",
          enum: ["sentence", "original", "lowercase", "uppercase"]
        },
        items: navItemsSchema,
        requiredPermission: { type: "string" },
        separateVersions: { type: "boolean" },
        title: { type: "string" },
        titleTranslationKey: { type: "string" },
        description: { type: "string" },
        descriptionTranslationKey: { type: "string" }
      }
    };
    catalogsConfigSchema = {
      type: "object",
      patternProperties: {
        ".*": catalogSchema
      }
    };
    scorecardConfigSchema = {
      type: "object",
      additionalProperties: true,
      required: [],
      properties: {
        /**
         * @deprecated Should use `reunite.ignoreLint` instead
         */
        ignoreNonCompliant: { type: "boolean", default: false },
        teamMetadataProperty: {
          type: "object",
          properties: {
            property: { type: "string" },
            label: { type: "string" },
            default: { type: "string" }
          }
        },
        levels: {
          type: "array",
          items: {
            type: "object",
            required: ["name"],
            properties: {
              name: { type: "string" },
              color: { type: "string" },
              extends: { type: "array", items: { type: "string" } },
              rules: {
                type: "object",
                additionalProperties: {
                  oneOf: [{ type: "string" }, { type: "object" }]
                }
              }
            },
            additionalProperties: false
          }
        },
        targets: {
          type: "array",
          items: {
            type: "object",
            required: ["where"],
            properties: {
              minimumLevel: { type: "string" },
              rules: { type: "object", additionalProperties: true },
              where: {
                type: "object",
                required: ["metadata"],
                properties: {
                  metadata: { type: "object", additionalProperties: { type: "string" } }
                },
                additionalProperties: false
              }
            },
            additionalProperties: false
          }
        },
        ignore: {
          type: "array",
          items: { type: "string" }
        }
      }
    };
  }
});

// node_modules/@redocly/config/lib-esm/default-theme-config-schema.js
var themeConfigSchema, closedThemeConfigSchema;
var init_default_theme_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/default-theme-config-schema.js"() {
    init_graphql_config_schema();
    init_feedback_config_schema();
    init_ex_theme_config_schemas();
    themeConfigSchema = {
      type: "object",
      properties: {
        /**
         * @deprecated Should use `plugins` instead
         */
        imports: {
          type: "array",
          items: { type: "string" }
        },
        logo: logoConfigSchema,
        navbar: navbarConfigSchema,
        products: productsConfigSchema,
        footer: footerConfigSchema,
        sidebar: sidebarConfigSchema,
        scripts: scriptsConfigSchema,
        links: linksConfigSchema,
        feedback: feedbackConfigSchema,
        search: searchConfigSchema,
        colorMode: colorModeConfigSchema,
        navigation: navigationConfigSchema,
        codeSnippet: codeSnippetConfigSchema,
        markdown: markdownConfigSchema,
        openapi: openapiConfigSchema,
        graphql: graphqlConfigSchema,
        analytics: analyticsConfigSchema,
        userMenu: userMenuConfigSchema,
        versionPicker: versionPickerConfigSchema,
        breadcrumbs: breadcrumbsConfigSchema,
        catalog: catalogsConfigSchema,
        scorecard: scorecardConfigSchema
      },
      additionalProperties: true
    };
    closedThemeConfigSchema = Object.assign(Object.assign({}, themeConfigSchema), { additionalProperties: false });
  }
});

// node_modules/@redocly/config/lib-esm/remove-property-recursively.js
function removePropertyRecursively(object, propToRemove) {
  return Object.fromEntries(Object.entries(object).map(([key, value]) => {
    if (key === propToRemove) {
      return void 0;
    }
    if (typeof value !== "object" || !value) {
      return [key, value];
    }
    if (Array.isArray(value)) {
      return [
        key,
        value.map((arrayItem) => typeof arrayItem === "object" ? removePropertyRecursively(arrayItem, propToRemove) : arrayItem)
      ];
    }
    return [key, removePropertyRecursively(value, propToRemove)];
  }).filter(Boolean));
}
var init_remove_property_recursively = __esm({
  "node_modules/@redocly/config/lib-esm/remove-property-recursively.js"() {
  }
});

// node_modules/@redocly/config/lib-esm/reunite-config-schema.js
var reuniteConfigSchema;
var init_reunite_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/reunite-config-schema.js"() {
    reuniteConfigSchema = {
      type: "object",
      properties: {
        ignoreLint: {
          oneOf: [
            { type: "boolean", default: false },
            {
              type: "object",
              additionalProperties: { type: "boolean" }
            }
          ]
        },
        ignoreLinkChecker: { type: "boolean" },
        ignoreMarkdocErrors: { type: "boolean" }
      },
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/root-config-schema.js
var oidcIssuerMetadataSchema, oidcProviderConfigSchema, saml2ProviderConfigSchema, authProviderConfigSchema, ssoDirectConfigSchema, ssoConfigSchema, redirectConfigSchema, redirectsConfigSchema, rulesSchema, apiConfigSchema, metadataConfigSchema, metadataGlobsConfigSchema, seoConfigSchema, rbacScopeItemsSchema, rbacConfigSchema, graviteeAdapterAuthStaticSchema, graviteeAdapterAuthIdpSchema, graviteeAdapterConfigSchema, apigeeAdapterAuthOauth2Schema, apigeeAdapterAuthServiceAccountSchema, apigeeXAdapterConfigSchema, apigeeEdgeAdapterConfigSchema, devOnboardingAdapterConfigSchema, devOnboardingConfigSchema, l10nConfigSchema, responseHeaderSchema, redoclyConfigSchema, environmentSchema, rootRedoclyConfigSchema;
var init_root_config_schema = __esm({
  "node_modules/@redocly/config/lib-esm/root-config-schema.js"() {
    init_constants();
    init_default_theme_config_schema();
    init_feedback_config_schema();
    init_graphql_config_schema();
    init_remove_property_recursively();
    init_reunite_config_schema();
    init_ex_theme_config_schemas();
    oidcIssuerMetadataSchema = {
      type: "object",
      properties: {
        end_session_endpoint: { type: "string" },
        token_endpoint: { type: "string" },
        authorization_endpoint: { type: "string" },
        jwks_uri: { type: "string" }
      },
      required: ["token_endpoint", "authorization_endpoint"],
      additionalProperties: true
    };
    oidcProviderConfigSchema = {
      type: "object",
      properties: {
        type: { type: "string", const: AuthProviderType.OIDC },
        title: { type: "string" },
        pkce: { type: "boolean", default: false },
        configurationUrl: { type: "string", minLength: 1 },
        configuration: oidcIssuerMetadataSchema,
        clientId: { type: "string", minLength: 1 },
        clientSecret: { type: "string", minLength: 0 },
        teamsClaimName: { type: "string" },
        teamsClaimMap: { type: "object", additionalProperties: { type: "string" } },
        defaultTeams: { type: "array", items: { type: "string" } },
        scopes: { type: "array", items: { type: "string" } },
        tokenExpirationTime: { type: "number" },
        authorizationRequestCustomParams: { type: "object", additionalProperties: { type: "string" } },
        tokenRequestCustomParams: { type: "object", additionalProperties: { type: "string" } },
        audience: { type: "array", items: { type: "string" } }
      },
      required: ["type", "clientId"],
      oneOf: [{ required: ["configurationUrl"] }, { required: ["configuration"] }],
      additionalProperties: false
    };
    saml2ProviderConfigSchema = {
      type: "object",
      properties: {
        type: { type: "string", const: AuthProviderType.SAML2 },
        title: { type: "string" },
        issuerId: { type: "string" },
        entityId: { type: "string" },
        ssoUrl: { type: "string" },
        x509PublicCert: { type: "string" },
        teamsAttributeName: { type: "string", default: DEFAULT_TEAM_CLAIM_NAME },
        teamsAttributeMap: { type: "object", additionalProperties: { type: "string" } },
        defaultTeams: { type: "array", items: { type: "string" } }
      },
      additionalProperties: false,
      required: ["type", "issuerId", "ssoUrl", "x509PublicCert"]
    };
    authProviderConfigSchema = {
      oneOf: [oidcProviderConfigSchema, saml2ProviderConfigSchema],
      discriminator: { propertyName: "type" }
    };
    ssoDirectConfigSchema = {
      type: "object",
      additionalProperties: authProviderConfigSchema
    };
    ssoConfigSchema = {
      oneOf: [
        {
          type: "array",
          items: {
            type: "string",
            enum: ["REDOCLY", "CORPORATE", "GUEST"]
          },
          uniqueItems: true
        },
        {
          type: "string",
          enum: ["REDOCLY", "CORPORATE", "GUEST"]
        }
      ]
    };
    redirectConfigSchema = {
      type: "object",
      properties: {
        to: { type: "string" },
        type: { type: "number", default: 301 }
      },
      additionalProperties: false
    };
    redirectsConfigSchema = {
      type: "object",
      additionalProperties: redirectConfigSchema,
      default: {}
    };
    rulesSchema = {
      type: "object",
      additionalProperties: {
        oneOf: [{ type: "string" }, { type: "object" }]
      }
    };
    apiConfigSchema = {
      type: "object",
      properties: {
        root: { type: "string" },
        output: { type: "string", pattern: "(.ya?ml|.json)$" },
        rbac: { type: "object", additionalProperties: true },
        openapi: openapiConfigSchema,
        graphql: graphqlConfigSchema,
        /**
         * @deprecated left for backwards compatibility
         */
        theme: {
          type: "object",
          properties: {
            openapi: openapiConfigSchema,
            graphql: graphqlConfigSchema
          },
          additionalProperties: false
        },
        title: { type: "string" },
        metadata: { type: "object", additionalProperties: true },
        rules: rulesSchema,
        decorators: { type: "object", additionalProperties: true },
        preprocessors: { type: "object", additionalProperties: true }
      },
      required: ["root"]
    };
    metadataConfigSchema = {
      type: "object",
      additionalProperties: true
    };
    metadataGlobsConfigSchema = {
      type: "object",
      additionalProperties: {
        type: "object",
        additionalProperties: true
      }
    };
    seoConfigSchema = {
      type: "object",
      properties: {
        title: { type: "string" },
        description: { type: "string" },
        siteUrl: { type: "string" },
        image: { type: "string" },
        keywords: {
          oneOf: [{ type: "array", items: { type: "string" } }, { type: "string" }]
        },
        lang: { type: "string" },
        jsonLd: { type: "object" },
        meta: {
          type: "array",
          items: {
            type: "object",
            properties: {
              name: { type: "string" },
              content: { type: "string" }
            },
            required: ["name", "content"],
            additionalProperties: false
          }
        }
      },
      additionalProperties: false
    };
    rbacScopeItemsSchema = {
      type: "object",
      additionalProperties: { type: "string" }
    };
    rbacConfigSchema = {
      type: "object",
      properties: {
        teamNamePatterns: { type: "array", items: { type: "string" } },
        teamFolders: { type: "array", items: { type: "string" } },
        teamFoldersBaseRoles: rbacScopeItemsSchema,
        cms: rbacScopeItemsSchema,
        // deprecated in favor of reunite
        reunite: rbacScopeItemsSchema,
        content: {
          type: "object",
          properties: {
            "**": rbacScopeItemsSchema
          },
          additionalProperties: rbacScopeItemsSchema
        }
      },
      additionalProperties: rbacScopeItemsSchema
    };
    graviteeAdapterAuthStaticSchema = {
      type: "object",
      properties: { static: { type: "string" } },
      additionalProperties: false,
      required: ["static"]
    };
    graviteeAdapterAuthIdpSchema = {
      type: "object",
      properties: { idp: { type: "string" } },
      additionalProperties: false,
      required: ["idp"]
    };
    graviteeAdapterConfigSchema = {
      type: "object",
      properties: {
        type: { type: "string", const: "GRAVITEE" },
        apiBaseUrl: { type: "string" },
        env: { type: "string" },
        allowApiProductsOutsideCatalog: { type: "boolean", default: false },
        stage: { type: "string", default: "non-production" },
        auth: {
          oneOf: [graviteeAdapterAuthStaticSchema, graviteeAdapterAuthIdpSchema]
        }
      },
      additionalProperties: false,
      required: ["type", "apiBaseUrl"]
    };
    apigeeAdapterAuthOauth2Schema = {
      type: "object",
      properties: {
        type: { type: "string", const: ApigeeDevOnboardingIntegrationAuthType.OAUTH2 },
        tokenEndpoint: { type: "string" },
        clientId: { type: "string" },
        clientSecret: { type: "string" }
      },
      additionalProperties: false,
      required: ["type", "tokenEndpoint", "clientId", "clientSecret"]
    };
    apigeeAdapterAuthServiceAccountSchema = {
      type: "object",
      properties: {
        type: { type: "string", const: ApigeeDevOnboardingIntegrationAuthType.SERVICE_ACCOUNT },
        serviceAccountEmail: { type: "string" },
        serviceAccountPrivateKey: { type: "string" }
      },
      additionalProperties: false,
      required: ["type", "serviceAccountEmail", "serviceAccountPrivateKey"]
    };
    apigeeXAdapterConfigSchema = {
      type: "object",
      properties: {
        type: { type: "string", const: "APIGEE_X" },
        apiUrl: { type: "string" },
        stage: { type: "string", default: "non-production" },
        organizationName: { type: "string" },
        ignoreApiProducts: { type: "array", items: { type: "string" } },
        allowApiProductsOutsideCatalog: { type: "boolean", default: false },
        auth: {
          type: "object",
          oneOf: [apigeeAdapterAuthOauth2Schema, apigeeAdapterAuthServiceAccountSchema],
          discriminator: { propertyName: "type" }
        }
      },
      additionalProperties: false,
      required: ["type", "organizationName", "auth"]
    };
    apigeeEdgeAdapterConfigSchema = Object.assign(Object.assign({}, apigeeXAdapterConfigSchema), { properties: Object.assign(Object.assign({}, apigeeXAdapterConfigSchema.properties), { type: { type: "string", const: "APIGEE_EDGE" } }) });
    devOnboardingAdapterConfigSchema = {
      type: "object",
      oneOf: [apigeeXAdapterConfigSchema, apigeeEdgeAdapterConfigSchema, graviteeAdapterConfigSchema],
      discriminator: { propertyName: "type" }
    };
    devOnboardingConfigSchema = {
      type: "object",
      required: ["adapters"],
      additionalProperties: false,
      properties: {
        adapters: {
          type: "array",
          items: devOnboardingAdapterConfigSchema
        }
      }
    };
    l10nConfigSchema = {
      type: "object",
      properties: {
        defaultLocale: {
          type: "string"
        },
        locales: {
          type: "array",
          items: {
            type: "object",
            properties: {
              code: {
                type: "string"
              },
              name: {
                type: "string"
              }
            },
            required: ["code"]
          }
        }
      },
      additionalProperties: false,
      required: ["defaultLocale"]
    };
    responseHeaderSchema = {
      type: "object",
      properties: {
        name: { type: "string" },
        value: { type: "string" }
      },
      additionalProperties: false,
      required: ["name", "value"]
    };
    redoclyConfigSchema = {
      type: "object",
      properties: {
        /**
         * @deprecated Should use `plugins` instead
         */
        imports: {
          type: "array",
          items: { type: "string" }
        },
        licenseKey: { type: "string" },
        redirects: redirectsConfigSchema,
        seo: seoConfigSchema,
        rbac: rbacConfigSchema,
        requiresLogin: { type: "boolean" },
        responseHeaders: {
          type: "object",
          additionalProperties: {
            type: "array",
            items: responseHeaderSchema
          }
        },
        mockServer: {
          type: "object",
          properties: {
            off: { type: "boolean", default: false },
            position: { type: "string", enum: ["first", "last", "replace", "off"], default: "first" },
            strictExamples: { type: "boolean", default: false },
            errorIfForcedExampleNotFound: { type: "boolean", default: false },
            description: { type: "string" }
          }
        },
        apis: {
          type: "object",
          additionalProperties: apiConfigSchema
        },
        rules: rulesSchema,
        decorators: { type: "object", additionalProperties: true },
        preprocessors: { type: "object", additionalProperties: true },
        ssoDirect: ssoDirectConfigSchema,
        sso: ssoConfigSchema,
        residency: { type: "string" },
        developerOnboarding: devOnboardingConfigSchema,
        removeAttribution: { type: "boolean" },
        i18n: l10nConfigSchema,
        // deprecated
        l10n: l10nConfigSchema,
        metadata: metadataConfigSchema,
        metadataGlobs: metadataGlobsConfigSchema,
        ignore: {
          type: "array",
          items: {
            type: "string"
          }
        },
        /**
         * @deprecated properties moved to the root of the config
         */
        theme: themeConfigSchema,
        reunite: reuniteConfigSchema,
        // Ex theme properties
        logo: logoConfigSchema,
        navbar: navbarConfigSchema,
        products: productsConfigSchema,
        footer: footerConfigSchema,
        sidebar: sidebarConfigSchema,
        scripts: scriptsConfigSchema,
        links: linksConfigSchema,
        feedback: feedbackConfigSchema,
        search: searchConfigSchema,
        colorMode: colorModeConfigSchema,
        navigation: navigationConfigSchema,
        codeSnippet: codeSnippetConfigSchema,
        markdown: markdownConfigSchema,
        openapi: openapiConfigSchema,
        graphql: graphqlConfigSchema,
        analytics: analyticsConfigSchema,
        userMenu: userMenuConfigSchema,
        versionPicker: versionPickerConfigSchema,
        breadcrumbs: breadcrumbsConfigSchema,
        catalog: catalogsConfigSchema,
        scorecard: scorecardConfigSchema
      },
      default: { redirects: {} },
      additionalProperties: true
    };
    environmentSchema = Object.assign(Object.assign({}, removePropertyRecursively(redoclyConfigSchema, "default")), { additionalProperties: false });
    rootRedoclyConfigSchema = Object.assign(Object.assign({ $id: "root-redocly-config" }, redoclyConfigSchema), { properties: Object.assign(Object.assign({ plugins: {
      type: "array",
      items: { type: "string" }
    } }, redoclyConfigSchema.properties), { env: {
      type: "object",
      additionalProperties: environmentSchema
      // TODO: if we want full validation we need to override apis, theme and the root
    } }), default: {}, additionalProperties: false });
  }
});

// node_modules/@redocly/config/lib-esm/product-override-schema.js
var productThemeOverrideSchema, productConfigOverrideSchema;
var init_product_override_schema = __esm({
  "node_modules/@redocly/config/lib-esm/product-override-schema.js"() {
    init_default_theme_config_schema();
    init_ex_theme_config_schemas();
    init_root_config_schema();
    productThemeOverrideSchema = {
      type: "object",
      properties: {
        logo: themeConfigSchema.properties.logo,
        navbar: themeConfigSchema.properties.navbar,
        footer: themeConfigSchema.properties.footer,
        sidebar: themeConfigSchema.properties.sidebar,
        search: themeConfigSchema.properties.search,
        codeSnippet: themeConfigSchema.properties.codeSnippet,
        breadcrumbs: themeConfigSchema.properties.breadcrumbs,
        openapi: themeConfigSchema.properties.openapi,
        feedback: themeConfigSchema.properties.feedback,
        analytics: {
          type: "object",
          properties: {
            ga: productGoogleAnalyticsConfigSchema
          }
        }
      },
      additionalProperties: true,
      default: {}
    };
    productConfigOverrideSchema = {
      $id: "product-config-override",
      type: "object",
      properties: Object.assign(Object.assign({}, productThemeOverrideSchema.properties), {
        apis: {
          type: "object",
          additionalProperties: apiConfigSchema
        },
        /**
         * @deprecated left for backwards compatibility
         */
        theme: productThemeOverrideSchema
      }),
      additionalProperties: false
    };
  }
});

// node_modules/@redocly/config/lib-esm/types.js
var init_types = __esm({
  "node_modules/@redocly/config/lib-esm/types.js"() {
  }
});

// node_modules/@redocly/config/lib-esm/portal-shared-types.js
var init_portal_shared_types = __esm({
  "node_modules/@redocly/config/lib-esm/portal-shared-types.js"() {
  }
});

// node_modules/@redocly/config/lib-esm/index.js
var init_lib_esm = __esm({
  "node_modules/@redocly/config/lib-esm/index.js"() {
    init_product_override_schema();
    init_root_config_schema();
    init_redoc_config_schema();
    init_types();
    init_portal_shared_types();
    init_constants();
  }
});

export {
  AuthProviderType,
  REDOCLY_TEAMS_RBAC,
  REDOCLY_ROUTE_RBAC,
  LayoutVariant,
  init_lib_esm
};
