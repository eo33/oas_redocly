import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  EmbeddedReplay,
  JsonPointer,
  OpenAPIParser,
  RedocExample,
  RedocSchema,
  RequestSamples,
  StoreProvider,
  getOperation,
  getServerEnvName,
  getTagOrGroup,
  i,
  isOperationName,
  normalizeOptions,
  useOpenapiDocsOptions
} from "./chunk-W7SZW2JA.js";
import "./chunk-LGQQW4UX.js";
import {
  n
} from "./chunk-JJ5XY26P.js";
import "./chunk-7WVTT2DN.js";
import {
  Admonition,
  Admonition2,
  init_Admonition,
  init_src
} from "./chunk-EAFIJ2VV.js";
import "./chunk-AB7LF64Z.js";
import "./chunk-Q6LZZN6W.js";
import "./chunk-WLDWULA7.js";
import "./chunk-GHSOG4VG.js";
import "./chunk-D237NEF2.js";
import "./chunk-2J7OHCSZ.js";
import "./chunk-XQXU7C5Q.js";
import "./chunk-SX3NFZJN.js";
import {
  init_styled_components_esm,
  styled_components_esm_default
} from "./chunk-WNBJGIID.js";
import "./chunk-R4PATEVC.js";
import "./chunk-35AYGKFE.js";

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/json-schema.js
init_src();
import * as e2 from "react";

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/styled.elements.js
init_styled_components_esm();
var t = styled_components_esm_default.div.attrs({
  className: "openapi-wrap"
}).withConfig({
  displayName: "styledelements__t",
  componentId: "sc-11bv2i3-0"
})(["margin:20px 0;--code-block-padding:var(--spacing-xs) 0 var(--spacing-xs) 20px;--spacing-horizontal:0;--panel-gap-horizontal:0;& > div{gap:var(--spacing-md);}.api-content &{--spacing-horizontal:var(--spacing-xl);--panel-gap-horizontal:var(--spacing-xl);}tap-highlight-color:rgba(0,0,0,0);text-size-adjust:100%;text-rendering:var(--text-rendering,auto) !important;font-family:var(--font-family-base);font-size:var(--font-size-base);line-height:var(--line-height-base);font-weight:var(--font-weight-regular);color:var(--text-color-primary);-webkit-font-smoothing:var(--text-smoothing);"]);
var e = styled_components_esm_default.div.withConfig({
  displayName: "styledelements__e",
  componentId: "sc-11bv2i3-1"
})(["color:red;"]);

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/json-schema.js
function v(r) {
  const { options: m3, schemaResolved: o4, schemaResolvedErrors: t2, schema: n3 } = r;
  if (n3 || o4) {
    const s2 = { openapi: "3.0.0", info: { version: "1", description: "test", title: "test" }, paths: {}, "x-root": o4?.components?.schemas?.__root || n3, components: { schemas: { ...o4?.components?.schemas } } };
    return e2.createElement(t, null, e2.createElement(StoreProvider, { options: m3, definition: s2 }, t2?.length ? e2.createElement(Admonition, { name: "Problem in json-schema tag", type: "danger" }, t2.map((i3, a) => e2.createElement("div", { key: a }, i3))) : null, e2.createElement(RedocSchema, { pointer: "#/x-root" })));
  }
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/explain-step.js
import o from "react";

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/step-by-step-wrapper.js
import s from "react";
var i2 = s.createContext({ operationsResults: {}, updateOperationResult(t2, e4) {
  this.operationsResults = { ...this.operationsResults, [t2]: e4 };
} });
var c = ({ children: t2, initialOperationsResults: e4 = {} }) => {
  const [o4, r] = s.useState(e4), p = { operationsResults: o4, updateOperationResult: (a, n3) => r((u) => ({ ...u, [a]: n3 })) };
  return s.createElement(i2.Provider, { value: p }, t2);
};

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/explain-step.js
var m = ({ id: l, needs: n3, placeholder: t2 }) => {
  const { operationsResults: a } = o.useContext(i2), e4 = n3?.map((c2) => a[c2]);
  return o.createElement("div", { id: l }, e4 ? t2.call(null, ...e4) : t2.call(null));
};

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/openapi-code-sample.js
import * as o2 from "react";

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/hooks/use-store.js
function n2(r) {
  const e4 = n(r || "");
  return e4 ? { store: e4, error: null, baseSlug: e4.baseSlug } : { store: void 0, error: "Incorrect OpenAPI file path" };
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/get-operation/get-operation-info-by-id.js
function m2(i3, s2) {
  const a = i3.paths || {};
  for (const p of Object.entries(a)) {
    const [r, e4] = p, o4 = Object.entries(e4).find(([t2, n3]) => isOperationName(t2) && n3.operationId === s2);
    if (o4) {
      const [t2, n3] = o4;
      return { ...n3, pathName: r, httpVerb: t2, pathParameters: e4.parameters || [], pathServers: e4.servers, pointer: JsonPointer.compile(["paths", r, t2]), isWebhook: false };
    }
  }
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/get-operation/get-operation-info-by-pointer.js
function h(s2, e4) {
  try {
    const [t2, o4, n3] = JsonPointer.parse(e4), r = s2.paths[o4], a = r?.[n3];
    return a && { ...a, pathName: o4, httpVerb: n3, pathParameters: r.parameters || [], pathServers: r.servers, pointer: e4, isWebhook: false };
  } catch (t2) {
    console.error(t2);
    return;
  }
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/get-operation/get-operation.js
function T(o4, { operationId: s2, pointer: f }, l, { exampleKey: i3, mimeType: a, environments: d, environment: p, requestBody: m3 }) {
  let r;
  if (s2 ? r = m2(o4.definition, s2) : f && (r = h(o4.definition, f)), !r)
    return;
  const g2 = new OpenAPIParser(o4.definition, void 0, normalizeOptions(o4.options)), u = r.tags?.[0], O = u ? getTagOrGroup("group", { name: u }, void 0) : void 0, n3 = getOperation(g2, r, O, l, "");
  if (a && n3.requestBody?.content?.mediaTypes && (n3.requestBody.content.mediaTypes = n3.requestBody?.content?.mediaTypes.filter((e4) => e4.name === a)), i3 && n3.requestBody?.content?.mediaTypes.forEach((e4) => {
    if (!e4.examples)
      return;
    const t2 = e4.examples[i3];
    e4.examples = t2 ? { [i3]: t2 } : {};
  }), m3 && n3.requestBody?.content?.mediaTypes.forEach((e4) => {
    e4.examples = {};
  }), d && (n3.servers = n3.servers.map((e4) => {
    const t2 = d?.[getServerEnvName(e4)];
    return t2 ? { ...e4, url: t2.server || e4.url } : e4;
  })), p) {
    const e4 = n3.servers.filter((t2) => p === getServerEnvName(t2));
    n3.servers = e4.length ? e4 : n3.servers;
  }
  return n3;
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/openapi-code-sample.js
function P(d) {
  const { descriptionFile: f, operationId: a, pointer: m3, exampleKey: s2, mimeType: l, language: r, requestBody: g2, parameters: S, options: u, environment: t2, environments: n3 } = d, { store: e4, error: v2, baseSlug: c2 } = n2(f), i3 = o2.useMemo(() => ({ ...e4?.options, ...u, ...(r || null) && { codeSamples: { languages: [{ lang: r }] }, mockServer: i(e4?.options?.mockServer, c2 || "") } }), [r, u, e4?.options, c2]), p = o2.useMemo(() => {
    if (e4)
      return T(e4, { operationId: a, pointer: m3 }, i3, { exampleKey: s2, mimeType: l, environments: n3, environment: t2 });
  }, [s2, i3, l, a, m3, e4, n3, t2]);
  return e4 ? p ? o2.createElement(t, null, o2.createElement(StoreProvider, { options: i3, definition: e4.definition, withState: { environments: n3, environment: t2, operation: { pointer: p.pointer, state: { requestValues: { body: g2, ...S } } } } }, o2.createElement(RequestSamples, { operation: p, disableFooter: true }))) : o2.createElement("pre", { style: { color: "red" } }, "Can not find OpeAPI operation by operationId or pointer") : o2.createElement(e, null, v2);
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/openapi-example.js
import * as e3 from "react";
function g(t2) {
  const { descriptionFile: n3, pointer: r, options: i3, mimeType: p } = t2, { store: o4, error: m3 } = n2(n3), s2 = useOpenapiDocsOptions();
  return o4 ? e3.createElement(t, null, e3.createElement(StoreProvider, { options: { ...i3, markdocOptions: s2.markdocOptions }, definition: o4.definition }, e3.createElement(RedocExample, { pointer: r, mimeType: p || "application/json" }))) : e3.createElement(e, null, m3);
}

// node_modules/@redocly/realm/dist/server/plugins/markdown/markdoc/custom-components/openapi/replay-openapi.js
import o3 from "react";
init_Admonition();
var B = (f) => {
  const { descriptionFile: s2, operationId: a, pointer: l, exampleKey: c2, mimeType: d, requestBody: r, parameters: y, options: t2, environment: n3, environments: i3 } = f, { store: e4, error: g2, baseSlug: u } = n2(s2), p = o3.useMemo(() => ({ ...e4?.options, ...t2 }), [t2, e4?.options]), m3 = o3.useMemo(() => {
    if (e4)
      return T(e4, { operationId: a, pointer: l }, p, { exampleKey: c2, mimeType: d, environments: i3, environment: n3, requestBody: r });
  }, [c2, p, d, a, l, e4, i3, n3, r]);
  return e4 ? m3 ? o3.createElement(t, null, o3.createElement(StoreProvider, { options: { ...t2, disableRouter: true, routingBasePath: u, mockServer: i(p.mockServer, u) }, definition: e4.definition, withState: { environments: i3, environment: n3, operation: { pointer: m3.pointer, state: { requestValues: { body: r, ...y } } } } }, o3.createElement(EmbeddedReplay, { operation: m3, fullOpenApi: e4.definition, corsProxyUrl: e4.options.corsProxyUrl }))) : o3.createElement(Admonition2, { type: "danger" }, "Cannot find OpenAPI operation by operationId or pointer in ", s2) : o3.createElement(e, null, g2);
};
export {
  m as ExplainStep,
  v as JsonSchema,
  P as OpenApiCodeSample,
  g as OpenApiExample,
  i2 as RedocStepByStepContext,
  B as ReplayOpenApi,
  c as StepByStepWrapper
};
