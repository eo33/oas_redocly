import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  b,
  s
} from "./chunk-P5LFNF57.js";
import {
  P3 as P,
  d,
  t
} from "./chunk-7WVTT2DN.js";
import {
  AuthProviderType,
  init_lib_esm
} from "./chunk-R4PATEVC.js";

// node_modules/@redocly/realm/dist/shared/types/global-data.js
init_lib_esm();

// node_modules/@redocly/realm/dist/server/constants.js
var s2;
(function(e3) {
  e3.BUILD = "build", e3.DEVELOP = "develop", e3.PREPARE = "prepare";
})(s2 || (s2 = {}));
var N = new RegExp("((?!@i18n\\/|@l10n\\/)\\/?@.*?(?=\\/))", "g");
var D = process.env.JWT_SECRET_KEY || "test_secret_key";
var M = { [AuthProviderType.SAML2]: P(t.IDP_LOGIN), [AuthProviderType.OIDC]: P(t.IDP_LOGIN) };
var l = s("REDOCLY_TELEMETRY_ENDPOINT") || "https://app.cloud.redocly.com/api/telemetry/project";
var m = s("REDOCLY_LOCAL_DEV") !== "true" && s("REDOCLY_TELEMETRY") !== "off" || s("REDOCLY_TELEMETRY") === "on";
var n = process.env.PROJECT_SLUG;
var p = process.env.ORG_SLUG;
var o = process.env.BH_API_URL && p && n ? `${process.env.BH_API_URL}/orgs/${p}/projects/${n}` : void 0;
var u = process.env.BH_API_URL ? `${process.env.BH_API_URL}/entitlements/.well-known/jwks` : "https://app.cloud.redocly.com/api/entitlements/.well-known/jwks";
var F = o ? `${o}/feedback` : "";
var Y = o ? `${o}/ai-conversations` : "";
var f = o && `${o}/registry/apis`;
var y = o && `${o}/registry/paths`;
var V = 365 * 24 * 60 * 60;
var h = process.env.AUTH_URL;

// node_modules/@redocly/realm/dist/server/utils/reporter/logger.js
import * as l2 from "readline";

// node_modules/@redocly/realm/dist/server/utils/reporter/formatter.js
import * as g from "node:path";

// node_modules/@redocly/realm/dist/server/utils/reporter/masker.js
var s3 = (t7) => {
  let [e3, a4] = t7.split("@");
  return `${e3.length > 2 ? e3.slice(0, 2) + "*".repeat(e3.length - 2) : "*".repeat(e3.length)}@${a4}`;
};

// node_modules/colorette/index.js
import * as tty from "tty";
var {
  env = {},
  argv = [],
  platform = ""
} = typeof process === "undefined" ? {} : process;
var isDisabled = "NO_COLOR" in env || argv.includes("--no-color");
var isForced = "FORCE_COLOR" in env || argv.includes("--color");
var isWindows = platform === "win32";
var isDumbTerminal = env.TERM === "dumb";
var isCompatibleTerminal = tty && tty.isatty && tty.isatty(1) && env.TERM && !isDumbTerminal;
var isCI = "CI" in env && ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env);
var isColorSupported = !isDisabled && (isForced || isWindows && !isDumbTerminal || isCompatibleTerminal || isCI);
var replaceClose = (index, string, close, replace, head = string.substring(0, index) + replace, tail = string.substring(index + close.length), next = tail.indexOf(close)) => head + (next < 0 ? tail : replaceClose(next, tail, close, replace));
var clearBleed = (index, string, open, close, replace) => index < 0 ? open + string + close : open + replaceClose(index, string, close, replace) + close;
var filterEmpty = (open, close, replace = open, at = open.length + 1) => (string) => string || !(string === "" || string === void 0) ? clearBleed(
  ("" + string).indexOf(close, at),
  string,
  open,
  close,
  replace
) : "";
var init = (open, close, replace) => filterEmpty(`\x1B[${open}m`, `\x1B[${close}m`, replace);
var colors = {
  reset: init(0, 0),
  bold: init(1, 22, "\x1B[22m\x1B[1m"),
  dim: init(2, 22, "\x1B[22m\x1B[2m"),
  italic: init(3, 23),
  underline: init(4, 24),
  inverse: init(7, 27),
  hidden: init(8, 28),
  strikethrough: init(9, 29),
  black: init(30, 39),
  red: init(31, 39),
  green: init(32, 39),
  yellow: init(33, 39),
  blue: init(34, 39),
  magenta: init(35, 39),
  cyan: init(36, 39),
  white: init(37, 39),
  gray: init(90, 39),
  bgBlack: init(40, 49),
  bgRed: init(41, 49),
  bgGreen: init(42, 49),
  bgYellow: init(43, 49),
  bgBlue: init(44, 49),
  bgMagenta: init(45, 49),
  bgCyan: init(46, 49),
  bgWhite: init(47, 49),
  blackBright: init(90, 39),
  redBright: init(91, 39),
  greenBright: init(92, 39),
  yellowBright: init(93, 39),
  blueBright: init(94, 39),
  magentaBright: init(95, 39),
  cyanBright: init(96, 39),
  whiteBright: init(97, 39),
  bgBlackBright: init(100, 49),
  bgRedBright: init(101, 49),
  bgGreenBright: init(102, 49),
  bgYellowBright: init(103, 49),
  bgBlueBright: init(104, 49),
  bgMagentaBright: init(105, 49),
  bgCyanBright: init(106, 49),
  bgWhiteBright: init(107, 49)
};
var createColors = ({ useColor = isColorSupported } = {}) => useColor ? colors : Object.keys(colors).reduce(
  (colors2, key) => ({ ...colors2, [key]: String }),
  {}
);
var {
  reset,
  bold,
  dim,
  italic,
  underline,
  inverse,
  hidden,
  strikethrough,
  black,
  red,
  green,
  yellow,
  blue,
  magenta,
  cyan,
  white,
  gray,
  bgBlack,
  bgRed,
  bgGreen,
  bgYellow,
  bgBlue,
  bgMagenta,
  bgCyan,
  bgWhite,
  blackBright,
  redBright,
  greenBright,
  yellowBright,
  blueBright,
  magentaBright,
  cyanBright,
  whiteBright,
  bgBlackBright,
  bgRedBright,
  bgGreenBright,
  bgYellowBright,
  bgBlueBright,
  bgMagentaBright,
  bgCyanBright,
  bgWhiteBright
} = createColors();

// node_modules/@redocly/realm/dist/server/utils/reporter/colors.js
var r = s("PORTAL_LOG_FORMAT") !== "JSON";
var { red: s4, green: a, bold: t3, blue: c, gray: n2, yellow: d2, cyan: b2 } = createColors({ useColor: r });

// node_modules/@redocly/realm/dist/server/utils/reporter/formatter.js
var s5;
(function(e3) {
  e3.INFO = "INFO", e3.WARN = "WARN", e3.ERROR = "ERROR", e3.SUCCESS = "SUCCESS", e3.VERBOSE = "VERBOSE", e3.HTTP = "HTTP";
})(s5 || (s5 = {}));
var w = { [s5.INFO]: c, [s5.SUCCESS]: a, [s5.WARN]: d2, [s5.ERROR]: s4, [s5.HTTP]: b2, [s5.VERBOSE]: n2 };
var $ = { "%ap": (e3) => c(g.resolve(e3)), "%rp": (e3) => c(g.relative(process.cwd(), e3)), "%s": (e3) => e3?.toString(), "%c": (e3) => c(e3) };
var b3 = { format(e3) {
  switch (process.env.PORTAL_LOG_FORMAT) {
    case "JSON":
      return j(e3);
    default:
      return N2(e3);
  }
}, interpolate(e3, ...c4) {
  const i = Object.keys($).map((t7) => `(${t7})`).join("|"), a4 = new RegExp(i, "g");
  let r5, m3 = e3;
  for (; (r5 = a4.exec(e3)) !== null; ) {
    r5.index === a4.lastIndex && a4.lastIndex++;
    const t7 = c4.shift();
    if (t7 === void 0)
      break;
    const o4 = r5[0];
    m3 = m3.replace(o4, $[o4](t7));
  }
  return m3;
} };
var D2 = b3;
var N2 = (e3) => {
  const { level: c4, message: i, duration: a4, context: r5 } = e3, m3 = b(), t7 = [w[c4](t3(`[${c4.toLowerCase()}]`))];
  if (m3 && t7.push(n2(`time="${x()}"`)), r5) {
    const { email: o4, ipAddress: u3, subject: l3, method: f3, pathname: d4, statusCode: h2, teams: S3 } = r5;
    h2 && t7.push(I(h2)), e3.level === s5.HTTP && (f3 && t7.push(n2(`method="${f3}"`)), d4 && t7.push(n2(`path="${d4}"`))), u3 && t7.push(n2(`ip="${u3}"`)), o4 && t7.push(n2(`email="${s3(o4)}"`)), l3 && t7.push(n2(`sub="${l3}"`)), S3?.length && t7.push(n2(`teams="${S3.join(", ")}"`));
  }
  if (i) {
    const o4 = m3 ? `msg="${String(i).replaceAll?.('"', '\\"')}"` : String(i);
    t7.push(o4);
  }
  return e3.level === s5.HTTP && r5?.userAgent && t7.push(n2(`agent="${r5.userAgent}"`)), a4 && t7.push(H(a4)), t7.join(" ") + `
`;
};
var j = ({ context: e3, message: c4, ...i }) => {
  const { method: a4, pathname: r5, statusCode: m3, userAgent: t7, subject: o4, email: u3, teams: l3 } = e3 || {}, f3 = { ...i, email: u3 && s3(u3), subject: o4, teams: l3, ...i.level === s5.HTTP ? { method: a4, pathname: r5, statusCode: m3, userAgent: t7 } : { message: String(c4) } };
  return b() && (f3.time = x()), JSON.stringify(f3, ["time", "level", "scope", "message", "duration", "method", "pathname", "statusCode", "userAgent", "subject", "ipAddress", "email"]) + `
`;
};
var I = (e3) => (e3 % 500 < 100 ? s4 : e3 % 400 < 100 ? d2 : a)(`status="${e3}"`);
var x = () => {
  let e3 = (/* @__PURE__ */ new Date()).getTimezoneOffset() * 6e4;
  return new Date(Date.now() - e3).toISOString().slice(0, -1);
};
var H = (e3) => n2(`dur="${Math.round(e3)}ms"`);

// node_modules/@redocly/realm/dist/server/utils/crypto.js
import { createHash as r2, randomBytes as o2 } from "crypto";
function d3(t7) {
  return r2("sha256").update(t7).digest("base64");
}

// node_modules/@redocly/realm/dist/server/utils/is-build-mode.js
function o3() {
  return process.env.REDOCLY_RUNNING_COMMAND === s2.BUILD || process.env.REDOCLY_RUNNING_COMMAND === s2.PREPARE;
}

// node_modules/@redocly/realm/dist/server/utils/reporter/reporter.js
var a3 = 30;
var E = class {
  errors = [];
  markdocProblems = [];
  pushError(r5, t7, ...e3) {
    const s6 = D2.interpolate(r5, ...e3);
    this.errors.push({ severity: t7, message: s6, type: "ERROR" });
  }
  reportBrokenLink(r5) {
    this.errors.push(r5);
  }
  panicOnBuild(r5, ...t7) {
    r5 instanceof Error && (r5 = r5.message + `
` + r5.stack), o3() ? x2.panic(r5, ...t7) : this.pushError(r5, "PANIC", ...t7);
  }
  panicOnBuildContentError(r5, ...t7) {
    r5 instanceof Error && (r5 = r5.message + `
` + r5.stack), o3() ? x2.panicOnContentError(r5, ...t7) : this.pushError(r5, "PANIC", ...t7);
  }
  reportMarkdocProblem(r5) {
    this.markdocProblems.push(r5);
  }
  clearErrors() {
    this.errors = [];
  }
  clearMarkdocProblems() {
    this.markdocProblems = [];
  }
  getProblems() {
    return [...this.errors, ...this.markdocProblems];
  }
  summary(r5, t7 = 0) {
    const e3 = this.getProblems(), s6 = this.markdocProblems.filter((c4) => c4.type === "BROKEN_LINK").length, n3 = this.errors.filter((c4) => c4.type === "BROKEN_LINK").length, d4 = this.markdocProblems.length - s6, f3 = this.errors.length - n3;
    return x2.logSticky("validate", e3.length ? s4("  \u274C Status: %s markdoc errors, %s broken links, %s other errors") : "  \u2705 Status: No errors found", d4, s6 + n3, f3), t7 !== 0 && x2.logSticky("pages", `  \u{1F4C4} Total pages: ${t7}`), x2.logSticky("timing", r5), x2.logSticky("validate-sep", ""), x2.isInteractive() && (e3.length ? x2.logSticky("actions", "Press (e) to print all errors, (q) to quit") : x2.logSticky("actions", n2("Press (q) to quit"))), e3;
  }
  printErrors(r5 = []) {
    x2.clearSticky(), x2.disableSticky = true;
    const t7 = this.errors.length, e3 = r5.length ? r5 : [...this.errors, ...this.markdocProblems];
    let s6 = 0;
    for (const n3 of e3.slice(0, a3))
      s6 >= t7 ? x2.contentError(s4(`[${++s6}] `) + u2(n3)) : x2.error(s4(`[${++s6}] `) + u2(n3));
    e3.length > a3 && x2.error(`... and ${e3.length - a3} more errors`), x2.printSticky(), x2.disableSticky = false;
  }
  listenStdin() {
    if (!x2.isInteractive())
      return;
    process.stdin.setRawMode(true), process.stdin.resume(), process.stdin.setEncoding("utf8");
    const r5 = this.printErrors.bind(this);
    process.stdin.on("data", function(t7) {
      if (t7 === "" && process.exit(), t7 === "\x7F") {
        process.stdout.write("\b \b");
        return;
      }
      if (t7 === "\r") {
        x2.clearSticky(), process.stdout.write(`
`), x2.printSticky();
        return;
      }
      if (t7 === "e") {
        r5();
        return;
      }
      t7 === "q" && process.exit(0);
    });
  }
};
var y2 = new E();
function u2(i) {
  const r5 = i.sourceFileLocation, t7 = r5 ? `:${r5.line}:${r5.character ?? 1}` : "";
  return i.message + (i.codeframe ? `

` + i.codeframe + `

` : `
`) + (i.sourceFileRelativePath ? n2(`at ${c("./" + i.sourceFileRelativePath)}${t7}`) + `
` : "");
}

// node_modules/@redocly/realm/dist/cli/telemetry/index.js
var w2 = new d(l, !m);

// node_modules/@redocly/realm/dist/server/utils/process.js
function t6(e3) {
  process.exit(e3);
}

// node_modules/@redocly/realm/dist/server/utils/is-develop-mode.js
function r4() {
  return process.env.REDOCLY_RUNNING_COMMAND === s2.DEVELOP;
}

// node_modules/@redocly/realm/dist/server/utils/reporter/logger.js
var E2 = [{ id: "sep", content: `
` }, { id: "sep2", content: n2("\u2500".repeat(Math.round(process.stdout.columns / 2))) + `
` }, { id: "sep3", content: `
` }];
var c3 = [];
var p2 = 0;
var S2 = class {
  context;
  isProdMode;
  timers = /* @__PURE__ */ new Map();
  timeouts = /* @__PURE__ */ new Map();
  disableSticky = false;
  constructor(t7) {
    this.context = t7, this.isProdMode = b();
  }
  panic(t7, ...e3) {
    t7 instanceof Error && (t7 = t7.message + `
` + t7.stack), this.error(t7, ...e3), w2.send("cli_error_caught", { message: t7 }), t6(1);
  }
  panicOnContentError(t7, ...e3) {
    t7 instanceof Error && (t7 = t7.message + `
` + t7.stack), this.contentError(t7, ...e3), w2.send("cli_error_caught", { message: t7, scope: "content" }), t6(1);
  }
  info(t7, ...e3) {
    this.log({ level: s5.INFO, message: t7, args: e3 });
  }
  infoTime(t7, e3, ...i) {
    return this.logTiming(s5.INFO, e3, t7, ...i);
  }
  success(t7, ...e3) {
    this.log({ level: s5.SUCCESS, message: t7, args: e3 });
  }
  logSticky(t7, e3, ...i) {
    const n3 = c3.find((r5) => r5.id === t7), s6 = D2.interpolate(e3, ...i) + `
`;
    if (!this.isInteractive()) {
      this.log({ level: s5.INFO, message: e3, args: i });
      return;
    }
    n3 ? n3.content = s6 : (c3.length === 0 && c3.push(...E2), c3.push({ id: t7, content: s6 }));
    for (let r5 = 0; r5 < p2; r5++)
      l2.moveCursor(process.stdout, 0, -1), l2.clearLine(process.stdout, 1);
    this.printSticky(), p2 = c3.length;
  }
  successTime(t7, e3, ...i) {
    return this.logTiming(s5.SUCCESS, e3, t7, ...i);
  }
  warn(t7, ...e3) {
    this.log({ level: s5.WARN, message: t7, args: e3 });
  }
  warnProd(t7, ...e3) {
    this.isProdMode ? this.warn(t7, ...e3) : this.verbose(t7, ...e3);
  }
  error(t7, ...e3) {
    this.log({ level: s5.ERROR, message: t7, args: e3 });
  }
  contentError(t7, ...e3) {
    this.log({ level: s5.ERROR, message: t7, scope: "content", args: e3 });
  }
  verbose(t7, ...e3) {
    process.env.REPORTER_VERBOSE === "true" && this.log({ level: s5.VERBOSE, message: t7, args: e3 });
  }
  verboseTime(t7, e3, ...i) {
    if (process.env.REPORTER_VERBOSE === "true")
      return this.logTiming(s5.VERBOSE, e3, t7, ...i);
  }
  httpTime(t7) {
    return this.logTiming(s5.HTTP, "", t7);
  }
  startTiming(t7) {
    const e3 = t7 || Symbol();
    this.timers.set(e3, performance.now());
    const i = setTimeout(() => {
      this.timers.delete(e3), this.timeouts.delete(e3);
    }, 500 * 1e3);
    return this.timeouts.set(e3, i), e3;
  }
  updateContext(t7) {
    this.context = { ...this.context, ...t7 };
  }
  clearAllTimeouts() {
    for (const t7 of this.timeouts.values())
      clearTimeout(t7);
    this.timeouts.clear();
  }
  logTiming(t7, e3, i, ...n3) {
    const s6 = this.timers.get(i);
    if (!s6)
      return;
    const r5 = Math.round(performance.now() - s6);
    return this.timers.delete(i), this.log({ level: t7, message: e3, duration: r5, args: n3 }), { message: e3, time_ms: r5 };
  }
  printSticky() {
    c3.forEach((t7) => {
      process.stderr.write(t7.content);
    });
  }
  clearSticky() {
    if (this.isInteractive())
      for (let t7 = 0; t7 < p2; t7++)
        l2.moveCursor(process.stdout, 0, -1), l2.clearLine(process.stdout, 1);
  }
  log({ level: t7, message: e3, duration: i, scope: n3, args: s6 }) {
    !this.disableSticky && this.isInteractive() && this.clearSticky();
    let r5 = e3 && D2.interpolate(e3, ...s6);
    r5 && i != null && t7 !== s5.VERBOSE && w2.send("timing_performed", { time_ms: i, message: r5 });
    const u3 = { level: t7, message: r5, duration: i, scope: n3, context: this.context };
    process.stderr.write(D2.format(u3)), !this.disableSticky && this.isInteractive() && this.printSticky();
  }
  isInteractive({ stream: t7 = process.stdout } = {}) {
    return !!(t7 && t7.isTTY && process.env.TERM !== "dumb" && !("CI" in process.env) && r4());
  }
  patchConsole() {
    if (this.isInteractive())
      for (const t7 of T2) {
        const e3 = console[t7];
        console[t7] = (...i) => {
          this.clearSticky(), e3(...i), this.printSticky();
        };
      }
  }
};
var v = new S2();
var x2 = v;
var T2 = ["log", "warn", "error", "info", "debug", "trace", "dir", "timeEnd", "table"];

export {
  d3 as d,
  f,
  y,
  r4 as r,
  x2 as x
};
