import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  I
} from "./chunk-JDENUEPH.js";
import {
  A,
  n,
  te
} from "./chunk-JJ5XY26P.js";
import "./chunk-7WVTT2DN.js";
import {
  AddIcon,
  SubtractIcon,
  init_AddIcon,
  init_SubtractIcon
} from "./chunk-EAFIJ2VV.js";
import "./chunk-AB7LF64Z.js";
import "./chunk-Q6LZZN6W.js";
import {
  ArrowLeftIcon,
  init_ArrowLeftIcon
} from "./chunk-WLDWULA7.js";
import "./chunk-GHSOG4VG.js";
import "./chunk-D237NEF2.js";
import {
  CatalogActions,
  CatalogDescription,
  CatalogPageContent,
  CatalogPageDescriptionWrapper,
  CatalogPageWrapper,
  CatalogTitle,
  FilterContent,
  FilterPopover,
  Sidebar,
  init_Catalog,
  init_CatalogActions,
  init_FilterContent,
  init_FilterPopover,
  init_Sidebar,
  require_object_assign,
  require_react_dom
} from "./chunk-2J7OHCSZ.js";
import "./chunk-XQXU7C5Q.js";
import {
  Button,
  init_Button
} from "./chunk-SX3NFZJN.js";
import {
  breakpoints,
  getScorecardColorVariable,
  init_hooks,
  init_styled_components_esm,
  init_utils,
  styled_components_esm_default,
  styled_components_esm_exports,
  useModalScrollLock
} from "./chunk-WNBJGIID.js";
import "./chunk-R4PATEVC.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-35AYGKFE.js";

// node_modules/@styled-system/core/dist/index.esm.js
var import_object_assign, merge, sort, defaults, createMediaQuery, getValue, get, createParser, parseResponsiveStyle, parseResponsiveObject, createStyleFunction, system, compose;
var init_index_esm = __esm({
  "node_modules/@styled-system/core/dist/index.esm.js"() {
    import_object_assign = __toESM(require_object_assign());
    merge = function merge2(a4, b3) {
      var result = (0, import_object_assign.default)({}, a4, b3);
      for (var key in a4) {
        var _assign;
        if (!a4[key] || typeof b3[key] !== "object")
          continue;
        (0, import_object_assign.default)(result, (_assign = {}, _assign[key] = (0, import_object_assign.default)(a4[key], b3[key]), _assign));
      }
      return result;
    };
    sort = function sort2(obj) {
      var next = {};
      Object.keys(obj).sort(function(a4, b3) {
        return a4.localeCompare(b3, void 0, {
          numeric: true,
          sensitivity: "base"
        });
      }).forEach(function(key) {
        next[key] = obj[key];
      });
      return next;
    };
    defaults = {
      breakpoints: [40, 52, 64].map(function(n5) {
        return n5 + "em";
      })
    };
    createMediaQuery = function createMediaQuery2(n5) {
      return "@media screen and (min-width: " + n5 + ")";
    };
    getValue = function getValue2(n5, scale) {
      return get(scale, n5, n5);
    };
    get = function get2(obj, key, def, p4, undef) {
      key = key && key.split ? key.split(".") : [key];
      for (p4 = 0; p4 < key.length; p4++) {
        obj = obj ? obj[key[p4]] : undef;
      }
      return obj === undef ? def : obj;
    };
    createParser = function createParser2(config9) {
      var cache = {};
      var parse = function parse2(props) {
        var styles = {};
        var shouldSort = false;
        var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;
        for (var key in props) {
          if (!config9[key])
            continue;
          var sx = config9[key];
          var raw = props[key];
          var scale = get(props.theme, sx.scale, sx.defaults);
          if (typeof raw === "object") {
            cache.breakpoints = !isCacheDisabled && cache.breakpoints || get(props.theme, "breakpoints", defaults.breakpoints);
            if (Array.isArray(raw)) {
              cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
              styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
              continue;
            }
            if (raw !== null) {
              styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
              shouldSort = true;
            }
            continue;
          }
          (0, import_object_assign.default)(styles, sx(raw, scale, props));
        }
        if (shouldSort) {
          styles = sort(styles);
        }
        return styles;
      };
      parse.config = config9;
      parse.propNames = Object.keys(config9);
      parse.cache = cache;
      var keys = Object.keys(config9).filter(function(k2) {
        return k2 !== "config";
      });
      if (keys.length > 1) {
        keys.forEach(function(key) {
          var _createParser;
          parse[key] = createParser2((_createParser = {}, _createParser[key] = config9[key], _createParser));
        });
      }
      return parse;
    };
    parseResponsiveStyle = function parseResponsiveStyle2(mediaQueries, sx, scale, raw, _props) {
      var styles = {};
      raw.slice(0, mediaQueries.length).forEach(function(value, i4) {
        var media = mediaQueries[i4];
        var style3 = sx(value, scale, _props);
        if (!media) {
          (0, import_object_assign.default)(styles, style3);
        } else {
          var _assign2;
          (0, import_object_assign.default)(styles, (_assign2 = {}, _assign2[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign2));
        }
      });
      return styles;
    };
    parseResponsiveObject = function parseResponsiveObject2(breakpoints2, sx, scale, raw, _props) {
      var styles = {};
      for (var key in raw) {
        var breakpoint = breakpoints2[key];
        var value = raw[key];
        var style3 = sx(value, scale, _props);
        if (!breakpoint) {
          (0, import_object_assign.default)(styles, style3);
        } else {
          var _assign3;
          var media = createMediaQuery(breakpoint);
          (0, import_object_assign.default)(styles, (_assign3 = {}, _assign3[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign3));
        }
      }
      return styles;
    };
    createStyleFunction = function createStyleFunction2(_ref) {
      var properties = _ref.properties, property = _ref.property, scale = _ref.scale, _ref$transform = _ref.transform, transform = _ref$transform === void 0 ? getValue : _ref$transform, defaultScale = _ref.defaultScale;
      properties = properties || [property];
      var sx = function sx2(value, scale2, _props) {
        var result = {};
        var n5 = transform(value, scale2, _props);
        if (n5 === null)
          return;
        properties.forEach(function(prop) {
          result[prop] = n5;
        });
        return result;
      };
      sx.scale = scale;
      sx.defaults = defaultScale;
      return sx;
    };
    system = function system2(args) {
      if (args === void 0) {
        args = {};
      }
      var config9 = {};
      Object.keys(args).forEach(function(key) {
        var conf = args[key];
        if (conf === true) {
          config9[key] = createStyleFunction({
            property: key,
            scale: key
          });
          return;
        }
        if (typeof conf === "function") {
          config9[key] = conf;
          return;
        }
        config9[key] = createStyleFunction(conf);
      });
      var parser = createParser(config9);
      return parser;
    };
    compose = function compose2() {
      var config9 = {};
      for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
        parsers[_key] = arguments[_key];
      }
      parsers.forEach(function(parser2) {
        if (!parser2 || !parser2.config)
          return;
        (0, import_object_assign.default)(config9, parser2.config);
      });
      var parser = createParser(config9);
      return parser;
    };
  }
});

// node_modules/@styled-system/layout/dist/index.esm.js
var isNumber, getWidth, config, layout, index_esm_default;
var init_index_esm2 = __esm({
  "node_modules/@styled-system/layout/dist/index.esm.js"() {
    init_index_esm();
    isNumber = function isNumber2(n5) {
      return typeof n5 === "number" && !isNaN(n5);
    };
    getWidth = function getWidth2(n5, scale) {
      return get(scale, n5, !isNumber(n5) || n5 > 1 ? n5 : n5 * 100 + "%");
    };
    config = {
      width: {
        property: "width",
        scale: "sizes",
        transform: getWidth
      },
      height: {
        property: "height",
        scale: "sizes"
      },
      minWidth: {
        property: "minWidth",
        scale: "sizes"
      },
      minHeight: {
        property: "minHeight",
        scale: "sizes"
      },
      maxWidth: {
        property: "maxWidth",
        scale: "sizes"
      },
      maxHeight: {
        property: "maxHeight",
        scale: "sizes"
      },
      size: {
        properties: ["width", "height"],
        scale: "sizes"
      },
      overflow: true,
      overflowX: true,
      overflowY: true,
      display: true,
      verticalAlign: true
    };
    layout = system(config);
    index_esm_default = layout;
  }
});

// node_modules/@styled-system/color/dist/index.esm.js
var config2, color, index_esm_default2;
var init_index_esm3 = __esm({
  "node_modules/@styled-system/color/dist/index.esm.js"() {
    init_index_esm();
    config2 = {
      color: {
        property: "color",
        scale: "colors"
      },
      backgroundColor: {
        property: "backgroundColor",
        scale: "colors"
      },
      opacity: true
    };
    config2.bg = config2.backgroundColor;
    color = system(config2);
    index_esm_default2 = color;
  }
});

// node_modules/@styled-system/typography/dist/index.esm.js
var defaults2, config3, typography, index_esm_default3;
var init_index_esm4 = __esm({
  "node_modules/@styled-system/typography/dist/index.esm.js"() {
    init_index_esm();
    defaults2 = {
      fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
    };
    config3 = {
      fontFamily: {
        property: "fontFamily",
        scale: "fonts"
      },
      fontSize: {
        property: "fontSize",
        scale: "fontSizes",
        defaultScale: defaults2.fontSizes
      },
      fontWeight: {
        property: "fontWeight",
        scale: "fontWeights"
      },
      lineHeight: {
        property: "lineHeight",
        scale: "lineHeights"
      },
      letterSpacing: {
        property: "letterSpacing",
        scale: "letterSpacings"
      },
      textAlign: true,
      fontStyle: true
    };
    typography = system(config3);
    index_esm_default3 = typography;
  }
});

// node_modules/@styled-system/flexbox/dist/index.esm.js
var config4, flexbox, index_esm_default4;
var init_index_esm5 = __esm({
  "node_modules/@styled-system/flexbox/dist/index.esm.js"() {
    init_index_esm();
    config4 = {
      alignItems: true,
      alignContent: true,
      justifyItems: true,
      justifyContent: true,
      flexWrap: true,
      flexDirection: true,
      // item
      flex: true,
      flexGrow: true,
      flexShrink: true,
      flexBasis: true,
      justifySelf: true,
      alignSelf: true,
      order: true
    };
    flexbox = system(config4);
    index_esm_default4 = flexbox;
  }
});

// node_modules/@styled-system/grid/dist/index.esm.js
var defaults3, config5, grid, index_esm_default5;
var init_index_esm6 = __esm({
  "node_modules/@styled-system/grid/dist/index.esm.js"() {
    init_index_esm();
    defaults3 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    config5 = {
      gridGap: {
        property: "gridGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridColumnGap: {
        property: "gridColumnGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridRowGap: {
        property: "gridRowGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridColumn: true,
      gridRow: true,
      gridAutoFlow: true,
      gridAutoColumns: true,
      gridAutoRows: true,
      gridTemplateColumns: true,
      gridTemplateRows: true,
      gridTemplateAreas: true,
      gridArea: true
    };
    grid = system(config5);
    index_esm_default5 = grid;
  }
});

// node_modules/@styled-system/border/dist/index.esm.js
var config6, border, index_esm_default6;
var init_index_esm7 = __esm({
  "node_modules/@styled-system/border/dist/index.esm.js"() {
    init_index_esm();
    config6 = {
      border: {
        property: "border",
        scale: "borders"
      },
      borderWidth: {
        property: "borderWidth",
        scale: "borderWidths"
      },
      borderStyle: {
        property: "borderStyle",
        scale: "borderStyles"
      },
      borderColor: {
        property: "borderColor",
        scale: "colors"
      },
      borderRadius: {
        property: "borderRadius",
        scale: "radii"
      },
      borderTop: {
        property: "borderTop",
        scale: "borders"
      },
      borderTopLeftRadius: {
        property: "borderTopLeftRadius",
        scale: "radii"
      },
      borderTopRightRadius: {
        property: "borderTopRightRadius",
        scale: "radii"
      },
      borderRight: {
        property: "borderRight",
        scale: "borders"
      },
      borderBottom: {
        property: "borderBottom",
        scale: "borders"
      },
      borderBottomLeftRadius: {
        property: "borderBottomLeftRadius",
        scale: "radii"
      },
      borderBottomRightRadius: {
        property: "borderBottomRightRadius",
        scale: "radii"
      },
      borderLeft: {
        property: "borderLeft",
        scale: "borders"
      },
      borderX: {
        properties: ["borderLeft", "borderRight"],
        scale: "borders"
      },
      borderY: {
        properties: ["borderTop", "borderBottom"],
        scale: "borders"
      }
    };
    config6.borderTopWidth = {
      property: "borderTopWidth",
      scale: "borderWidths"
    };
    config6.borderTopColor = {
      property: "borderTopColor",
      scale: "colors"
    };
    config6.borderTopStyle = {
      property: "borderTopStyle",
      scale: "borderStyles"
    };
    config6.borderTopLeftRadius = {
      property: "borderTopLeftRadius",
      scale: "radii"
    };
    config6.borderTopRightRadius = {
      property: "borderTopRightRadius",
      scale: "radii"
    };
    config6.borderBottomWidth = {
      property: "borderBottomWidth",
      scale: "borderWidths"
    };
    config6.borderBottomColor = {
      property: "borderBottomColor",
      scale: "colors"
    };
    config6.borderBottomStyle = {
      property: "borderBottomStyle",
      scale: "borderStyles"
    };
    config6.borderBottomLeftRadius = {
      property: "borderBottomLeftRadius",
      scale: "radii"
    };
    config6.borderBottomRightRadius = {
      property: "borderBottomRightRadius",
      scale: "radii"
    };
    config6.borderLeftWidth = {
      property: "borderLeftWidth",
      scale: "borderWidths"
    };
    config6.borderLeftColor = {
      property: "borderLeftColor",
      scale: "colors"
    };
    config6.borderLeftStyle = {
      property: "borderLeftStyle",
      scale: "borderStyles"
    };
    config6.borderRightWidth = {
      property: "borderRightWidth",
      scale: "borderWidths"
    };
    config6.borderRightColor = {
      property: "borderRightColor",
      scale: "colors"
    };
    config6.borderRightStyle = {
      property: "borderRightStyle",
      scale: "borderStyles"
    };
    border = system(config6);
    index_esm_default6 = border;
  }
});

// node_modules/@styled-system/background/dist/index.esm.js
var config7, background, index_esm_default7;
var init_index_esm8 = __esm({
  "node_modules/@styled-system/background/dist/index.esm.js"() {
    init_index_esm();
    config7 = {
      background: true,
      backgroundImage: true,
      backgroundSize: true,
      backgroundPosition: true,
      backgroundRepeat: true
    };
    config7.bgImage = config7.backgroundImage;
    config7.bgSize = config7.backgroundSize;
    config7.bgPosition = config7.backgroundPosition;
    config7.bgRepeat = config7.backgroundRepeat;
    background = system(config7);
    index_esm_default7 = background;
  }
});

// node_modules/@styled-system/position/dist/index.esm.js
var defaults4, config8, position, index_esm_default8;
var init_index_esm9 = __esm({
  "node_modules/@styled-system/position/dist/index.esm.js"() {
    init_index_esm();
    defaults4 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    config8 = {
      position: true,
      zIndex: {
        property: "zIndex",
        scale: "zIndices"
      },
      top: {
        property: "top",
        scale: "space",
        defaultScale: defaults4.space
      },
      right: {
        property: "right",
        scale: "space",
        defaultScale: defaults4.space
      },
      bottom: {
        property: "bottom",
        scale: "space",
        defaultScale: defaults4.space
      },
      left: {
        property: "left",
        scale: "space",
        defaultScale: defaults4.space
      }
    };
    position = system(config8);
    index_esm_default8 = position;
  }
});

// node_modules/@styled-system/space/dist/index.esm.js
var defaults5, isNumber3, getMargin, configs, margin, padding, space;
var init_index_esm10 = __esm({
  "node_modules/@styled-system/space/dist/index.esm.js"() {
    init_index_esm();
    defaults5 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    isNumber3 = function isNumber4(n5) {
      return typeof n5 === "number" && !isNaN(n5);
    };
    getMargin = function getMargin2(n5, scale) {
      if (!isNumber3(n5)) {
        return get(scale, n5, n5);
      }
      var isNegative = n5 < 0;
      var absolute = Math.abs(n5);
      var value = get(scale, absolute, absolute);
      if (!isNumber3(value)) {
        return isNegative ? "-" + value : value;
      }
      return value * (isNegative ? -1 : 1);
    };
    configs = {};
    configs.margin = {
      margin: {
        property: "margin",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginTop: {
        property: "marginTop",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginRight: {
        property: "marginRight",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginBottom: {
        property: "marginBottom",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginLeft: {
        property: "marginLeft",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginX: {
        properties: ["marginLeft", "marginRight"],
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginY: {
        properties: ["marginTop", "marginBottom"],
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      }
    };
    configs.margin.m = configs.margin.margin;
    configs.margin.mt = configs.margin.marginTop;
    configs.margin.mr = configs.margin.marginRight;
    configs.margin.mb = configs.margin.marginBottom;
    configs.margin.ml = configs.margin.marginLeft;
    configs.margin.mx = configs.margin.marginX;
    configs.margin.my = configs.margin.marginY;
    configs.padding = {
      padding: {
        property: "padding",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingTop: {
        property: "paddingTop",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingRight: {
        property: "paddingRight",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingBottom: {
        property: "paddingBottom",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingLeft: {
        property: "paddingLeft",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingX: {
        properties: ["paddingLeft", "paddingRight"],
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingY: {
        properties: ["paddingTop", "paddingBottom"],
        scale: "space",
        defaultScale: defaults5.space
      }
    };
    configs.padding.p = configs.padding.padding;
    configs.padding.pt = configs.padding.paddingTop;
    configs.padding.pr = configs.padding.paddingRight;
    configs.padding.pb = configs.padding.paddingBottom;
    configs.padding.pl = configs.padding.paddingLeft;
    configs.padding.px = configs.padding.paddingX;
    configs.padding.py = configs.padding.paddingY;
    margin = system(configs.margin);
    padding = system(configs.padding);
    space = compose(margin, padding);
  }
});

// node_modules/@styled-system/shadow/dist/index.esm.js
var shadow, index_esm_default9;
var init_index_esm11 = __esm({
  "node_modules/@styled-system/shadow/dist/index.esm.js"() {
    init_index_esm();
    shadow = system({
      boxShadow: {
        property: "boxShadow",
        scale: "shadows"
      },
      textShadow: {
        property: "textShadow",
        scale: "shadows"
      }
    });
    index_esm_default9 = shadow;
  }
});

// node_modules/@styled-system/css/dist/index.esm.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var get3, defaultBreakpoints, defaultTheme, aliases, multiples, scales, positiveOrNegative, transforms, responsive, css, index_esm_default10;
var init_index_esm12 = __esm({
  "node_modules/@styled-system/css/dist/index.esm.js"() {
    get3 = function get4(obj, key, def, p4, undef) {
      key = key && key.split ? key.split(".") : [key];
      for (p4 = 0; p4 < key.length; p4++) {
        obj = obj ? obj[key[p4]] : undef;
      }
      return obj === undef ? def : obj;
    };
    defaultBreakpoints = [40, 52, 64].map(function(n5) {
      return n5 + "em";
    });
    defaultTheme = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
      fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
    };
    aliases = {
      bg: "backgroundColor",
      m: "margin",
      mt: "marginTop",
      mr: "marginRight",
      mb: "marginBottom",
      ml: "marginLeft",
      mx: "marginX",
      my: "marginY",
      p: "padding",
      pt: "paddingTop",
      pr: "paddingRight",
      pb: "paddingBottom",
      pl: "paddingLeft",
      px: "paddingX",
      py: "paddingY"
    };
    multiples = {
      marginX: ["marginLeft", "marginRight"],
      marginY: ["marginTop", "marginBottom"],
      paddingX: ["paddingLeft", "paddingRight"],
      paddingY: ["paddingTop", "paddingBottom"],
      size: ["width", "height"]
    };
    scales = {
      color: "colors",
      backgroundColor: "colors",
      borderColor: "colors",
      margin: "space",
      marginTop: "space",
      marginRight: "space",
      marginBottom: "space",
      marginLeft: "space",
      marginX: "space",
      marginY: "space",
      padding: "space",
      paddingTop: "space",
      paddingRight: "space",
      paddingBottom: "space",
      paddingLeft: "space",
      paddingX: "space",
      paddingY: "space",
      top: "space",
      right: "space",
      bottom: "space",
      left: "space",
      gridGap: "space",
      gridColumnGap: "space",
      gridRowGap: "space",
      gap: "space",
      columnGap: "space",
      rowGap: "space",
      fontFamily: "fonts",
      fontSize: "fontSizes",
      fontWeight: "fontWeights",
      lineHeight: "lineHeights",
      letterSpacing: "letterSpacings",
      border: "borders",
      borderTop: "borders",
      borderRight: "borders",
      borderBottom: "borders",
      borderLeft: "borders",
      borderWidth: "borderWidths",
      borderStyle: "borderStyles",
      borderRadius: "radii",
      borderTopRightRadius: "radii",
      borderTopLeftRadius: "radii",
      borderBottomRightRadius: "radii",
      borderBottomLeftRadius: "radii",
      borderTopWidth: "borderWidths",
      borderTopColor: "colors",
      borderTopStyle: "borderStyles",
      borderBottomWidth: "borderWidths",
      borderBottomColor: "colors",
      borderBottomStyle: "borderStyles",
      borderLeftWidth: "borderWidths",
      borderLeftColor: "colors",
      borderLeftStyle: "borderStyles",
      borderRightWidth: "borderWidths",
      borderRightColor: "colors",
      borderRightStyle: "borderStyles",
      outlineColor: "colors",
      boxShadow: "shadows",
      textShadow: "shadows",
      zIndex: "zIndices",
      width: "sizes",
      minWidth: "sizes",
      maxWidth: "sizes",
      height: "sizes",
      minHeight: "sizes",
      maxHeight: "sizes",
      flexBasis: "sizes",
      size: "sizes",
      // svg
      fill: "colors",
      stroke: "colors"
    };
    positiveOrNegative = function positiveOrNegative2(scale, value) {
      if (typeof value !== "number" || value >= 0) {
        return get3(scale, value, value);
      }
      var absolute = Math.abs(value);
      var n5 = get3(scale, absolute, absolute);
      if (typeof n5 === "string")
        return "-" + n5;
      return n5 * -1;
    };
    transforms = ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "top", "bottom", "left", "right"].reduce(function(acc, curr) {
      var _extends22;
      return _extends({}, acc, (_extends22 = {}, _extends22[curr] = positiveOrNegative, _extends22));
    }, {});
    responsive = function responsive2(styles) {
      return function(theme) {
        var next = {};
        var breakpoints2 = get3(theme, "breakpoints", defaultBreakpoints);
        var mediaQueries = [null].concat(breakpoints2.map(function(n5) {
          return "@media screen and (min-width: " + n5 + ")";
        }));
        for (var key in styles) {
          var value = typeof styles[key] === "function" ? styles[key](theme) : styles[key];
          if (value == null)
            continue;
          if (!Array.isArray(value)) {
            next[key] = value;
            continue;
          }
          for (var i4 = 0; i4 < value.slice(0, mediaQueries.length).length; i4++) {
            var media = mediaQueries[i4];
            if (!media) {
              next[key] = value[i4];
              continue;
            }
            next[media] = next[media] || {};
            if (value[i4] == null)
              continue;
            next[media][key] = value[i4];
          }
        }
        return next;
      };
    };
    css = function css2(args) {
      return function(props) {
        if (props === void 0) {
          props = {};
        }
        var theme = _extends({}, defaultTheme, {}, props.theme || props);
        var result = {};
        var obj = typeof args === "function" ? args(theme) : args;
        var styles = responsive(obj)(theme);
        for (var key in styles) {
          var x5 = styles[key];
          var val = typeof x5 === "function" ? x5(theme) : x5;
          if (key === "variant") {
            var variant3 = css2(get3(theme, val))(theme);
            result = _extends({}, result, {}, variant3);
            continue;
          }
          if (val && typeof val === "object") {
            result[key] = css2(val)(theme);
            continue;
          }
          var prop = get3(aliases, key, key);
          var scaleName = get3(scales, prop);
          var scale = get3(theme, scaleName, get3(theme, prop, {}));
          var transform = get3(transforms, prop, get3);
          var value = transform(scale, val, val);
          if (multiples[prop]) {
            var dirs = multiples[prop];
            for (var i4 = 0; i4 < dirs.length; i4++) {
              result[dirs[i4]] = value;
            }
          } else {
            result[prop] = value;
          }
        }
        return result;
      };
    };
    index_esm_default10 = css;
  }
});

// node_modules/@styled-system/variant/dist/index.esm.js
var variant, buttonStyle, textStyle, colorStyle;
var init_index_esm13 = __esm({
  "node_modules/@styled-system/variant/dist/index.esm.js"() {
    init_index_esm();
    init_index_esm12();
    variant = function variant2(_ref) {
      var _config;
      var scale = _ref.scale, _ref$prop = _ref.prop, prop = _ref$prop === void 0 ? "variant" : _ref$prop, _ref$variants = _ref.variants, variants = _ref$variants === void 0 ? {} : _ref$variants, key = _ref.key;
      var sx;
      if (Object.keys(variants).length) {
        sx = function sx2(value, scale2, props) {
          return index_esm_default10(get(scale2, value, null))(props.theme);
        };
      } else {
        sx = function sx2(value, scale2) {
          return get(scale2, value, null);
        };
      }
      sx.scale = scale || key;
      sx.defaults = variants;
      var config9 = (_config = {}, _config[prop] = sx, _config);
      var parser = createParser(config9);
      return parser;
    };
    buttonStyle = variant({
      key: "buttons"
    });
    textStyle = variant({
      key: "textStyles",
      prop: "textStyle"
    });
    colorStyle = variant({
      key: "colorStyles",
      prop: "colors"
    });
  }
});

// node_modules/styled-system/dist/index.esm.js
var index_esm_exports = {};
__export(index_esm_exports, {
  alignContent: () => alignContent,
  alignItems: () => alignItems,
  alignSelf: () => alignSelf,
  background: () => background,
  backgroundImage: () => backgroundImage,
  backgroundPosition: () => backgroundPosition,
  backgroundRepeat: () => backgroundRepeat,
  backgroundSize: () => backgroundSize,
  border: () => border,
  borderBottom: () => borderBottom,
  borderColor: () => borderColor,
  borderLeft: () => borderLeft,
  borderRadius: () => borderRadius,
  borderRight: () => borderRight,
  borderStyle: () => borderStyle,
  borderTop: () => borderTop,
  borderWidth: () => borderWidth,
  borders: () => index_esm_default6,
  bottom: () => bottom,
  boxShadow: () => index_esm_default9,
  buttonStyle: () => buttonStyle,
  color: () => color,
  colorStyle: () => colorStyle,
  compose: () => compose,
  createParser: () => createParser,
  createStyleFunction: () => createStyleFunction,
  display: () => display,
  flex: () => flex,
  flexBasis: () => flexBasis,
  flexDirection: () => flexDirection,
  flexGrow: () => flexGrow,
  flexShrink: () => flexShrink,
  flexWrap: () => flexWrap,
  flexbox: () => flexbox,
  fontFamily: () => fontFamily,
  fontSize: () => fontSize,
  fontStyle: () => fontStyle,
  fontWeight: () => fontWeight,
  get: () => get,
  grid: () => grid,
  gridArea: () => gridArea,
  gridAutoColumns: () => gridAutoColumns,
  gridAutoFlow: () => gridAutoFlow,
  gridAutoRows: () => gridAutoRows,
  gridColumn: () => gridColumn,
  gridColumnGap: () => gridColumnGap,
  gridGap: () => gridGap,
  gridRow: () => gridRow,
  gridRowGap: () => gridRowGap,
  gridTemplateAreas: () => gridTemplateAreas,
  gridTemplateColumns: () => gridTemplateColumns,
  gridTemplateRows: () => gridTemplateRows,
  height: () => height,
  justifyContent: () => justifyContent,
  justifyItems: () => justifyItems,
  justifySelf: () => justifySelf,
  layout: () => layout,
  left: () => left,
  letterSpacing: () => letterSpacing,
  lineHeight: () => lineHeight,
  margin: () => margin,
  maxHeight: () => maxHeight,
  maxWidth: () => maxWidth,
  minHeight: () => minHeight,
  minWidth: () => minWidth,
  opacity: () => opacity,
  order: () => order,
  overflow: () => overflow,
  overflowX: () => overflowX,
  overflowY: () => overflowY,
  padding: () => padding,
  position: () => position,
  right: () => right,
  shadow: () => shadow,
  size: () => size,
  space: () => space,
  style: () => style,
  system: () => system,
  textAlign: () => textAlign,
  textShadow: () => index_esm_default9,
  textStyle: () => textStyle,
  top: () => top,
  typography: () => typography,
  variant: () => variant,
  verticalAlign: () => verticalAlign,
  width: () => width,
  zIndex: () => zIndex
});
var width, height, minWidth, minHeight, maxWidth, maxHeight, size, verticalAlign, display, overflow, overflowX, overflowY, opacity, fontSize, fontFamily, fontWeight, lineHeight, textAlign, fontStyle, letterSpacing, alignItems, alignContent, justifyItems, justifyContent, flexWrap, flexDirection, flex, flexGrow, flexShrink, flexBasis, justifySelf, alignSelf, order, gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea, borderWidth, borderStyle, borderColor, borderTop, borderRight, borderBottom, borderLeft, borderRadius, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat, zIndex, top, right, bottom, left, style;
var init_index_esm14 = __esm({
  "node_modules/styled-system/dist/index.esm.js"() {
    init_index_esm();
    init_index_esm2();
    init_index_esm3();
    init_index_esm4();
    init_index_esm5();
    init_index_esm6();
    init_index_esm7();
    init_index_esm8();
    init_index_esm9();
    init_index_esm();
    init_index_esm10();
    init_index_esm3();
    init_index_esm2();
    init_index_esm4();
    init_index_esm5();
    init_index_esm7();
    init_index_esm8();
    init_index_esm9();
    init_index_esm6();
    init_index_esm11();
    init_index_esm11();
    init_index_esm13();
    init_index_esm7();
    width = index_esm_default.width;
    height = index_esm_default.height;
    minWidth = index_esm_default.minWidth;
    minHeight = index_esm_default.minHeight;
    maxWidth = index_esm_default.maxWidth;
    maxHeight = index_esm_default.maxHeight;
    size = index_esm_default.size;
    verticalAlign = index_esm_default.verticalAlign;
    display = index_esm_default.display;
    overflow = index_esm_default.overflow;
    overflowX = index_esm_default.overflowX;
    overflowY = index_esm_default.overflowY;
    opacity = index_esm_default2.opacity;
    fontSize = index_esm_default3.fontSize;
    fontFamily = index_esm_default3.fontFamily;
    fontWeight = index_esm_default3.fontWeight;
    lineHeight = index_esm_default3.lineHeight;
    textAlign = index_esm_default3.textAlign;
    fontStyle = index_esm_default3.fontStyle;
    letterSpacing = index_esm_default3.letterSpacing;
    alignItems = index_esm_default4.alignItems;
    alignContent = index_esm_default4.alignContent;
    justifyItems = index_esm_default4.justifyItems;
    justifyContent = index_esm_default4.justifyContent;
    flexWrap = index_esm_default4.flexWrap;
    flexDirection = index_esm_default4.flexDirection;
    flex = index_esm_default4.flex;
    flexGrow = index_esm_default4.flexGrow;
    flexShrink = index_esm_default4.flexShrink;
    flexBasis = index_esm_default4.flexBasis;
    justifySelf = index_esm_default4.justifySelf;
    alignSelf = index_esm_default4.alignSelf;
    order = index_esm_default4.order;
    gridGap = index_esm_default5.gridGap;
    gridColumnGap = index_esm_default5.gridColumnGap;
    gridRowGap = index_esm_default5.gridRowGap;
    gridColumn = index_esm_default5.gridColumn;
    gridRow = index_esm_default5.gridRow;
    gridAutoFlow = index_esm_default5.gridAutoFlow;
    gridAutoColumns = index_esm_default5.gridAutoColumns;
    gridAutoRows = index_esm_default5.gridAutoRows;
    gridTemplateColumns = index_esm_default5.gridTemplateColumns;
    gridTemplateRows = index_esm_default5.gridTemplateRows;
    gridTemplateAreas = index_esm_default5.gridTemplateAreas;
    gridArea = index_esm_default5.gridArea;
    borderWidth = index_esm_default6.borderWidth;
    borderStyle = index_esm_default6.borderStyle;
    borderColor = index_esm_default6.borderColor;
    borderTop = index_esm_default6.borderTop;
    borderRight = index_esm_default6.borderRight;
    borderBottom = index_esm_default6.borderBottom;
    borderLeft = index_esm_default6.borderLeft;
    borderRadius = index_esm_default6.borderRadius;
    backgroundImage = index_esm_default7.backgroundImage;
    backgroundSize = index_esm_default7.backgroundSize;
    backgroundPosition = index_esm_default7.backgroundPosition;
    backgroundRepeat = index_esm_default7.backgroundRepeat;
    zIndex = index_esm_default8.zIndex;
    top = index_esm_default8.top;
    right = index_esm_default8.right;
    bottom = index_esm_default8.bottom;
    left = index_esm_default8.left;
    style = function style2(_ref) {
      var prop = _ref.prop, cssProperty = _ref.cssProperty, alias = _ref.alias, key = _ref.key, transformValue = _ref.transformValue, scale = _ref.scale, properties = _ref.properties;
      var config9 = {};
      config9[prop] = createStyleFunction({
        properties,
        property: cssProperty || prop,
        scale: key,
        defaultScale: scale,
        transform: transformValue
      });
      if (alias)
        config9[alias] = config9[prop];
      var parse = createParser(config9);
      return parse;
    };
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Box.js
var require_Box = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Box.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Box = void 0;
    var styled_system_1 = (init_index_esm14(), __toCommonJS(index_esm_exports));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    exports.Box = styled_components_1.default.div.attrs(() => ({
      "data-component-name": "ui/Box"
    }))`
  max-width: 100%;
  ${styled_system_1.space}
  ${styled_system_1.layout}
  ${styled_system_1.position}
  ${styled_system_1.flex}
  ${styled_system_1.textAlign}
  ${styled_system_1.color}
  ${styled_system_1.border}
  ${styled_system_1.grid}
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Flex.js
var require_Flex = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Flex.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FlexSection = exports.Flex = void 0;
    var react_1 = __importDefault(__require("react"));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var styled_system_1 = (init_index_esm14(), __toCommonJS(index_esm_exports));
    var Box_1 = require_Box();
    exports.Flex = (0, styled_components_1.default)(Box_1.Box).attrs({
      "data-component-name": "ui/Flex"
    })`
  display: flex;
  flex-wrap: wrap;
  ${styled_system_1.flexbox}
  ${styled_system_1.width}
`;
    function FlexSection(props) {
      return react_1.default.createElement(exports.Flex, Object.assign({}, props, {
        width: props.width || {
          xs: "90%",
          large: 910
        }
      }), props.children);
    }
    exports.FlexSection = FlexSection;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Background.js
var require_Background = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Background.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Background = void 0;
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var Flex_1 = require_Flex();
    exports.Background = (0, styled_components_1.default)(Flex_1.Flex).attrs(() => ({
      "data-component-name": "ui/Background"
    }))`
  background: var(--navbar-bg-color);
  color: var(--navbar-text-color);
  font-family: var(--heading-font-family);

  a:not([role='button']),
  a:not([role='button']):hover {
    color: var(--navbar-text-color);
  }
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Typography/utils.js
var require_utils = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Typography/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.typography = void 0;
    var styled_components_1 = (init_styled_components_esm(), __toCommonJS(styled_components_esm_exports));
    var typographyProperties = Object.entries({
      fontSize: "font-size",
      fontWeight: "font-weight",
      fontFamily: "font-family",
      lineHeight: "line-height",
      color: "text-color",
      textTransform: "text-transform"
    });
    function getTypographyCssRulesByComponentName(componentName, fallbackName) {
      const result = {};
      for (const [styledPropertyName, cssPropertyName] of typographyProperties) {
        const cssVariable = `--${componentName}-${cssPropertyName}`;
        const fallbackVariable = fallbackName ? `,var(--${fallbackName}-${cssPropertyName})` : "";
        result[styledPropertyName] = `var(${cssVariable}${fallbackVariable})`;
      }
      return result;
    }
    function typography2(componentName, fallbackName) {
      return (0, styled_components_1.css)`
    ${getTypographyCssRulesByComponentName(componentName, fallbackName)}
  `;
    }
    exports.typography = typography2;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Typography/H1.js
var require_H1 = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Typography/H1.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.H1 = void 0;
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var utils_1 = require_utils();
    exports.H1 = styled_components_1.default.h1.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/H1",
      className
    }))`
  color: var(--h1-text-color);
  margin: var(--h1-margin-top) 0 var(--h1-margin-bottom);

  ${(0, utils_1.typography)("h1")};
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Typography/H2.js
var require_H2 = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Typography/H2.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.H2 = void 0;
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var utils_1 = require_utils();
    exports.H2 = styled_components_1.default.h2.attrs(({
      className
    }) => ({
      "data-component-name": "Typography/H2",
      className
    }))`
  color: var(--h2-text-color);
  margin: var(--h2-margin-top) 0 var(--h2-margin-bottom);

  ${(0, utils_1.typography)("h2")};
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Typography/index.js
var require_Typography = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Typography/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p4 in m3)
        if (p4 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p4))
          __createBinding(exports2, m3, p4);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_H1(), exports);
    __exportStar(require_H2(), exports);
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Jumbotron.js
var require_Jumbotron = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Jumbotron.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Jumbotron = void 0;
    var styled_system_1 = (init_index_esm14(), __toCommonJS(index_esm_exports));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var Background_1 = require_Background();
    var Typography_1 = require_Typography();
    exports.Jumbotron = (0, styled_components_1.default)(Background_1.Background).attrs(() => ({
      "data-component-name": "ui/Jumbotron"
    }))`
  flex-direction: column;
  padding-top: ${({
      pt
    }) => pt || "0"};
  padding-bottom: ${({
      pb
    }) => pb || "8em"};
  padding-left: ${({
      pl
    }) => pl || "1rem"};
  padding-right: ${({
      pr
    }) => pr || "1rem"};
  ${({
      bgColor
    }) => bgColor && `background: ${bgColor}`};
  ${({
      bgImage,
      bgColor
    }) => bgImage && `
      background: ${bgColor || "var(--text-color-primary)"} url(${bgImage});
      background-repeat: no-repeat;
      background-size: cover;
      background-position: center;
  `};
  ${({
      parallaxEffect
    }) => parallaxEffect && `
      background-attachment: scroll, fixed;
  `};
  ${styled_system_1.space}
  ${Typography_1.H1}, ${Typography_1.H2} {
    color: ${({
      textColor
    }) => textColor || "var(--navbar-text-color)"};
    padding: 0;
  }
  h1 {
    font-size: 3.5em;
    line-height: 1.2;
    font-weight: var(--font-weight-bold);
    margin: 1.75em 0 0.5em 0;
    text-align: center;
  }
  h2 {
    font-size: 1.875em;
    line-height: 1;
    font-weight: var(--font-weight-regular);
    margin: 0;
    margin-bottom: 2em;
    text-align: center;
  }
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/ArrowBack.js
var require_ArrowBack = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/ArrowBack.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ArrowBack = void 0;
    var react_1 = __importDefault(__require("react"));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var Arrow = ({
      className,
      dataComponentName
    }) => react_1.default.createElement("span", {
      "data-component-name": dataComponentName
    }, react_1.default.createElement("svg", {
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 12 10",
      width: "10px",
      height: "10px",
      className
    }, react_1.default.createElement("path", {
      d: "M2.414 5l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L2.414 5z"
    }), react_1.default.createElement("path", {
      d: "M2 5a1 1 0 011-1h8a1 1 0 110 2H3a1 1 0 01-1-1z"
    })));
    exports.ArrowBack = (0, styled_components_1.default)(Arrow)`
  fill: var(--sidebar-back-button-icon-color);

  background-image: var(--sidebar-back-button-icon);
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
`;
  }
});

// node_modules/highlight-words-core/dist/index.js
var require_dist = __commonJS({
  "node_modules/highlight-words-core/dist/index.js"(exports, module) {
    module.exports = /******/
    function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId])
          return installedModules[moduleId].exports;
        var module2 = installedModules[moduleId] = {
          /******/
          exports: {},
          /******/
          id: moduleId,
          /******/
          loaded: false
          /******/
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.loaded = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.p = "";
      return __webpack_require__(0);
    }([
      /* 0 */
      /***/
      function(module2, exports2, __webpack_require__) {
        module2.exports = __webpack_require__(1);
      },
      /* 1 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _utils = __webpack_require__(2);
        Object.defineProperty(exports2, "combineChunks", {
          enumerable: true,
          get: function get5() {
            return _utils.combineChunks;
          }
        });
        Object.defineProperty(exports2, "fillInChunks", {
          enumerable: true,
          get: function get5() {
            return _utils.fillInChunks;
          }
        });
        Object.defineProperty(exports2, "findAll", {
          enumerable: true,
          get: function get5() {
            return _utils.findAll;
          }
        });
        Object.defineProperty(exports2, "findChunks", {
          enumerable: true,
          get: function get5() {
            return _utils.findChunks;
          }
        });
      },
      /* 2 */
      /***/
      function(module2, exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var findAll = exports2.findAll = function findAll2(_ref) {
          var autoEscape = _ref.autoEscape, _ref$caseSensitive = _ref.caseSensitive, caseSensitive = _ref$caseSensitive === void 0 ? false : _ref$caseSensitive, _ref$findChunks = _ref.findChunks, findChunks = _ref$findChunks === void 0 ? defaultFindChunks : _ref$findChunks, sanitize = _ref.sanitize, searchWords = _ref.searchWords, textToHighlight = _ref.textToHighlight;
          return fillInChunks({
            chunksToHighlight: combineChunks({
              chunks: findChunks({
                autoEscape,
                caseSensitive,
                sanitize,
                searchWords,
                textToHighlight
              })
            }),
            totalLength: textToHighlight ? textToHighlight.length : 0
          });
        };
        var combineChunks = exports2.combineChunks = function combineChunks2(_ref2) {
          var chunks = _ref2.chunks;
          chunks = chunks.sort(function(first, second) {
            return first.start - second.start;
          }).reduce(function(processedChunks, nextChunk) {
            if (processedChunks.length === 0) {
              return [nextChunk];
            } else {
              var prevChunk = processedChunks.pop();
              if (nextChunk.start < prevChunk.end) {
                var endIndex = Math.max(prevChunk.end, nextChunk.end);
                processedChunks.push({ highlight: false, start: prevChunk.start, end: endIndex });
              } else {
                processedChunks.push(prevChunk, nextChunk);
              }
              return processedChunks;
            }
          }, []);
          return chunks;
        };
        var defaultFindChunks = function defaultFindChunks2(_ref3) {
          var autoEscape = _ref3.autoEscape, caseSensitive = _ref3.caseSensitive, _ref3$sanitize = _ref3.sanitize, sanitize = _ref3$sanitize === void 0 ? defaultSanitize : _ref3$sanitize, searchWords = _ref3.searchWords, textToHighlight = _ref3.textToHighlight;
          textToHighlight = sanitize(textToHighlight);
          return searchWords.filter(function(searchWord) {
            return searchWord;
          }).reduce(function(chunks, searchWord) {
            searchWord = sanitize(searchWord);
            if (autoEscape) {
              searchWord = escapeRegExpFn(searchWord);
            }
            var regex = new RegExp(searchWord, caseSensitive ? "g" : "gi");
            var match = void 0;
            while (match = regex.exec(textToHighlight)) {
              var _start = match.index;
              var _end = regex.lastIndex;
              if (_end > _start) {
                chunks.push({ highlight: false, start: _start, end: _end });
              }
              if (match.index === regex.lastIndex) {
                regex.lastIndex++;
              }
            }
            return chunks;
          }, []);
        };
        exports2.findChunks = defaultFindChunks;
        var fillInChunks = exports2.fillInChunks = function fillInChunks2(_ref4) {
          var chunksToHighlight = _ref4.chunksToHighlight, totalLength = _ref4.totalLength;
          var allChunks = [];
          var append = function append2(start, end, highlight) {
            if (end - start > 0) {
              allChunks.push({
                start,
                end,
                highlight
              });
            }
          };
          if (chunksToHighlight.length === 0) {
            append(0, totalLength, false);
          } else {
            var lastIndex = 0;
            chunksToHighlight.forEach(function(chunk) {
              append(lastIndex, chunk.start, false);
              append(chunk.start, chunk.end, true);
              lastIndex = chunk.end;
            });
            append(lastIndex, totalLength, false);
          }
          return allChunks;
        };
        function defaultSanitize(string) {
          return string;
        }
        function escapeRegExpFn(string) {
          return string.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        }
      }
      /******/
    ]);
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Highlight.js
var require_Highlight = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Highlight.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
      Object.defineProperty(o, "default", { enumerable: true, value: v2 });
    } : function(o, v2) {
      o["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Highlight = exports.HighlightContext = void 0;
    var React2 = __importStar(__require("react"));
    var highlight_words_core_1 = require_dist();
    exports.HighlightContext = React2.createContext([]);
    function Highlight(props) {
      const { children } = props;
      const searchWords = React2.useContext(exports.HighlightContext);
      if (!searchWords.length) {
        return children ? React2.createElement(React2.Fragment, null, children) : null;
      }
      function highlight(str, childIdx = 0) {
        const chunks = (0, highlight_words_core_1.findAll)({
          searchWords,
          textToHighlight: str
        });
        return React2.createElement(React2.Fragment, { key: childIdx }, chunks.map((chunk, idx) => {
          const { end, highlight: highlight2, start } = chunk;
          const text = str.substr(start, end - start);
          if (highlight2) {
            return React2.createElement("mark", { key: idx }, text);
          } else {
            return text;
          }
        }));
      }
      if (typeof children === "string") {
        return highlight(children);
      } else if (Array.isArray(children)) {
        return React2.createElement(React2.Fragment, null, children.map((child, idx) => typeof children === "string" ? highlight(child, idx) : child || null));
      } else {
        return React2.createElement(React2.Fragment, null, "children") || null;
      }
    }
    exports.Highlight = Highlight;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Layout.js
var require_Layout = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Layout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmptyLayout = exports.LandingLayout = void 0;
    var LandingLayout = ({ children }) => children;
    exports.LandingLayout = LandingLayout;
    exports.EmptyLayout = exports.LandingLayout;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Tiles/TileText.js
var require_TileText = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Tiles/TileText.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TileText = void 0;
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    exports.TileText = styled_components_1.default.span.attrs(({
      className
    }) => ({
      "data-component-name": "ui/Tiles/TileText",
      className
    }))`
  display: inline-block;
  font-weight: var(--font-weight-regular);
  overflow: hidden;
  color: ${(props) => props.color || "var(--text-color-primary)"};
  line-height: 1.25;
  font-family: var(--font-family-base);
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Tiles/TileHeader.js
var require_TileHeader = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Tiles/TileHeader.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TileHeader = void 0;
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    exports.TileHeader = styled_components_1.default.h3.attrs(({
      className
    }) => ({
      "data-component-name": "ui/Tiles/TileHeader",
      className
    }))`
  font-weight: var(--h3-font-weight);
  line-height: var(--h3-line-height);
  color: ${(props) => props.color || "var(--h3-color)"};
  font-family: var(--h3-font-family);
  && {
    margin: 0 0 var(--h3-margin-bottom);
  }
`;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.breakpoints = exports.getCssColorVariable = void 0;
    var getCssColorVariable = (color2, defaultValue = "currentColor") => (color2 === null || color2 === void 0 ? void 0 : color2.startsWith("--")) ? `var(${color2})` : color2 || defaultValue;
    exports.getCssColorVariable = getCssColorVariable;
    exports.breakpoints = { small: "550px", medium: "900px", large: "1200px" };
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Tiles/WideTile.js
var require_WideTile = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Tiles/WideTile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function() {
            return m3[k2];
          }
        };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v2
      });
    } : function(o, v2) {
      o["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WideTile = void 0;
    var react_1 = __importStar(__require("react"));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var react_router_dom_1 = __require("react-router-dom");
    var TileText_1 = require_TileText();
    var TileHeader_1 = require_TileHeader();
    var utils_1 = require_utils2();
    var WideTileWrapper = (0, styled_components_1.default)(react_router_dom_1.Link)`
  display: inline-flex;
  flex-direction: ${({
      withIcon
    }) => withIcon ? "column" : "row"};
  color: var(--text-color-primary);
  border: 1px solid var(--border-color-secondary);
  border-radius: var(--border-radius-lg);
  background-color: ${({
      bgColor
    }) => bgColor || "var(--wide-tile-bg-color)"};
  background-image: ${({
      bgImage
    }) => bgImage ? `url(${bgImage})` : "none"};
  background-repeat: no-repeat;
  padding: var(--spacing-lg);
  padding-right: ${({
      disableArrow
    }) => disableArrow ? "24px" : "56px"};
  margin-bottom: var(--spacing-xl);
  box-sizing: border-box;
  position: relative;
  text-decoration: none;
  width: 100%;
  :hover {
    border-color: var(--border-color-primary);
  }
  :before {
    content: ${({
      disableArrow
    }) => disableArrow ? "none" : '""'};
    display: inline-block;
    width: 9px;
    min-height: 18px;
    background-size: 9px 18px;
    background-repeat: no-repeat;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 30px;
  }
  &.external-url::after {
    content: none;
  }

  @media screen and (min-width: ${utils_1.breakpoints.medium}) {
    width: calc(50% - 2em);
    padding: var(--spacing-xl);
    padding-right: ${({
      disableArrow
    }) => disableArrow ? "var(--spacing-xl)" : "64px"};
    flex-direction: row;
    max-width: ${({
      maxWidth: maxWidth2
    }) => maxWidth2};
  }
`;
    var WideTileHeader = (0, styled_components_1.default)(TileHeader_1.TileHeader)`
  font-size: 24px;
  font-weight: var(--font-weight-bold);
  text-align: ${({
      align
    }) => align || "left"};
`;
    var WideTileText = (0, styled_components_1.default)(TileText_1.TileText)`
  color: var(--text-color-secondary);
  font-size: 18px;
  text-align: ${({
      align
    }) => align || "left"};
`;
    var WideTileIcon = styled_components_1.default.div`
  margin-bottom: 24px;
  flex-shrink: 0;
  width: 70px;
  img {
    display: block;
    height: auto;
    max-width: 100%;
  }

  @media screen and (min-width: ${utils_1.breakpoints.medium}) {
    margin-right: 24px;
    margin-bottom: 0;
  }
`;
    var WideTile = class extends react_1.Component {
      render() {
        const {
          to,
          header,
          children,
          target,
          disableArrow,
          textAlign: textAlign2,
          headerAlign,
          icon,
          bgColor,
          bgImage,
          color: color2,
          className,
          style: style3,
          maxWidth: maxWidth2
        } = this.props;
        return react_1.default.createElement(WideTileWrapper, {
          to: to || "#",
          target,
          disableArrow,
          withIcon: !!icon,
          bgColor,
          bgImage,
          color: color2,
          className,
          style: style3,
          maxWidth: maxWidth2,
          "data-component-name": "ui/Tiles/WideTile"
        }, icon && react_1.default.createElement(WideTileIcon, null, react_1.default.createElement("img", {
          src: icon,
          alt: ""
        })), react_1.default.createElement("div", null, header && react_1.default.createElement(WideTileHeader, {
          align: textAlign2,
          color: color2,
          "data-cy": `Wide-${header}`
        }, header), children && react_1.default.createElement(WideTileText, {
          align: headerAlign,
          color: color2
        }, children)));
      }
    };
    exports.WideTile = WideTile;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Link.js
var require_Link = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Link.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
      Object.defineProperty(o, "default", { enumerable: true, value: v2 });
    } : function(o, v2) {
      o["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Link = void 0;
    var React2 = __importStar(__require("react"));
    var react_router_dom_1 = __require("react-router-dom");
    function Link(props) {
      const { to, children, className, style: style3, target, external } = props;
      const commonProps = {
        className,
        children,
        target: target || (external ? "_blank" : "_self")
      };
      if (!to) {
        return React2.createElement("div", Object.assign({}, commonProps, { style: style3 }));
      }
      if (to.match(/^(https?:\/\/|mailto:)/)) {
        return React2.createElement("a", Object.assign({}, commonProps, { style: style3, href: to }));
      }
      return React2.createElement(react_router_dom_1.Link, Object.assign({}, commonProps, { to }));
    }
    exports.Link = Link;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Tiles/ThinTile.js
var require_ThinTile = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Tiles/ThinTile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function() {
            return m3[k2];
          }
        };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v2
      });
    } : function(o, v2) {
      o["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ThinTile = void 0;
    var react_1 = __importStar(__require("react"));
    var styled_components_1 = __importDefault((init_styled_components_esm(), __toCommonJS(styled_components_esm_exports)));
    var Flex_1 = require_Flex();
    var TileText_1 = require_TileText();
    var TileHeader_1 = require_TileHeader();
    var Link_1 = require_Link();
    var utils_1 = require_utils2();
    var ThinTileWrapper = (0, styled_components_1.default)(Link_1.Link)`
  display: flex;
  flex-direction: column;
  border-radius: var(--border-radius-lg);
  box-sizing: border-box;
  padding: var(--spacing-lg);
  margin-bottom: 20px;
  text-decoration: none;
  width: 100%;
  color: var(--text-color-primary);
  border: 1px solid var(--border-color-secondary);
  background-color: ${({
      bgColor
    }) => bgColor || "var(--thin-tile-bg-color)"};
  background-image: ${({
      bgImage
    }) => bgImage ? `url(${bgImage})` : "none"};
  background-repeat: no-repeat;

  :hover {
    border-color: var(--border-color-primary);
  }

  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    width: calc(50% - 20px);
    margin-right: 10px;
    margin-left: 10px;
  }

  @media screen and (min-width: ${utils_1.breakpoints.medium}) {
    width: 250px;
  }

  @media screen and (min-width: ${utils_1.breakpoints.large}) {
    width: 280px;
  }

  &.external-url {
    :after {
      display: none;
    }
  }
`;
    var ThinTileIcon = styled_components_1.default.img`
  width: 90px;

  @media screen and (min-width: ${utils_1.breakpoints.medium}) {
    width: 80px;
  }
`;
    var ThinTileHeader = (0, styled_components_1.default)(TileHeader_1.TileHeader)`
  font-size: 24px;
  font-weight: var(--font-weight-bold);
  text-align: ${({
      align
    }) => align || "center"};
`;
    var ThinTileText = (0, styled_components_1.default)(TileText_1.TileText)`
  color: var(--text-color-secondary);
  font-size: 18px;
  line-height: 1.5;
  flex-shrink: 0;
  min-height: 3em;
  text-align: ${({
      align
    }) => align || "center"};
  ${({
      icon
    }) => icon ? `
    display: -webkit-box;
    -webkit-line-clamp: 8;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-clamp: 8;
  ` : ""};
  @media screen and (min-width: ${utils_1.breakpoints.small}) {
    min-height: 6em;
  }

  @media screen and (min-width: ${utils_1.breakpoints.medium}) {
    min-height: 4.5em;
  }
`;
    var ThinTile = class extends react_1.Component {
      render() {
        const {
          header,
          icon,
          children,
          to,
          target,
          headerAlign,
          textAlign: textAlign2,
          color: color2,
          className,
          style: style3
        } = this.props;
        return react_1.default.createElement(ThinTileWrapper, {
          to,
          target,
          color: color2,
          className,
          style: style3,
          "data-component-name": "ui/Tiles/ThinTile"
        }, (icon || header) && react_1.default.createElement(Flex_1.Flex, {
          flexDirection: "column"
        }, icon && react_1.default.createElement(Flex_1.Flex, {
          flexShrink: 0,
          height: {
            xs: "auto",
            small: "100px",
            medium: "110px"
          },
          alignItems: "center",
          justifyContent: "center",
          mb: "25px"
        }, react_1.default.createElement(ThinTileIcon, {
          src: icon
        })), header && react_1.default.createElement(ThinTileHeader, {
          align: headerAlign,
          color: color2,
          "data-cy": `Thin-${header}`
        }, header)), children && react_1.default.createElement(ThinTileText, {
          icon,
          align: textAlign2,
          color: color2
        }, children));
      }
    };
    exports.ThinTile = ThinTile;
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/Tiles/index.js
var require_Tiles = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/Tiles/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p4 in m3)
        if (p4 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p4))
          __createBinding(exports2, m3, p4);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_WideTile(), exports);
    __exportStar(require_ThinTile(), exports);
    __exportStar(require_TileHeader(), exports);
    __exportStar(require_TileText(), exports);
  }
});

// node_modules/@redocly/portal-legacy-ui/lib/index.js
var require_lib = __commonJS({
  "node_modules/@redocly/portal-legacy-ui/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m3, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p4 in m3)
        if (p4 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p4))
          __createBinding(exports2, m3, p4);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Background(), exports);
    __exportStar(require_Box(), exports);
    __exportStar(require_Flex(), exports);
    __exportStar(require_Jumbotron(), exports);
    __exportStar(require_ArrowBack(), exports);
    __exportStar(require_Highlight(), exports);
    __exportStar(require_Layout(), exports);
    __exportStar(require_Tiles(), exports);
  }
});

// node_modules/react-table/dist/react-table.development.js
var require_react_table_development = __commonJS({
  "node_modules/react-table/dist/react-table.development.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, __require("react")) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global = global || self, factory(global.ReactTable = {}, global.React));
    })(exports, function(exports2, React2) {
      "use strict";
      React2 = React2 && Object.prototype.hasOwnProperty.call(React2, "default") ? React2["default"] : React2;
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      function _extends3() {
        _extends3 = Object.assign || function(target) {
          for (var i4 = 1; i4 < arguments.length; i4++) {
            var source = arguments[i4];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends3.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i4;
        for (i4 = 0; i4 < sourceKeys.length; i4++) {
          key = sourceKeys[i4];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      var renderErr = "Renderer Error \u261D\uFE0F";
      var actions = {
        init: "init"
      };
      var defaultRenderer = function defaultRenderer2(_ref) {
        var _ref$value = _ref.value, value = _ref$value === void 0 ? "" : _ref$value;
        return value;
      };
      var emptyRenderer = function emptyRenderer2() {
        return React2.createElement(React2.Fragment, null, "\xA0");
      };
      var defaultColumn = {
        Cell: defaultRenderer,
        width: 150,
        minWidth: 0,
        maxWidth: Number.MAX_SAFE_INTEGER
      };
      function mergeProps() {
        for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {
          propList[_key] = arguments[_key];
        }
        return propList.reduce(function(props, next) {
          var style3 = next.style, className = next.className, rest = _objectWithoutPropertiesLoose(next, ["style", "className"]);
          props = _extends3({}, props, {}, rest);
          if (style3) {
            props.style = props.style ? _extends3({}, props.style || {}, {}, style3 || {}) : style3;
          }
          if (className) {
            props.className = props.className ? props.className + " " + className : className;
          }
          if (props.className === "") {
            delete props.className;
          }
          return props;
        }, {});
      }
      function handlePropGetter(prevProps, userProps, meta) {
        if (typeof userProps === "function") {
          return handlePropGetter({}, userProps(prevProps, meta));
        }
        if (Array.isArray(userProps)) {
          return mergeProps.apply(void 0, [prevProps].concat(userProps));
        }
        return mergeProps(prevProps, userProps);
      }
      var makePropGetter = function makePropGetter2(hooks, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          return [].concat(hooks, [userProps]).reduce(function(prev, next) {
            return handlePropGetter(prev, next, _extends3({}, meta, {
              userProps
            }));
          }, {});
        };
      };
      var reduceHooks = function reduceHooks2(hooks, initial, meta, allowUndefined) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.reduce(function(prev, next) {
          var nextValue = next(prev, meta);
          {
            if (!allowUndefined && typeof nextValue === "undefined") {
              console.info(next);
              throw new Error("React Table: A reducer hook \u261D\uFE0F just returned undefined! This is not allowed.");
            }
          }
          return nextValue;
        }, initial);
      };
      var loopHooks = function loopHooks2(hooks, context, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return hooks.forEach(function(hook) {
          var nextValue = hook(context, meta);
          {
            if (typeof nextValue !== "undefined") {
              console.info(hook, nextValue);
              throw new Error("React Table: A loop-type hook \u261D\uFE0F just returned a value! This is not allowed.");
            }
          }
        });
      };
      function ensurePluginOrder(plugins, befores, pluginName2, afters) {
        if (afters) {
          throw new Error('Defining plugins in the "after" section of ensurePluginOrder is no longer supported (see plugin ' + pluginName2 + ")");
        }
        var pluginIndex = plugins.findIndex(function(plugin) {
          return plugin.pluginName === pluginName2;
        });
        if (pluginIndex === -1) {
          {
            throw new Error('The plugin "' + pluginName2 + `" was not found in the plugin list!
This usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:

  ` + pluginName2 + ".pluginName = '" + pluginName2 + "'\n");
          }
        }
        befores.forEach(function(before) {
          var beforeIndex = plugins.findIndex(function(plugin) {
            return plugin.pluginName === before;
          });
          if (beforeIndex > -1 && beforeIndex > pluginIndex) {
            {
              throw new Error("React Table: The " + pluginName2 + " plugin hook must be placed after the " + before + " plugin hook!");
            }
          }
        });
      }
      function functionalUpdate(updater, old) {
        return typeof updater === "function" ? updater(old) : updater;
      }
      function useGetLatest(obj) {
        var ref = React2.useRef();
        ref.current = obj;
        return React2.useCallback(function() {
          return ref.current;
        }, []);
      }
      var safeUseLayoutEffect = typeof document !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
      function useMountedLayoutEffect(fn, deps) {
        var mountedRef = React2.useRef(false);
        safeUseLayoutEffect(function() {
          if (mountedRef.current) {
            fn();
          }
          mountedRef.current = true;
        }, deps);
      }
      function useAsyncDebounce(defaultFn, defaultWait) {
        if (defaultWait === void 0) {
          defaultWait = 0;
        }
        var debounceRef = React2.useRef({});
        var getDefaultFn = useGetLatest(defaultFn);
        var getDefaultWait = useGetLatest(defaultWait);
        return React2.useCallback(
          /* @__PURE__ */ function() {
            var _ref2 = _asyncToGenerator(
              /* @__PURE__ */ regeneratorRuntime.mark(function _callee2() {
                var _len2, args, _key2, _args2 = arguments;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                          args[_key2] = _args2[_key2];
                        }
                        if (!debounceRef.current.promise) {
                          debounceRef.current.promise = new Promise(function(resolve, reject) {
                            debounceRef.current.resolve = resolve;
                            debounceRef.current.reject = reject;
                          });
                        }
                        if (debounceRef.current.timeout) {
                          clearTimeout(debounceRef.current.timeout);
                        }
                        debounceRef.current.timeout = setTimeout(
                          /* @__PURE__ */ _asyncToGenerator(
                            /* @__PURE__ */ regeneratorRuntime.mark(function _callee() {
                              return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      delete debounceRef.current.timeout;
                                      _context.prev = 1;
                                      _context.t0 = debounceRef.current;
                                      _context.next = 5;
                                      return getDefaultFn().apply(void 0, args);
                                    case 5:
                                      _context.t1 = _context.sent;
                                      _context.t0.resolve.call(_context.t0, _context.t1);
                                      _context.next = 12;
                                      break;
                                    case 9:
                                      _context.prev = 9;
                                      _context.t2 = _context["catch"](1);
                                      debounceRef.current.reject(_context.t2);
                                    case 12:
                                      _context.prev = 12;
                                      delete debounceRef.current.promise;
                                      return _context.finish(12);
                                    case 15:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee, null, [[1, 9, 12, 15]]);
                            })
                          ),
                          getDefaultWait()
                        );
                        return _context2.abrupt("return", debounceRef.current.promise);
                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })
            );
            return function() {
              return _ref2.apply(this, arguments);
            };
          }(),
          [getDefaultFn, getDefaultWait]
        );
      }
      function makeRenderer(instance, column, meta) {
        if (meta === void 0) {
          meta = {};
        }
        return function(type, userProps) {
          if (userProps === void 0) {
            userProps = {};
          }
          var Comp = typeof type === "string" ? column[type] : type;
          if (typeof Comp === "undefined") {
            console.info(column);
            throw new Error(renderErr);
          }
          return flexRender(Comp, _extends3({}, instance, {
            column
          }, meta, {}, userProps));
        };
      }
      function flexRender(Comp, props) {
        return isReactComponent(Comp) ? React2.createElement(Comp, props) : Comp;
      }
      function isReactComponent(component) {
        return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
      }
      function isClassComponent(component) {
        return typeof component === "function" && function() {
          var proto = Object.getPrototypeOf(component);
          return proto.prototype && proto.prototype.isReactComponent;
        }();
      }
      function isExoticComponent(component) {
        return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
      }
      function linkColumnStructure(columns, parent, depth) {
        if (depth === void 0) {
          depth = 0;
        }
        return columns.map(function(column) {
          column = _extends3({}, column, {
            parent,
            depth
          });
          assignColumnAccessor(column);
          if (column.columns) {
            column.columns = linkColumnStructure(column.columns, column, depth + 1);
          }
          return column;
        });
      }
      function flattenColumns(columns) {
        return flattenBy(columns, "columns");
      }
      function assignColumnAccessor(column) {
        var id = column.id, accessor = column.accessor, Header = column.Header;
        if (typeof accessor === "string") {
          id = id || accessor;
          var accessorPath = accessor.split(".");
          accessor = function accessor2(row) {
            return getBy(row, accessorPath);
          };
        }
        if (!id && typeof Header === "string" && Header) {
          id = Header;
        }
        if (!id && column.columns) {
          console.error(column);
          throw new Error('A column ID (or unique "Header" value) is required!');
        }
        if (!id) {
          console.error(column);
          throw new Error("A column ID (or string accessor) is required!");
        }
        Object.assign(column, {
          id,
          accessor
        });
        return column;
      }
      function decorateColumn(column, userDefaultColumn) {
        if (!userDefaultColumn) {
          throw new Error();
        }
        Object.assign(column, _extends3({
          // Make sure there is a fallback header, just in case
          Header: emptyRenderer,
          Footer: emptyRenderer
        }, defaultColumn, {}, userDefaultColumn, {}, column));
        Object.assign(column, {
          originalWidth: column.width
        });
        return column;
      }
      function makeHeaderGroups(allColumns2, defaultColumn2, additionalHeaderProperties) {
        if (additionalHeaderProperties === void 0) {
          additionalHeaderProperties = function additionalHeaderProperties2() {
            return {};
          };
        }
        var headerGroups = [];
        var scanColumns = allColumns2;
        var uid = 0;
        var getUID = function getUID2() {
          return uid++;
        };
        var _loop = function _loop2() {
          var headerGroup = {
            headers: []
          };
          var parentColumns = [];
          var hasParents = scanColumns.some(function(d2) {
            return d2.parent;
          });
          scanColumns.forEach(function(column) {
            var latestParentColumn = [].concat(parentColumns).reverse()[0];
            var newParent;
            if (hasParents) {
              if (column.parent) {
                newParent = _extends3({}, column.parent, {
                  originalId: column.parent.id,
                  id: column.parent.id + "_" + getUID(),
                  headers: [column]
                }, additionalHeaderProperties(column));
              } else {
                var originalId = column.id + "_placeholder";
                newParent = decorateColumn(_extends3({
                  originalId,
                  id: column.id + "_placeholder_" + getUID(),
                  placeholderOf: column,
                  headers: [column]
                }, additionalHeaderProperties(column)), defaultColumn2);
              }
              if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {
                latestParentColumn.headers.push(column);
              } else {
                parentColumns.push(newParent);
              }
            }
            headerGroup.headers.push(column);
          });
          headerGroups.push(headerGroup);
          scanColumns = parentColumns;
        };
        while (scanColumns.length) {
          _loop();
        }
        return headerGroups.reverse();
      }
      var pathObjCache = /* @__PURE__ */ new Map();
      function getBy(obj, path, def) {
        if (!path) {
          return obj;
        }
        var cacheKey = typeof path === "function" ? path : JSON.stringify(path);
        var pathObj = pathObjCache.get(cacheKey) || function() {
          var pathObj2 = makePathArray(path);
          pathObjCache.set(cacheKey, pathObj2);
          return pathObj2;
        }();
        var val;
        try {
          val = pathObj.reduce(function(cursor, pathPart) {
            return cursor[pathPart];
          }, obj);
        } catch (e5) {
        }
        return typeof val !== "undefined" ? val : def;
      }
      function getFirstDefined() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        for (var i4 = 0; i4 < args.length; i4 += 1) {
          if (typeof args[i4] !== "undefined") {
            return args[i4];
          }
        }
      }
      function isFunction(a4) {
        if (typeof a4 === "function") {
          return a4;
        }
      }
      function flattenBy(arr, key) {
        var flat = [];
        var recurse = function recurse2(arr2) {
          arr2.forEach(function(d2) {
            if (!d2[key]) {
              flat.push(d2);
            } else {
              recurse2(d2[key]);
            }
          });
        };
        recurse(arr);
        return flat;
      }
      function expandRows(rows, _ref) {
        var manualExpandedKey = _ref.manualExpandedKey, expanded = _ref.expanded, _ref$expandSubRows = _ref.expandSubRows, expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;
        var expandedRows = [];
        var handleRow = function handleRow2(row, addToExpandedRows) {
          if (addToExpandedRows === void 0) {
            addToExpandedRows = true;
          }
          row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];
          row.canExpand = row.subRows && !!row.subRows.length;
          if (addToExpandedRows) {
            expandedRows.push(row);
          }
          if (row.subRows && row.subRows.length && row.isExpanded) {
            row.subRows.forEach(function(row2) {
              return handleRow2(row2, expandSubRows);
            });
          }
        };
        rows.forEach(function(row) {
          return handleRow(row);
        });
        return expandedRows;
      }
      function getFilterMethod(filter, userFilterTypes, filterTypes2) {
        return isFunction(filter) || userFilterTypes[filter] || filterTypes2[filter] || filterTypes2.text;
      }
      function shouldAutoRemoveFilter(autoRemove, value, column) {
        return autoRemove ? autoRemove(value, column) : typeof value === "undefined";
      }
      function unpreparedAccessWarning() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
      }
      var passiveSupported = null;
      function passiveEventSupported() {
        if (typeof passiveSupported === "boolean")
          return passiveSupported;
        var supported = false;
        try {
          var options = {
            get passive() {
              supported = true;
              return false;
            }
          };
          window.addEventListener("test", null, options);
          window.removeEventListener("test", null, options);
        } catch (err) {
          supported = false;
        }
        passiveSupported = supported;
        return passiveSupported;
      }
      var reOpenBracket = /\[/g;
      var reCloseBracket = /\]/g;
      function makePathArray(obj) {
        return flattenDeep(obj).map(function(d2) {
          return String(d2).replace(".", "_");
        }).join(".").replace(reOpenBracket, ".").replace(reCloseBracket, "").split(".");
      }
      function flattenDeep(arr, newArr) {
        if (newArr === void 0) {
          newArr = [];
        }
        if (!Array.isArray(arr)) {
          newArr.push(arr);
        } else {
          for (var i4 = 0; i4 < arr.length; i4 += 1) {
            flattenDeep(arr[i4], newArr);
          }
        }
        return newArr;
      }
      var defaultGetTableProps = function defaultGetTableProps2(props) {
        return _extends3({
          role: "table"
        }, props);
      };
      var defaultGetTableBodyProps = function defaultGetTableBodyProps2(props) {
        return _extends3({
          role: "rowgroup"
        }, props);
      };
      var defaultGetHeaderProps = function defaultGetHeaderProps2(props, _ref) {
        var column = _ref.column;
        return _extends3({
          key: "header_" + column.id,
          colSpan: column.totalVisibleHeaderCount,
          role: "columnheader"
        }, props);
      };
      var defaultGetFooterProps = function defaultGetFooterProps2(props, _ref2) {
        var column = _ref2.column;
        return _extends3({
          key: "footer_" + column.id,
          colSpan: column.totalVisibleHeaderCount
        }, props);
      };
      var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps2(props, _ref3) {
        var index = _ref3.index;
        return _extends3({
          key: "headerGroup_" + index,
          role: "row"
        }, props);
      };
      var defaultGetFooterGroupProps = function defaultGetFooterGroupProps2(props, _ref4) {
        var index = _ref4.index;
        return _extends3({
          key: "footerGroup_" + index
        }, props);
      };
      var defaultGetRowProps = function defaultGetRowProps2(props, _ref5) {
        var row = _ref5.row;
        return _extends3({
          key: "row_" + row.id,
          role: "row"
        }, props);
      };
      var defaultGetCellProps = function defaultGetCellProps2(props, _ref6) {
        var cell = _ref6.cell;
        return _extends3({
          key: "cell_" + cell.row.id + "_" + cell.column.id,
          role: "cell"
        }, props);
      };
      function makeDefaultPluginHooks() {
        return {
          useOptions: [],
          stateReducers: [],
          useControlledState: [],
          columns: [],
          columnsDeps: [],
          allColumns: [],
          allColumnsDeps: [],
          accessValue: [],
          materializedColumns: [],
          materializedColumnsDeps: [],
          useInstanceAfterData: [],
          visibleColumns: [],
          visibleColumnsDeps: [],
          headerGroups: [],
          headerGroupsDeps: [],
          useInstanceBeforeDimensions: [],
          useInstance: [],
          prepareRow: [],
          getTableProps: [defaultGetTableProps],
          getTableBodyProps: [defaultGetTableBodyProps],
          getHeaderGroupProps: [defaultGetHeaderGroupProps],
          getFooterGroupProps: [defaultGetFooterGroupProps],
          getHeaderProps: [defaultGetHeaderProps],
          getFooterProps: [defaultGetFooterProps],
          getRowProps: [defaultGetRowProps],
          getCellProps: [defaultGetCellProps],
          useFinalInstance: []
        };
      }
      actions.resetHiddenColumns = "resetHiddenColumns";
      actions.toggleHideColumn = "toggleHideColumn";
      actions.setHiddenColumns = "setHiddenColumns";
      actions.toggleHideAllColumns = "toggleHideAllColumns";
      var useColumnVisibility = function useColumnVisibility2(hooks) {
        hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];
        hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];
        hooks.stateReducers.push(reducer);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
        hooks.headerGroupsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.hiddenColumns]);
        });
        hooks.useInstance.push(useInstance);
      };
      useColumnVisibility.pluginName = "useColumnVisibility";
      var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          onChange: function onChange(e5) {
            column.toggleHidden(!e5.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: column.isVisible,
          title: "Toggle Column Visible"
        }];
      };
      var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e5) {
            instance.toggleHideAllColumns(!e5.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,
          title: "Toggle All Columns Hidden",
          indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length
        }];
      };
      function reducer(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            hiddenColumns: []
          }, state);
        }
        if (action.type === actions.resetHiddenColumns) {
          return _extends3({}, state, {
            hiddenColumns: instance.initialState.hiddenColumns || []
          });
        }
        if (action.type === actions.toggleHideColumn) {
          var should = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.includes(action.columnId);
          var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function(d2) {
            return d2 !== action.columnId;
          });
          return _extends3({}, state, {
            hiddenColumns
          });
        }
        if (action.type === actions.setHiddenColumns) {
          return _extends3({}, state, {
            hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)
          });
        }
        if (action.type === actions.toggleHideAllColumns) {
          var shouldAll = typeof action.value !== "undefined" ? action.value : !state.hiddenColumns.length;
          return _extends3({}, state, {
            hiddenColumns: shouldAll ? instance.allColumns.map(function(d2) {
              return d2.id;
            }) : []
          });
        }
      }
      function useInstanceBeforeDimensions(instance) {
        var headers = instance.headers, hiddenColumns = instance.state.hiddenColumns;
        var isMountedRef = React2.useRef(false);
        if (!isMountedRef.current)
          ;
        var handleColumn = function handleColumn2(column, parentVisible) {
          column.isVisible = parentVisible && !hiddenColumns.includes(column.id);
          var totalVisibleHeaderCount2 = 0;
          if (column.headers && column.headers.length) {
            column.headers.forEach(function(subColumn) {
              return totalVisibleHeaderCount2 += handleColumn2(subColumn, column.isVisible);
            });
          } else {
            totalVisibleHeaderCount2 = column.isVisible ? 1 : 0;
          }
          column.totalVisibleHeaderCount = totalVisibleHeaderCount2;
          return totalVisibleHeaderCount2;
        };
        var totalVisibleHeaderCount = 0;
        headers.forEach(function(subHeader) {
          return totalVisibleHeaderCount += handleColumn(subHeader, true);
        });
      }
      function useInstance(instance) {
        var columns = instance.columns, flatHeaders = instance.flatHeaders, dispatch = instance.dispatch, allColumns2 = instance.allColumns, getHooks = instance.getHooks, hiddenColumns = instance.state.hiddenColumns, _instance$autoResetHi = instance.autoResetHiddenColumns, autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;
        var getInstance = useGetLatest(instance);
        var allColumnsHidden = allColumns2.length === hiddenColumns.length;
        var toggleHideColumn = React2.useCallback(function(columnId, value) {
          return dispatch({
            type: actions.toggleHideColumn,
            columnId,
            value
          });
        }, [dispatch]);
        var setHiddenColumns = React2.useCallback(function(value) {
          return dispatch({
            type: actions.setHiddenColumns,
            value
          });
        }, [dispatch]);
        var toggleHideAllColumns = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleHideAllColumns,
            value
          });
        }, [dispatch]);
        var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {
          instance: getInstance()
        });
        flatHeaders.forEach(function(column) {
          column.toggleHidden = function(value) {
            dispatch({
              type: actions.toggleHideColumn,
              columnId: column.id,
              value
            });
          };
          column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {
            instance: getInstance(),
            column
          });
        });
        var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);
        useMountedLayoutEffect(function() {
          if (getAutoResetHiddenColumns()) {
            dispatch({
              type: actions.resetHiddenColumns
            });
          }
        }, [dispatch, columns]);
        Object.assign(instance, {
          allColumnsHidden,
          toggleHideColumn,
          setHiddenColumns,
          toggleHideAllColumns,
          getToggleHideAllColumnsProps
        });
      }
      var defaultInitialState = {};
      var defaultColumnInstance = {};
      var defaultReducer = function defaultReducer2(state, action, prevState) {
        return state;
      };
      var defaultGetSubRows = function defaultGetSubRows2(row, index) {
        return row.subRows || [];
      };
      var defaultGetRowId = function defaultGetRowId2(row, index, parent) {
        return "" + (parent ? [parent.id, index].join(".") : index);
      };
      var defaultUseControlledState = function defaultUseControlledState2(d2) {
        return d2;
      };
      function applyDefaults(props) {
        var _props$initialState = props.initialState, initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState, _props$defaultColumn = props.defaultColumn, defaultColumn2 = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn, _props$getSubRows = props.getSubRows, getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows, _props$getRowId = props.getRowId, getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId, _props$stateReducer = props.stateReducer, stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer, _props$useControlledS = props.useControlledState, useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS, rest = _objectWithoutPropertiesLoose(props, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]);
        return _extends3({}, rest, {
          initialState,
          defaultColumn: defaultColumn2,
          getSubRows,
          getRowId,
          stateReducer,
          useControlledState
        });
      }
      var useTable = function useTable2(props) {
        for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          plugins[_key - 1] = arguments[_key];
        }
        props = applyDefaults(props);
        plugins = [useColumnVisibility].concat(plugins);
        var instanceRef = React2.useRef({});
        var getInstance = useGetLatest(instanceRef.current);
        Object.assign(getInstance(), _extends3({}, props, {
          plugins,
          hooks: makeDefaultPluginHooks()
        }));
        plugins.filter(Boolean).forEach(function(plugin) {
          plugin(getInstance().hooks);
        });
        var getHooks = useGetLatest(getInstance().hooks);
        getInstance().getHooks = getHooks;
        delete getInstance().hooks;
        Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));
        var _getInstance = getInstance(), data = _getInstance.data, userColumns = _getInstance.columns, initialState = _getInstance.initialState, defaultColumn2 = _getInstance.defaultColumn, getSubRows = _getInstance.getSubRows, getRowId = _getInstance.getRowId, stateReducer = _getInstance.stateReducer, useControlledState = _getInstance.useControlledState;
        var getStateReducer = useGetLatest(stateReducer);
        var reducer2 = React2.useCallback(function(state2, action) {
          if (!action.type) {
            console.info({
              action
            });
            throw new Error("Unknown Action \u{1F446}");
          }
          return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function(s2, handler) {
            return handler(s2, action, state2, getInstance()) || s2;
          }, state2);
        }, [getHooks, getStateReducer, getInstance]);
        var _React$useReducer = React2.useReducer(reducer2, void 0, function() {
          return reducer2(initialState, {
            type: actions.init
          });
        }), reducerState = _React$useReducer[0], dispatch = _React$useReducer[1];
        var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {
          instance: getInstance()
        });
        Object.assign(getInstance(), {
          state,
          dispatch
        });
        var columns = React2.useMemo(function() {
          return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {
            instance: getInstance()
          }));
        }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().columns = columns;
        var allColumns2 = React2.useMemo(function() {
          return reduceHooks(getHooks().allColumns, flattenColumns(columns), {
            instance: getInstance()
          }).map(assignColumnAccessor);
        }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {
          instance: getInstance()
        })));
        getInstance().allColumns = allColumns2;
        var _React$useMemo = React2.useMemo(function() {
          var rows2 = [];
          var flatRows2 = [];
          var rowsById2 = {};
          var allColumnsQueue = [].concat(allColumns2);
          while (allColumnsQueue.length) {
            var column = allColumnsQueue.shift();
            accessRowsForColumn({
              data,
              rows: rows2,
              flatRows: flatRows2,
              rowsById: rowsById2,
              column,
              getRowId,
              getSubRows,
              accessValueHooks: getHooks().accessValue,
              getInstance
            });
          }
          return [rows2, flatRows2, rowsById2];
        }, [allColumns2, data, getRowId, getSubRows, getHooks, getInstance]), rows = _React$useMemo[0], flatRows = _React$useMemo[1], rowsById = _React$useMemo[2];
        Object.assign(getInstance(), {
          rows,
          initialRows: [].concat(rows),
          flatRows,
          rowsById
          // materializedColumns,
        });
        loopHooks(getHooks().useInstanceAfterData, getInstance());
        var visibleColumns2 = React2.useMemo(function() {
          return reduceHooks(getHooks().visibleColumns, allColumns2, {
            instance: getInstance()
          }).map(function(d2) {
            return decorateColumn(d2, defaultColumn2);
          });
        }, [getHooks, allColumns2, getInstance, defaultColumn2].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {
          instance: getInstance()
        })));
        allColumns2 = React2.useMemo(function() {
          var columns2 = [].concat(visibleColumns2);
          allColumns2.forEach(function(column) {
            if (!columns2.find(function(d2) {
              return d2.id === column.id;
            })) {
              columns2.push(column);
            }
          });
          return columns2;
        }, [allColumns2, visibleColumns2]);
        getInstance().allColumns = allColumns2;
        {
          var duplicateColumns = allColumns2.filter(function(column, i4) {
            return allColumns2.findIndex(function(d2) {
              return d2.id === column.id;
            }) !== i4;
          });
          if (duplicateColumns.length) {
            console.info(allColumns2);
            throw new Error('Duplicate columns were found with ids: "' + duplicateColumns.map(function(d2) {
              return d2.id;
            }).join(", ") + '" in the columns array above');
          }
        }
        var headerGroups = React2.useMemo(function() {
          return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns2, defaultColumn2), getInstance());
        }, [getHooks, visibleColumns2, defaultColumn2, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {
          instance: getInstance()
        })));
        getInstance().headerGroups = headerGroups;
        var headers = React2.useMemo(function() {
          return headerGroups.length ? headerGroups[0].headers : [];
        }, [headerGroups]);
        getInstance().headers = headers;
        getInstance().flatHeaders = headerGroups.reduce(function(all, headerGroup) {
          return [].concat(all, headerGroup.headers);
        }, []);
        loopHooks(getHooks().useInstanceBeforeDimensions, getInstance());
        var visibleColumnsDep = visibleColumns2.filter(function(d2) {
          return d2.isVisible;
        }).map(function(d2) {
          return d2.id;
        }).sort().join("_");
        visibleColumns2 = React2.useMemo(
          function() {
            return visibleColumns2.filter(function(d2) {
              return d2.isVisible;
            });
          },
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [visibleColumns2, visibleColumnsDep]
        );
        getInstance().visibleColumns = visibleColumns2;
        var _calculateHeaderWidth = calculateHeaderWidths(headers), totalColumnsMinWidth = _calculateHeaderWidth[0], totalColumnsWidth = _calculateHeaderWidth[1], totalColumnsMaxWidth = _calculateHeaderWidth[2];
        getInstance().totalColumnsMinWidth = totalColumnsMinWidth;
        getInstance().totalColumnsWidth = totalColumnsWidth;
        getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;
        loopHooks(getHooks().useInstance, getInstance());
        [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function(column) {
          column.render = makeRenderer(getInstance(), column);
          column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {
            instance: getInstance(),
            column
          });
          column.getFooterProps = makePropGetter(getHooks().getFooterProps, {
            instance: getInstance(),
            column
          });
        });
        getInstance().headerGroups = React2.useMemo(function() {
          return headerGroups.filter(function(headerGroup, i4) {
            headerGroup.headers = headerGroup.headers.filter(function(column) {
              var recurse = function recurse2(headers2) {
                return headers2.filter(function(column2) {
                  if (column2.headers) {
                    return recurse2(column2.headers);
                  }
                  return column2.isVisible;
                }).length;
              };
              if (column.headers) {
                return recurse(column.headers);
              }
              return column.isVisible;
            });
            if (headerGroup.headers.length) {
              headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i4
              });
              headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {
                instance: getInstance(),
                headerGroup,
                index: i4
              });
              return true;
            }
            return false;
          });
        }, [headerGroups, getInstance, getHooks]);
        getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse();
        getInstance().prepareRow = React2.useCallback(function(row) {
          row.getRowProps = makePropGetter(getHooks().getRowProps, {
            instance: getInstance(),
            row
          });
          row.allCells = allColumns2.map(function(column) {
            var value = row.values[column.id];
            var cell = {
              column,
              row,
              value
            };
            cell.getCellProps = makePropGetter(getHooks().getCellProps, {
              instance: getInstance(),
              cell
            });
            cell.render = makeRenderer(getInstance(), column, {
              row,
              cell,
              value
            });
            return cell;
          });
          row.cells = visibleColumns2.map(function(column) {
            return row.allCells.find(function(cell) {
              return cell.column.id === column.id;
            });
          });
          loopHooks(getHooks().prepareRow, row, {
            instance: getInstance()
          });
        }, [getHooks, getInstance, allColumns2, visibleColumns2]);
        getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {
          instance: getInstance()
        });
        getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {
          instance: getInstance()
        });
        loopHooks(getHooks().useFinalInstance, getInstance());
        return getInstance();
      };
      function calculateHeaderWidths(headers, left2) {
        if (left2 === void 0) {
          left2 = 0;
        }
        var sumTotalMinWidth = 0;
        var sumTotalWidth = 0;
        var sumTotalMaxWidth = 0;
        var sumTotalFlexWidth = 0;
        headers.forEach(function(header) {
          var subHeaders = header.headers;
          header.totalLeft = left2;
          if (subHeaders && subHeaders.length) {
            var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left2), totalMinWidth = _calculateHeaderWidth2[0], totalWidth = _calculateHeaderWidth2[1], totalMaxWidth = _calculateHeaderWidth2[2], totalFlexWidth = _calculateHeaderWidth2[3];
            header.totalMinWidth = totalMinWidth;
            header.totalWidth = totalWidth;
            header.totalMaxWidth = totalMaxWidth;
            header.totalFlexWidth = totalFlexWidth;
          } else {
            header.totalMinWidth = header.minWidth;
            header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);
            header.totalMaxWidth = header.maxWidth;
            header.totalFlexWidth = header.canResize ? header.totalWidth : 0;
          }
          if (header.isVisible) {
            left2 += header.totalWidth;
            sumTotalMinWidth += header.totalMinWidth;
            sumTotalWidth += header.totalWidth;
            sumTotalMaxWidth += header.totalMaxWidth;
            sumTotalFlexWidth += header.totalFlexWidth;
          }
        });
        return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];
      }
      function accessRowsForColumn(_ref) {
        var data = _ref.data, rows = _ref.rows, flatRows = _ref.flatRows, rowsById = _ref.rowsById, column = _ref.column, getRowId = _ref.getRowId, getSubRows = _ref.getSubRows, accessValueHooks = _ref.accessValueHooks, getInstance = _ref.getInstance;
        var accessRow = function accessRow2(originalRow, rowIndex, depth, parent, parentRows) {
          if (depth === void 0) {
            depth = 0;
          }
          var original = originalRow;
          var id = getRowId(originalRow, rowIndex, parent);
          var row = rowsById[id];
          if (!row) {
            row = {
              id,
              original,
              index: rowIndex,
              depth,
              cells: [{}]
              // This is a dummy cell
            };
            row.cells.map = unpreparedAccessWarning;
            row.cells.filter = unpreparedAccessWarning;
            row.cells.forEach = unpreparedAccessWarning;
            row.cells[0].getCellProps = unpreparedAccessWarning;
            row.values = {};
            parentRows.push(row);
            flatRows.push(row);
            rowsById[id] = row;
            row.originalSubRows = getSubRows(originalRow, rowIndex);
            if (row.originalSubRows) {
              var subRows = [];
              row.originalSubRows.forEach(function(d2, i4) {
                return accessRow2(d2, i4, depth + 1, row, subRows);
              });
              row.subRows = subRows;
            }
          } else if (row.subRows) {
            row.originalSubRows.forEach(function(d2, i4) {
              return accessRow2(d2, i4, depth + 1, row);
            });
          }
          if (column.accessor) {
            row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);
          }
          row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {
            row,
            column,
            instance: getInstance()
          }, true);
        };
        data.forEach(function(originalRow, rowIndex) {
          return accessRow(originalRow, rowIndex, 0, void 0, rows);
        });
      }
      actions.resetExpanded = "resetExpanded";
      actions.toggleRowExpanded = "toggleRowExpanded";
      actions.toggleAllRowsExpanded = "toggleAllRowsExpanded";
      var useExpanded = function useExpanded2(hooks) {
        hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];
        hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];
        hooks.stateReducers.push(reducer$1);
        hooks.useInstance.push(useInstance$1);
        hooks.prepareRow.push(prepareRow);
      };
      useExpanded.pluginName = "useExpanded";
      var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          onClick: function onClick(e5) {
            instance.toggleAllRowsExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle All Rows Expanded"
        }];
      };
      var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps2(props, _ref2) {
        var row = _ref2.row;
        return [props, {
          onClick: function onClick() {
            row.toggleRowExpanded();
          },
          style: {
            cursor: "pointer"
          },
          title: "Toggle Row Expanded"
        }];
      };
      function reducer$1(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            expanded: {}
          }, state);
        }
        if (action.type === actions.resetExpanded) {
          return _extends3({}, state, {
            expanded: instance.initialState.expanded || {}
          });
        }
        if (action.type === actions.toggleAllRowsExpanded) {
          var value = action.value;
          var rowsById = instance.rowsById;
          var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;
          var expandAll = typeof value !== "undefined" ? value : !isAllRowsExpanded;
          if (expandAll) {
            var expanded = {};
            Object.keys(rowsById).forEach(function(rowId) {
              expanded[rowId] = true;
            });
            return _extends3({}, state, {
              expanded
            });
          }
          return _extends3({}, state, {
            expanded: {}
          });
        }
        if (action.type === actions.toggleRowExpanded) {
          var id = action.id, setExpanded = action.value;
          var exists = state.expanded[id];
          var shouldExist = typeof setExpanded !== "undefined" ? setExpanded : !exists;
          if (!exists && shouldExist) {
            var _extends22;
            return _extends3({}, state, {
              expanded: _extends3({}, state.expanded, (_extends22 = {}, _extends22[id] = true, _extends22))
            });
          } else if (exists && !shouldExist) {
            var _state$expanded = state.expanded, _2 = _state$expanded[id], rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));
            return _extends3({}, state, {
              expanded: rest
            });
          } else {
            return state;
          }
        }
      }
      function useInstance$1(instance) {
        var data = instance.data, rows = instance.rows, rowsById = instance.rowsById, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$autoResetEx = instance.autoResetExpanded, autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx, getHooks = instance.getHooks, plugins = instance.plugins, expanded = instance.state.expanded, dispatch = instance.dispatch;
        ensurePluginOrder(plugins, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
        var getAutoResetExpanded = useGetLatest(autoResetExpanded);
        var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);
        if (isAllRowsExpanded) {
          if (Object.keys(rowsById).some(function(id) {
            return !expanded[id];
          })) {
            isAllRowsExpanded = false;
          }
        }
        useMountedLayoutEffect(function() {
          if (getAutoResetExpanded()) {
            dispatch({
              type: actions.resetExpanded
            });
          }
        }, [dispatch, data]);
        var toggleRowExpanded = React2.useCallback(function(id, value) {
          dispatch({
            type: actions.toggleRowExpanded,
            id,
            value
          });
        }, [dispatch]);
        var toggleAllRowsExpanded = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsExpanded,
            value
          });
        }, [dispatch]);
        var expandedRows = React2.useMemo(function() {
          if (paginateExpandedRows) {
            return expandRows(rows, {
              manualExpandedKey,
              expanded,
              expandSubRows
            });
          }
          return rows;
        }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);
        var expandedDepth = React2.useMemo(function() {
          return findExpandedDepth(expanded);
        }, [expanded]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          preExpandedRows: rows,
          expandedRows,
          rows: expandedRows,
          expandedDepth,
          isAllRowsExpanded,
          toggleRowExpanded,
          toggleAllRowsExpanded,
          getToggleAllRowsExpandedProps
        });
      }
      function prepareRow(row, _ref3) {
        var getHooks = _ref3.instance.getHooks, instance = _ref3.instance;
        row.toggleRowExpanded = function(set) {
          return instance.toggleRowExpanded(row.id, set);
        };
        row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {
          instance,
          row
        });
      }
      function findExpandedDepth(expanded) {
        var maxDepth = 0;
        Object.keys(expanded).forEach(function(id) {
          var splitId = id.split(".");
          maxDepth = Math.max(maxDepth, splitId.length);
        });
        return maxDepth;
      }
      var text = function text2(rows, ids, filterValue) {
        rows = rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
          });
        });
        return rows;
      };
      text.autoRemove = function(val) {
        return !val;
      };
      var exactText = function exactText2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue !== void 0 ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
          });
        });
      };
      exactText.autoRemove = function(val) {
        return !val;
      };
      var exactTextCase = function exactTextCase2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue !== void 0 ? String(rowValue) === String(filterValue) : true;
          });
        });
      };
      exactTextCase.autoRemove = function(val) {
        return !val;
      };
      var includes = function includes2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue.includes(filterValue);
          });
        });
      };
      includes.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesAll = function includesAll2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue && rowValue.length && filterValue.every(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesAll.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesSome = function includesSome2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue && rowValue.length && filterValue.some(function(val) {
              return rowValue.includes(val);
            });
          });
        });
      };
      includesSome.autoRemove = function(val) {
        return !val || !val.length;
      };
      var includesValue = function includesValue2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return filterValue.includes(rowValue);
          });
        });
      };
      includesValue.autoRemove = function(val) {
        return !val || !val.length;
      };
      var exact = function exact2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue === filterValue;
          });
        });
      };
      exact.autoRemove = function(val) {
        return typeof val === "undefined";
      };
      var equals = function equals2(rows, ids, filterValue) {
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue == filterValue;
          });
        });
      };
      equals.autoRemove = function(val) {
        return val == null;
      };
      var between = function between2(rows, ids, filterValue) {
        var _ref = filterValue || [], min2 = _ref[0], max2 = _ref[1];
        min2 = typeof min2 === "number" ? min2 : -Infinity;
        max2 = typeof max2 === "number" ? max2 : Infinity;
        if (min2 > max2) {
          var temp = min2;
          min2 = max2;
          max2 = temp;
        }
        return rows.filter(function(row) {
          return ids.some(function(id) {
            var rowValue = row.values[id];
            return rowValue >= min2 && rowValue <= max2;
          });
        });
      };
      between.autoRemove = function(val) {
        return !val || typeof val[0] !== "number" && typeof val[1] !== "number";
      };
      var filterTypes = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        text,
        exactText,
        exactTextCase,
        includes,
        includesAll,
        includesSome,
        includesValue,
        exact,
        equals,
        between
      });
      actions.resetFilters = "resetFilters";
      actions.setFilter = "setFilter";
      actions.setAllFilters = "setAllFilters";
      var useFilters = function useFilters2(hooks) {
        hooks.stateReducers.push(reducer$2);
        hooks.useInstance.push(useInstance$2);
      };
      useFilters.pluginName = "useFilters";
      function reducer$2(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            filters: []
          }, state);
        }
        if (action.type === actions.resetFilters) {
          return _extends3({}, state, {
            filters: instance.initialState.filters || []
          });
        }
        if (action.type === actions.setFilter) {
          var columnId = action.columnId, filterValue = action.filterValue;
          var allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes;
          var column = allColumns2.find(function(d2) {
            return d2.id === columnId;
          });
          if (!column) {
            throw new Error("React-Table: Could not find a column with id: " + columnId);
          }
          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
          var previousfilter = state.filters.find(function(d2) {
            return d2.id === columnId;
          });
          var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {
            return _extends3({}, state, {
              filters: state.filters.filter(function(d2) {
                return d2.id !== columnId;
              })
            });
          }
          if (previousfilter) {
            return _extends3({}, state, {
              filters: state.filters.map(function(d2) {
                if (d2.id === columnId) {
                  return {
                    id: columnId,
                    value: newFilter
                  };
                }
                return d2;
              })
            });
          }
          return _extends3({}, state, {
            filters: [].concat(state.filters, [{
              id: columnId,
              value: newFilter
            }])
          });
        }
        if (action.type === actions.setAllFilters) {
          var filters = action.filters;
          var _allColumns = instance.allColumns, _userFilterTypes = instance.filterTypes;
          return _extends3({}, state, {
            // Filter out undefined values
            filters: functionalUpdate(filters, state.filters).filter(function(filter) {
              var column2 = _allColumns.find(function(d2) {
                return d2.id === filter.id;
              });
              var filterMethod2 = getFilterMethod(column2.filter, _userFilterTypes || {}, filterTypes);
              if (shouldAutoRemoveFilter(filterMethod2.autoRemove, filter.value, column2)) {
                return false;
              }
              return true;
            })
          });
        }
      }
      function useInstance$2(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, manualFilters = instance.manualFilters, _instance$defaultCanF = instance.defaultCanFilter, defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF, disableFilters = instance.disableFilters, filters = instance.state.filters, dispatch = instance.dispatch, _instance$autoResetFi = instance.autoResetFilters, autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;
        var setFilter = React2.useCallback(function(columnId, filterValue) {
          dispatch({
            type: actions.setFilter,
            columnId,
            filterValue
          });
        }, [dispatch]);
        var setAllFilters = React2.useCallback(function(filters2) {
          dispatch({
            type: actions.setAllFilters,
            filters: filters2
          });
        }, [dispatch]);
        allColumns2.forEach(function(column) {
          var id = column.id, accessor = column.accessor, columnDefaultCanFilter = column.defaultCanFilter, columnDisableFilters = column.disableFilters;
          column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : void 0, disableFilters === true ? false : void 0, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false);
          column.setFilter = function(val) {
            return setFilter(column.id, val);
          };
          var found = filters.find(function(d2) {
            return d2.id === id;
          });
          column.filterValue = found && found.value;
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualFilters || !filters.length) {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows2 = [];
          var filteredRowsById2 = {};
          var filterRows = function filterRows2(rows2, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            var filteredRows2 = rows2;
            filteredRows2 = filters.reduce(function(filteredSoFar, _ref) {
              var columnId = _ref.id, filterValue = _ref.value;
              var column = allColumns2.find(function(d2) {
                return d2.id === columnId;
              });
              if (!column) {
                return filteredSoFar;
              }
              if (depth === 0) {
                column.preFilteredRows = filteredSoFar;
              }
              var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
              if (!filterMethod) {
                console.warn("Could not find a valid 'column.filter' for column with the ID: " + column.id + ".");
                return filteredSoFar;
              }
              column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);
              return column.filteredRows;
            }, rows2);
            filteredRows2.forEach(function(row) {
              filteredFlatRows2.push(row);
              filteredRowsById2[row.id] = row;
              if (!row.subRows) {
                return;
              }
              row.subRows = row.subRows && row.subRows.length > 0 ? filterRows2(row.subRows, depth + 1) : row.subRows;
            });
            return filteredRows2;
          };
          return [filterRows(rows), filteredFlatRows2, filteredRowsById2];
        }, [manualFilters, filters, rows, flatRows, rowsById, allColumns2, userFilterTypes]), filteredRows = _React$useMemo[0], filteredFlatRows = _React$useMemo[1], filteredRowsById = _React$useMemo[2];
        React2.useMemo(function() {
          var nonFilteredColumns = allColumns2.filter(function(column) {
            return !filters.find(function(d2) {
              return d2.id === column.id;
            });
          });
          nonFilteredColumns.forEach(function(column) {
            column.preFilteredRows = filteredRows;
            column.filteredRows = filteredRows;
          });
        }, [filteredRows, filters, allColumns2]);
        var getAutoResetFilters = useGetLatest(autoResetFilters);
        useMountedLayoutEffect(function() {
          if (getAutoResetFilters()) {
            dispatch({
              type: actions.resetFilters
            });
          }
        }, [dispatch, manualFilters ? null : data]);
        Object.assign(instance, {
          preFilteredRows: rows,
          preFilteredFlatRows: flatRows,
          preFilteredRowsById: rowsById,
          filteredRows,
          filteredFlatRows,
          filteredRowsById,
          rows: filteredRows,
          flatRows: filteredFlatRows,
          rowsById: filteredRowsById,
          setFilter,
          setAllFilters
        });
      }
      actions.resetGlobalFilter = "resetGlobalFilter";
      actions.setGlobalFilter = "setGlobalFilter";
      var useGlobalFilter = function useGlobalFilter2(hooks) {
        hooks.stateReducers.push(reducer$3);
        hooks.useInstance.push(useInstance$3);
      };
      useGlobalFilter.pluginName = "useGlobalFilter";
      function reducer$3(state, action, previousState, instance) {
        if (action.type === actions.resetGlobalFilter) {
          return _extends3({}, state, {
            globalFilter: instance.initialState.globalFilter || void 0
          });
        }
        if (action.type === actions.setGlobalFilter) {
          var filterValue = action.filterValue;
          var userFilterTypes = instance.userFilterTypes;
          var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);
          var newFilter = functionalUpdate(filterValue, state.globalFilter);
          if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {
            var globalFilter = state.globalFilter, stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, ["globalFilter"]);
            return stateWithoutGlobalFilter;
          }
          return _extends3({}, state, {
            globalFilter: newFilter
          });
        }
      }
      function useInstance$3(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, userFilterTypes = instance.filterTypes, globalFilter = instance.globalFilter, manualGlobalFilter = instance.manualGlobalFilter, globalFilterValue = instance.state.globalFilter, dispatch = instance.dispatch, _instance$autoResetGl = instance.autoResetGlobalFilter, autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl, disableGlobalFilter = instance.disableGlobalFilter;
        var setGlobalFilter = React2.useCallback(function(filterValue) {
          dispatch({
            type: actions.setGlobalFilter,
            filterValue
          });
        }, [dispatch]);
        var _React$useMemo = React2.useMemo(function() {
          if (manualGlobalFilter || typeof globalFilterValue === "undefined") {
            return [rows, flatRows, rowsById];
          }
          var filteredFlatRows = [];
          var filteredRowsById = {};
          var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);
          if (!filterMethod) {
            console.warn("Could not find a valid 'globalFilter' option.");
            return rows;
          }
          allColumns2.forEach(function(column) {
            var columnDisableGlobalFilter = column.disableGlobalFilter;
            column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : void 0, disableGlobalFilter === true ? false : void 0, true);
          });
          var filterableColumns = allColumns2.filter(function(c4) {
            return c4.canFilter === true;
          });
          var filterRows = function filterRows2(filteredRows) {
            filteredRows = filterMethod(filteredRows, filterableColumns.map(function(d2) {
              return d2.id;
            }), globalFilterValue);
            filteredRows.forEach(function(row) {
              filteredFlatRows.push(row);
              filteredRowsById[row.id] = row;
              row.subRows = row.subRows && row.subRows.length ? filterRows2(row.subRows) : row.subRows;
            });
            return filteredRows;
          };
          return [filterRows(rows), filteredFlatRows, filteredRowsById];
        }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns2, rows, flatRows, rowsById, disableGlobalFilter]), globalFilteredRows = _React$useMemo[0], globalFilteredFlatRows = _React$useMemo[1], globalFilteredRowsById = _React$useMemo[2];
        var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);
        useMountedLayoutEffect(function() {
          if (getAutoResetGlobalFilter()) {
            dispatch({
              type: actions.resetGlobalFilter
            });
          }
        }, [dispatch, manualGlobalFilter ? null : data]);
        Object.assign(instance, {
          preGlobalFilteredRows: rows,
          preGlobalFilteredFlatRows: flatRows,
          preGlobalFilteredRowsById: rowsById,
          globalFilteredRows,
          globalFilteredFlatRows,
          globalFilteredRowsById,
          rows: globalFilteredRows,
          flatRows: globalFilteredFlatRows,
          rowsById: globalFilteredRowsById,
          setGlobalFilter,
          disableGlobalFilter
        });
      }
      function sum(values, aggregatedValues) {
        return aggregatedValues.reduce(function(sum2, next) {
          return sum2 + (typeof next === "number" ? next : 0);
        }, 0);
      }
      function min(values) {
        var min2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            min2 = Math.min(min2, value);
          }
        });
        return min2;
      }
      function max(values) {
        var max2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            max2 = Math.max(max2, value);
          }
        });
        return max2;
      }
      function minMax(values) {
        var min2 = values[0] || 0;
        var max2 = values[0] || 0;
        values.forEach(function(value) {
          if (typeof value === "number") {
            min2 = Math.min(min2, value);
            max2 = Math.max(max2, value);
          }
        });
        return min2 + ".." + max2;
      }
      function average(values) {
        return sum(null, values) / values.length;
      }
      function median(values) {
        if (!values.length) {
          return null;
        }
        var mid = Math.floor(values.length / 2);
        var nums = [].concat(values).sort(function(a4, b3) {
          return a4 - b3;
        });
        return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
      }
      function unique(values) {
        return Array.from(new Set(values).values());
      }
      function uniqueCount(values) {
        return new Set(values).size;
      }
      function count(values) {
        return values.length;
      }
      var aggregations = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        sum,
        min,
        max,
        minMax,
        average,
        median,
        unique,
        uniqueCount,
        count
      });
      var emptyArray = [];
      var emptyObject = {};
      actions.resetGroupBy = "resetGroupBy";
      actions.setGroupBy = "setGroupBy";
      actions.toggleGroupBy = "toggleGroupBy";
      var useGroupBy = function useGroupBy2(hooks) {
        hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];
        hooks.stateReducers.push(reducer$4);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.groupBy]);
        });
        hooks.visibleColumns.push(visibleColumns);
        hooks.useInstance.push(useInstance$4);
        hooks.prepareRow.push(prepareRow$1);
      };
      useGroupBy.pluginName = "useGroupBy";
      var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps2(props, _ref2) {
        var header = _ref2.header;
        return [props, {
          onClick: header.canGroupBy ? function(e5) {
            e5.persist();
            header.toggleGroupBy();
          } : void 0,
          style: {
            cursor: header.canGroupBy ? "pointer" : void 0
          },
          title: "Toggle GroupBy"
        }];
      };
      function reducer$4(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            groupBy: []
          }, state);
        }
        if (action.type === actions.resetGroupBy) {
          return _extends3({}, state, {
            groupBy: instance.initialState.groupBy || []
          });
        }
        if (action.type === actions.setGroupBy) {
          var value = action.value;
          return _extends3({}, state, {
            groupBy: value
          });
        }
        if (action.type === actions.toggleGroupBy) {
          var columnId = action.columnId, setGroupBy = action.value;
          var resolvedGroupBy = typeof setGroupBy !== "undefined" ? setGroupBy : !state.groupBy.includes(columnId);
          if (resolvedGroupBy) {
            return _extends3({}, state, {
              groupBy: [].concat(state.groupBy, [columnId])
            });
          }
          return _extends3({}, state, {
            groupBy: state.groupBy.filter(function(d2) {
              return d2 !== columnId;
            })
          });
        }
      }
      function visibleColumns(columns, _ref3) {
        var groupBy = _ref3.instance.state.groupBy;
        var groupByColumns = groupBy.map(function(g5) {
          return columns.find(function(col) {
            return col.id === g5;
          });
        }).filter(Boolean);
        var nonGroupByColumns = columns.filter(function(col) {
          return !groupBy.includes(col.id);
        });
        columns = [].concat(groupByColumns, nonGroupByColumns);
        columns.forEach(function(column) {
          column.isGrouped = groupBy.includes(column.id);
          column.groupedIndex = groupBy.indexOf(column.id);
        });
        return columns;
      }
      var defaultUserAggregations = {};
      function useInstance$4(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, _instance$groupByFn = instance.groupByFn, groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn, manualGroupBy = instance.manualGroupBy, _instance$aggregation = instance.aggregations, userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation, plugins = instance.plugins, groupBy = instance.state.groupBy, dispatch = instance.dispatch, _instance$autoResetGr = instance.autoResetGroupBy, autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr, disableGroupBy = instance.disableGroupBy, defaultCanGroupBy = instance.defaultCanGroupBy, getHooks = instance.getHooks;
        ensurePluginOrder(plugins, ["useColumnOrder", "useFilters"], "useGroupBy");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnGroupBy = column.defaultGroupBy, columnDisableGroupBy = column.disableGroupBy;
          column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : void 0, disableGroupBy === true ? false : void 0, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);
          if (column.canGroupBy) {
            column.toggleGroupBy = function() {
              return instance.toggleGroupBy(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var toggleGroupBy = React2.useCallback(function(columnId, value) {
          dispatch({
            type: actions.toggleGroupBy,
            columnId,
            value
          });
        }, [dispatch]);
        var setGroupBy = React2.useCallback(function(value) {
          dispatch({
            type: actions.setGroupBy,
            value
          });
        }, [dispatch]);
        flatHeaders.forEach(function(header) {
          header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualGroupBy || !groupBy.length) {
            return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];
          }
          var existingGroupBy = groupBy.filter(function(g5) {
            return allColumns2.find(function(col) {
              return col.id === g5;
            });
          });
          var aggregateRowsToValues = function aggregateRowsToValues2(leafRows, groupedRows3, depth) {
            var values = {};
            allColumns2.forEach(function(column) {
              if (existingGroupBy.includes(column.id)) {
                values[column.id] = groupedRows3[0] ? groupedRows3[0].values[column.id] : null;
                return;
              }
              var aggregateFn = typeof column.aggregate === "function" ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];
              if (aggregateFn) {
                var groupedValues = groupedRows3.map(function(row) {
                  return row.values[column.id];
                });
                var leafValues = leafRows.map(function(row) {
                  var columnValue = row.values[column.id];
                  if (!depth && column.aggregateValue) {
                    var aggregateValueFn = typeof column.aggregateValue === "function" ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];
                    if (!aggregateValueFn) {
                      console.info({
                        column
                      });
                      throw new Error("React Table: Invalid column.aggregateValue option for column listed above");
                    }
                    columnValue = aggregateValueFn(columnValue, row, column);
                  }
                  return columnValue;
                });
                values[column.id] = aggregateFn(leafValues, groupedValues);
              } else if (column.aggregate) {
                console.info({
                  column
                });
                throw new Error("React Table: Invalid column.aggregate option for column listed above");
              } else {
                values[column.id] = null;
              }
            });
            return values;
          };
          var groupedFlatRows2 = [];
          var groupedRowsById2 = {};
          var onlyGroupedFlatRows2 = [];
          var onlyGroupedRowsById2 = {};
          var nonGroupedFlatRows2 = [];
          var nonGroupedRowsById2 = {};
          var groupUpRecursively = function groupUpRecursively2(rows2, depth, parentId) {
            if (depth === void 0) {
              depth = 0;
            }
            if (depth === existingGroupBy.length) {
              return rows2.map(function(row) {
                return _extends3({}, row, {
                  depth
                });
              });
            }
            var columnId = existingGroupBy[depth];
            var rowGroupsMap = groupByFn(rows2, columnId);
            var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function(_ref4, index) {
              var groupByVal = _ref4[0], groupedRows3 = _ref4[1];
              var id = columnId + ":" + groupByVal;
              id = parentId ? parentId + ">" + id : id;
              var subRows = groupUpRecursively2(groupedRows3, depth + 1, id);
              var leafRows = depth ? flattenBy(groupedRows3, "leafRows") : groupedRows3;
              var values = aggregateRowsToValues(leafRows, groupedRows3, depth);
              var row = {
                id,
                isGrouped: true,
                groupByID: columnId,
                groupByVal,
                values,
                subRows,
                leafRows,
                depth,
                index
              };
              subRows.forEach(function(subRow) {
                groupedFlatRows2.push(subRow);
                groupedRowsById2[subRow.id] = subRow;
                if (subRow.isGrouped) {
                  onlyGroupedFlatRows2.push(subRow);
                  onlyGroupedRowsById2[subRow.id] = subRow;
                } else {
                  nonGroupedFlatRows2.push(subRow);
                  nonGroupedRowsById2[subRow.id] = subRow;
                }
              });
              return row;
            });
            return aggregatedGroupedRows;
          };
          var groupedRows2 = groupUpRecursively(rows);
          groupedRows2.forEach(function(subRow) {
            groupedFlatRows2.push(subRow);
            groupedRowsById2[subRow.id] = subRow;
            if (subRow.isGrouped) {
              onlyGroupedFlatRows2.push(subRow);
              onlyGroupedRowsById2[subRow.id] = subRow;
            } else {
              nonGroupedFlatRows2.push(subRow);
              nonGroupedRowsById2[subRow.id] = subRow;
            }
          });
          return [groupedRows2, groupedFlatRows2, groupedRowsById2, onlyGroupedFlatRows2, onlyGroupedRowsById2, nonGroupedFlatRows2, nonGroupedRowsById2];
        }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns2, userAggregations, groupByFn]), groupedRows = _React$useMemo[0], groupedFlatRows = _React$useMemo[1], groupedRowsById = _React$useMemo[2], onlyGroupedFlatRows = _React$useMemo[3], onlyGroupedRowsById = _React$useMemo[4], nonGroupedFlatRows = _React$useMemo[5], nonGroupedRowsById = _React$useMemo[6];
        var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetGroupBy()) {
            dispatch({
              type: actions.resetGroupBy
            });
          }
        }, [dispatch, manualGroupBy ? null : data]);
        Object.assign(instance, {
          preGroupedRows: rows,
          preGroupedFlatRow: flatRows,
          preGroupedRowsById: rowsById,
          groupedRows,
          groupedFlatRows,
          groupedRowsById,
          onlyGroupedFlatRows,
          onlyGroupedRowsById,
          nonGroupedFlatRows,
          nonGroupedRowsById,
          rows: groupedRows,
          flatRows: groupedFlatRows,
          rowsById: groupedRowsById,
          toggleGroupBy,
          setGroupBy
        });
      }
      function prepareRow$1(row) {
        row.allCells.forEach(function(cell) {
          var _row$subRows;
          cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID;
          cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped;
          cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);
        });
      }
      function defaultGroupByFn(rows, columnId) {
        return rows.reduce(function(prev, row, i4) {
          var resKey = "" + row.values[columnId];
          prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];
          prev[resKey].push(row);
          return prev;
        }, {});
      }
      var reSplitAlphaNumeric = /([0-9]+)/gm;
      var alphanumeric = function alphanumeric2(rowA, rowB, columnId) {
        var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId), a4 = _getRowValuesByColumn[0], b3 = _getRowValuesByColumn[1];
        a4 = toString(a4);
        b3 = toString(b3);
        a4 = a4.split(reSplitAlphaNumeric).filter(Boolean);
        b3 = b3.split(reSplitAlphaNumeric).filter(Boolean);
        while (a4.length && b3.length) {
          var aa = a4.shift();
          var bb = b3.shift();
          var an = parseInt(aa, 10);
          var bn = parseInt(bb, 10);
          var combo = [an, bn].sort();
          if (isNaN(combo[0])) {
            if (aa > bb) {
              return 1;
            }
            if (bb > aa) {
              return -1;
            }
            continue;
          }
          if (isNaN(combo[1])) {
            return isNaN(an) ? -1 : 1;
          }
          if (an > bn) {
            return 1;
          }
          if (bn > an) {
            return -1;
          }
        }
        return a4.length - b3.length;
      };
      function datetime(rowA, rowB, columnId) {
        var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId), a4 = _getRowValuesByColumn2[0], b3 = _getRowValuesByColumn2[1];
        a4 = a4.getTime();
        b3 = b3.getTime();
        return compareBasic(a4, b3);
      }
      function basic(rowA, rowB, columnId) {
        var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId), a4 = _getRowValuesByColumn3[0], b3 = _getRowValuesByColumn3[1];
        return compareBasic(a4, b3);
      }
      function string(rowA, rowB, columnId) {
        var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId), a4 = _getRowValuesByColumn4[0], b3 = _getRowValuesByColumn4[1];
        a4 = a4.split("").filter(Boolean);
        b3 = b3.split("").filter(Boolean);
        while (a4.length && b3.length) {
          var aa = a4.shift();
          var bb = b3.shift();
          var alower = aa.toLowerCase();
          var blower = bb.toLowerCase();
          if (alower > blower) {
            return 1;
          }
          if (blower > alower) {
            return -1;
          }
          if (aa > bb) {
            return 1;
          }
          if (bb > aa) {
            return -1;
          }
          continue;
        }
        return a4.length - b3.length;
      }
      function number(rowA, rowB, columnId) {
        var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId), a4 = _getRowValuesByColumn5[0], b3 = _getRowValuesByColumn5[1];
        var replaceNonNumeric = /[^0-9.]/gi;
        a4 = Number(String(a4).replace(replaceNonNumeric, ""));
        b3 = Number(String(b3).replace(replaceNonNumeric, ""));
        return compareBasic(a4, b3);
      }
      function compareBasic(a4, b3) {
        return a4 === b3 ? 0 : a4 > b3 ? 1 : -1;
      }
      function getRowValuesByColumnID(row1, row2, columnId) {
        return [row1.values[columnId], row2.values[columnId]];
      }
      function toString(a4) {
        if (typeof a4 === "number") {
          if (isNaN(a4) || a4 === Infinity || a4 === -Infinity) {
            return "";
          }
          return String(a4);
        }
        if (typeof a4 === "string") {
          return a4;
        }
        return "";
      }
      var sortTypes = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        alphanumeric,
        datetime,
        basic,
        string,
        number
      });
      actions.resetSortBy = "resetSortBy";
      actions.setSortBy = "setSortBy";
      actions.toggleSortBy = "toggleSortBy";
      actions.clearSortBy = "clearSortBy";
      defaultColumn.sortType = "alphanumeric";
      defaultColumn.sortDescFirst = false;
      var useSortBy = function useSortBy2(hooks) {
        hooks.getSortByToggleProps = [defaultGetSortByToggleProps];
        hooks.stateReducers.push(reducer$5);
        hooks.useInstance.push(useInstance$5);
      };
      useSortBy.pluginName = "useSortBy";
      var defaultGetSortByToggleProps = function defaultGetSortByToggleProps2(props, _ref) {
        var instance = _ref.instance, column = _ref.column;
        var _instance$isMultiSort = instance.isMultiSortEvent, isMultiSortEvent = _instance$isMultiSort === void 0 ? function(e5) {
          return e5.shiftKey;
        } : _instance$isMultiSort;
        return [props, {
          onClick: column.canSort ? function(e5) {
            e5.persist();
            column.toggleSortBy(void 0, !instance.disableMultiSort && isMultiSortEvent(e5));
          } : void 0,
          style: {
            cursor: column.canSort ? "pointer" : void 0
          },
          title: column.canSort ? "Toggle SortBy" : void 0
        }];
      };
      function reducer$5(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            sortBy: []
          }, state);
        }
        if (action.type === actions.resetSortBy) {
          return _extends3({}, state, {
            sortBy: instance.initialState.sortBy || []
          });
        }
        if (action.type === actions.clearSortBy) {
          var sortBy = state.sortBy;
          var newSortBy = sortBy.filter(function(d2) {
            return d2.id !== action.columnId;
          });
          return _extends3({}, state, {
            sortBy: newSortBy
          });
        }
        if (action.type === actions.setSortBy) {
          var _sortBy = action.sortBy;
          return _extends3({}, state, {
            sortBy: _sortBy
          });
        }
        if (action.type === actions.toggleSortBy) {
          var columnId = action.columnId, desc = action.desc, multi = action.multi;
          var allColumns2 = instance.allColumns, disableMultiSort = instance.disableMultiSort, disableSortRemove = instance.disableSortRemove, disableMultiRemove = instance.disableMultiRemove, _instance$maxMultiSor = instance.maxMultiSortColCount, maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;
          var _sortBy2 = state.sortBy;
          var column = allColumns2.find(function(d2) {
            return d2.id === columnId;
          });
          var sortDescFirst = column.sortDescFirst;
          var existingSortBy = _sortBy2.find(function(d2) {
            return d2.id === columnId;
          });
          var existingIndex = _sortBy2.findIndex(function(d2) {
            return d2.id === columnId;
          });
          var hasDescDefined = typeof desc !== "undefined" && desc !== null;
          var _newSortBy = [];
          var sortAction;
          if (!disableMultiSort && multi) {
            if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "add";
            }
          } else {
            if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {
              sortAction = "replace";
            } else if (existingSortBy) {
              sortAction = "toggle";
            } else {
              sortAction = "replace";
            }
          }
          if (sortAction === "toggle" && // Must be toggling
          !disableSortRemove && // If disableSortRemove, disable in general
          !hasDescDefined && // Must not be setting desc
          (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove
          (existingSortBy && // Finally, detect if it should indeed be removed
          existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {
            sortAction = "remove";
          }
          if (sortAction === "replace") {
            _newSortBy = [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }];
          } else if (sortAction === "add") {
            _newSortBy = [].concat(_sortBy2, [{
              id: columnId,
              desc: hasDescDefined ? desc : sortDescFirst
            }]);
            _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);
          } else if (sortAction === "toggle") {
            _newSortBy = _sortBy2.map(function(d2) {
              if (d2.id === columnId) {
                return _extends3({}, d2, {
                  desc: hasDescDefined ? desc : !existingSortBy.desc
                });
              }
              return d2;
            });
          } else if (sortAction === "remove") {
            _newSortBy = _sortBy2.filter(function(d2) {
              return d2.id !== columnId;
            });
          }
          return _extends3({}, state, {
            sortBy: _newSortBy
          });
        }
      }
      function useInstance$5(instance) {
        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, allColumns2 = instance.allColumns, _instance$orderByFn = instance.orderByFn, orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn, userSortTypes = instance.sortTypes, manualSortBy = instance.manualSortBy, defaultCanSort = instance.defaultCanSort, disableSortBy = instance.disableSortBy, flatHeaders = instance.flatHeaders, sortBy = instance.state.sortBy, dispatch = instance.dispatch, plugins = instance.plugins, getHooks = instance.getHooks, _instance$autoResetSo = instance.autoResetSortBy, autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;
        ensurePluginOrder(plugins, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
        var setSortBy = React2.useCallback(function(sortBy2) {
          dispatch({
            type: actions.setSortBy,
            sortBy: sortBy2
          });
        }, [dispatch]);
        var toggleSortBy = React2.useCallback(function(columnId, desc, multi) {
          dispatch({
            type: actions.toggleSortBy,
            columnId,
            desc,
            multi
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(column) {
          var accessor = column.accessor, defaultColumnCanSort = column.canSort, columnDisableSortBy = column.disableSortBy, id = column.id;
          var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : void 0, disableSortBy === true ? false : void 0, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);
          column.canSort = canSort;
          if (column.canSort) {
            column.toggleSortBy = function(desc, multi) {
              return toggleSortBy(column.id, desc, multi);
            };
            column.clearSortBy = function() {
              dispatch({
                type: actions.clearSortBy,
                columnId: column.id
              });
            };
          }
          column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {
            instance: getInstance(),
            column
          });
          var columnSort = sortBy.find(function(d2) {
            return d2.id === id;
          });
          column.isSorted = !!columnSort;
          column.sortedIndex = sortBy.findIndex(function(d2) {
            return d2.id === id;
          });
          column.isSortedDesc = column.isSorted ? columnSort.desc : void 0;
        });
        var _React$useMemo = React2.useMemo(function() {
          if (manualSortBy || !sortBy.length) {
            return [rows, flatRows];
          }
          var sortedFlatRows2 = [];
          var availableSortBy = sortBy.filter(function(sort3) {
            return allColumns2.find(function(col) {
              return col.id === sort3.id;
            });
          });
          var sortData = function sortData2(rows2) {
            var sortedData = orderByFn(
              rows2,
              availableSortBy.map(function(sort3) {
                var column = allColumns2.find(function(d2) {
                  return d2.id === sort3.id;
                });
                if (!column) {
                  throw new Error("React-Table: Could not find a column with id: " + sort3.id + " while sorting");
                }
                var sortType = column.sortType;
                var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];
                if (!sortMethod) {
                  throw new Error("React-Table: Could not find a valid sortType of '" + sortType + "' for column '" + sort3.id + "'.");
                }
                return function(a4, b3) {
                  return sortMethod(a4, b3, sort3.id, sort3.desc);
                };
              }),
              // Map the directions
              availableSortBy.map(function(sort3) {
                var column = allColumns2.find(function(d2) {
                  return d2.id === sort3.id;
                });
                if (column && column.sortInverted) {
                  return sort3.desc;
                }
                return !sort3.desc;
              })
            );
            sortedData.forEach(function(row) {
              sortedFlatRows2.push(row);
              if (!row.subRows || row.subRows.length === 0) {
                return;
              }
              row.subRows = sortData2(row.subRows);
            });
            return sortedData;
          };
          return [sortData(rows), sortedFlatRows2];
        }, [manualSortBy, sortBy, rows, flatRows, allColumns2, orderByFn, userSortTypes]), sortedRows = _React$useMemo[0], sortedFlatRows = _React$useMemo[1];
        var getAutoResetSortBy = useGetLatest(autoResetSortBy);
        useMountedLayoutEffect(function() {
          if (getAutoResetSortBy()) {
            dispatch({
              type: actions.resetSortBy
            });
          }
        }, [manualSortBy ? null : data]);
        Object.assign(instance, {
          preSortedRows: rows,
          preSortedFlatRows: flatRows,
          sortedRows,
          sortedFlatRows,
          rows: sortedRows,
          flatRows: sortedFlatRows,
          setSortBy,
          toggleSortBy
        });
      }
      function defaultOrderByFn(arr, funcs, dirs) {
        return [].concat(arr).sort(function(rowA, rowB) {
          for (var i4 = 0; i4 < funcs.length; i4 += 1) {
            var sortFn = funcs[i4];
            var desc = dirs[i4] === false || dirs[i4] === "desc";
            var sortInt = sortFn(rowA, rowB);
            if (sortInt !== 0) {
              return desc ? -sortInt : sortInt;
            }
          }
          return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;
        });
      }
      var pluginName = "usePagination";
      actions.resetPage = "resetPage";
      actions.gotoPage = "gotoPage";
      actions.setPageSize = "setPageSize";
      var usePagination = function usePagination2(hooks) {
        hooks.stateReducers.push(reducer$6);
        hooks.useInstance.push(useInstance$6);
      };
      usePagination.pluginName = pluginName;
      function reducer$6(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            pageSize: 10,
            pageIndex: 0
          }, state);
        }
        if (action.type === actions.resetPage) {
          return _extends3({}, state, {
            pageIndex: instance.initialState.pageIndex || 0
          });
        }
        if (action.type === actions.gotoPage) {
          var pageCount = instance.pageCount, page = instance.page;
          var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);
          var canNavigate = false;
          if (newPageIndex > state.pageIndex) {
            canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;
          } else if (newPageIndex < state.pageIndex) {
            canNavigate = newPageIndex > -1;
          }
          if (!canNavigate) {
            return state;
          }
          return _extends3({}, state, {
            pageIndex: newPageIndex
          });
        }
        if (action.type === actions.setPageSize) {
          var pageSize = action.pageSize;
          var topRowIndex = state.pageSize * state.pageIndex;
          var pageIndex = Math.floor(topRowIndex / pageSize);
          return _extends3({}, state, {
            pageIndex,
            pageSize
          });
        }
      }
      function useInstance$6(instance) {
        var rows = instance.rows, _instance$autoResetPa = instance.autoResetPage, autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? "expanded" : _instance$manualExpan, plugins = instance.plugins, userPageCount = instance.pageCount, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$state = instance.state, pageSize = _instance$state.pageSize, pageIndex = _instance$state.pageIndex, expanded = _instance$state.expanded, globalFilter = _instance$state.globalFilter, filters = _instance$state.filters, groupBy = _instance$state.groupBy, sortBy = _instance$state.sortBy, dispatch = instance.dispatch, data = instance.data, manualPagination = instance.manualPagination;
        ensurePluginOrder(plugins, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
        var getAutoResetPage = useGetLatest(autoResetPage);
        useMountedLayoutEffect(function() {
          if (getAutoResetPage()) {
            dispatch({
              type: actions.resetPage
            });
          }
        }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);
        var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);
        var pageOptions = React2.useMemo(function() {
          return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function(d2, i4) {
            return i4;
          }) : [];
        }, [pageCount]);
        var page = React2.useMemo(function() {
          var page2;
          if (manualPagination) {
            page2 = rows;
          } else {
            var pageStart = pageSize * pageIndex;
            var pageEnd = pageStart + pageSize;
            page2 = rows.slice(pageStart, pageEnd);
          }
          if (paginateExpandedRows) {
            return page2;
          }
          return expandRows(page2, {
            manualExpandedKey,
            expanded,
            expandSubRows
          });
        }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);
        var canPreviousPage = pageIndex > 0;
        var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;
        var gotoPage = React2.useCallback(function(pageIndex2) {
          dispatch({
            type: actions.gotoPage,
            pageIndex: pageIndex2
          });
        }, [dispatch]);
        var previousPage = React2.useCallback(function() {
          return gotoPage(function(old) {
            return old - 1;
          });
        }, [gotoPage]);
        var nextPage = React2.useCallback(function() {
          return gotoPage(function(old) {
            return old + 1;
          });
        }, [gotoPage]);
        var setPageSize = React2.useCallback(function(pageSize2) {
          dispatch({
            type: actions.setPageSize,
            pageSize: pageSize2
          });
        }, [dispatch]);
        Object.assign(instance, {
          pageOptions,
          pageCount,
          page,
          canPreviousPage,
          canNextPage,
          gotoPage,
          previousPage,
          nextPage,
          setPageSize
        });
      }
      actions.resetPivot = "resetPivot";
      actions.togglePivot = "togglePivot";
      var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns2(hooks) {
        hooks.getPivotToggleProps = [defaultGetPivotToggleProps];
        hooks.stateReducers.push(reducer$7);
        hooks.useInstanceAfterData.push(useInstanceAfterData);
        hooks.allColumns.push(allColumns);
        hooks.accessValue.push(accessValue);
        hooks.materializedColumns.push(materializedColumns);
        hooks.materializedColumnsDeps.push(materializedColumnsDeps);
        hooks.visibleColumns.push(visibleColumns$1);
        hooks.visibleColumnsDeps.push(visibleColumnsDeps);
        hooks.useInstance.push(useInstance$7);
        hooks.prepareRow.push(prepareRow$2);
      };
      _UNSTABLE_usePivotColumns.pluginName = "usePivotColumns";
      var defaultPivotColumns = [];
      var defaultGetPivotToggleProps = function defaultGetPivotToggleProps2(props, _ref) {
        var header = _ref.header;
        return [props, {
          onClick: header.canPivot ? function(e5) {
            e5.persist();
            header.togglePivot();
          } : void 0,
          style: {
            cursor: header.canPivot ? "pointer" : void 0
          },
          title: "Toggle Pivot"
        }];
      };
      function reducer$7(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            pivotColumns: defaultPivotColumns
          }, state);
        }
        if (action.type === actions.resetPivot) {
          return _extends3({}, state, {
            pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns
          });
        }
        if (action.type === actions.togglePivot) {
          var columnId = action.columnId, setPivot = action.value;
          var resolvedPivot = typeof setPivot !== "undefined" ? setPivot : !state.pivotColumns.includes(columnId);
          if (resolvedPivot) {
            return _extends3({}, state, {
              pivotColumns: [].concat(state.pivotColumns, [columnId])
            });
          }
          return _extends3({}, state, {
            pivotColumns: state.pivotColumns.filter(function(d2) {
              return d2 !== columnId;
            })
          });
        }
      }
      function useInstanceAfterData(instance) {
        instance.allColumns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
        });
      }
      function allColumns(columns, _ref2) {
        var instance = _ref2.instance;
        columns.forEach(function(column) {
          column.isPivotSource = instance.state.pivotColumns.includes(column.id);
          column.uniqueValues = /* @__PURE__ */ new Set();
        });
        return columns;
      }
      function accessValue(value, _ref3) {
        var column = _ref3.column;
        if (column.uniqueValues && typeof value !== "undefined") {
          column.uniqueValues.add(value);
        }
        return value;
      }
      function materializedColumns(materialized, _ref4) {
        var instance = _ref4.instance;
        var allColumns2 = instance.allColumns, state = instance.state;
        if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {
          return materialized;
        }
        var pivotColumns = state.pivotColumns.map(function(id) {
          return allColumns2.find(function(d2) {
            return d2.id === id;
          });
        }).filter(Boolean);
        var sourceColumns = allColumns2.filter(function(d2) {
          return !d2.isPivotSource && !state.groupBy.includes(d2.id) && !state.pivotColumns.includes(d2.id);
        });
        var buildPivotColumns = function buildPivotColumns2(depth, parent, pivotFilters) {
          if (depth === void 0) {
            depth = 0;
          }
          if (pivotFilters === void 0) {
            pivotFilters = [];
          }
          var pivotColumn = pivotColumns[depth];
          if (!pivotColumn) {
            return sourceColumns.map(function(sourceColumn) {
              return _extends3({}, sourceColumn, {
                canPivot: false,
                isPivoted: true,
                parent,
                depth,
                id: "" + (parent ? parent.id + "." + sourceColumn.id : sourceColumn.id),
                accessor: function accessor(originalRow, i4, row) {
                  if (pivotFilters.every(function(filter) {
                    return filter(row);
                  })) {
                    return row.values[sourceColumn.id];
                  }
                }
              });
            });
          }
          var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();
          return uniqueValues.map(function(uniqueValue) {
            var columnGroup = _extends3({}, pivotColumn, {
              Header: pivotColumn.PivotHeader || typeof pivotColumn.header === "string" ? pivotColumn.Header + ": " + uniqueValue : uniqueValue,
              isPivotGroup: true,
              parent,
              depth,
              id: parent ? parent.id + "." + pivotColumn.id + "." + uniqueValue : pivotColumn.id + "." + uniqueValue,
              pivotValue: uniqueValue
            });
            columnGroup.columns = buildPivotColumns2(depth + 1, columnGroup, [].concat(pivotFilters, [function(row) {
              return row.values[pivotColumn.id] === uniqueValue;
            }]));
            return columnGroup;
          });
        };
        var newMaterialized = flattenColumns(buildPivotColumns());
        return [].concat(materialized, newMaterialized);
      }
      function materializedColumnsDeps(deps, _ref5) {
        var _ref5$instance$state = _ref5.instance.state, pivotColumns = _ref5$instance$state.pivotColumns, groupBy = _ref5$instance$state.groupBy;
        return [].concat(deps, [pivotColumns, groupBy]);
      }
      function visibleColumns$1(visibleColumns2, _ref6) {
        var state = _ref6.instance.state;
        visibleColumns2 = visibleColumns2.filter(function(d2) {
          return !d2.isPivotSource;
        });
        if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {
          visibleColumns2 = visibleColumns2.filter(function(column) {
            return column.isGrouped || column.isPivoted;
          });
        }
        return visibleColumns2;
      }
      function visibleColumnsDeps(deps, _ref7) {
        var instance = _ref7.instance;
        return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);
      }
      function useInstance$7(instance) {
        var columns = instance.columns, allColumns2 = instance.allColumns, flatHeaders = instance.flatHeaders, getHooks = instance.getHooks, plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetPi = instance.autoResetPivot, autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi, manaulPivot = instance.manaulPivot, disablePivot = instance.disablePivot, defaultCanPivot = instance.defaultCanPivot;
        ensurePluginOrder(plugins, ["useGroupBy"], "usePivotColumns");
        var getInstance = useGetLatest(instance);
        allColumns2.forEach(function(column) {
          var accessor = column.accessor, defaultColumnPivot = column.defaultPivot, columnDisablePivot = column.disablePivot;
          column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : void 0, disablePivot === true ? false : void 0, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);
          if (column.canPivot) {
            column.togglePivot = function() {
              return instance.togglePivot(column.id);
            };
          }
          column.Aggregated = column.Aggregated || column.Cell;
        });
        var togglePivot = function togglePivot2(columnId, value) {
          dispatch({
            type: actions.togglePivot,
            columnId,
            value
          });
        };
        flatHeaders.forEach(function(header) {
          header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {
            instance: getInstance(),
            header
          });
        });
        var getAutoResetPivot = useGetLatest(autoResetPivot);
        useMountedLayoutEffect(function() {
          if (getAutoResetPivot()) {
            dispatch({
              type: actions.resetPivot
            });
          }
        }, [dispatch, manaulPivot ? null : columns]);
        Object.assign(instance, {
          togglePivot
        });
      }
      function prepareRow$2(row) {
        row.allCells.forEach(function(cell) {
          cell.isPivoted = cell.column.isPivoted;
        });
      }
      var pluginName$1 = "useRowSelect";
      actions.resetSelectedRows = "resetSelectedRows";
      actions.toggleAllRowsSelected = "toggleAllRowsSelected";
      actions.toggleRowSelected = "toggleRowSelected";
      actions.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
      var useRowSelect = function useRowSelect2(hooks) {
        hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];
        hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];
        hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];
        hooks.stateReducers.push(reducer$8);
        hooks.useInstance.push(useInstance$8);
        hooks.prepareRow.push(prepareRow$3);
      };
      useRowSelect.pluginName = pluginName$1;
      var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps2(props, _ref) {
        var instance = _ref.instance, row = _ref.row;
        var _instance$manualRowSe = instance.manualRowSelectedKey, manualRowSelectedKey = _instance$manualRowSe === void 0 ? "isSelected" : _instance$manualRowSe;
        var checked = false;
        if (row.original && row.original[manualRowSelectedKey]) {
          checked = true;
        } else {
          checked = row.isSelected;
        }
        return [props, {
          onChange: function onChange(e5) {
            row.toggleRowSelected(e5.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked,
          title: "Toggle Row Selected",
          indeterminate: row.isSomeSelected
        }];
      };
      var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          onChange: function onChange(e5) {
            instance.toggleAllRowsSelected(e5.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllRowsSelected,
          title: "Toggle All Rows Selected",
          indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
        }];
      };
      var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps2(props, _ref3) {
        var instance = _ref3.instance;
        return [props, {
          onChange: function onChange(e5) {
            instance.toggleAllPageRowsSelected(e5.target.checked);
          },
          style: {
            cursor: "pointer"
          },
          checked: instance.isAllPageRowsSelected,
          title: "Toggle All Current Page Rows Selected",
          indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function(_ref4) {
            var id = _ref4.id;
            return instance.state.selectedRowIds[id];
          }))
        }];
      };
      function reducer$8(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            selectedRowIds: {}
          }, state);
        }
        if (action.type === actions.resetSelectedRows) {
          return _extends3({}, state, {
            selectedRowIds: instance.initialState.selectedRowIds || {}
          });
        }
        if (action.type === actions.toggleAllRowsSelected) {
          var setSelected = action.value;
          var isAllRowsSelected = instance.isAllRowsSelected, rowsById = instance.rowsById, _instance$nonGroupedR = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;
          var selectAll = typeof setSelected !== "undefined" ? setSelected : !isAllRowsSelected;
          var selectedRowIds = Object.assign({}, state.selectedRowIds);
          if (selectAll) {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              selectedRowIds[rowId] = true;
            });
          } else {
            Object.keys(nonGroupedRowsById).forEach(function(rowId) {
              delete selectedRowIds[rowId];
            });
          }
          return _extends3({}, state, {
            selectedRowIds
          });
        }
        if (action.type === actions.toggleRowSelected) {
          var id = action.id, _setSelected = action.value;
          var _rowsById = instance.rowsById, _instance$selectSubRo = instance.selectSubRows, selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo, getSubRows = instance.getSubRows;
          var isSelected = state.selectedRowIds[id];
          var shouldExist = typeof _setSelected !== "undefined" ? _setSelected : !isSelected;
          if (isSelected === shouldExist) {
            return state;
          }
          var newSelectedRowIds = _extends3({}, state.selectedRowIds);
          var handleRowById = function handleRowById2(id2) {
            var row = _rowsById[id2];
            if (row) {
              if (!row.isGrouped) {
                if (shouldExist) {
                  newSelectedRowIds[id2] = true;
                } else {
                  delete newSelectedRowIds[id2];
                }
              }
              if (selectSubRows && getSubRows(row)) {
                return getSubRows(row).forEach(function(row2) {
                  return handleRowById2(row2.id);
                });
              }
            }
          };
          handleRowById(id);
          return _extends3({}, state, {
            selectedRowIds: newSelectedRowIds
          });
        }
        if (action.type === actions.toggleAllPageRowsSelected) {
          var _setSelected2 = action.value;
          var page = instance.page, _rowsById2 = instance.rowsById, _instance$selectSubRo2 = instance.selectSubRows, _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2, isAllPageRowsSelected = instance.isAllPageRowsSelected, _getSubRows = instance.getSubRows;
          var _selectAll = typeof _setSelected2 !== "undefined" ? _setSelected2 : !isAllPageRowsSelected;
          var _newSelectedRowIds = _extends3({}, state.selectedRowIds);
          var _handleRowById = function _handleRowById2(id2) {
            var row = _rowsById2[id2];
            if (!row.isGrouped) {
              if (_selectAll) {
                _newSelectedRowIds[id2] = true;
              } else {
                delete _newSelectedRowIds[id2];
              }
            }
            if (_selectSubRows && _getSubRows(row)) {
              return _getSubRows(row).forEach(function(row2) {
                return _handleRowById2(row2.id);
              });
            }
          };
          page.forEach(function(row) {
            return _handleRowById(row.id);
          });
          return _extends3({}, state, {
            selectedRowIds: _newSelectedRowIds
          });
        }
        return state;
      }
      function useInstance$8(instance) {
        var data = instance.data, rows = instance.rows, getHooks = instance.getHooks, plugins = instance.plugins, rowsById = instance.rowsById, _instance$nonGroupedR2 = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2, _instance$autoResetSe = instance.autoResetSelectedRows, autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe, selectedRowIds = instance.state.selectedRowIds, _instance$selectSubRo3 = instance.selectSubRows, selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3, dispatch = instance.dispatch, page = instance.page, getSubRows = instance.getSubRows;
        ensurePluginOrder(plugins, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
        var selectedFlatRows = React2.useMemo(function() {
          var selectedFlatRows2 = [];
          rows.forEach(function(row) {
            var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];
            row.isSelected = !!isSelected;
            row.isSomeSelected = isSelected === null;
            if (isSelected) {
              selectedFlatRows2.push(row);
            }
          });
          return selectedFlatRows2;
        }, [rows, selectSubRows, selectedRowIds, getSubRows]);
        var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);
        var isAllPageRowsSelected = isAllRowsSelected;
        if (isAllRowsSelected) {
          if (Object.keys(nonGroupedRowsById).some(function(id) {
            return !selectedRowIds[id];
          })) {
            isAllRowsSelected = false;
          }
        }
        if (!isAllRowsSelected) {
          if (page && page.length && page.some(function(_ref5) {
            var id = _ref5.id;
            return !selectedRowIds[id];
          })) {
            isAllPageRowsSelected = false;
          }
        }
        var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);
        useMountedLayoutEffect(function() {
          if (getAutoResetSelectedRows()) {
            dispatch({
              type: actions.resetSelectedRows
            });
          }
        }, [dispatch, data]);
        var toggleAllRowsSelected = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleAllPageRowsSelected = React2.useCallback(function(value) {
          return dispatch({
            type: actions.toggleAllPageRowsSelected,
            value
          });
        }, [dispatch]);
        var toggleRowSelected = React2.useCallback(function(id, value) {
          return dispatch({
            type: actions.toggleRowSelected,
            id,
            value
          });
        }, [dispatch]);
        var getInstance = useGetLatest(instance);
        var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {
          instance: getInstance()
        });
        var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {
          instance: getInstance()
        });
        Object.assign(instance, {
          selectedFlatRows,
          isAllRowsSelected,
          isAllPageRowsSelected,
          toggleRowSelected,
          toggleAllRowsSelected,
          getToggleAllRowsSelectedProps,
          getToggleAllPageRowsSelectedProps,
          toggleAllPageRowsSelected
        });
      }
      function prepareRow$3(row, _ref6) {
        var instance = _ref6.instance;
        row.toggleRowSelected = function(set) {
          return instance.toggleRowSelected(row.id, set);
        };
        row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {
          instance,
          row
        });
      }
      function getRowIsSelected(row, selectedRowIds, getSubRows) {
        if (selectedRowIds[row.id]) {
          return true;
        }
        var subRows = getSubRows(row);
        if (subRows && subRows.length) {
          var allChildrenSelected = true;
          var someSelected = false;
          subRows.forEach(function(subRow) {
            if (someSelected && !allChildrenSelected) {
              return;
            }
            if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {
              someSelected = true;
            } else {
              allChildrenSelected = false;
            }
          });
          return allChildrenSelected ? true : someSelected ? null : false;
        }
        return false;
      }
      var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor2(row) {
        return {};
      };
      var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor2(cell) {
        return {};
      };
      actions.setRowState = "setRowState";
      actions.setCellState = "setCellState";
      actions.resetRowState = "resetRowState";
      var useRowState = function useRowState2(hooks) {
        hooks.stateReducers.push(reducer$9);
        hooks.useInstance.push(useInstance$9);
        hooks.prepareRow.push(prepareRow$4);
      };
      useRowState.pluginName = "useRowState";
      function reducer$9(state, action, previousState, instance) {
        var _instance$initialRowS = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS, _instance$initialCell = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell, rowsById = instance.rowsById;
        if (action.type === actions.init) {
          return _extends3({
            rowState: {}
          }, state);
        }
        if (action.type === actions.resetRowState) {
          return _extends3({}, state, {
            rowState: instance.initialState.rowState || {}
          });
        }
        if (action.type === actions.setRowState) {
          var _extends22;
          var rowId = action.rowId, value = action.value;
          var oldRowState = typeof state.rowState[rowId] !== "undefined" ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);
          return _extends3({}, state, {
            rowState: _extends3({}, state.rowState, (_extends22 = {}, _extends22[rowId] = functionalUpdate(value, oldRowState), _extends22))
          });
        }
        if (action.type === actions.setCellState) {
          var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends32, _extends4;
          var _rowId = action.rowId, columnId = action.columnId, _value = action.value;
          var _oldRowState = typeof state.rowState[_rowId] !== "undefined" ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);
          var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== "undefined" ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function(cell) {
            return cell.column.id === columnId;
          }));
          return _extends3({}, state, {
            rowState: _extends3({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends3({}, _oldRowState, {
              cellState: _extends3({}, _oldRowState.cellState || {}, (_extends32 = {}, _extends32[columnId] = functionalUpdate(_value, oldCellState), _extends32))
            }), _extends4))
          });
        }
      }
      function useInstance$9(instance) {
        var _instance$autoResetRo = instance.autoResetRowState, autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo, data = instance.data, dispatch = instance.dispatch;
        var setRowState = React2.useCallback(function(rowId, value) {
          return dispatch({
            type: actions.setRowState,
            rowId,
            value
          });
        }, [dispatch]);
        var setCellState = React2.useCallback(function(rowId, columnId, value) {
          return dispatch({
            type: actions.setCellState,
            rowId,
            columnId,
            value
          });
        }, [dispatch]);
        var getAutoResetRowState = useGetLatest(autoResetRowState);
        useMountedLayoutEffect(function() {
          if (getAutoResetRowState()) {
            dispatch({
              type: actions.resetRowState
            });
          }
        }, [data]);
        Object.assign(instance, {
          setRowState,
          setCellState
        });
      }
      function prepareRow$4(row, _ref) {
        var instance = _ref.instance;
        var _instance$initialRowS2 = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2, _instance$initialCell2 = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2, rowState = instance.state.rowState;
        if (row) {
          row.state = typeof rowState[row.id] !== "undefined" ? rowState[row.id] : initialRowStateAccessor(row);
          row.setState = function(updater) {
            return instance.setRowState(row.id, updater);
          };
          row.cells.forEach(function(cell) {
            if (!row.state.cellState) {
              row.state.cellState = {};
            }
            cell.state = typeof row.state.cellState[cell.column.id] !== "undefined" ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);
            cell.setState = function(updater) {
              return instance.setCellState(row.id, cell.column.id, updater);
            };
          });
        }
      }
      actions.resetColumnOrder = "resetColumnOrder";
      actions.setColumnOrder = "setColumnOrder";
      var useColumnOrder = function useColumnOrder2(hooks) {
        hooks.stateReducers.push(reducer$a);
        hooks.visibleColumnsDeps.push(function(deps, _ref) {
          var instance = _ref.instance;
          return [].concat(deps, [instance.state.columnOrder]);
        });
        hooks.visibleColumns.push(visibleColumns$2);
        hooks.useInstance.push(useInstance$a);
      };
      useColumnOrder.pluginName = "useColumnOrder";
      function reducer$a(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            columnOrder: []
          }, state);
        }
        if (action.type === actions.resetColumnOrder) {
          return _extends3({}, state, {
            columnOrder: instance.initialState.columnOrder || []
          });
        }
        if (action.type === actions.setColumnOrder) {
          return _extends3({}, state, {
            columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)
          });
        }
      }
      function visibleColumns$2(columns, _ref2) {
        var columnOrder = _ref2.instance.state.columnOrder;
        if (!columnOrder || !columnOrder.length) {
          return columns;
        }
        var columnOrderCopy = [].concat(columnOrder);
        var columnsCopy = [].concat(columns);
        var columnsInOrder = [];
        var _loop = function _loop2() {
          var targetColumnId = columnOrderCopy.shift();
          var foundIndex = columnsCopy.findIndex(function(d2) {
            return d2.id === targetColumnId;
          });
          if (foundIndex > -1) {
            columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);
          }
        };
        while (columnsCopy.length && columnOrderCopy.length) {
          _loop();
        }
        return [].concat(columnsInOrder, columnsCopy);
      }
      function useInstance$a(instance) {
        var dispatch = instance.dispatch;
        instance.setColumnOrder = React2.useCallback(function(columnOrder) {
          return dispatch({
            type: actions.setColumnOrder,
            columnOrder
          });
        }, [dispatch]);
      }
      defaultColumn.canResize = true;
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      var useResizeColumns = function useResizeColumns2(hooks) {
        hooks.getResizerProps = [defaultGetResizerProps];
        hooks.getHeaderProps.push({
          style: {
            position: "relative"
          }
        });
        hooks.stateReducers.push(reducer$b);
        hooks.useInstance.push(useInstance$b);
        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);
      };
      var defaultGetResizerProps = function defaultGetResizerProps2(props, _ref) {
        var instance = _ref.instance, header = _ref.header;
        var dispatch = instance.dispatch;
        var onResizeStart = function onResizeStart2(e5, header2) {
          var isTouchEvent = false;
          if (e5.type === "touchstart") {
            if (e5.touches && e5.touches.length > 1) {
              return;
            }
            isTouchEvent = true;
          }
          var headersToResize = getLeafHeaders(header2);
          var headerIdWidths = headersToResize.map(function(d2) {
            return [d2.id, d2.totalWidth];
          });
          var clientX = isTouchEvent ? Math.round(e5.touches[0].clientX) : e5.clientX;
          var raf;
          var mostRecentClientX;
          var dispatchEnd = function dispatchEnd2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnDoneResizing
            });
          };
          var dispatchMove = function dispatchMove2() {
            window.cancelAnimationFrame(raf);
            raf = null;
            dispatch({
              type: actions.columnResizing,
              clientX: mostRecentClientX
            });
          };
          var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame2(clientXPos) {
            mostRecentClientX = clientXPos;
            if (!raf) {
              raf = window.requestAnimationFrame(dispatchMove);
            }
          };
          var handlersAndEvents = {
            mouse: {
              moveEvent: "mousemove",
              moveHandler: function moveHandler(e6) {
                return scheduleDispatchMoveOnNextAnimationFrame(e6.clientX);
              },
              upEvent: "mouseup",
              upHandler: function upHandler(e6) {
                document.removeEventListener("mousemove", handlersAndEvents.mouse.moveHandler);
                document.removeEventListener("mouseup", handlersAndEvents.mouse.upHandler);
                dispatchEnd();
              }
            },
            touch: {
              moveEvent: "touchmove",
              moveHandler: function moveHandler(e6) {
                if (e6.cancelable) {
                  e6.preventDefault();
                  e6.stopPropagation();
                }
                scheduleDispatchMoveOnNextAnimationFrame(e6.touches[0].clientX);
                return false;
              },
              upEvent: "touchend",
              upHandler: function upHandler(e6) {
                document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);
                document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);
                dispatchEnd();
              }
            }
          };
          var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;
          var passiveIfSupported = passiveEventSupported() ? {
            passive: false
          } : false;
          document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);
          document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);
          dispatch({
            type: actions.columnStartResizing,
            columnId: header2.id,
            columnWidth: header2.totalWidth,
            headerIdWidths,
            clientX
          });
        };
        return [props, {
          onMouseDown: function onMouseDown(e5) {
            return e5.persist() || onResizeStart(e5, header);
          },
          onTouchStart: function onTouchStart(e5) {
            return e5.persist() || onResizeStart(e5, header);
          },
          style: {
            cursor: "col-resize"
          },
          draggable: false,
          role: "separator"
        }];
      };
      useResizeColumns.pluginName = "useResizeColumns";
      function reducer$b(state, action) {
        if (action.type === actions.init) {
          return _extends3({
            columnResizing: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends3({}, state, {
            columnResizing: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var clientX = action.clientX, columnId = action.columnId, columnWidth = action.columnWidth, headerIdWidths = action.headerIdWidths;
          return _extends3({}, state, {
            columnResizing: _extends3({}, state.columnResizing, {
              startX: clientX,
              headerIdWidths,
              columnWidth,
              isResizingColumn: columnId
            })
          });
        }
        if (action.type === actions.columnResizing) {
          var _clientX = action.clientX;
          var _state$columnResizing = state.columnResizing, startX = _state$columnResizing.startX, _columnWidth = _state$columnResizing.columnWidth, _state$columnResizing2 = _state$columnResizing.headerIdWidths, _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;
          var deltaX = _clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdWidths.forEach(function(_ref2) {
            var headerId = _ref2[0], headerWidth = _ref2[1];
            newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
          });
          return _extends3({}, state, {
            columnResizing: _extends3({}, state.columnResizing, {
              columnWidths: _extends3({}, state.columnResizing.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends3({}, state, {
            columnResizing: _extends3({}, state.columnResizing, {
              startX: null,
              isResizingColumn: null
            })
          });
        }
      }
      var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions2(instance) {
        var flatHeaders = instance.flatHeaders, disableResizing = instance.disableResizing, getHooks = instance.getHooks, columnResizing = instance.state.columnResizing;
        var getInstance = useGetLatest(instance);
        flatHeaders.forEach(function(header) {
          var canResize = getFirstDefined(header.disableResizing === true ? false : void 0, disableResizing === true ? false : void 0, true);
          header.canResize = canResize;
          header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;
          header.isResizing = columnResizing.isResizingColumn === header.id;
          if (canResize) {
            header.getResizerProps = makePropGetter(getHooks().getResizerProps, {
              instance: getInstance(),
              header
            });
          }
        });
      };
      function useInstance$b(instance) {
        var plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetRe = instance.autoResetResize, autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe, columns = instance.columns;
        ensurePluginOrder(plugins, ["useAbsoluteLayout"], "useResizeColumns");
        var getAutoResetResize = useGetLatest(autoResetResize);
        useMountedLayoutEffect(function() {
          if (getAutoResetResize()) {
            dispatch({
              type: actions.resetResize
            });
          }
        }, [columns]);
        var resetResizing = React2.useCallback(function() {
          return dispatch({
            type: actions.resetResize
          });
        }, [dispatch]);
        Object.assign(instance, {
          resetResizing
        });
      }
      function getLeafHeaders(header) {
        var leafHeaders = [];
        var recurseHeader = function recurseHeader2(header2) {
          if (header2.columns && header2.columns.length) {
            header2.columns.map(recurseHeader2);
          }
          leafHeaders.push(header2);
        };
        recurseHeader(header);
        return leafHeaders;
      }
      var cellStyles = {
        position: "absolute",
        top: 0
      };
      var useAbsoluteLayout = function useAbsoluteLayout2(hooks) {
        hooks.getTableBodyProps.push(getRowStyles);
        hooks.getRowProps.push(getRowStyles);
        hooks.getHeaderGroupProps.push(getRowStyles);
        hooks.getFooterGroupProps.push(getRowStyles);
        hooks.getHeaderProps.push(function(props, _ref) {
          var column = _ref.column;
          return [props, {
            style: _extends3({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref2) {
          var cell = _ref2.cell;
          return [props, {
            style: _extends3({}, cellStyles, {
              left: cell.column.totalLeft + "px",
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref3) {
          var column = _ref3.column;
          return [props, {
            style: _extends3({}, cellStyles, {
              left: column.totalLeft + "px",
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useAbsoluteLayout.pluginName = "useAbsoluteLayout";
      var getRowStyles = function getRowStyles2(props, _ref4) {
        var instance = _ref4.instance;
        return [props, {
          style: {
            position: "relative",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var cellStyles$1 = {
        display: "inline-block",
        boxSizing: "border-box"
      };
      var getRowStyles$1 = function getRowStyles2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            display: "flex",
            width: instance.totalColumnsWidth + "px"
          }
        }];
      };
      var useBlockLayout = function useBlockLayout2(hooks) {
        hooks.getRowProps.push(getRowStyles$1);
        hooks.getHeaderGroupProps.push(getRowStyles$1);
        hooks.getFooterGroupProps.push(getRowStyles$1);
        hooks.getHeaderProps.push(function(props, _ref2) {
          var column = _ref2.column;
          return [props, {
            style: _extends3({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
        hooks.getCellProps.push(function(props, _ref3) {
          var cell = _ref3.cell;
          return [props, {
            style: _extends3({}, cellStyles$1, {
              width: cell.column.totalWidth + "px"
            })
          }];
        });
        hooks.getFooterProps.push(function(props, _ref4) {
          var column = _ref4.column;
          return [props, {
            style: _extends3({}, cellStyles$1, {
              width: column.totalWidth + "px"
            })
          }];
        });
      };
      useBlockLayout.pluginName = "useBlockLayout";
      function useFlexLayout(hooks) {
        hooks.getTableProps.push(getTableProps);
        hooks.getRowProps.push(getRowStyles$2);
        hooks.getHeaderGroupProps.push(getRowStyles$2);
        hooks.getFooterGroupProps.push(getRowStyles$2);
        hooks.getHeaderProps.push(getHeaderProps);
        hooks.getCellProps.push(getCellProps);
        hooks.getFooterProps.push(getFooterProps);
      }
      useFlexLayout.pluginName = "useFlexLayout";
      var getTableProps = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        return [props, {
          style: {
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getRowStyles$2 = function getRowStyles2(props, _ref2) {
        var instance = _ref2.instance;
        return [props, {
          style: {
            display: "flex",
            flex: "1 0 auto",
            minWidth: instance.totalColumnsMinWidth + "px"
          }
        }];
      };
      var getHeaderProps = function getHeaderProps2(props, _ref3) {
        var column = _ref3.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      var getCellProps = function getCellProps2(props, _ref4) {
        var cell = _ref4.cell;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: cell.column.totalFlexWidth + " 0 auto",
            minWidth: cell.column.totalMinWidth + "px",
            width: cell.column.totalWidth + "px"
          }
        }];
      };
      var getFooterProps = function getFooterProps2(props, _ref5) {
        var column = _ref5.column;
        return [props, {
          style: {
            boxSizing: "border-box",
            flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : void 0,
            minWidth: column.totalMinWidth + "px",
            width: column.totalWidth + "px"
          }
        }];
      };
      actions.columnStartResizing = "columnStartResizing";
      actions.columnResizing = "columnResizing";
      actions.columnDoneResizing = "columnDoneResizing";
      actions.resetResize = "resetResize";
      function useGridLayout(hooks) {
        hooks.stateReducers.push(reducer$c);
        hooks.getTableProps.push(getTableProps$1);
        hooks.getHeaderProps.push(getHeaderProps$1);
        hooks.getRowProps.push(getRowProps);
      }
      useGridLayout.pluginName = "useGridLayout";
      var getTableProps$1 = function getTableProps2(props, _ref) {
        var instance = _ref.instance;
        var gridTemplateColumns2 = instance.visibleColumns.map(function(column) {
          var _instance$state$colum;
          if (instance.state.gridLayout.columnWidths[column.id])
            return instance.state.gridLayout.columnWidths[column.id] + "px";
          if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn)
            return instance.state.gridLayout.startWidths[column.id] + "px";
          if (typeof column.width === "number")
            return column.width + "px";
          return column.width;
        });
        return [props, {
          style: {
            display: "grid",
            gridTemplateColumns: gridTemplateColumns2.join(" ")
          }
        }];
      };
      var getHeaderProps$1 = function getHeaderProps2(props, _ref2) {
        var column = _ref2.column;
        return [props, {
          id: "header-cell-" + column.id,
          style: {
            position: "sticky",
            //enables a scroll wrapper to be placed around the table and have sticky headers
            gridColumn: "span " + column.totalVisibleHeaderCount
          }
        }];
      };
      var getRowProps = function getRowProps2(props, _ref3) {
        var row = _ref3.row;
        if (row.isExpanded) {
          return [props, {
            style: {
              gridColumn: "1 / " + (row.cells.length + 1)
            }
          }];
        }
        return [props, {}];
      };
      function reducer$c(state, action, previousState, instance) {
        if (action.type === actions.init) {
          return _extends3({
            gridLayout: {
              columnWidths: {}
            }
          }, state);
        }
        if (action.type === actions.resetResize) {
          return _extends3({}, state, {
            gridLayout: {
              columnWidths: {}
            }
          });
        }
        if (action.type === actions.columnStartResizing) {
          var columnId = action.columnId, headerIdWidths = action.headerIdWidths;
          var columnWidth = getElementWidth(columnId);
          if (columnWidth !== void 0) {
            var startWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends22;
              return _extends3({}, acc, (_extends22 = {}, _extends22[column.id] = getElementWidth(column.id), _extends22));
            }, {});
            var minWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends32;
              return _extends3({}, acc, (_extends32 = {}, _extends32[column.id] = column.minWidth, _extends32));
            }, {});
            var maxWidths = instance.visibleColumns.reduce(function(acc, column) {
              var _extends4;
              return _extends3({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));
            }, {});
            var headerIdGridWidths = headerIdWidths.map(function(_ref4) {
              var headerId = _ref4[0];
              return [headerId, getElementWidth(headerId)];
            });
            return _extends3({}, state, {
              gridLayout: _extends3({}, state.gridLayout, {
                startWidths,
                minWidths,
                maxWidths,
                headerIdGridWidths,
                columnWidth
              })
            });
          } else {
            return state;
          }
        }
        if (action.type === actions.columnResizing) {
          var clientX = action.clientX;
          var startX = state.columnResizing.startX;
          var _state$gridLayout = state.gridLayout, _columnWidth = _state$gridLayout.columnWidth, _minWidths = _state$gridLayout.minWidths, _maxWidths = _state$gridLayout.maxWidths, _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths, _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;
          var deltaX = clientX - startX;
          var percentageDeltaX = deltaX / _columnWidth;
          var newColumnWidths = {};
          _headerIdGridWidths.forEach(function(_ref5) {
            var headerId = _ref5[0], headerWidth = _ref5[1];
            newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);
          });
          return _extends3({}, state, {
            gridLayout: _extends3({}, state.gridLayout, {
              columnWidths: _extends3({}, state.gridLayout.columnWidths, {}, newColumnWidths)
            })
          });
        }
        if (action.type === actions.columnDoneResizing) {
          return _extends3({}, state, {
            gridLayout: _extends3({}, state.gridLayout, {
              startWidths: {},
              minWidths: {},
              maxWidths: {}
            })
          });
        }
      }
      function getElementWidth(columnId) {
        var _document$getElementB;
        var width2 = (_document$getElementB = document.getElementById("header-cell-" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;
        if (width2 !== void 0) {
          return width2;
        }
      }
      exports2._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;
      exports2.actions = actions;
      exports2.defaultColumn = defaultColumn;
      exports2.defaultGroupByFn = defaultGroupByFn;
      exports2.defaultOrderByFn = defaultOrderByFn;
      exports2.defaultRenderer = defaultRenderer;
      exports2.emptyRenderer = emptyRenderer;
      exports2.ensurePluginOrder = ensurePluginOrder;
      exports2.flexRender = flexRender;
      exports2.functionalUpdate = functionalUpdate;
      exports2.loopHooks = loopHooks;
      exports2.makePropGetter = makePropGetter;
      exports2.makeRenderer = makeRenderer;
      exports2.reduceHooks = reduceHooks;
      exports2.safeUseLayoutEffect = safeUseLayoutEffect;
      exports2.useAbsoluteLayout = useAbsoluteLayout;
      exports2.useAsyncDebounce = useAsyncDebounce;
      exports2.useBlockLayout = useBlockLayout;
      exports2.useColumnOrder = useColumnOrder;
      exports2.useExpanded = useExpanded;
      exports2.useFilters = useFilters;
      exports2.useFlexLayout = useFlexLayout;
      exports2.useGetLatest = useGetLatest;
      exports2.useGlobalFilter = useGlobalFilter;
      exports2.useGridLayout = useGridLayout;
      exports2.useGroupBy = useGroupBy;
      exports2.useMountedLayoutEffect = useMountedLayoutEffect;
      exports2.usePagination = usePagination;
      exports2.useResizeColumns = useResizeColumns;
      exports2.useRowSelect = useRowSelect;
      exports2.useRowState = useRowState;
      exports2.useSortBy = useSortBy;
      exports2.useTable = useTable;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/react-table/index.js
var require_react_table = __commonJS({
  "node_modules/react-table/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_table_development();
    }
  }
});

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/index.js
init_styled_components_esm();
var import_portal_legacy_ui2 = __toESM(require_lib(), 1);
init_utils();
init_FilterContent();
init_FilterPopover();
init_Catalog();
init_Sidebar();
init_hooks();
init_CatalogActions();
import { useLocation as R2 } from "react-router-dom";
import * as e4 from "react";
import { useMemo as L2, useState as W2 } from "react";

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/index.styles.js
init_styled_components_esm();

// node_modules/reactjs-popup/dist/reactjs-popup.esm.js
var import_react_dom = __toESM(require_react_dom());
import React, { useEffect, useLayoutEffect, forwardRef, useState, useRef, useImperativeHandle } from "react";
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var useOnEscape = function useOnEscape2(handler, active) {
  if (active === void 0) {
    active = true;
  }
  useEffect(function() {
    if (!active)
      return;
    var listener = function listener2(event) {
      if (event.key === "Escape")
        handler(event);
    };
    document.addEventListener("keyup", listener);
    return function() {
      if (!active)
        return;
      document.removeEventListener("keyup", listener);
    };
  }, [handler, active]);
};
var useRepositionOnResize = function useRepositionOnResize2(handler, active) {
  if (active === void 0) {
    active = true;
  }
  useEffect(function() {
    if (!active)
      return;
    var listener = function listener2() {
      handler();
    };
    window.addEventListener("resize", listener);
    return function() {
      if (!active)
        return;
      window.removeEventListener("resize", listener);
    };
  }, [handler, active]);
};
var useOnClickOutside = function useOnClickOutside2(ref, handler, active) {
  if (active === void 0) {
    active = true;
  }
  useEffect(function() {
    if (!active)
      return;
    var listener = function listener2(event) {
      var refs = Array.isArray(ref) ? ref : [ref];
      var contains = false;
      refs.forEach(function(r3) {
        if (!r3.current || r3.current.contains(event.target)) {
          contains = true;
          return;
        }
      });
      event.stopPropagation();
      if (!contains)
        handler(event);
    };
    document.addEventListener("mousedown", listener);
    document.addEventListener("touchstart", listener);
    return function() {
      if (!active)
        return;
      document.removeEventListener("mousedown", listener);
      document.removeEventListener("touchstart", listener);
    };
  }, [ref, handler, active]);
};
var useTabbing = function useTabbing2(contentRef, active) {
  if (active === void 0) {
    active = true;
  }
  useEffect(function() {
    if (!active)
      return;
    var listener = function listener2(event) {
      if (event.keyCode === 9) {
        var _contentRef$current;
        var els = contentRef === null || contentRef === void 0 ? void 0 : (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]');
        var focusableEls = Array.prototype.slice.call(els);
        if (focusableEls.length === 1) {
          event.preventDefault();
          return;
        }
        var firstFocusableEl = focusableEls[0];
        var lastFocusableEl = focusableEls[focusableEls.length - 1];
        if (event.shiftKey && document.activeElement === firstFocusableEl) {
          event.preventDefault();
          lastFocusableEl.focus();
        } else if (document.activeElement === lastFocusableEl) {
          event.preventDefault();
          firstFocusableEl.focus();
        }
      }
    };
    document.addEventListener("keydown", listener);
    return function() {
      if (!active)
        return;
      document.removeEventListener("keydown", listener);
    };
  }, [contentRef, active]);
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? useLayoutEffect : useEffect;
var Style = {
  popupContent: {
    tooltip: {
      position: "absolute",
      zIndex: 999
    },
    modal: {
      position: "relative",
      margin: "auto"
    }
  },
  popupArrow: {
    height: "8px",
    width: "16px",
    position: "absolute",
    background: "transparent",
    color: "#FFF",
    zIndex: -1
  },
  overlay: {
    tooltip: {
      position: "fixed",
      top: "0",
      bottom: "0",
      left: "0",
      right: "0",
      zIndex: 999
    },
    modal: {
      position: "fixed",
      top: "0",
      bottom: "0",
      left: "0",
      right: "0",
      display: "flex",
      zIndex: 999
    }
  }
};
var POSITION_TYPES = ["top left", "top center", "top right", "right top", "right center", "right bottom", "bottom left", "bottom center", "bottom right", "left top", "left center", "left bottom"];
var getCoordinatesForPosition = function getCoordinatesForPosition2(triggerBounding, ContentBounding, position2, arrow, _ref) {
  var offsetX = _ref.offsetX, offsetY = _ref.offsetY;
  var margin2 = arrow ? 8 : 0;
  var args = position2.split(" ");
  var CenterTop = triggerBounding.top + triggerBounding.height / 2;
  var CenterLeft = triggerBounding.left + triggerBounding.width / 2;
  var height2 = ContentBounding.height, width2 = ContentBounding.width;
  var top2 = CenterTop - height2 / 2;
  var left2 = CenterLeft - width2 / 2;
  var transform = "";
  var arrowTop = "0%";
  var arrowLeft = "0%";
  switch (args[0]) {
    case "top":
      top2 -= height2 / 2 + triggerBounding.height / 2 + margin2;
      transform = "rotate(180deg)  translateX(50%)";
      arrowTop = "100%";
      arrowLeft = "50%";
      break;
    case "bottom":
      top2 += height2 / 2 + triggerBounding.height / 2 + margin2;
      transform = "rotate(0deg) translateY(-100%) translateX(-50%)";
      arrowLeft = "50%";
      break;
    case "left":
      left2 -= width2 / 2 + triggerBounding.width / 2 + margin2;
      transform = " rotate(90deg)  translateY(50%) translateX(-25%)";
      arrowLeft = "100%";
      arrowTop = "50%";
      break;
    case "right":
      left2 += width2 / 2 + triggerBounding.width / 2 + margin2;
      transform = "rotate(-90deg)  translateY(-150%) translateX(25%)";
      arrowTop = "50%";
      break;
  }
  switch (args[1]) {
    case "top":
      top2 = triggerBounding.top;
      arrowTop = triggerBounding.height / 2 + "px";
      break;
    case "bottom":
      top2 = triggerBounding.top - height2 + triggerBounding.height;
      arrowTop = height2 - triggerBounding.height / 2 + "px";
      break;
    case "left":
      left2 = triggerBounding.left;
      arrowLeft = triggerBounding.width / 2 + "px";
      break;
    case "right":
      left2 = triggerBounding.left - width2 + triggerBounding.width;
      arrowLeft = width2 - triggerBounding.width / 2 + "px";
      break;
  }
  top2 = args[0] === "top" ? top2 - offsetY : top2 + offsetY;
  left2 = args[0] === "left" ? left2 - offsetX : left2 + offsetX;
  return {
    top: top2,
    left: left2,
    transform,
    arrowLeft,
    arrowTop
  };
};
var getTooltipBoundary = function getTooltipBoundary2(keepTooltipInside) {
  var boundingBox = {
    top: 0,
    left: 0,
    /* eslint-disable-next-line no-undef */
    width: window.innerWidth,
    /* eslint-disable-next-line no-undef */
    height: window.innerHeight
  };
  if (typeof keepTooltipInside === "string") {
    var selector = document.querySelector(keepTooltipInside);
    if (true) {
      if (selector === null)
        throw new Error(keepTooltipInside + " selector does not exist : keepTooltipInside must be a valid html selector 'class' or 'Id'  or a boolean value");
    }
    if (selector !== null)
      boundingBox = selector.getBoundingClientRect();
  }
  return boundingBox;
};
var calculatePosition = function calculatePosition2(triggerBounding, ContentBounding, position2, arrow, _ref2, keepTooltipInside) {
  var offsetX = _ref2.offsetX, offsetY = _ref2.offsetY;
  var bestCoords = {
    arrowLeft: "0%",
    arrowTop: "0%",
    left: 0,
    top: 0,
    transform: "rotate(135deg)"
  };
  var i4 = 0;
  var wrapperBox = getTooltipBoundary(keepTooltipInside);
  var positions = Array.isArray(position2) ? position2 : [position2];
  if (keepTooltipInside || Array.isArray(position2))
    positions = [].concat(positions, POSITION_TYPES);
  while (i4 < positions.length) {
    bestCoords = getCoordinatesForPosition(triggerBounding, ContentBounding, positions[i4], arrow, {
      offsetX,
      offsetY
    });
    var contentBox = {
      top: bestCoords.top,
      left: bestCoords.left,
      width: ContentBounding.width,
      height: ContentBounding.height
    };
    if (contentBox.top <= wrapperBox.top || contentBox.left <= wrapperBox.left || contentBox.top + contentBox.height >= wrapperBox.top + wrapperBox.height || contentBox.left + contentBox.width >= wrapperBox.left + wrapperBox.width) {
      i4++;
    } else {
      break;
    }
  }
  return bestCoords;
};
var popupIdCounter = 0;
var getRootPopup = function getRootPopup2() {
  var PopupRoot = document.getElementById("popup-root");
  if (PopupRoot === null) {
    PopupRoot = document.createElement("div");
    PopupRoot.setAttribute("id", "popup-root");
    document.body.appendChild(PopupRoot);
  }
  return PopupRoot;
};
var Popup = /* @__PURE__ */ forwardRef(function(_ref, ref) {
  var _ref$trigger = _ref.trigger, trigger = _ref$trigger === void 0 ? null : _ref$trigger, _ref$onOpen = _ref.onOpen, onOpen = _ref$onOpen === void 0 ? function() {
  } : _ref$onOpen, _ref$onClose = _ref.onClose, onClose = _ref$onClose === void 0 ? function() {
  } : _ref$onClose, _ref$defaultOpen = _ref.defaultOpen, defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen, _ref$open = _ref.open, open = _ref$open === void 0 ? void 0 : _ref$open, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$nested = _ref.nested, nested = _ref$nested === void 0 ? false : _ref$nested, _ref$closeOnDocumentC = _ref.closeOnDocumentClick, closeOnDocumentClick = _ref$closeOnDocumentC === void 0 ? true : _ref$closeOnDocumentC, _ref$repositionOnResi = _ref.repositionOnResize, repositionOnResize = _ref$repositionOnResi === void 0 ? true : _ref$repositionOnResi, _ref$closeOnEscape = _ref.closeOnEscape, closeOnEscape = _ref$closeOnEscape === void 0 ? true : _ref$closeOnEscape, _ref$on = _ref.on, on = _ref$on === void 0 ? ["click"] : _ref$on, _ref$contentStyle = _ref.contentStyle, contentStyle = _ref$contentStyle === void 0 ? {} : _ref$contentStyle, _ref$arrowStyle = _ref.arrowStyle, arrowStyle = _ref$arrowStyle === void 0 ? {} : _ref$arrowStyle, _ref$overlayStyle = _ref.overlayStyle, overlayStyle = _ref$overlayStyle === void 0 ? {} : _ref$overlayStyle, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, _ref$position = _ref.position, position2 = _ref$position === void 0 ? "bottom center" : _ref$position, _ref$modal = _ref.modal, modal = _ref$modal === void 0 ? false : _ref$modal, _ref$lockScroll = _ref.lockScroll, lockScroll = _ref$lockScroll === void 0 ? false : _ref$lockScroll, _ref$arrow = _ref.arrow, arrow = _ref$arrow === void 0 ? true : _ref$arrow, _ref$offsetX = _ref.offsetX, offsetX = _ref$offsetX === void 0 ? 0 : _ref$offsetX, _ref$offsetY = _ref.offsetY, offsetY = _ref$offsetY === void 0 ? 0 : _ref$offsetY, _ref$mouseEnterDelay = _ref.mouseEnterDelay, mouseEnterDelay = _ref$mouseEnterDelay === void 0 ? 100 : _ref$mouseEnterDelay, _ref$mouseLeaveDelay = _ref.mouseLeaveDelay, mouseLeaveDelay = _ref$mouseLeaveDelay === void 0 ? 100 : _ref$mouseLeaveDelay, _ref$keepTooltipInsid = _ref.keepTooltipInside, keepTooltipInside = _ref$keepTooltipInsid === void 0 ? false : _ref$keepTooltipInsid, children = _ref.children;
  var _useState = useState(open || defaultOpen), isOpen = _useState[0], setIsOpen = _useState[1];
  var triggerRef = useRef(null);
  var contentRef = useRef(null);
  var arrowRef = useRef(null);
  var focusedElBeforeOpen = useRef(null);
  var popupId = useRef("popup-" + ++popupIdCounter);
  var isModal = modal ? true : !trigger;
  var timeOut = useRef(0);
  useIsomorphicLayoutEffect(function() {
    if (isOpen) {
      focusedElBeforeOpen.current = document.activeElement;
      setPosition();
      focusContentOnOpen();
      lockScrolll();
    } else {
      resetScroll();
    }
    return function() {
      clearTimeout(timeOut.current);
    };
  }, [isOpen]);
  useEffect(function() {
    if (typeof open === "boolean") {
      if (open)
        openPopup();
      else
        closePopup();
    }
  }, [open, disabled]);
  var openPopup = function openPopup2(event) {
    if (isOpen || disabled)
      return;
    setIsOpen(true);
    setTimeout(function() {
      return onOpen(event);
    }, 0);
  };
  var closePopup = function closePopup2(event) {
    var _focusedElBeforeOpen$;
    if (!isOpen || disabled)
      return;
    setIsOpen(false);
    if (isModal)
      (_focusedElBeforeOpen$ = focusedElBeforeOpen.current) === null || _focusedElBeforeOpen$ === void 0 ? void 0 : _focusedElBeforeOpen$.focus();
    setTimeout(function() {
      return onClose(event);
    }, 0);
  };
  var togglePopup = function togglePopup2(event) {
    event === null || event === void 0 ? void 0 : event.stopPropagation();
    if (!isOpen)
      openPopup(event);
    else
      closePopup(event);
  };
  var onMouseEnter = function onMouseEnter2(event) {
    clearTimeout(timeOut.current);
    timeOut.current = setTimeout(function() {
      return openPopup(event);
    }, mouseEnterDelay);
  };
  var onContextMenu = function onContextMenu2(event) {
    event === null || event === void 0 ? void 0 : event.preventDefault();
    togglePopup();
  };
  var onMouseLeave = function onMouseLeave2(event) {
    clearTimeout(timeOut.current);
    timeOut.current = setTimeout(function() {
      return closePopup(event);
    }, mouseLeaveDelay);
  };
  var lockScrolll = function lockScrolll2() {
    if (isModal && lockScroll)
      document.getElementsByTagName("body")[0].style.overflow = "hidden";
  };
  var resetScroll = function resetScroll2() {
    if (isModal && lockScroll)
      document.getElementsByTagName("body")[0].style.overflow = "auto";
  };
  var focusContentOnOpen = function focusContentOnOpen2() {
    var _contentRef$current;
    var focusableEls = contentRef === null || contentRef === void 0 ? void 0 : (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]');
    var firstEl = Array.prototype.slice.call(focusableEls)[0];
    firstEl === null || firstEl === void 0 ? void 0 : firstEl.focus();
  };
  useImperativeHandle(ref, function() {
    return {
      open: function open2() {
        openPopup();
      },
      close: function close() {
        closePopup();
      },
      toggle: function toggle() {
        togglePopup();
      }
    };
  });
  var setPosition = function setPosition2() {
    if (isModal || !isOpen)
      return;
    if (!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || !(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || !(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current))
      return;
    var trigger2 = triggerRef.current.getBoundingClientRect();
    var content2 = contentRef.current.getBoundingClientRect();
    var cords = calculatePosition(trigger2, content2, position2, arrow, {
      offsetX,
      offsetY
    }, keepTooltipInside);
    contentRef.current.style.top = cords.top + window.scrollY + "px";
    contentRef.current.style.left = cords.left + window.scrollX + "px";
    if (arrow && !!arrowRef.current) {
      var _arrowStyle$top, _arrowStyle$left;
      arrowRef.current.style.transform = cords.transform;
      arrowRef.current.style.setProperty("-ms-transform", cords.transform);
      arrowRef.current.style.setProperty("-webkit-transform", cords.transform);
      arrowRef.current.style.top = ((_arrowStyle$top = arrowStyle.top) === null || _arrowStyle$top === void 0 ? void 0 : _arrowStyle$top.toString()) || cords.arrowTop;
      arrowRef.current.style.left = ((_arrowStyle$left = arrowStyle.left) === null || _arrowStyle$left === void 0 ? void 0 : _arrowStyle$left.toString()) || cords.arrowLeft;
    }
  };
  useOnEscape(closePopup, closeOnEscape);
  useTabbing(contentRef, isOpen && isModal);
  useRepositionOnResize(setPosition, repositionOnResize);
  useOnClickOutside(!!trigger ? [contentRef, triggerRef] : [contentRef], closePopup, closeOnDocumentClick && !nested);
  var renderTrigger = function renderTrigger2() {
    var triggerProps = {
      key: "T",
      ref: triggerRef,
      "aria-describedby": popupId.current
    };
    var onAsArray = Array.isArray(on) ? on : [on];
    for (var i4 = 0, len = onAsArray.length; i4 < len; i4++) {
      switch (onAsArray[i4]) {
        case "click":
          triggerProps.onClick = togglePopup;
          break;
        case "right-click":
          triggerProps.onContextMenu = onContextMenu;
          break;
        case "hover":
          triggerProps.onMouseEnter = onMouseEnter;
          triggerProps.onMouseLeave = onMouseLeave;
          break;
        case "focus":
          triggerProps.onFocus = onMouseEnter;
          triggerProps.onBlur = onMouseLeave;
          break;
      }
    }
    if (typeof trigger === "function") {
      var comp = trigger(isOpen);
      return !!trigger && React.cloneElement(comp, triggerProps);
    }
    return !!trigger && React.cloneElement(trigger, triggerProps);
  };
  var addWarperAction = function addWarperAction2() {
    var popupContentStyle = isModal ? Style.popupContent.modal : Style.popupContent.tooltip;
    var childrenElementProps = {
      className: "popup-content " + (className !== "" ? className.split(" ").map(function(c4) {
        return c4 + "-content";
      }).join(" ") : ""),
      style: _extends2({}, popupContentStyle, contentStyle, {
        pointerEvents: "auto"
      }),
      ref: contentRef,
      onClick: function onClick(e5) {
        e5.stopPropagation();
      }
    };
    if (!modal && on.indexOf("hover") >= 0) {
      childrenElementProps.onMouseEnter = onMouseEnter;
      childrenElementProps.onMouseLeave = onMouseLeave;
    }
    return childrenElementProps;
  };
  var renderContent = function renderContent2() {
    return React.createElement("div", Object.assign({}, addWarperAction(), {
      key: "C",
      role: isModal ? "dialog" : "tooltip",
      id: popupId.current
    }), arrow && !isModal && React.createElement("div", {
      ref: arrowRef,
      style: Style.popupArrow
    }, React.createElement("svg", {
      "data-testid": "arrow",
      className: "popup-arrow " + (className !== "" ? className.split(" ").map(function(c4) {
        return c4 + "-arrow";
      }).join(" ") : ""),
      viewBox: "0 0 32 16",
      style: _extends2({
        position: "absolute"
      }, arrowStyle)
    }, React.createElement("path", {
      d: "M16 0l16 16H0z",
      fill: "currentcolor"
    }))), children && typeof children === "function" ? children(closePopup, isOpen) : children);
  };
  var overlay = !(on.indexOf("hover") >= 0);
  var ovStyle = isModal ? Style.overlay.modal : Style.overlay.tooltip;
  var content = [overlay && React.createElement("div", {
    key: "O",
    "data-testid": "overlay",
    "data-popup": isModal ? "modal" : "tooltip",
    className: "popup-overlay " + (className !== "" ? className.split(" ").map(function(c4) {
      return c4 + "-overlay";
    }).join(" ") : ""),
    style: _extends2({}, ovStyle, overlayStyle, {
      pointerEvents: closeOnDocumentClick && nested || isModal ? "auto" : "none"
    }),
    onClick: closeOnDocumentClick && nested ? closePopup : void 0,
    tabIndex: -1
  }, isModal && renderContent()), !isModal && renderContent()];
  return React.createElement(React.Fragment, null, renderTrigger(), isOpen && import_react_dom.default.createPortal(content, getRootPopup()));
});

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/index.styles.js
init_Button();
var c = styled_components_esm_default.div.attrs({
  "data-component-name": "Scorecard/Card"
}).withConfig({
  displayName: "indexstyles__c",
  componentId: "sc-1n4frmq-0"
})(["color:var(--text-color-primary);background-color:var(--bg-color-raised);border-radius:4px;border:1px solid var(--border-color-primary);box-shadow:0 0 10px 0 rgba(35,35,35,0.05);flex:1;min-width:300px;padding:20px;"]);
var i = styled_components_esm_default.h3.withConfig({
  displayName: "indexstyles__i",
  componentId: "sc-1n4frmq-1"
})(["font-size:1.2rem;font-weight:bold;margin-bottom:10px;margin-top:0;"]);
var s = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__s",
  componentId: "sc-1n4frmq-2"
})(["display:flex;flex-direction:row;justify-content:space-between;align-items:middle;margin-bottom:20px;"]);
var x = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__x",
  componentId: "sc-1n4frmq-3"
})(["display:flex;flex-direction:column;gap:5px;"]);
var b = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__b",
  componentId: "sc-1n4frmq-4"
})(["display:flex;flex-direction:row;gap:10px;align-items:center;> span:first-child{text-align:right;width:100px;}"]);
var a = styled_components_esm_default.span.withConfig({
  displayName: "indexstyles__a",
  componentId: "sc-1n4frmq-5"
})(["vertical-align:middle;display:inline-block;"]);
var g = styled_components_esm_default(a).withConfig({
  displayName: "indexstyles__g",
  componentId: "sc-1n4frmq-6"
})(["margin-right:0;text-align:right;width:65px;"]);
var f = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__f",
  componentId: "sc-1n4frmq-7"
})(["display:flex;flex-wrap:wrap;gap:20px;margin-bottom:20px;"]);
var m = styled_components_esm_default.span.withConfig({
  displayName: "indexstyles__m",
  componentId: "sc-1n4frmq-8"
})(["display:inline-block;width:10px;height:10px;border-radius:50%;border:1px solid var(--border-color-primary);background-color:var(", ");margin-top:1px;"], (o) => o.colorVariable);
var v = styled_components_esm_default.table.withConfig({
  displayName: "indexstyles__v",
  componentId: "sc-1n4frmq-9"
})(["width:100%;border-spacing:0;border:1px solid var(--border-color-primary);border-radius:var(--border-radius);overflow:auto;table-layout:fixed;thead th{border-bottom:1px solid var(--border-color-primary);padding:10px 15px;background-color:var(--bg-color-raised);&:first-child{width:25%;}}tr.toggle{cursor:pointer;}th,td{padding:6px 16px;text-align:left;}th:has(", "),td:has(", "){padding:2px 4px;}th{font-weight:bold;color:var(--text-color-secondary);cursor:pointer;white-space:nowrap;}tr.nested-hide{display:none;}th.controls-col{width:20px;}"], Button, Button);
var u = styled_components_esm_default.p.withConfig({
  displayName: "indexstyles__u",
  componentId: "sc-1n4frmq-10"
})(["margin:16px 0 32px 0;font-size:16px;color:var(--text-color-secondary);"]);
var n2 = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__n",
  componentId: "sc-1n4frmq-11"
})(["--sidebar-width:var(--catalog-sidebar-width,300px);display:flex;flex-direction:row;font-weight:var(--font-weight-regular);padding:0;color:var(--text-color-secondary);font-size:var(--font-size-base);font-family:var(--font-family-base);line-height:var(--line-height-base);hr{border:0;width:calc(100% + 48px);margin:auto -24px 0 -24px;border-top:1px solid var(--border-color-primary);}a:not([role='button']){text-decoration:none;color:var(--link-color-primary);font-weight:var(--link-font-weight);}@media screen and (max-width:767px){flex-direction:column;}"]);
var h = styled_components_esm_default.input.withConfig({
  displayName: "indexstyles__h",
  componentId: "sc-1n4frmq-12"
})(["border:var(--filter-input-border);min-width:var(--filter-input-min-width);width:100%;outline:none;padding:var(--filter-input-padding);border-radius:var(--filter-input-border-radius);background-color:var(--filter-input-bg-color);color:var(--filter-input-color);font-family:var(--filter-input-font-family);font-size:var(--filter-input-font-size);line-height:var(--filter-input-line-height);&::placeholder{opacity:var(--filter-input-placeholder-opacity);color:var(--filter-input-placeholder-color);}&:hover{color:var(--filter-input-color-hover);border:var(--filter-input-border-hover);}&:focus{color:var(--filter-input-color-focus);border:var(--filter-input-border-focus);}&:-webkit-autofill{background-color:var(--filter-input-bg-color);}"]);
var y = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__y",
  componentId: "sc-1n4frmq-13"
})(["display:flex;flex-direction:row;margin-bottom:10px;border-radius:4px;justify-content:flex-start;"]);
var w = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__w",
  componentId: "sc-1n4frmq-14"
})(["padding:5px 10px;cursor:pointer;font-weight:bold;background-color:", ";margin-left:2px;border-bottom:", ";"], ({
  isActive: o
}) => o ? "var(--bg-color-raised)" : "transparent", ({
  isActive: o
}) => o ? "1px solid var(--text-color-secondary);" : "1px solid transparent");
var C = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__C",
  componentId: "sc-1n4frmq-15"
})(["max-width:100%;overflow:auto;display:", ";"], ({
  isActive: o
}) => o ? "block" : "none");
var k = styled_components_esm_default(n2).withConfig({
  displayName: "indexstyles__k",
  componentId: "sc-1n4frmq-16"
})(["padding:20px 40px;display:block;"]);
var S = styled_components_esm_default(Popup).withConfig({
  displayName: "indexstyles__S",
  componentId: "sc-1n4frmq-17"
})(["&-content{border-radius:var(--border-radius);background-color:var(--button-bg-color-secondary-hover);padding:8px;font-size:14px;}&-arrow{path{fill:var(--button-bg-color-secondary);}}"]);
var j = styled_components_esm_default.span.withConfig({
  displayName: "indexstyles__j",
  componentId: "sc-1n4frmq-18"
})(["font-family:monospace;"]);
var z = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__z",
  componentId: "sc-1n4frmq-19"
})(["width:100%;padding:0 10px;border-left:2px solid ", ";margin:5px 0;"], (o) => o.borderColor || "var(--bg-color-raised)");
var W = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__W",
  componentId: "sc-1n4frmq-20"
})([""]);
var T = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__T",
  componentId: "sc-1n4frmq-21"
})(["padding:5px 10px;background:var(--bg-color-raised);border-bottom:1px solid var(--border-color-primary);"]);
var $ = styled_components_esm_default.pre.withConfig({
  displayName: "indexstyles__",
  componentId: "sc-1n4frmq-22"
})(["font-size:12px;margin:0;padding:10px;"]);
var I2 = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__I",
  componentId: "sc-1n4frmq-23"
})(["border:1px solid var(--border-color-primary);border-radius:3px;margin-top:10px;margin-left:22px;cursor:text;"]);
var P = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__P",
  componentId: "sc-1n4frmq-24"
})(["display:flex;flex-direction:row;cursor:pointer;align-items:center;&.expanded{align-items:flex-start;}", "{margin-right:10px;align-items:flex-start;}"], Button);
var E = styled_components_esm_default.th.withConfig({
  displayName: "indexstyles__E",
  componentId: "sc-1n4frmq-25"
})(["border-bottom:0 !important;span{border-bottom:1px solid var(--border-color-primary);text-align:center;display:block;}"]);
var B = styled_components_esm_default(i).withConfig({
  displayName: "indexstyles__B",
  componentId: "sc-1n4frmq-26"
})(["display:flex;flex-direction:row;justify-content:space-between;gap:10px;"]);
var M = styled_components_esm_default.div.withConfig({
  displayName: "indexstyles__M",
  componentId: "sc-1n4frmq-27"
})(["display:flex;flex-direction:row;align-items:center;gap:5px;white-space:nowrap;"]);
var D = styled_components_esm_default.span.withConfig({
  displayName: "indexstyles__D",
  componentId: "sc-1n4frmq-28"
})(["font-family:'Twemoji Mozilla',Apple Color Emoji,'Segoe UI Emoji','Noto Color Emoji','EmojiOne Color';vertical-align:middle;"]);

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/utils.js
import * as e from "react";
var i2 = "Other";
var l = "Non-conformant";
var m2 = { Error: "--scorecard-color-error", Warn: "--scorecard-color-warning", Pass: "--scorecard-color-success" };
function f2(r3) {
  let o = [];
  return r3.uniqueErrors === 0 && o.push(e.createElement(D, { key: "1" }, "\u2705")), r3.uniqueErrors > 0 && o.push(e.createElement(e.Fragment, { key: "2" }, " ", e.createElement(D, null, "\u274C"), " (", r3.uniqueErrors, ")")), r3.uniqueWarnings > 0 && o.push(e.createElement(e.Fragment, { key: "3" }, " ", e.createElement(D, null, "\u26A0\uFE0F"), " (", r3.uniqueWarnings, ")")), o;
}
function p(r3) {
  return e.useMemo(() => new URLSearchParams(r3.search), [r3.search]);
}
function E2(r3) {
  switch (r3) {
    case "error":
      return "\u274C";
    case "warn":
      return "\u26A0\uFE0F";
    default:
      return "\u2139\uFE0F";
  }
}
function h2(r3) {
  switch (r3) {
    case "error":
      return "red";
    case "warn":
      return "orange";
    default:
      return "blue";
  }
}
function O(r3, o) {
  const n5 = [];
  let s2 = false;
  for (const c4 of Object.values(r3.levels)) {
    for (const u2 of c4.problems)
      u2.ruleId === o && (s2 = true, n5.push(u2));
    if (s2)
      break;
  }
  return n5;
}

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/components.js
init_utils();
init_Button();
init_SubtractIcon();
init_AddIcon();
import * as t from "react";
import { useState as i3 } from "react";

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/Gauge.js
init_styled_components_esm();
import * as r from "react";
function d({
  chunks: e5,
  className: i4
}) {
  const o = e5.map((a4) => a4.title).filter(Boolean).join(", ");
  return r.createElement(n3, {
    "data-component-name": "Scorecard/Gauge",
    className: i4,
    title: o
  }, e5.map((a4, l2) => r.createElement(c2, {
    key: l2,
    share: a4.share,
    colorVariable: a4.colorVariable
  })));
}
var g2 = styled_components_esm_default.span.withConfig({
  displayName: "Gauge__g",
  componentId: "sc-1emwjnt-0"
})(["vertical-align:middle;display:inline-block;margin-right:0;text-align:right;width:70px;"]);
var n3 = styled_components_esm_default.div.withConfig({
  displayName: "Gauge__n",
  componentId: "sc-1emwjnt-1"
})(["display:flex;flex-direction:row;height:10px;width:100%;"]);
var c2 = styled_components_esm_default.div.withConfig({
  displayName: "Gauge__c",
  componentId: "sc-1emwjnt-2"
})(["width:", "%;background-color:var(", ");height:10px;"], (e5) => e5.share, (e5) => e5.colorVariable);

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/components.js
function D2({ level: e5, colorVariable: r3 }) {
  return t.createElement(M, null, t.createElement(m, { colorVariable: r3 }), t.createElement("span", null, e5));
}
function L({ summary: e5 }) {
  const r3 = Object.keys(e5.levels).length;
  return t.createElement(d, { chunks: Object.entries(e5.levels).map(([l2, n5], c4) => ({ share: n5 / e5.total * 100, colorVariable: getScorecardColorVariable(c4, r3), title: `${n5} ${l2}` })) });
}
function P2({ severity: e5 }) {
  return t.createElement(m, { colorVariable: m2[e5] });
}
function A2({ errors: e5, warnings: r3 }) {
  return t.createElement(M, null, t.createElement(m, { colorVariable: `--scorecard-color-${e5 > 0 ? "error" : r3 > 0 ? "warning" : "success"}` }), e5 > 0 ? "Problem" : r3 > 0 ? "Warning" : "Normal");
}
function N({ errors: e5, warnings: r3 }) {
  return t.createElement(m, { colorVariable: `--scorecard-color-${e5 > 0 ? "error" : r3 > 0 ? "warning" : "success"}` });
}
function V({ problem: e5 }) {
  const [r3, l2] = i3(false);
  return t.createElement(P, { onClick: () => l2((n5) => !n5), className: r3 ? "expanded" : "" }, t.createElement(Button, { variant: "text", size: "medium", icon: r3 ? t.createElement(SubtractIcon, null) : t.createElement(AddIcon, null) }), t.createElement(z, { borderColor: h2(e5.severity) }, t.createElement("div", null, t.createElement(W, null, t.createElement(D, null, E2(e5.severity)), " ", e5.message)), r3 ? t.createElement(I2, { onClick: (n5) => n5.stopPropagation() }, t.createElement(T, null, t.createElement("strong", null, e5.location.source.absoluteRef), e5.location.pointer), t.createElement($, null, e5.codeframe)) : null));
}
var T2 = (e5) => t.createElement(V, { problem: e5 });

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/views.js
var import_portal_legacy_ui = __toESM(require_lib(), 1);
init_Button();
init_AddIcon();
init_SubtractIcon();
init_ArrowLeftIcon();
init_utils();
import * as e3 from "react";
import { useCallback as _, useMemo as g4, useState as q, useEffect as K } from "react";
import { useLocation as x4 } from "react-router-dom";

// node_modules/@redocly/realm/dist/client/app/CircularProgress.js
init_styled_components_esm();
import * as r2 from "react";
function t2(e5) {
  return r2.createElement(n4, {
    ...e5
  }, r2.createElement("div", null), r2.createElement("div", null), r2.createElement("div", null), r2.createElement("div", null));
}
var n4 = styled_components_esm_default.div.withConfig({
  displayName: "CircularProgress__n",
  componentId: "sc-5bx806-0"
})(["display:inline-block;position:relative;width:", "px;height:", "px;div{box-sizing:border-box;display:block;position:absolute;width:", "px;height:", "px;margin:0;border:2px solid var(--color-primary-base);border-radius:50%;animation:ring 1.2s cubic-bezier(0.5,0,0.5,1) infinite;border-color:var(--color-primary-base) transparent transparent transparent;}div:nth-child(1){animation-delay:-0.45s;}div:nth-child(2){animation-delay:-0.3s;}div:nth-child(3){animation-delay:-0.15s;}@keyframes ring{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}"], ({
  size: e5
}) => e5 || "60", ({
  size: e5
}) => e5 || "60", ({
  size: e5
}) => e5 || "44", ({
  size: e5
}) => e5 || "44");

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/StatusByLevelWidget.js
init_styled_components_esm();
import * as a2 from "react";
function x2(o) {
  const {
    levels: n5,
    title: c4,
    className: s2
  } = o;
  return a2.createElement(c, {
    "data-component-name": "Scorecard/StatusByLevelWidget",
    className: s2
  }, a2.createElement(i, null, c4), a2.createElement(p2, null, n5.map((r3) => {
    const t4 = r3.total - r3.errors - r3.warnings;
    return a2.createElement(g3, {
      key: r3.name
    }, a2.createElement("span", null, r3.name), a2.createElement(d, {
      chunks: [{
        share: t4 / r3.total * 100,
        colorVariable: "--scorecard-color-success",
        title: `${t4} passed`
      }, {
        share: r3.warnings / r3.total * 100,
        colorVariable: "--scorecard-color-warning",
        title: `${r3.warnings} ${r3.warnings === 1 ? "warning" : "warnings"}`
      }, {
        share: r3.errors / r3.total * 100,
        colorVariable: "--scorecard-color-error",
        title: `${r3.errors} ${r3.errors === 1 ? "error" : "errors"}`
      }]
    }), a2.createElement(g2, null, t4, "/", r3.total));
  })));
}
var p2 = styled_components_esm_default.div.withConfig({
  displayName: "StatusByLevelWidget__p",
  componentId: "sc-qzltez-0"
})(["display:flex;flex-direction:column;gap:5px;"]);
var g3 = styled_components_esm_default.div.withConfig({
  displayName: "StatusByLevelWidget__g",
  componentId: "sc-qzltez-1"
})(["display:flex;flex-direction:row;gap:10px;align-items:center;> span:first-child{text-align:right;width:100px;}"]);

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/table.js
var import_react_table = __toESM(require_react_table(), 1);
init_styled_components_esm();
import e2, { useMemo as f3, useState as y2, useEffect as b2 } from "react";
function P3({
  data: d2,
  columns: a4,
  sortBy: l2,
  empty: i4,
  renderRowSubComponent: o,
  subRowKey: p4 = "subrows",
  getSubRows: m3,
  headGroup: n5
}) {
  const s2 = f3(() => l2, [l2]), {
    getTableProps: c4,
    getTableBodyProps: g5,
    headerGroups: h4,
    rows: u2,
    prepareRow: S2
  } = (0, import_react_table.useTable)({
    columns: a4,
    autoResetExpanded: true,
    data: d2,
    getSubRows: (t4) => t4?.[p4] || [],
    ...l2 ? {
      initialState: {
        sortBy: s2
      }
    } : {}
  }, import_react_table.useSortBy, import_react_table.useExpanded);
  return e2.createElement(v, {
    ...c4()
  }, e2.createElement("thead", null, n5, h4.map((t4) => e2.createElement("tr", {
    ...t4.getHeaderGroupProps()
  }, t4.headers.map((r3) => e2.createElement("th", {
    ...r3.getHeaderProps(r3.getSortByToggleProps()),
    style: {
      maxWidth: r3.maxWidth,
      width: r3.width
    }
  }, r3.render("Header"), r3.disableSortBy ? null : e2.createElement(N2, null, r3.isSorted ? r3.isSortedDesc ? " \u25BE" : " \u25B4" : " \u21D5")))))), e2.createElement("tbody", {
    ...g5()
  }, u2.length ? u2.filter((t4) => t4.depth === 0).map((t4) => (S2(t4), e2.createElement(e2.Fragment, {
    key: t4.id
  }, e2.createElement("tr", null, t4.cells.map((r3) => e2.createElement("td", {
    ...r3.getCellProps(),
    style: {
      width: t4.isExpanded ? 40 : void 0
    }
  }, r3.render("Cell")))), t4.isExpanded && o ? e2.createElement(B2, {
    row: t4,
    getSubRows: m3,
    staticSubRows: t4.subRows,
    colSpan: a4.length - 1,
    renderRowSubComponent: o
  }) : null))) : e2.createElement("tr", null, e2.createElement(H, {
    colSpan: a4.length
  }, i4 || "No results to show"))));
}
function B2({
  row: d2,
  getSubRows: a4,
  staticSubRows: l2,
  colSpan: i4,
  renderRowSubComponent: o
}) {
  const [p4, m3] = y2(a4 ? [] : l2 || []);
  return b2(() => {
    a4 && a4(d2.original).then((n5) => n5.map((s2, c4) => ({
      id: String(c4),
      original: s2
    }))).then((n5) => m3(n5));
  }, [d2.original, a4]), e2.createElement(e2.Fragment, null, p4.map(({
    original: n5,
    id: s2
  }) => e2.createElement("tr", {
    key: s2
  }, e2.createElement("td", null, "\xA0"), e2.createElement("td", {
    colSpan: i4,
    style: {
      paddingTop: 0
    }
  }, o(n5)))));
}
var H = styled_components_esm_default.td.withConfig({
  displayName: "table__H",
  componentId: "sc-1l9njs8-0"
})(["text-align:center !important;padding:32px;"]);
var N2 = styled_components_esm_default.span.withConfig({
  displayName: "table__N",
  componentId: "sc-1l9njs8-1"
})(["font-family:monospace;"]);

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/useDetailedScorecard.js
import { useEffect as a3, useState as c3 } from "react";

// node_modules/@redocly/realm/dist/server/plugins/scorecard/shared-utils.js
function t3(r3) {
  return r3 === "/" ? "index.json" : r3.substring(1, r3.length - 1) + ".json";
}

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/useDetailedScorecard.js
function h3(e5) {
  const [t4, o] = c3(), [n5, r3] = c3(true);
  return a3(() => {
    r3(true), f4(e5).then((s2) => {
      o(s2), r3(false);
    });
  }, [e5]), { scorecard: t4, isLoading: n5 };
}
function f4(e5) {
  return fetch(`/_scorecard/${t3(e5)}`).then((t4) => t4.json()).catch(() => {
  });
}

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/views.js
function Te(p4) {
  const d2 = x4(), { data: c4, levelNames: a4, hasPublishedAt: t4, hasTeam: o, teamLabel: n5 } = p4, E3 = _((s2, i4, r3) => {
    const m3 = s2.values[r3] ? new Date(s2.values[r3]).getTime() : 0, l2 = i4.values[r3] ? new Date(i4.values[r3]).getTime() : 0;
    return m3 > l2 ? 1 : -1;
  }, []), u2 = g4(() => [{ id: "title", Header: "API", accessor: "api.title", width: "25%", Cell: ({ value: s2, row: { original: i4 } }) => e3.createElement(I, { to: d2.pathname + "?api=" + encodeURIComponent(i4.api.link) }, s2) }, t4 ? { Header: "Published at", accessor: "api.publishedAt", sortType: E3, Cell: ({ value: s2 }) => s2 ? new Date(s2).toLocaleDateString() : "-" } : void 0, o ? { Header: n5, accessor: "api.team" } : void 0, { id: "level", Header: "Level", accessor: "scorecard.scorecardLevel", Cell: ({ value: s2, row: { original: i4 } }) => e3.createElement(D2, { level: s2, colorVariable: getScorecardColorVariable(i4?.scorecard.scorecardLevelIdx, a4.length + 1) }) }, ...a4.map((s2) => ({ id: s2, Header: `${s2}`, accessor: "scorecard.levels", Cell: ({ value: i4 }) => i4?.[s2] ? f2(i4?.[s2]) : null }))].filter(A), [E3, a4, d2.pathname, t4, o, n5]);
  return e3.createElement(P3, { columns: u2, data: c4, sortBy: [{ id: "title", desc: false }] });
}
function He(p4) {
  const d2 = x4(), { data: c4 } = p4, a4 = g4(() => [{ Header: "Rules", accessor: "ruleId", width: void 0, Cell: ({ value: t4 }) => e3.createElement(I, { to: d2.pathname + "?ruleId=" + encodeURIComponent(t4) }, t4) }, { id: "status", Header: "Status", accessor: "status", width: 200, Cell: ({ row: { original: t4 } }) => e3.createElement(A2, { errors: t4.errorApisCount, warnings: t4.warningApisCount }) }, { Header: "Problem APIs", width: 200, accessor: "apis", Cell: ({ value: t4 }) => t4.length, sortDescFirst: true }, { Header: "Problem count", width: 200, accessor: "count", sortDescFirst: true }], [d2.pathname]);
  return e3.createElement(P3, { columns: a4, data: c4, sortBy: [{ id: "status", desc: true }] });
}
function ke(p4) {
  const { data: d2, levelNames: c4, filters: a4, setActiveTab: t4, teamLabel: o, teamProperty: n5 } = p4, E3 = g4(() => [{ id: "team", Header: `API ${o}`, accessor: "team", width: "25%", Cell: ({ value: u2 }) => e3.createElement("a", { href: "#", onClick: (s2) => {
    s2.preventDefault(), t4("apis"), a4.find((i4) => i4.property === n5)?.selectOption(u2);
  } }, u2) }, ...[l, ...c4].map((u2) => ({ id: u2, Header: `${u2}`, accessor: `levels.${u2}.apis` }))], [a4, c4, t4, o, n5]);
  return e3.createElement(P3, { columns: E3, data: d2, sortBy: [{ id: "team", desc: false }], headGroup: e3.createElement("tr", null, e3.createElement(E, { style: { width: "25%" } }), e3.createElement(E, { colSpan: c4.length + 1 }, e3.createElement("span", null, "APIs by level"))) });
}
function ue(p4) {
  const { data: d2, title: c4 } = p4, a4 = g4(() => [{ id: "expand", maxWidth: 40, width: 40, Header: () => null, disableSortBy: true, Cell: ({ row: t4 }) => t4.canExpand ? e3.createElement(Button, { ...t4.getToggleRowExpandedProps(), variant: "text", size: "medium", icon: t4.isExpanded ? e3.createElement(SubtractIcon, null) : e3.createElement(AddIcon, null) }) : null }, { Header: "Rules", accessor: "ruleId", width: void 0, Cell: ({ value: t4, row: o }) => o.canExpand ? e3.createElement("span", { ...o.getToggleRowExpandedProps() }, t4) : null }, { Header: "Status", accessor: "status", width: 200, Cell: ({ value: t4 }) => e3.createElement(A2, { errors: t4?.errorsCount, warnings: t4?.warningsCount }), disableSortBy: true }, { Header: "Problem count", accessor: "problemsCount", width: 200, sortDescFirst: true }], []);
  return e3.createElement(P3, { columns: a4, data: d2, sortBy: [{ id: "ruleId", desc: false }], empty: e3.createElement(e3.Fragment, null, "\u2705 This API is compliant with ", e3.createElement("strong", null, c4), " level rules"), renderRowSubComponent: T2, subRowKey: "problems" });
}
function De(p4) {
  const d2 = x4(), { slug: c4, data: a4, totalApis: t4, hasTeam: o, hasPublishedAt: n5, teamLabel: E3 } = p4, { apis: u2 } = a4, s2 = g4(() => [{ id: "expand", maxWidth: 40, width: 40, Header: () => null, disableSortBy: true, Cell: ({ row: r3 }) => r3.canExpand ? e3.createElement(Button, { ...r3.getToggleRowExpandedProps(), variant: "text", size: "medium", icon: r3.isExpanded ? e3.createElement(SubtractIcon, null) : e3.createElement(AddIcon, null) }) : null }, { Header: "API", accessor: "title", width: void 0 }, n5 ? { Header: "Published at", width: void 0, accessor: "publishedAt", Cell: ({ value: r3 }) => r3 ? new Date(r3).toLocaleDateString() : "-" } : void 0, o ? { Header: E3, width: void 0, accessor: "team", Cell: ({ value: r3 }) => r3 || i2 } : void 0, { Header: "Problem count", width: 200, accessor: "count", Cell: ({ value: r3 }) => r3 || 0, sortDescFirst: true }].filter(A), [o, n5, E3]), i4 = g4(() => Object.entries(a4.teams).sort((r3, m3) => m3[1] - r3[1]), [a4.teams]);
  return e3.createElement(k, null, e3.createElement(Button, { icon: e3.createElement(ArrowLeftIcon, null), iconPosition: "left", variant: "ghost", size: "large", to: d2.pathname }, "Back to dashboard"), e3.createElement("h1", null, "Rule ", c4), e3.createElement(f, null, e3.createElement(c, null, e3.createElement(i, null, "Rule status"), e3.createElement(s, null, e3.createElement("div", null, e3.createElement(a, null, t4), e3.createElement("br", null), "APIs"), e3.createElement("div", null, e3.createElement(M, null, e3.createElement(a, { style: { width: "40px", textAlign: "right" } }, t4 - a4.warningApisCount - a4.errorApisCount), e3.createElement(P2, { severity: "Pass" })), e3.createElement(M, null, e3.createElement(a, { style: { width: "40px", textAlign: "right" } }, a4.warningApisCount), e3.createElement(P2, { severity: "Warn" })), e3.createElement(M, null, e3.createElement(a, { style: { width: "40px", textAlign: "right" } }, a4.errorApisCount), e3.createElement(P2, { severity: "Error" }))))), e3.createElement(c, null, e3.createElement(i, null, "Problems by level"), e3.createElement(x, null, Object.entries(a4.levels).map(([r3, m3]) => e3.createElement(b, { key: r3 }, e3.createElement("span", null, r3), e3.createElement(d, { chunks: [{ share: m3.errors / a4.count * 100, colorVariable: "--scorecard-color-error" }, { share: m3.warnings / a4.count * 100, colorVariable: "--scorecard-color-warning" }] }), e3.createElement(g2, null, m3.errors + m3.warnings))))), e3.createElement(c, null, e3.createElement(i, null, `Problems by ${E3}`), e3.createElement(x, null, i4.slice(0, 4).map(([r3, m3]) => e3.createElement(b, { key: r3 }, e3.createElement("span", { style: { flex: 1, textAlign: "left" } }, r3), e3.createElement(a, null, m3)))))), e3.createElement(P3, { columns: s2, data: u2, sortBy: [{ id: "title", desc: false }], renderRowSubComponent: T2, subRowKey: "problems", getSubRows: (r3) => f4(r3.link).then((m3) => O(m3, c4)) }));
}
function Ie(p4) {
  const d2 = x4(), { slug: c4, api: a4, teamLabel: t4 } = p4, { api: o } = a4 || {}, { scorecard: n5, isLoading: E3 } = h3(c4), u2 = n5?.levels || {}, [s2, i4] = q(Object.keys(u2)[0]), r3 = g4(() => o?.publishedAt instanceof Date ? o?.publishedAt.toLocaleDateString() : o?.publishedAt, [o]);
  K(() => {
    if (n5) {
      const l2 = n5.levels || {};
      i4(Object.keys(l2)[0]);
    }
  }, [n5]);
  const m3 = g4(() => {
    if (!n5?.levels)
      return {};
    const l2 = {};
    for (const f5 of Object.keys(n5.levels)) {
      const N3 = n5.levels[f5].problems.reduce((C2, h4) => (C2[h4.ruleId] || (C2[h4.ruleId] = []), C2[h4.ruleId].push(h4), C2), {});
      l2[f5] = Object.entries(N3).map(([C2, h4]) => ({ ruleId: C2, problems: [...h4.filter((b3) => b3.severity === "error"), ...h4.filter((b3) => b3.severity === "warn")], problemsCount: h4.length, status: { errorsCount: h4.filter((b3) => b3.severity === "error").length, warningsCount: h4.filter((b3) => b3.severity === "warn").length } }));
    }
    return l2;
  }, [n5?.levels]);
  return E3 ? e3.createElement(import_portal_legacy_ui.Flex, { justifyContent: "center", mt: "2em" }, e3.createElement(t2, null)) : n5 ? e3.createElement(k, null, e3.createElement(Button, { icon: e3.createElement(ArrowLeftIcon, null), iconPosition: "left", variant: "ghost", size: "large", to: d2.pathname }, "Back to dashboard"), e3.createElement("h1", null, o?.title || c4), e3.createElement(u, null, r3 && e3.createElement(e3.Fragment, null, "Published at: ", (/* @__PURE__ */ new Date()).toLocaleString(void 0, { timeZoneName: "short" }), e3.createElement("br", null)), e3.createElement(I, { to: c4, external: true }, "Documentation")), e3.createElement(f, null, e3.createElement(c, null, e3.createElement(B, null, e3.createElement("span", null, "Scorecard level"), e3.createElement(D2, { level: n5.scorecardLevel, colorVariable: getScorecardColorVariable(n5.scorecardLevelIdx, Object.keys(u2).length) })), e3.createElement(s, null, e3.createElement("div", null, "Compliance by level"), e3.createElement("div", null, Object.entries(n5.levels).map(([l2, f5]) => e3.createElement(M, { key: l2 }, e3.createElement(a, { style: { width: "100px", textAlign: "right" } }, l2), e3.createElement(N, { errors: f5.errors, warnings: f5.warnings })))))), e3.createElement(x2, { title: "Rules compliance", levels: Object.entries(n5.levels).map(([l2, f5]) => ({ errors: f5.uniqueErrors, warnings: f5.uniqueWarnings, total: p4.rulesPerLevel[l2].length, name: l2 })) }), e3.createElement(c, null, e3.createElement(i, null, t4), e3.createElement(a, { style: { fontWeight: "normal" } }, o?.team))), e3.createElement(y, { style: { justifyContent: "flex-start" } }, Object.keys(n5.levels).map((l2) => e3.createElement(w, { key: l2, isActive: s2 === l2, onClick: () => i4(l2) }, e3.createElement(M, null, e3.createElement("span", null, l2), " ", e3.createElement(N, { errors: n5.levels[l2].errors, warnings: n5.levels[l2].warnings }))))), Object.keys(u2).map((l2) => e3.createElement(C, { key: l2, isActive: s2 === l2 }, e3.createElement(ue, { title: l2, data: m3[l2] })))) : e3.createElement("div", null, "Scorecard not found");
}

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/useData.js
import { useMemo as p3, useState as H2, useCallback as J } from "react";
function j2(h4, d2) {
  return Object.entries(h4).find(([g5]) => d2.startsWith(g5))?.[1];
}
function ee(h4) {
  const { catalogConfig: d2, scorecardConfig: g5, scorecardInfo: c4 } = h4.pageProps, C2 = n("catalog"), S2 = C2.some((e5) => e5.metadata?.publishedAt || e5.metadata?.createdAt), A3 = g5.teamMetadataProperty?.label || "Team", f5 = g5.teamMetadataProperty?.property || "team", y3 = g5.teamMetadataProperty?.default, T4 = C2.some((e5) => e5.metadata?.[f5] || e5.metadata?.owner), k2 = p3(() => ({ ...d2, filters: [{ title: "Scorecard level", property: "scorecardLevel", options: [l, ...c4.levelNames], type: "checkboxes" }, S2 ? { title: "Published date", property: "publishedAt", type: "date-range" } : void 0, T4 && !d2.filters?.find((e5) => e5.property === f5) ? { title: A3, property: f5, type: "select", ...y3 && { missingCategoryName: y3 } } : void 0, ...d2.filters || []].filter(A) }), [d2, T4, S2, A3, y3, f5, c4.levelNames]), N3 = n("scorecard"), q2 = C2.filter((e5) => !!j2(N3, e5.link || "")), { filterTerm: M3, setFilterTerm: D3, groups: P4, filters: E3 } = te(k2, q2), u2 = p3(() => P4.flatMap((e5) => e5.items).map((e5) => ({ api: { ...e5, publishedAt: e5.publishedAt || e5.createdAt, team: e5[f5] || e5.owner }, scorecard: j2(N3, e5.link) })).filter((e5) => e5.scorecard), [JSON.stringify(P4), N3, f5]), w2 = c4.levelNames, z2 = p3(() => {
    const e5 = { total: u2.length, levels: {} };
    return [l, ...w2].forEach((r3) => {
      e5.levels[r3] = u2.filter((s2) => s2.scorecard?.scorecardLevel === r3).length;
    }), e5;
  }, [u2, w2]), O2 = p3(() => w2.map((e5) => {
    const r3 = { error: /* @__PURE__ */ new Set(), warn: /* @__PURE__ */ new Set() }, s2 = { errors: 0, warnings: 0 };
    for (const t4 of u2) {
      if (!t4.scorecard)
        continue;
      const o = t4.scorecard.levels[e5];
      if (o) {
        s2.errors += o.errors || 0, s2.warnings += o.warnings || 0;
        for (const n5 of o.problems)
          r3[n5.severity]?.add(n5.ruleId);
      }
    }
    return { name: e5, count: s2, uniqueCount: { errors: r3.error.size, warnings: r3.warn.size } };
  }), [u2, w2]), R3 = p3(() => O2.reduce((e5, r3) => e5 + r3.count.errors + r3.count.warnings, 0), [O2]), V2 = p3(() => {
    const e5 = {};
    for (const r3 of c4.rules)
      e5[r3] = { count: 0, apis: [], ruleId: r3, status: 0, apisCount: 0, warningApisCount: 0, errorApisCount: 0, teams: {}, levels: c4.levelNames.reduce((s2, t4) => (s2[t4] = { warnings: 0, errors: 0 }, s2), {}) };
    for (const r3 of u2) {
      if (!r3.scorecard)
        continue;
      const { scorecard: s2, api: t4 } = r3, o = /* @__PURE__ */ new Set();
      for (const n5 of Object.keys(s2?.levels || {})) {
        const l2 = s2.levels[n5];
        for (const m3 of l2?.problems || []) {
          const a4 = m3.ruleId;
          if (!o.has(a4))
            if (e5[a4] = e5[a4] || { count: 0, apis: [], ruleId: a4, status: 0, apisCount: 0, levels: {} }, e5[a4].count++, typeof t4.team == "string" && (e5[a4].teams[t4.team] = (e5[a4].teams[t4.team] || 0) + 1), e5[a4].levels[n5] = e5[a4].levels[n5] || { warnings: 0, errors: 0 }, m3.severity === "error" ? (e5[a4].levels[n5].errors++, e5[a4].errorApisCount++) : (e5[a4].levels[n5].warnings++, e5[a4].warningApisCount++), !e5[a4].apis.find((b3) => b3.link === t4.link))
              e5[a4].apis.push({ ...t4, count: 1, severity: m3.severity, problems: [m3] });
            else {
              const b3 = e5[a4].apis.find((_2) => _2.link === t4.link);
              b3 && (b3.count++, b3.problems.push(m3));
            }
        }
        for (const m3 of l2?.problems || [])
          o.add(m3.ruleId);
      }
    }
    for (const r3 of Object.values(e5))
      r3.apisCount = r3.apis.length, r3.status = r3.apisCount > 0 ? 1 : 0, r3.warningApisCount = r3.apis.filter((s2) => s2.severity === "warning").length, r3.errorApisCount = r3.apis.filter((s2) => s2.severity === "error").length;
    return Object.values(e5).sort((r3, s2) => {
      let t4 = r3.ruleId, o = s2.ruleId;
      return t4 < o ? -1 : t4 > o ? 1 : 0;
    });
  }, [u2, c4.levelNames, c4.rules]), [i4, B3] = H2({ property: "below", direction: "desc" }), W3 = J((e5) => {
    i4.property === e5 ? B3((r3) => ({ ...r3, direction: r3.direction === "asc" ? "desc" : "asc" })) : B3({ property: e5, direction: "asc" });
  }, [i4]), { sortedStatsByTeam: x5, statsByTeam: I3 } = p3(() => {
    const e5 = {}, r3 = {};
    for (const s2 of u2) {
      if (!s2.scorecard)
        continue;
      const { api: t4 } = s2, o = t4.team ? String(t4.team) : y3 || i2;
      if (!o)
        continue;
      e5[o] = e5[o] || { team: o, below: 0, minimum: 0, highest: 0, levels: {} };
      const n5 = r3[o] = r3[o] || {};
      for (const l2 of [l, ...c4.levelNames]) {
        e5[o].levels[l2] = e5[o].levels[l2] || { errors: 0, warnings: 0, uniqueErrors: 0, uniqueWarnings: 0, apis: 0 }, n5[l2] = n5[l2] || { error: /* @__PURE__ */ new Set(), warn: /* @__PURE__ */ new Set() }, e5[o].levels[l2].errors += s2.scorecard?.levels[l2]?.errors || 0, e5[o].levels[l2].warnings += s2.scorecard?.levels[l2]?.warnings || 0, e5[o].levels[l2].apis += s2.scorecard.scorecardLevel === l2 ? 1 : 0;
        for (const m3 of s2.scorecard?.levels[l2]?.problems || [])
          n5[l2][m3.severity]?.add(m3.ruleId);
      }
    }
    for (const s2 of Object.keys(e5))
      for (const t4 of Object.keys(e5[s2].levels))
        e5[s2].levels[t4].uniqueErrors = r3[s2][t4].error.size, e5[s2].levels[t4].uniqueWarnings = r3[s2][t4].warn.size;
    return { sortedStatsByTeam: Object.values(e5).sort((s2, t4) => {
      let o = s2[i4.property], n5 = t4[i4.property];
      return ["team", "below", "minimum", "highest"].includes(i4.property) || (o = s2.levels[i4.property].errors * 1e3 + s2.levels[i4.property].warnings, n5 = t4.levels[i4.property].errors * 1e3 + t4.levels[i4.property].warnings), o < n5 ? i4.direction === "asc" ? -1 : 1 : o > n5 ? i4.direction === "asc" ? 1 : -1 : 0;
    }), statsByTeam: e5 };
  }, [u2, c4.levelNames, i4.direction, i4.property, y3]), F = p3(() => Object.values(I3).sort((e5, r3) => r3.levels[l].apis - e5.levels[l].apis).filter((e5) => e5.levels[l].apis > 0), [I3]);
  return { apis: u2, summary: z2, problemsByStatus: O2, totalProblems: R3, problemsByRule: V2, sortedStatsByTeam: x5, handleSortRulesTeams: W3, nonConformantByTeam: F, filterTerm: M3, setFilterTerm: D3, groups: P4, filters: E3, scorecardInfo: c4, catalogConfig: k2, hasTeam: T4, hasPublishedAt: S2, teamLabel: A3, teamProperty: f5 };
}

// node_modules/@redocly/realm/dist/server/plugins/scorecard/template/index.js
function fe(I3) {
  const {
    apis: n5,
    summary: s2,
    problemsByRule: u2,
    nonConformantByTeam: N3,
    sortedStatsByTeam: p4,
    filterTerm: o,
    setFilterTerm: C2,
    filters: m3,
    scorecardInfo: d2,
    hasTeam: a4,
    hasPublishedAt: h4,
    catalogConfig: y3,
    teamLabel: r3,
    teamProperty: x5
  } = ee(I3), A3 = {
    apis: "APIs",
    rules: "Rules",
    ...a4 && {
      teams: r3
    }
  }, D3 = R2(), [v2, P4] = e4.useState(false), [c4, f5] = W2("apis"), T4 = p(D3), l2 = T4.get("api") || "", S2 = L2(() => l2 ? n5.find((t4) => t4.api.link === l2) : void 0, [n5, l2]), i4 = T4.get("ruleId") || "", V2 = L2(() => i4 ? u2.find((t4) => t4.ruleId === i4) : void 0, [u2, i4]);
  return useModalScrollLock(v2), l2 && S2 ? e4.createElement(Ie, {
    slug: l2,
    api: S2,
    teamLabel: r3,
    rulesPerLevel: d2.rulesPerLevel
  }) : i4 && V2 ? e4.createElement(De, {
    slug: i4,
    data: V2,
    totalApis: n5.length,
    hasTeam: a4,
    hasPublishedAt: h4,
    teamLabel: r3
  }) : e4.createElement(import_portal_legacy_ui2.HighlightContext.Provider, {
    value: [o]
  }, e4.createElement(CatalogPageWrapper, null, e4.createElement(Ee, {
    menu: e4.createElement(FilterContent, {
      setFilterTerm: C2,
      filters: m3,
      filterTerm: o,
      filterValuesCasing: y3.filterValuesCasing
    })
  }), v2 && e4.createElement(FilterPopover, {
    onClose: () => P4(false),
    setFilterTerm: C2,
    filterTerm: o,
    filters: m3,
    filterValuesCasing: y3.filterValuesCasing
  }), e4.createElement(CatalogActions, {
    onOpenFilter: () => P4(true),
    filters: m3,
    filterTerm: o
  }), e4.createElement(CatalogPageContent, {
    id: "scorecard-page-content"
  }, e4.createElement(CatalogPageDescriptionWrapper, null, e4.createElement(CatalogTitle, null, "API design scorecard"), e4.createElement(CatalogDescription, null, "See the health of your API designs.")), e4.createElement(f, null, e4.createElement(c, null, e4.createElement(i, null, "Scorecard status"), e4.createElement(s, null, e4.createElement("div", null, e4.createElement(a, null, s2.total), e4.createElement("br", null), "APIs"), e4.createElement("div", null, Object.entries(s2.levels).map(([t4, E3], O2) => e4.createElement(M, {
    key: t4
  }, e4.createElement(a, {
    style: {
      width: "40px",
      textAlign: "right"
    }
  }, E3), e4.createElement(D2, {
    level: t4,
    colorVariable: getScorecardColorVariable(O2, Object.values(s2.levels).length)
  }))))), e4.createElement(L, {
    summary: s2
  })), a4 && e4.createElement(c, null, e4.createElement(i, null, `${l} APIs by ${r3}`), e4.createElement(x, null, N3.slice(0, 4).map((t4, E3) => e4.createElement(b, {
    key: E3
  }, e4.createElement("span", {
    style: {
      flex: 1,
      textAlign: "left"
    }
  }, t4.team), e4.createElement(a, null, t4.levels[l].apis))), p4.length > 4 && e4.createElement("a", {
    href: "#",
    onClick: () => f5("teams")
  }, "See all (", p4.length, ")")))), e4.createElement(y, null, Object.keys(A3).map((t4) => t4 && e4.createElement(w, {
    key: t4,
    isActive: c4 === t4,
    onClick: () => f5(t4)
  }, A3[t4]))), e4.createElement(C, {
    isActive: c4 === "apis"
  }, e4.createElement(Te, {
    data: n5,
    levelNames: d2.levelNames,
    hasTeam: a4,
    hasPublishedAt: h4,
    teamLabel: r3
  })), e4.createElement(C, {
    isActive: c4 === "rules"
  }, e4.createElement(He, {
    data: u2
  })), a4 && e4.createElement(C, {
    isActive: c4 === "teams"
  }, e4.createElement(ke, {
    data: p4,
    levelNames: d2.levelNames,
    filters: m3,
    setActiveTab: f5,
    teamLabel: r3,
    teamProperty: x5
  })))));
}
var Ee = styled_components_esm_default(Sidebar).withConfig({
  displayName: "template__Ee",
  componentId: "sc-132jdhe-0"
})(["display:none;@media screen and (min-width:", "){display:flex;}--menu-container-padding-top:0;"], breakpoints.medium);
export {
  fe as default
};
