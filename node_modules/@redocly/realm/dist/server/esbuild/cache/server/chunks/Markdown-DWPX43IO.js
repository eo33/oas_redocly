import { createRequire as topLevelCreateRequire } from 'module';
 const require = topLevelCreateRequire(import.meta.url);
import {
  PageNavigation
} from "./chunk-YLDZHCE2.js";
import {
  Breadcrumbs,
  EditPageButton,
  Feedback,
  Markdown,
  TableOfContent,
  init_Breadcrumbs,
  init_EditPageButton,
  init_Feedback,
  init_Markdown,
  init_TableOfContent
} from "./chunk-AB7LF64Z.js";
import "./chunk-WLDWULA7.js";
import "./chunk-XQXU7C5Q.js";
import "./chunk-SX3NFZJN.js";
import {
  DEFAULT_LOCALE_PLACEHOLDER,
  IS_BROWSER,
  breakpoints,
  extendDetailsBehaviour,
  init_constants,
  init_hooks,
  init_styled_components_esm,
  init_utils,
  onDocumentReady,
  styled_components_esm_default,
  useThemeConfig,
  useThemeHooks
} from "./chunk-WNBJGIID.js";
import "./chunk-R4PATEVC.js";
import "./chunk-35AYGKFE.js";

// node_modules/@redocly/theme/src/core/templates/Markdown.tsx
init_hooks();
import * as React3 from "react";
import { useLocation } from "react-router-dom";

// node_modules/@redocly/theme/src/layouts/DocumentationLayout.tsx
init_styled_components_esm();
init_EditPageButton();
init_utils();
import React2 from "react";

// node_modules/@redocly/theme/src/components/LastUpdated/LastUpdated.tsx
init_styled_components_esm();
import * as React from "react";

// node_modules/timeago.js/esm/lang/en_US.js
var EN_US = ["second", "minute", "hour", "day", "week", "month", "year"];
function en_US_default(diff, idx) {
  if (idx === 0)
    return ["just now", "right now"];
  var unit = EN_US[Math.floor(idx / 2)];
  if (diff > 1)
    unit += "s";
  return [diff + " " + unit + " ago", "in " + diff + " " + unit];
}

// node_modules/timeago.js/esm/lang/zh_CN.js
var ZH_CN = ["\u79D2", "\u5206\u949F", "\u5C0F\u65F6", "\u5929", "\u5468", "\u4E2A\u6708", "\u5E74"];
function zh_CN_default(diff, idx) {
  if (idx === 0)
    return ["\u521A\u521A", "\u7247\u523B\u540E"];
  var unit = ZH_CN[~~(idx / 2)];
  return [diff + " " + unit + "\u524D", diff + " " + unit + "\u540E"];
}

// node_modules/timeago.js/esm/register.js
var Locales = {};
var register = function(locale, func) {
  Locales[locale] = func;
};
var getLocale = function(locale) {
  return Locales[locale] || Locales["en_US"];
};

// node_modules/timeago.js/esm/utils/date.js
var SEC_ARRAY = [
  60,
  60,
  24,
  7,
  365 / 7 / 12,
  12
];
function toDate(input) {
  if (input instanceof Date)
    return input;
  if (!isNaN(input) || /^\d+$/.test(input))
    return new Date(parseInt(input));
  input = (input || "").trim().replace(/\.\d+/, "").replace(/-/, "/").replace(/-/, "/").replace(/(\d)T(\d)/, "$1 $2").replace(/Z/, " UTC").replace(/([+-]\d\d):?(\d\d)/, " $1$2");
  return new Date(input);
}
function formatDiff(diff, localeFunc) {
  var agoIn = diff < 0 ? 1 : 0;
  diff = Math.abs(diff);
  var totalSec = diff;
  var idx = 0;
  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {
    diff /= SEC_ARRAY[idx];
  }
  diff = Math.floor(diff);
  idx *= 2;
  if (diff > (idx === 0 ? 9 : 1))
    idx += 1;
  return localeFunc(diff, idx, totalSec)[agoIn].replace("%s", diff.toString());
}
function diffSec(date, relativeDate) {
  var relDate = relativeDate ? toDate(relativeDate) : /* @__PURE__ */ new Date();
  return (+relDate - +toDate(date)) / 1e3;
}

// node_modules/timeago.js/esm/format.js
var format = function(date, locale, opts) {
  var sec = diffSec(date, opts && opts.relativeDate);
  return formatDiff(sec, getLocale(locale));
};

// node_modules/timeago.js/esm/index.js
register("en_US", en_US_default);
register("zh_CN", zh_CN_default);

// node_modules/@redocly/theme/src/components/LastUpdated/LastUpdated.tsx
init_hooks();
init_constants();
var FORMATS = {
  timeago: (date, locale) => format(date, locale),
  iso: (date) => date.toISOString().split("T")[0],
  short: (date, locale) => date.toLocaleDateString(locale, {
    month: "short",
    day: "numeric",
    year: "numeric"
  }),
  long: (date, locale) => date.toLocaleDateString(locale, {
    month: "long",
    day: "numeric",
    year: "numeric"
  })
};
function LastUpdated(props) {
  const {
    markdown: {
      lastUpdatedBlock = {}
    } = {}
  } = useThemeConfig();
  const {
    useTranslate,
    useL10nConfig
  } = useThemeHooks();
  const {
    translate
  } = useTranslate();
  const {
    currentLocale
  } = useL10nConfig();
  if (lastUpdatedBlock?.hide) {
    return null;
  }
  const lastModified = props.lastModified;
  const format2 = props.format || lastUpdatedBlock.format || "timeago";
  const locale = props.locale || lastUpdatedBlock.locale || (currentLocale !== DEFAULT_LOCALE_PLACEHOLDER ? currentLocale || "en-US" : "en-US");
  const isoDate = lastModified.toISOString().split("T")[0];
  const lastUpdatedString = FORMATS[format2](lastModified, locale);
  const translationKey = format2 === "timeago" ? "page.lastUpdated.timeago" : "page.lastUpdated.on";
  const text = format2 === "timeago" ? translate(translationKey, "Last updated") + " " : translate(translationKey, "Last updated on");
  return /* @__PURE__ */ React.createElement(LastUpdatedWrapper, { className: props.className, "data-component-name": "LastUpdated/LastUpdated", rawOnPrint: format2 === "timeago", "data-print-datetime": isoDate, "data-translation-key": translationKey }, text, " ", /* @__PURE__ */ React.createElement("time", { dateTime: isoDate }, lastUpdatedString));
}
var LastUpdatedWrapper = styled_components_esm_default.div.withConfig({
  displayName: "LastUpdated__LastUpdatedWrapper",
  componentId: "sc-1wktrwl-0"
})(["color:var(--last-updated-text-color);font-size:var(--last-updated-font-size);font-family:var(--last-updated-font-family);line-height:var(--last-updated-line-height);padding-bottom:30px;", ""], ({
  rawOnPrint
}) => rawOnPrint && `@media print {
      time {
        display: none;
      }
      &::after {
        content: attr(data-print-datetime);
      }
    }
  `);

// node_modules/@redocly/theme/src/layouts/DocumentationLayout.tsx
init_Breadcrumbs();
function DocumentationLayout({
  tableOfContent,
  feedback,
  config,
  editPage,
  lastModified,
  nextPage,
  prevPage,
  className,
  children
}) {
  const {
    editPage: themeEditPage
  } = config || {};
  const mergedConf = editPage ? {
    ...themeEditPage,
    ...editPage
  } : void 0;
  return /* @__PURE__ */ React2.createElement(LayoutWrapper, { "data-component-name": "Layout/DocumentationLayout", className }, /* @__PURE__ */ React2.createElement(ContentWrapper, { withToc: !config?.toc?.hide }, /* @__PURE__ */ React2.createElement(Breadcrumbs2, null), /* @__PURE__ */ React2.createElement(LayoutTop, null, lastModified && /* @__PURE__ */ React2.createElement(LastUpdated, { lastModified: new Date(lastModified) }), mergedConf && /* @__PURE__ */ React2.createElement(EditPageButton, { to: mergedConf.to })), children, /* @__PURE__ */ React2.createElement(LayoutBottom, null, feedback), /* @__PURE__ */ React2.createElement(PageNavigation, { nextPage, prevPage })), tableOfContent);
}
var LayoutWrapper = styled_components_esm_default.div.attrs(({
  className
}) => ({
  className
})).withConfig({
  displayName: "DocumentationLayout__LayoutWrapper",
  componentId: "sc-1e1mekb-0"
})(["display:flex;flex:1;width:100%;"]);
var ContentWrapper = styled_components_esm_default.section.withConfig({
  displayName: "DocumentationLayout__ContentWrapper",
  componentId: "sc-1e1mekb-1"
})(["--md-content-font-size:var(--font-size-lg);--md-content-line-height:var(--line-height-lg);--md-table-font-size:var(--md-content-font-size);--md-table-line-height:var(--md-content-line-height);--md-tabs-content-font-size:var(--md-content-font-size);--md-tabs-content-line-height:var(--md-content-line-height);max-width:var(--md-content-max-width);width:90%;margin:0 auto;padding:var(--md-content-padding);article:first-child > h1:first-child{margin-top:0;}@media screen and (min-width:", "){width:", ";}"], breakpoints.medium, ({
  withToc
}) => withToc ? `calc(90% - var(--toc-width))` : "90%");
var LayoutTop = styled_components_esm_default.div.withConfig({
  displayName: "DocumentationLayout__LayoutTop",
  componentId: "sc-1e1mekb-2"
})(["display:flex;justify-content:space-between;flex-flow:row nowrap;"]);
var Breadcrumbs2 = styled_components_esm_default(Breadcrumbs).withConfig({
  displayName: "DocumentationLayout__Breadcrumbs",
  componentId: "sc-1e1mekb-3"
})(["margin-bottom:var(--breadcrumbs-margin-bottom);"]);
var LayoutBottom = styled_components_esm_default(LayoutTop).withConfig({
  displayName: "DocumentationLayout__LayoutBottom",
  componentId: "sc-1e1mekb-4"
})(["> *{margin:25px 0;}"]);

// node_modules/@redocly/theme/src/core/templates/Markdown.tsx
init_Markdown();
init_TableOfContent();
init_Feedback();
init_utils();
function Markdown_default({ pageProps, children }) {
  const [wrapperElement, setWrapperElement] = React3.useState(null);
  const { useSidebarSiblingsData } = useThemeHooks();
  const { markdown } = useThemeConfig();
  const { nextPage, prevPage } = useSidebarSiblingsData() || {};
  const { pathname } = useLocation();
  const wrapperRefCb = React3.useCallback(
    (node) => {
      if (!node) {
        return;
      }
      setWrapperElement(node);
    },
    // TODO: is this correct?
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [pageProps.headings]
  );
  const tableOfContent = /* @__PURE__ */ React3.createElement(TableOfContent, { headings: pageProps.headings, contentWrapper: wrapperElement });
  const { type, settings, hide } = pageProps.frontmatter?.feedback || {};
  const feedback = /* @__PURE__ */ React3.createElement(Feedback, { type, hide, settings, path: pathname });
  const documentationLayoutProps = {
    tableOfContent,
    feedback,
    config: markdown,
    editPage: pageProps.editPage,
    lastModified: pageProps.lastModified,
    nextPage,
    prevPage
  };
  if (IS_BROWSER) {
    onDocumentReady(extendDetailsBehaviour);
  }
  return /* @__PURE__ */ React3.createElement(DocumentationLayout, { ...documentationLayoutProps }, /* @__PURE__ */ React3.createElement(Markdown, { ref: wrapperRefCb }, children));
}
export {
  Markdown_default as default
};
