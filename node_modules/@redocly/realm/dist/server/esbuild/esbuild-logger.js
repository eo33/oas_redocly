import*as l from"esbuild";import i from"../utils/reporter/logger.js";import{isBuildMode as m}from"../utils/is-build-mode.js";import{exit as g}from"../utils/process.js";import{telemetry as a}from"../../cli/telemetry/index.js";import{stopAllCompilers as u}from"./esbuild.js";class _ extends Error{errors;warnings;constructor({errors:t=[],warnings:o=[]}){super(),this.errors=t,this.warnings=o}}async function O({errors:r,warnings:t}){const o=await c(r,"error"),f=await c(t,"warning");t.forEach((e,s)=>{i.warn(f[s])}),r.forEach((e,s)=>{const n=e.location?.file||"";n&&n.includes("node_modules/")?(i.error(o[s]),a.send("cli_error_caught",{message:JSON.stringify(e)})):(i.contentError(o[s]),a.send("cli_error_caught",{message:JSON.stringify(e),scope:"content"}))}),r.length&&m()&&(await u(),g(1))}async function c(r,t){switch(process.env.PORTAL_LOG_FORMAT){case"JSON":return r.map(o=>JSON.stringify(o));default:return await l.formatMessages(r,{kind:t,color:!1,terminalWidth:0})}}export{_ as EsbuildError,O as esbuildLogger};
