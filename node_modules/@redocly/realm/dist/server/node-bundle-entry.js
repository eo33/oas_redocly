import{resolve as i,dirname as s}from"node:path";import{fileURLToPath as a}from"node:url";import{readFile as m}from"fs/promises";import{createReadStream as p}from"fs";import{createRouter as c}from"./web-server/router.js";import{installProdRoutes as u}from"./web-server/routes/index.js";import{Store as f}from"./store.js";import{telemetry as l}from"../cli/telemetry/index.js";import{loadEnvironmentVariables as d}from"../shared/env.js";import{startHttpServer as v}from"./web-server/http.js";import{readStaticData as R}from"./utils/static-data.js";import{startIdleTimeout as S}from"./web-server/middleware/idleTimeoutMiddleware.js";import{reporter as O}from"./utils/index.js";import{EntitlementsProvider as E}from"./entitlements/entitlements-provider.js";const n=s(a(import.meta.url));d(n),l.updateContext({version:process.env.REDOCLY_PORTAL_VERSION,anonymousId:"ANONYMOUS",platform:process.platform});const N=JSON.parse(await m(i(n,"./store.json"),"utf-8")),P=f.fromJson(N,{outdir:i(n,"../client"),serverOutDir:n,serverMode:!0,contentDir:"",renderMode:"main"});await E.instance().init({ignoreTokenExpiration:!0}),g(P).catch(r=>{console.error(r)});async function g(r){const t=await c();u(t,r,{readStaticAsset:async o=>p(o),resolveRouteData:async o=>R(o.slug,r.outdir)}),O.printErrors();const e=y();return await v(t,e??process.env.PORT??4e3),S(),t}function y(){const r=process.argv.findIndex(o=>o==="--port"||o==="-p");if(r===-1)return null;const t=process.argv[r+1];if(t.startsWith("-"))return null;const e=parseInt(t,10);return isNaN(e)?null:e}
