import{setCookie as y,deleteCookie as $,getCookie as P}from"hono/cookie";import{ALTERNATIVE_AUD_CLAIM_NAME as q,JWT_SECRET_KEY as C,ORG_SLUG as z}from"../../constants.js";import{DEFAULT_COOKIE_EXPIRATION as b,ServerRoutes as T}from"../../../shared/constants.js";import{getAuthProviderLoginParams as B,isOidcProviderConfig as S,isSaml2ProviderConfig as V,oidcExchangeCodeForToken as G,buildLoginUrl as J,decodeSamlResponse as K,extractUserClaims as X,parseSamlResponse as W,parseOidcState as Y,verifySAMLResponse as Q,getUsernameFromPayload as Z,buildOidcLogoutUrl as x,getOidcMetadata as v,getRedoclyTokenPayload as ee,isRedoclySso as re,rewritePreviewAuthRedirectUri as oe,parsePreviewBranch as U}from"../auth.js";import*as k from"../jwt/jwt.js";import{sanitizeRedirectPathname as E,withPathPrefix as A}from"../../../shared/urls.js";import{getPathPrefix as w}from"../../../shared/utils.js";import{compareURIs as ne,ensureArray as M}from"../../../shared/jsUtils.js";import{AlgorithmTypes as te}from"../jwt/types.js";import{handleErrorPageRender as se}from"../utils.js";import{encodeBase64URL as ie}from"../jwt/encode.js";async function Le(i){if(process.env.NODE_ENV==="production")return i.newResponse(null,404,{});const{password:e,...r}=await i.req.json(),d=await k.sign({...r,name:r.username||r.email||"Unknown"},C);return y(i,"authorization",d,{path:w()||"/",httpOnly:!0,secure:!0,sameSite:"none"}),i.newResponse(null,200,{})}function Re(){return async i=>{const e=i.get("logger"),r=encodeURIComponent(i.req.query("message")||"");e.error(`Login error: ${r}`);const d=`${T.LOGIN}/?error=${encodeURIComponent(r)}`;return i.newResponse(null,301,{Location:d})}}function ye(i){return async e=>{const r=e.get("logger"),d=i.ssoDirect,n=Y(e.req.query("state")),f=n.idpId,a=d?.[f];if(!S(a))return r.error("OIDC login error: missing OIDC provider config"),e.text("Forbidden",403);const p=await v(f,a);if(d&&!p.token_endpoint){const c="Invalid OIDC configuration: token_endpoint is required";return r.error(`OIDC login error: ${c}`),e.text(c,500)}try{const c=p.token_endpoint,m=e.req.query("code");if(e.req.query("error"))return se(e,i,{slug:"/"},"403","403OIDC");if(!m){const I="Code is expected but not present";return r.error(`OIDC login error: ${I}`),new Response(`Forbidden: ${I}`,{status:403})}const t=e.req.header("x-forwarded-host"),h=e.req.header("x-forwarded-proto")||"https",R=n.redirectUri??new URL(A(T.OIDC_CALLBACK),t?`${h}://${t}`:e.req.url).toString(),l=P(e,"code_verifier"),s=await G(c,m,R,a,{...a.tokenRequestCustomParams,...l?{code_verifier:l}:{}});if(s.error)return r.error(`Error from OIDC provider: "${s.error}"`),e.text(`Forbidden: ${s.error_description||s.error}`,403);if(!s?.id_token){const I="No id_token, please, add openid to scopes";return r.error(`OIDC login error: ${I}`),new Response(`Forbidden: ${I}`,{status:403})}const{payload:g,header:O}=k.decode(s.id_token),o=O.alg===te.RS256;if(a.audience?.length&&![...M(g.aud||[]),...M(g[q]||[])].some(D=>a.audience?.includes(D))){const D="No valid audience found in id_token";return r.error(`OIDC login error: ${D}`),new Response(`Forbidden: ${D}`)}const N=o?s.id_token:await k.sign({...g,idpId:f},C);Z(g)||r.warn("To display your username, the required 'email' or 'full_profile' scope must be added to the identity provider configuration");const _=a?.tokenExpirationTime?Date.now()+a.tokenExpirationTime*1e3:g.exp*1e3||Date.now()+b*1e3;y(e,"authorization",N,{path:w()||"/",httpOnly:!0,expires:new Date(_)}),y(e,"idp_id_token",s.id_token||"",{path:w()||"/",httpOnly:!0,expires:new Date(_)}),y(e,"idp_access_token",s.access_token||"",{path:w()||"/",httpOnly:!0,expires:new Date(_)}),$(e,"code_verifier",{path:w()||"/"});const F=typeof n.redirectTo=="string"?n.redirectTo:void 0;let j=E(new URL(F||"/",e.req.url).pathname);const H=e.newResponse(null,302,{Location:j});return r.updateContext({email:g.email,subject:g.sub}),r.info("OIDC login successful"),H}catch(c){if(r.error(`OIDC login error: ${c.message}`),c.error==="access_denied")return r.info("Access denied"),e.text("Forbidden",403)}const u="Something went wrong";return r.error(`OIDC login error: ${u}`),e.text(u,500)}}function Ie(i){return async e=>{const r=e.get("logger"),n=e.get("auth").claims?.idpId,a=i.ssoDirect?.[n];if(e.req.method==="POST")return S(a)||$(e,"authorization",{path:w()||"/"}),r.info("Logout successful"),e.newResponse(null,200,{});let p;if(S(a)){const u=(await v(n,a)).end_session_endpoint;if(u){const c=new URL(e.req.url),m=e.req.header("x-forwarded-proto")||c.protocol.slice(0,-1)||"https",L=e.req.header("x-forwarded-host")||c.host,t=`${m}://${L}`,h=U(t),R=h?ie(JSON.stringify({branch:U(t)})):void 0,l=h?`${oe(t)}/_auth/logout`:t;p=x(u,l,P(e,"idp_id_token")||"",R)}}return r.info("Logout successful"),$(e,"authorization",{path:w()||"/"}),e.newResponse(null,302,{Location:p||A("/")})}}function ke(i){return async e=>{const r=e.get("logger"),d=i.ssoDirect,n=new URL(e.req.url),f=e.req.header("x-forwarded-proto")||n.protocol.slice(0,-1)||"https",a=e.req.header("x-forwarded-host")||n.host,p=`${f}://${a}`;let u=n.searchParams.get("idpId");const c=n.searchParams.get("redirectTo"),m=Object.keys(d||{})[0];if(u=u||m,!d?.[u]){const s="Invalid idpId";return r.error(`IdP login error: ${s}`),e.text(`Forbidden: ${s}`,403)}const t=u&&d?await B(u,d[u]):void 0,h={};for(const s of Object.keys(t?.extraParams||{}))h[s]=n.searchParams.get(s)||t?.extraParams?.[s]||void 0;const{loginUrl:R,cookies:l={}}=t&&J({...t,extraParams:h},p,c)||{};return Object.keys(l).forEach(s=>{y(e,s,l[s].value,l[s].options)}),r.info(`IdP login initiated for ID '${u}'`),e.newResponse(null,302,{Location:R||new URL(e.req.url).pathname})}}function De(i){return async e=>{const r=e.get("logger"),d=await e.req.formData(),n=d.get("SAMLResponse"),f=d.get("RelayState");if(typeof n!="string"||typeof f!="string"){const o="SAMLResponse is required";return r.error(`SAML2 login error: ${o}`),e.text(`Bad request: ${o}`,400)}const a=K(n),{success:p,uid:u,nameFormat:c,attrs:m,issuerId:L,expiresAt:t}=W(a),{idpId:h,redirectTo:R}=JSON.parse(f);if(!p){const o="SAML2 assertion is not successful";return r.error(`SAML2 login error: ${o}`),e.text(`Permission denied: ${o}`,401)}if(!t||Math.ceil(Date.now()/1e3)>=t){const o="SAML2 Token Expired";return r.error(`SAML2 login error: ${o}`),e.text(o,401)}const l=i.ssoDirect?.[h];if(!l||!V(l)){const o="Cannot find valid IdP";return r.error(`SAML2 login error: ${o}`),e.text(`Permission denied: ${o}`,401)}if(!(l.issuerId&&ne(l.issuerId,L))){const o="IssuerID is misconfigured or untrusted assertions issuer received";return r.error(`SAML2 login error: ${o}`),e.text(`Permission denied: ${o}`,401)}if(!await Q(a,l.x509PublicCert)){const o="SAMLResponse signature invalid";return r.error(`SAML2 login error: ${o}`),e.text(o,401)}const g=X(u,c,m,l.teamsAttributeName);if(!g.sub){const o="The provider did not return a valid user identity.";return r.error(`SAML2 login error: ${o}`),e.text(o,400)}if(!g.email){const o="The provider did not return a valid user email.";return r.error(`SAML2 login error: ${o}`),e.text(o,400)}const O=await k.sign({...g,idpId:h},C);return y(e,"authorization",O,{path:w()||"/",httpOnly:!0,expires:new Date(t*1e3)}),r.updateContext({email:g.email,subject:g.sub}),r.info("SAML2 login successful"),e.newResponse(null,302,{Location:R||"/"})}}function Ce(i){return async e=>{const r=e.get("logger"),d=new URL(e.req.query("redirectTo")||"/",e.req.url),n=A(E(d.pathname));if(!(i.ssoDirect&&Object.values(i.ssoDirect).some(t=>S(t)&&re(t))))return e.newResponse(null,302,{Location:n});const a=e.req.query("token"),p=a&&await ee(a);if(!p)return e.newResponse(null,302,{Location:n});if(!M(p[q]||[]).some(t=>t===z))return e.newResponse(null,302,{Location:n});const m=await k.sign(p,C),L=Date.now()+b*1e3;return y(e,"authorization",m,{path:w()||"/",httpOnly:!0,expires:new Date(L),sameSite:"None",secure:!0}),r.info("Token login successful"),e.newResponse(null,302,{Location:n})}}export{Le as authorizeHandler,ke as idpLoginHandler,Ie as logoutHandler,ye as oidcCallbackHandler,Re as redoclyLoginCallbackHandler,Ce as redoclyTokenLoginHandler,De as samlCallbackHandler};
