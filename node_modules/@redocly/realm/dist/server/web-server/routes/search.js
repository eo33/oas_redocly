import{expandTeamsForRead as y}from"../../utils/rbac.js";function j(e){return async t=>{const o=t.get("logger"),a=t.get("auth"),l=o.startTiming(),r=e.getConfig().requiresLogin&&!a.isAuthenticated,g={...await t.req.json(),auth:{...a,teams:y(e.config.rbac,a.teams)}},i=e.getSearchFacets(),c=r?{}:e.searchEngine?await e.searchEngine.search(g,i):{};let h=0;if(Object.keys(c).length){const u=c.documents;for(const[n,s]of Object.entries(u))h+=s.length}return o.infoTime(l,`Search with query "${g.query||""}". Total results: ${h}`),t.json(c)}}function q(e){return async t=>{const o=t.get("logger"),a=t.get("auth"),m=e.getConfig().requiresLogin&&!a.isAuthenticated,r={...await t.req.json(),auth:a},g=o.startTiming(),i=e.getSearchFacets(),c=m?{}:e.searchEngine?await e.searchEngine.countFacets(r,i):{},h=!!r.field;let u=[];if(h){const n=r.field,s=n&&i.get(n);if(s){const f={...s};f.values=c?.[n]||[],u.push(f)}}else{const n=new Map;for(const[s,f]of i){const d=c?.[s],p={...f};p.values=d||f.values.map(T=>({value:T,count:0})),n.set(s,p)}u=Array.from(n,([,s])=>s)}return o.infoTime(g,"Search facets"),t.json(u)}}export{q as searchFacetsHandler,j as searchHandler};
