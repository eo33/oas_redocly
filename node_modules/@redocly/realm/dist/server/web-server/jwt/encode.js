const c=e=>{if(e===null)throw new TypeError('1st argument of "encodeBase64" should not be null.');try{const o=new TextEncoder().encode(e);return btoa(String.fromCharCode(...o))}catch{}try{return Buffer.from(e).toString("base64")}catch(r){throw console.error('If you want to do "encodeBase64", polyfill "buffer" module.'),r}},a=e=>{if(e===null)throw new TypeError('1st argument of "decodeBase64" should not be null.');try{const r=atob(e),o=new Uint8Array(r.split("").map(n=>n.charCodeAt(0)));return new TextDecoder().decode(o)}catch{}try{return Buffer.from(e,"base64").toString()}catch(r){throw console.error('If you want to do "decodeBase64", polyfill "buffer" module.'),r}};function d(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}const u=e=>d(c(e)),s=e=>a((o=>{const t=o.length%4;return t===2?`${o}==`:t===3?`${o}=`:o})(e).replace(/-/g,"+").replace("_","/")),l=e=>new TextEncoder().encode(e),f=e=>{if(typeof btoa=="function")return btoa(String.fromCharCode(...new Uint8Array(e)));try{return Buffer.from(String.fromCharCode(...new Uint8Array(e))).toString("base64")}catch{}return""},p=async e=>f(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_");export{f as arrayBufferToBase64,p as arrayBufferToBase64URL,a as decodeBase64,s as decodeBase64URL,c as encodeBase64,u as encodeBase64URL,d as urlSafeBase64,l as utf8ToUint8Array};
