import"../../node-crypto-polyfill.js";import{utf8ToUint8Array as u,encodeBase64URL as f,arrayBufferToBase64URL as w,decodeBase64URL as d}from"./encode.js";import{decodeJwtSignature as A}from"./decode-jwt-signature.js";import{AlgorithmTypes as s,JwtAlgorithmNotImplemented as g,JwtTokenInvalid as h,JwtTokenNotBefore as H,JwtTokenExpired as E,JwtTokenSignatureMismatched as K,CryptoKeyFormat as m,CryptoKeyUsage as S}from"./types.js";const p=t=>{switch(t.toUpperCase()){case"HS256":return{name:"HMAC",hash:{name:"SHA-256"}};case"HS384":return{name:"HMAC",hash:{name:"SHA-384"}};case"HS512":return{name:"HMAC",hash:{name:"SHA-512"}};case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new g(t)}},l=async(t,e,r=s.HS256)=>{if(!crypto.subtle||!crypto.subtle.importKey)throw new Error("`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.");e.startsWith("-----BEGIN PRIVATE KEY-----")&&(e=e.replace("-----BEGIN PRIVATE KEY-----","").replace("-----END PRIVATE KEY-----","").split(/\\n|\n/).join("").trim(),e=atob(e));const n=r===s.RS256||r===s.ES256,a=await crypto.subtle.importKey(n?m.PKCS8:m.RAW,n?b(e):u(e),p(r),!1,[S.Sign]);return await crypto.subtle.sign(p(r),a,u(t))};function b(t){const e=new ArrayBuffer(t.length),r=new Uint8Array(e);for(let n=0,a=t.length;n<a;n++)r[n]=t.charCodeAt(n);return e}const I=async(t,e,r=s.HS256,n)=>{const a=await f(JSON.stringify(t)),i=`${await f(JSON.stringify({alg:r,typ:"JWT",kid:n}))}.${a}`,c=await w(await l(i,e,r));return`${i}.${c}`},U=async(t,e,r=s.HS256,n=!1)=>{const a=t.split(".");if(a.length!==3)throw new h(t);const{payload:o}=T(t);if(o.nbf&&o.nbf>Math.floor(Date.now()/1e3))throw new H(t);if(!n&&o.exp&&o.exp<=Math.floor(Date.now()/1e3))throw new E(t);const i=a.slice(0,2).join("."),c=a[2];let y=!1;if(typeof e!="string"?y=await C(i,c,e,r):y=await w(await l(i,e,r))===c,!y)throw new K(t);return!0},T=t=>{try{const[e,r]=t.split("."),n=JSON.parse(d(e)),a=JSON.parse(d(r));return{header:n,payload:a}}catch{throw new h(t)}},C=async(t,e,r,n)=>{const a=await crypto.subtle.importKey("jwk",r,p(n),!1,[S.Verify]);return await crypto.subtle.verify(p(n),a,A(e),u(t))};export{T as decode,I as sign,U as verify};
