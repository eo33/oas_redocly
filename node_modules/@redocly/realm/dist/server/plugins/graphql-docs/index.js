import{combineUrls as c,withPathPrefix as y}from"../../../shared/urls.js";import{removeTrailingSlash as g}from"../../../shared/utils.js";import{getTemplatePath as I}from"./get-template-path.js";import{searchResolver as R}from"./search/search-resolver.js";import{Feature as T}from"../../entitlements/entitlements.types.js";import{graphqlDocLoader as w}from"./graphql-doc-loader.js";import{getAiSearchDocuments as E}from"./search/ai/get-ai-search-document.js";const L="graphql-docs",_="graphql-docs-";async function j(){return{id:"graphql",requiredEntitlements:[T.Graphql],loaders:{"graphql-doc":w},processContent:async(e,{fs:l,cache:u,isPathIgnored:S})=>{const D=e.createTemplate(L,I("./template/GraphQLDocs.js"));for(const{relativePath:s}of await l.scan(/(\.gql|\.graphql)$/)){if(await S(s))continue;const p=await u.load(s,"graphql-doc");if(!p.data)continue;const{menu:m,content:q,settings:b,metadata:P,store:d}=p.data,h=`${_}${s}`;await e.createSharedData(h,q);const A=[{key:"graphQlSettings",id:h}],o=[],f=m.getGroups(),G=m.getSidebarItems();for(const a of f)for(const r of a.typeGroups)for(const i of r.items){const t=`${r.id}/${i}`;o.push({slugSuffix:t,fsPath:s,templateId:D,getStaticData:$(r,b),sharedData:A})}if(!o.length)return;const n=o[o.length-1];n.metadata={type:"graphql",title:f[0].name,...P},n.getSidebar=a=>{function r(i){return i.map(t=>({...t,slug:t.slug&&g(c(a.baseSlug,t.slug)),routeSlug:t.routeSlug&&g(c(a.baseSlug,t.routeSlug)),link:t.link&&g(c(a.baseSlug,t.link)),items:t.items&&r(t.items)}))}return r(G)},n.getSearchDocuments=R(e,d),n.getAiSearchDocuments=E(e,d);for(const a of o)e.addRoute(a)}}}}function $(e,l){return async function(u){return{props:{seo:{title:e?.name},settings:{...l,location:{section:e?.id},sidebar:{hide:!0},baseUrlPath:y(u.baseSlug)},disableAutoScroll:!0}}}}export{j as graphqlDocsPlugin};
