import p from"path";import{productConfigOverrideSchema as L}from"@redocly/config";import{copyStaticFile as $,reporter as b,logger as h,FileNotFoundError as R}from"../../utils/index.js";import{safeParsePartial as S}from"../config-parser/safe-parse.js";import{resolveLinksFromConfig as m,resolveItems as A}from"../nav-utils.js";import{findDeepFirst as B}from"../../../shared/jsUtils.js";import{REDOCLY_TEAMS_RBAC as P,REDOCLY_ROUTE_RBAC as w}from"../../../shared/constants.js";import{resolveLogoConfig as D}from"./resolve-logo.js";import{addTrailingSlash as E}from"../../../shared/utils.js";import{pickUiAccessibleConfig as I}from"./index.js";const J=async(n,e,r)=>{if(!n)return;const t={};for(const i of Object.keys(n)){let l;const s=n[i].icon;if(s)try{const c=await r.fs.getFileInfo(s);l=c&&$(e.contentDir,c.realRelativePath,e.outdir)}catch(c){c instanceof R?b.panicOnBuildContentError(`Could not resolve icon for product "${i}": ${c.message}`):b.panicOnBuild(`Could not resolve icon for product "${i}": ${c.message}`)}const{name:f,folder:a}=n[i],d=p.posix.join(a,"redocly.yaml"),v=await r.fs.exists(d)?await r.cache.load(d,"product-config"):void 0,k=v?.data&&S(L,v.data),g=await j(a,r,e);if(!g){b.panicOnBuild(`Could not resolve first link for product "${i}"`);continue}const F=e.getRouteBySlug(g),u=p.join(e.contentDir,a),o=k&&I(k),y=Object.keys(o?.logo||{}).length>0?await D(o?.logo,u,e.outdir,r.fs):void 0,C={navFile:d};t[i]={name:f,folder:a,icon:l,slug:r.slugify(a),link:g,configOverride:o&&{logo:Object.keys(y||{}).length>0?y:void 0,navbar:await m(o.navbar,u,e,r,C),footer:await m(o.footer,u,e,r,C),feedback:o.feedback,sidebar:o.sidebar,search:o.search&&{...o.search,suggestedPages:await m(o.search?.suggestedPages,u,e,r)},codeSnippet:o.codeSnippet,breadcrumbs:o.breadcrumbs&&{...o.breadcrumbs,prefixItems:await m(o.breadcrumbs?.prefixItems||[],u,e,r)},analytics:o.analytics},[P]:F?.[P],[w]:F?.[w]},h.verbose(`Resolved config for product "${i}"`)}return t};async function j(n,e,r){const t=E(p.posix.normalize(n)),i=(await e.fs.scan(/sidebars\.yaml$/)).filter(a=>a.relativePath.startsWith(t)),s=_(i)[0]?.relativePath;if(s){const a=await e.cache.load(s,"yaml"),d=await O(a.data,s,r,e);if(d)return h.verbose(`Found product first link "${d}" in sidebar "${s}"`),d}const f=await O([{directory:`${t}`}],"sidebars.yaml",r,e);return f&&h.verbose(`Found product first link "${f}" in product folder "${t}"`),f}async function O(n,e,r,t){const i=await A(n,p.dirname(e),r,t),l=i?B(i,s=>!!s.link):void 0;return l?l.link:void 0}function _(n){return n.sort((e,r)=>{const t=e.relativePath.split("/").length,i=r.relativePath.split("/").length;return t!==i?t-i:e.relativePath.localeCompare(r.relativePath,void 0,{numeric:!0})})}export{j as getProductFirstLink,J as resolveProductsConfig};
