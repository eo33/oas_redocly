import type { NormalizedProblem } from '@redocly/openapi-core';
import type { ProblemWithCodeframe } from './lint';
declare enum ScorecardStatus {
    BelowMinimum = "Below minimum",
    Highest = "Highest",
    Minimum = "Minimum"
}
export type ProblemSummary = Pick<NormalizedProblem, 'ruleId' | 'severity'>;
export type ScorecardLevel = {
    errors: number;
    warnings: number;
    uniqueErrors: number;
    uniqueWarnings: number;
    problems: ProblemSummary[];
};
export type DetailedScorecardLevel = Omit<ScorecardLevel, 'problems'> & {
    problems: ProblemWithCodeframe[];
};
export type ScorecardData = {
    levels: Record<string, ScorecardLevel>;
    status: ScorecardStatus;
    targetLevel: string;
    scorecardLevel: string;
    scorecardLevelIdx: number;
    relativePath: string;
    title?: string;
    version?: string;
};
export type DetailedScorecardData = Omit<ScorecardData, 'levels'> & {
    levels: Record<string, DetailedScorecardLevel>;
};
export {};
//# sourceMappingURL=types.d.ts.map