import N from"picomatch";import{removeLeadingSlash as I}from"@redocly/theme";import{getTarget as x}from"./loaders/scorecard.js";import{logger as t}from"../../utils/index.js";import{parsePathVersions as A}from"../config-parser/loaders/versions-config-loader.js";const c=15;var n;(function(i){i.BelowMinimum="Below minimum",i.Minimum="Minimum",i.Highest="Highest"})(n||(n={}));async function j({actions:i,context:r,scorecardConfig:o,reuniteConfig:v}){t.info("Computing scorecard...");const m=o.levels||[],h=m[0],p=await i.loadOpenApiDefinitions(r),P=o.ignore||[],w=N(P),L=t.startTiming(),l={};for(const e of p){if(e.isVirtual||!e.definition)continue;const a=I(e.realRelativePath);if(w(a)){t.info(`Skipping scorecard calculation for ignored file: ${e.realRelativePath}`);continue}if(l[e.realRelativePath])continue;const g=e.definition.info?.["x-metadata"]||{},s=H(o,g)||h.name,{data:{levels:M,scorecardLevelIdx:d,scorecardLevel:O}}=await r.cache.load(e.realRelativePath,"scorecard"),u=m.findIndex(B=>B.name===s),R=d-1<u?n.BelowMinimum:u<m.length-1?n.Minimum:n.Highest,T=A(e.realRelativePath)?.versionName;l[e.realRelativePath]={levels:M,status:R,targetLevel:s,scorecardLevel:O,scorecardLevelIdx:d,relativePath:e.realRelativePath,title:e.definition.info?.title,version:T}}t.infoTime(L,"Scorecard processed");const f=Object.values(l).filter(e=>e.status===n.BelowMinimum);if(f.length>0){const e=f.map(s=>s.relativePath);let a=`Detected OpenAPI definitions with score below minimum level:
  - ${e.slice(0,c).map(()=>"%rp").join(`
  - `)}`;e.length>c&&(a+=`
  ... and ${e.length-c} more`),v?.ignoreLint??o.ignoreNonCompliant?t.warn(a,...e):t.error(a,...e)}return l}function H(i,r){return x(i.targets,r)?.minimumLevel}export{j as computeScorecard};
