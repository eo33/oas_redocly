import type { Adapter, App, Paginated, Credential, ApiProduct, ExpandedApp, LogsParams, Log, CredentialInput, ApiAccessStatus, LogDetails } from '../../types';
import type { GraviteeApp } from './types';
import type { GraviteeAdapterConfig } from '../../../../../config/schema';
export declare class GraviteeAdapter implements Adapter {
    apiUrl: string;
    accessToken: string;
    email: string;
    userClaims: Record<string, string> & {
        email: string;
    };
    config: GraviteeAdapterConfig;
    catalogApiProducts: Set<string>;
    allowApiProductsOutsideCatalog: boolean;
    adapterId: string;
    stage: string;
    constructor(config: GraviteeAdapterConfig, userClaims: Record<string, string> & {
        email: string;
    }, accessToken: string, catalogApiProducts: string[]);
    setAuthHeader(init: any): Promise<any>;
    protected getErrorMessage(text: string): any;
    protected fetchData<T>(input: RequestInfo, init?: RequestInit): Promise<T>;
    protected fetchAppCredentials(app: GraviteeApp, includeRevoked?: boolean): Promise<Credential[]>;
    protected unsubscribeFromApis(appId: string, apiProductIds: string[]): Promise<unknown[]>;
    protected subscribeToApis(appId: string, apiProductIds: string[]): Promise<unknown[]>;
    getApps(): Promise<Paginated<App>>;
    getApiProducts(): Promise<Paginated<ApiProduct>>;
    getApp(appId: string): Promise<ExpandedApp>;
    createApp(app: App): Promise<App>;
    getAppLogDetails(appId: string, logId: string): Promise<LogDetails>;
    getAppLogs(appId: string, params: LogsParams): Promise<Paginated<Log>>;
    updateApp(appId: string, app: Partial<App>): Promise<App | undefined>;
    deleteApp(appId: string): Promise<void>;
    createCredential(appId: string, credential: CredentialInput): Promise<Credential>;
    updateCredential(appId: string, credentialId: string, credential: CredentialInput): Promise<Credential>;
    deleteCredential(appId: string, credentialId: string): Promise<Credential>;
    getApiAccessStatus(apiId: string, expand?: boolean): Promise<ApiAccessStatus>;
}
//# sourceMappingURL=client.d.ts.map