import type { Adapter, ApiProduct, App, ExpandedApp, Credential, Paginated, PaginationOptions, CredentialInput, LogsParams, Log, ApiAccessStatus, LogDetails } from './types';
export declare class CombineAdapter implements Adapter {
    private adapters;
    adapterId: string;
    constructor(adapters: Adapter[]);
    getApps(pagination?: PaginationOptions): Promise<Paginated<App>>;
    getApp(appId: string): Promise<ExpandedApp>;
    getApiProducts(pagination?: PaginationOptions): Promise<Paginated<ApiProduct>>;
    createApp(app: App): Promise<App>;
    getApiAccessStatus(apiId: string, expand?: boolean): Promise<ApiAccessStatus>;
    getAppLogDetails(appId: string, logId: string): Promise<LogDetails>;
    getAppLogs(appId: string, params: LogsParams): Promise<Paginated<Log>>;
    createCredential(appId: string, credential: CredentialInput): Promise<Credential>;
    updateCredential(appId: string, credentialId: string, credential: CredentialInput): Promise<any>;
    deleteCredential(appId: string, credentialId: string): Promise<Credential>;
    deleteApp(appId: string): Promise<void>;
    updateApp(appId: string, app: Partial<App>): Promise<App | undefined>;
}
//# sourceMappingURL=combine.d.ts.map