import type { App, Paginated, Credential, ApiProduct, ExpandedApp, CredentialInput, UserClaims, Adapter, LogsParams, Log, ApiAccessStatus, LogDetails } from '../../types';
import type { ApigeeAdapterConfig } from '../../../../../config/schema.js';
import { APIGEE_VERSION } from './types.js';
export declare class ApigeeAdapter implements Adapter {
    apiUrl: string;
    developerUrl: string;
    accessToken: string | null;
    organizationName: string;
    email: string;
    organizationUrl: string;
    version: APIGEE_VERSION;
    userClaims: Record<string, string> & {
        email: string;
    };
    config: ApigeeAdapterConfig;
    ignoreApiProducts: Set<string>;
    catalogApiProducts: Set<string>;
    allowApiProductsOutsideCatalog: boolean;
    adapterId: string;
    stage: string;
    constructor(config: ApigeeAdapterConfig, userClaims: UserClaims, catalogApiProducts: string[]);
    setAuthHeader(init: any): Promise<any>;
    protected getErrorMessage(text: string): any;
    protected fetchData<T>(input: RequestInfo, init?: RequestInit): Promise<T>;
    getApps(): Promise<Paginated<App>>;
    getApiProducts(): Promise<Paginated<ApiProduct>>;
    getApp(appId: string): Promise<ExpandedApp>;
    createDeveloper(email: string, firstName: string, lastName: string, username: string): Promise<unknown>;
    createApp(app: App): Promise<App>;
    updateApp(appId: string, app: Partial<App>): Promise<App | undefined>;
    deleteApp(appId: string): Promise<void>;
    createCredential(appId: string, credential: CredentialInput): Promise<Credential>;
    updateCredential(appId: string, credentialId: string, credential: CredentialInput): Promise<Credential>;
    deleteCredential(appId: string, credentialId: string): Promise<Credential>;
    getAppLogDetails(_appId: string, _logId: string): Promise<LogDetails>;
    getAppLogs(_appId: string, _params: LogsParams): Promise<Paginated<Log>>;
    getApiAccessStatus(apiId: string, expand?: boolean): Promise<ApiAccessStatus>;
}
//# sourceMappingURL=adapter.d.ts.map