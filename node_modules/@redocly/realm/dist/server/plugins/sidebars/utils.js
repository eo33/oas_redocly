import c from"path";import{collectPropValueDeep as m}from"../../../shared/jsUtils.js";import{slash as p}from"../../../shared/utils.js";import{reporter as f}from"../../utils/reporter/reporter.js";async function k({fs:i,cache:o},e,r){let n=new Map;for(const t of r){if(!await i.exists(t))continue;const l=c.dirname(c.join(e,t)),u=(await o.load(t,"yaml")).data;try{const a=m(u,"$ref");for(const d of a){const s=p(c.relative(e,c.join(l,d)));n.has(s)&&f.panicOnBuildContentError(`Sidebar reference '${s}' was used multiple times.`),n.set(s,t)}}catch(a){if(a.message.includes("not iterable")){f.panicOnBuildContentError('Invalid sidebar format at %rp, "items" should be an array',t);continue}throw a}}return n}function R(i){function o(e,r){if(r.includes(e))return[...r,e];const n=i.get(e);if(n){const t=o(n,[...r,e]);if(t)return t}return!1}for(const e of i.keys()){const r=o(e,[]);if(r)return r}return!1}export{k as getSidebarReferences,R as hasCircularDependency};
