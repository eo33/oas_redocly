import type { JSONSchemaType } from '@redocly/ajv';
import type { Node } from '@markdoc/markdoc';
import type { ProductConfig, SearchDocument, SearchFacet } from '@redocly/theme';
import type { PageProps, PageStaticData, GlobalData, NavItem, ResolvedNavItem, Version } from '../../shared/types';
import type { REDOCLY_ROUTE_RBAC, REDOCLY_TEAMS_RBAC } from '../../shared/constants.js';
import type { MdOptions } from './markdown/types.js';
import type { RbacScopeItems, RedirectConfig, RedoclyConfig } from '../config/schema';
import type { MarkdocDeps } from './markdown/compiler';
import type { BundledDefinition } from './openapi-docs/load-definition';
import type { Feature } from '../entitlements/entitlements.types.js';
import type { LoaderFn } from '../fs/types';
import type { Cache } from '../fs/cache';
import type { ContentFs } from '../fs/content-fs';
import type { SearchEngine } from './search/engines/search-engine';
import type { Logger } from '../utils/reporter/logger';
import type { AiSearchDocument } from './search/ai-indexer/types';
export type ResolveItemsOptions = {
    groupCustomSidebars?: boolean;
    locale?: string;
    ignoredRoutes?: Set<string>;
    ref?: string;
    ignoreCustomSidebar?: boolean;
    navFile?: string;
};
export type GetStaticDataContext = {
    getRouteByFsPath: (relativePath: string) => PageRouteDetails | undefined;
    getRouteBySlug: (relativePath: string, opts?: {
        followRedirect: boolean;
    }) => PageRouteDetails | undefined;
    getGlobalConfig<T = unknown>(key: string): T | undefined;
    getConfig: () => RedoclyConfig;
    getAllRoutes: () => PageRouteDetails[];
    getAllApiRoutes: () => ApiRouteDetails[];
    getLoginUrls: () => Record<string, string>;
    parseMarkdoc: (input: MarkdownParseInput, context: LifecycleContext, deps?: MarkdocDeps) => Promise<{
        ast: Node;
        info: any;
        compoundHash: string;
    }>;
    getAllRoutesForLocale: (locale?: string) => PageRouteDetails[];
    contentDir: string;
    outdir: string;
};
export interface CodeGuideFile {
    content: string;
    lang?: string;
    name?: string;
}
export type GetStaticDataFn<TRoute, TData> = (route: TRoute, context: GetStaticDataContext) => Promise<TData>;
export type GetServerPropsContext = {
    getGlobalConfig<T = unknown>(key: string): T | undefined;
    getGlobalData: () => GlobalData;
    serverOutDir: string;
};
export type GetServerPropsFn<TData extends PageStaticData = PageStaticData, TProps extends PageProps = PageProps> = (route: PageRouteDetails<TData, TProps>, data: TData, mdOptions: MdOptions, serverOutDir?: string) => Promise<TProps>;
export interface RouteDetails<TRoute = any, TData extends PageStaticData = PageStaticData> {
    slug: string;
    fsPath?: string;
    [REDOCLY_TEAMS_RBAC]?: RbacScopeItems;
    [REDOCLY_ROUTE_RBAC]?: {
        slug?: string;
        fsPath?: string;
    };
    getStaticData?: GetStaticDataFn<TRoute, TData>;
    metadata?: Record<string, unknown>;
    getNavText?: () => Promise<string> | string;
}
export interface PageRouteDetails<TData extends PageStaticData = PageStaticData, TProps extends PageProps = PageProps> extends RouteDetails<PageRouteDetails<TData, TProps>, TData> {
    fsPath: string;
    baseSlug: string;
    templateId: string;
    hasClientRoutes?: boolean;
    versions?: Version[];
    product?: ProductConfig;
    httpVerb?: string;
    path?: string;
    getNavText?: () => Promise<string> | string;
    getSidebar?(route: PageRouteDetails, item?: NavItem): ResolvedNavItem[];
    getSearchDocuments?(route: PageRouteDetails, staticData?: TData): Promise<SearchDocument[]>;
    getAiSearchDocuments?(route: PageRouteDetails, staticData?: TData): Promise<AiSearchDocument[]>;
    serverPropsGetterIds?: string[];
    excludeFromSidebar?: boolean;
    [REDOCLY_TEAMS_RBAC]?: RbacScopeItems;
    [REDOCLY_ROUTE_RBAC]?: {
        slug?: string;
        fsPath?: string;
    };
}
export type PageRouteInit = Omit<PageRouteDetails, 'versions' | 'slug' | 'product' | 'baseSlug' | typeof REDOCLY_ROUTE_RBAC> & {
    slug?: string;
    duplicateInAllLocales?: boolean;
    slugSuffix?: string;
    sharedData?: Array<{
        id: string;
        key: string;
    }>;
    redirectFrom?: Array<{
        type: number;
        from: string;
    }>;
};
export interface ApiRouteDetails<TData extends PageStaticData = PageStaticData> extends RouteDetails<ApiRouteDetails<TData>, TData> {
    isWildcard?: boolean;
    requestHandlerId: string;
}
export interface MiddlewareDetails {
    id: string;
    importPath: string;
}
export type CustomSsoProviderDetails = {
    type: string;
    loginUrl: string;
    apiRoutes: {
        handlerImportPath: string;
        route: RouteDetails;
    }[];
};
export interface PathVersionInfo {
    version: string;
    isDefault: boolean;
    versionFolderId: string;
}
export interface ProcessContentActions {
    createSharedData(id: string, data: unknown, hash?: string): Promise<string>;
    addRouteSharedData(slug: string, dataKey: string, dataId: string): void;
    addRouteSharedDataToAllLocales(slug: string, dataKey: string, dataId: string): void;
    loadOpenApiDefinitions(context: LifecycleContext): Promise<BundledDefinition[]>;
    addCustomSsoProvider(providerDetails: CustomSsoProviderDetails): void;
    setGlobalConfig: (data: Record<string, unknown>) => void;
    setGlobalData: (data: GlobalData) => void;
    getConfig: () => RedoclyConfig;
    setSearchFacets: (facets: Map<string, SearchFacet>) => void;
    getSearchFacets: () => Map<string, SearchFacet>;
    addRoute: (route: PageRouteInit) => void;
    addApiRoute: (route: ApiRouteDetails) => void;
    createRequestHandler: (id: string, importPath: string) => void;
    addRedirect: (from: string, to: RedirectConfig) => void;
    createTemplate: (id: string, importPath: string) => string;
    addBrowserPlugin: (importPath: string) => void;
    registerServerPropsGetter: (id: string, importPath: string) => string;
    addSsrComponents: (components: JSX.Element[] | string[], position: 'head' | 'preBody' | 'postBody') => void;
    contentDir: string;
    outdir: string;
}
export interface AfterRoutesCreatedActions {
    createSharedData(id: string, data: unknown, hash?: string): Promise<string>;
    addRouteSharedData(routeSlug: string, dataKey: string, dataId: string): void;
    getRouteByFsPath: (relativePath: string) => PageRouteDetails | undefined;
    getRouteBySlug: (relativePath: string, opts?: {
        followRedirect: boolean;
    }) => PageRouteDetails | undefined;
    getConfig: () => RedoclyConfig;
    getGlobalConfig<T = unknown>(key: string): T | undefined;
    getAllRoutes: () => PageRouteDetails[];
    getAllRoutesForLocale: (locale?: string) => PageRouteDetails[];
    getAllApiRoutes: () => ApiRouteDetails[];
    getLoginUrls: () => Record<string, string>;
    setGlobalData: (data: GlobalData) => void;
    getGlobalData: () => GlobalData;
    setGlobalConfig: (data: Record<string, unknown>) => void;
    parseMarkdoc: (input: MarkdownParseInput, context: LifecycleContext, deps?: MarkdocDeps) => Promise<{
        ast: Node;
        info: any;
        compoundHash: string;
    }>;
    setSearchFacets: (facets: Map<string, SearchFacet>) => void;
    getSearchFacets: () => Map<string, SearchFacet>;
    setSearchEngine: (engine: SearchEngine) => void;
    addRedirect: (from: string, to: RedirectConfig) => void;
    contentDir: string;
    outdir: string;
    serverOutDir: string;
    hasSitemap: boolean;
    addBrowserPlugin: (importPath: string) => void;
    addSsrComponents: (components: JSX.Element[] | string[], position: 'head' | 'preBody' | 'postBody') => void;
}
export type LifecycleContext = {
    fs: ContentFs;
    cache: Cache;
    getConfig: (dirPath?: string) => Promise<RedoclyConfig & {
        configPath?: string;
        realConfigPath?: string;
    }>;
    isPathIgnored: (relativePath: string) => Promise<boolean>;
    withPathPrefix: (url: string) => string;
    logger: Logger;
};
export type AfterRoutesCreatedLifecycleContext = LifecycleContext & {
    slugify: (relativePath: string) => string;
};
export type MarkdownParseInput = {
    relativePath: string;
    cacheId?: string;
    isVirtual?: boolean;
    content?: string;
};
type ProcessContentFn = (actions: ProcessContentActions, context: LifecycleContext) => Promise<void> | void;
type AfterRoutesCreatedFn = (actions: AfterRoutesCreatedActions, context: AfterRoutesCreatedLifecycleContext) => Promise<void> | void;
export type ExternalPlugin = {
    id: string;
    processContent?: ProcessContentFn;
    afterRoutesCreated?: AfterRoutesCreatedFn;
    loaders?: Record<string, LoaderFn>;
    requiredEntitlements?: Feature[];
    ssoConfigSchema?: JSONSchemaType<any>;
    redoclyConfigSchema?: JSONSchemaType<any>;
    ejectIgnore?: string[];
};
export type DeprecatedCliPlugin = {
    default: {
        id: string;
    };
};
export type ImportedPlugin = {
    default?: ExternalPluginCreator | {
        default?: ExternalPluginCreator;
    };
} | DeprecatedCliPlugin;
export type ExternalPluginCreator = (options: PluginOptions) => ExternalPlugin | Promise<ExternalPlugin>;
export type LifecyclePluginInstance = {
    id: string;
    processContent?: ProcessContentFn;
    afterRoutesCreated?: AfterRoutesCreatedFn;
    loaders?: Record<string, LoaderFn>;
    requiredEntitlements?: Feature[];
};
export type LifecyclePluginCreator = (options: PluginOptions) => Promise<LifecyclePluginInstance> | LifecyclePluginInstance;
export interface PluginDefaultOptions {
    contentDir: string;
}
export type PluginOptions = PluginDefaultOptions & {
    [k: string]: unknown;
};
export {};
//# sourceMappingURL=types.d.ts.map