import s from"node:path";import{existsSync as R}from"node:fs";import{writeFile as D}from"node:fs/promises";import{isBuildMode as S}from"../../../utils/is-build-mode.js";import{REDOCLY_ROUTE_RBAC as m,REDOCLY_TEAMS_RBAC as c}from"../../../../shared/constants.js";import{AI_INDEX_EXPORT_FOLDER as g}from"../constants.js";import{shaHexShort as h}from"../../../utils/crypto.js";import{ensureDir as A}from"../../../utils/fs.js";import{extractTeamsForSearch as l,getRbacTeamsForSearch as E}from"../../../utils/rbac.js";import{promiseMapLimit as f}from"../../../utils/async.js";const u=20;async function B(t){if(!S())return;const r=s.resolve(t.outdir,g),e=t.getConfig().rbac??{},i=t.getAllRoutes();await f(i,u,async a=>{const n=await T(a,t),o=await y(a,n);if(!o?.length)return;const p=O(a,e);await _(o,a.fsPath,p,r)})}async function T(t,r){return t.getStaticData?t.getStaticData(t,{...r,contentDir:r.contentDir,parseMarkdoc:(...e)=>r.parseMarkdoc(...e)}):{}}async function y(t,r){return t.getAiSearchDocuments?t.getAiSearchDocuments(t,{...r,[c]:t[c],[m]:t[m]}):[]}function O(t,r){const e=l(t?.[c]);return e?.length?e:E(t,r)}async function _(t,r,e,i){await f(t,u,async a=>{const n=`${h(r+a.content)}.json`,o=A(s.join(i,n));R(o)||await D(o,JSON.stringify({...a,rbacTeams:e||[]}),"utf-8")})}export{B as prepareAiSearchDocuments};
