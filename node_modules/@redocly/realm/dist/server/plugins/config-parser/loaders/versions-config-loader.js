import c from"path";import{I18N_DIR_NAME as v,L10N_DIR_NAME as h,RESERVED_DIR_NAMES as P,VERSIONED_FOLDER_REGEXP_MATCH as u}from"../../../constants.js";import{reporter as V}from"../../../utils/reporter/reporter.js";const _=async(s,{cache:i,fs:n})=>{const e=new Map,t=await n.scan();g(t);for(const{relativePath:r}of t){if(c.posix.basename(r)==="versions.yaml"){await F(r,e,i);continue}const o=l(r);if(o==null)continue;const a=e.get(o.versionFolderPath)||{versionedFiles:new Map,versions:[]},f=a.versionedFiles.get(o.filePathInVersion)||new Set,d={version:o.versionName};f.add(d.version),!a.hasVersionsConfig&&a.versions.findIndex(p=>p.version===o.versionName)===-1&&a.versions.push(d),a.versionedFiles.set(o.filePathInVersion,f),e.set(o.versionFolderPath,a)}return m(e)};async function F(s,i,n){let e=c.posix.dirname(s);e==="."?e="/":e=e.endsWith("/")?e:e+"/",e.startsWith(v+"/")&&(e=e.slice(v.length+1)),e.startsWith(h+"/")&&(e=e.slice(h.length+1));const r=(await n.load(s,"yaml")).data,o=i.get(e)||{versionedFiles:new Map,versions:[]};o.hasVersionsConfig=!0,o.versions=r.versions,r.default&&(o.defaultVersion=r.default),i.set(e,o)}function g(s){const i=new Set;for(const{relativePath:n}of s){const e=l(n);if(!(e?.versionFolderPath&&P.includes(e?.versionFolderPath))){if(e?.versionFolderPath==null){(n.match(u)?.length||0)>1&&V.panicOnBuild(`Nested versions are not supported. Detected nested versions in path: "${n}".`);continue}i.has(e.versionFolderPath)||i.add(e.versionFolderPath)}}}function l(s){if(s.match(u)?.length!==1)return null;const[i,n,e]=s.split(new RegExp("(?:^@(?:i18n|l10n)\\/)?(.*?\\/?)@(.*)")),[t,r]=e.split(new RegExp("\\/(.*)","s"));return{versionFolderPath:n||"/",filePathInVersion:r,versionName:t}}function m(s){for(let[i,n]of s){const e=n.hasVersionsConfig?n.versions:n.versions.sort((r,o)=>r.version.localeCompare(o.version)),t=n.defaultVersion||e[e.length-1].version;s.set(i,{...n,versions:e,defaultVersion:t})}return s}function w(s,i){const n=l(s);return n==null?null:i.get(n.versionFolderPath)?.defaultVersion}export{w as getDefaultVersionByPath,l as parsePathVersions,_ as versionsConfigLoader};
