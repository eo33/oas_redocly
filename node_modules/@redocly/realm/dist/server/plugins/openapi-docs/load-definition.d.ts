import OpenAPIDocs from '@redocly/openapi-docs';
import type { RbacScopeItems, RedocConfig, REDOCLY_TEAMS_RBAC } from '@redocly/config';
import type { ContentItemModel, IMenuItem, OpenAPIDefinition } from '@redocly/openapi-docs';
import type { RedoclyConfig } from '../../config/schema.js';
import type { LifecycleContext } from '../types.js';
export type BundledDefinition = {
    definition: OpenAPIDefinition;
    config: Partial<RedoclyConfig & NonNullable<RedoclyConfig['apis']>[string]>;
    relativePath: string;
    realRelativePath: string;
    customOutputRelativeFile?: string;
    markdocChunks: MarkdocChunk[];
    hash: string;
    isVirtual?: boolean;
    contentItems: ContentItemModel[];
    flatItems: (IMenuItem & {
        [REDOCLY_TEAMS_RBAC]?: RbacScopeItems;
    })[];
    options: OpenAPIDocs.Options;
    rawOptions: RedocConfig;
    parser: OpenAPIDocs.OpenAPIParser;
};
export type MarkdocChunk = {
    node: Record<string, unknown>;
    pointer: string;
    markdown: string;
    relativePath: string;
    key: string;
};
export declare function definitionLoader(relativePath: string, { fs, cache, getConfig, isPathIgnored }: LifecycleContext): Promise<Omit<BundledDefinition, 'hash'>[]>;
export declare function definitionsLoader(_: string, context: LifecycleContext): Promise<BundledDefinition[]>;
//# sourceMappingURL=load-definition.d.ts.map