import Q from"node:path";import{OPENAPI_DOCS_TEMPLATE_ID as w,PUBLIC_API_DEFINITIONS_FOLDER as X,PUBLIC_RBAC_SCOPE_ITEM as Y,REDOCLY_TEAMS_RBAC as E}from"../../../shared/constants.js";import{searchResolver as z}from"./search/search-resolver.js";import{convertOpenAPIDocs2Sidebar as J,shouldAddRoute as K}from"./utils.js";import{getTemplatePath as v}from"./get-template-path.js";import{isDevelopMode as x}from"../../utils/is-develop-mode.js";import{OPENAPI_CUSTOM_FIELDS_SERVER_PROPS_GETTER_ID as Z,OPENAPI_SHARED_DATA_PREFIX as B}from"./constants.js";import{storeDefinitionBundles as ee}from"./store-definition-bundles.js";import{Feature as te}from"../../entitlements/entitlements.types.js";import{definitionLoader as oe,definitionsLoader as re}from"./load-definition.js";import{slash as ae}from"../../../shared/utils.js";import{getAiSearchDocuments as se}from"./search/get-ai-search-documents.js";import{fromCurrentDir as ie}from"../../utils/paths.js";const L="openapi-spec-download";async function ge(M){let O=[],g={};return{id:"openapi",requiredEntitlements:[te.Openapi],loaders:{"load-oas-docs":re,"load-oas":oe},processContent:async(e,i)=>{e.createRequestHandler(L,ie(import.meta.url,"./spec-download.api.js")),e.addApiRoute({slug:X,isWildcard:!0,requestHandlerId:L,[E]:Y,getStaticData:async()=>({props:{}})});const p=e.createTemplate(w,v("./template/OpenAPIDocs.js")),r=e.registerServerPropsGetter(w,v("./get-server-props.js")),S=e.registerServerPropsGetter(Z,v("./get-server-props-custom-fields.js")),c=await i.getConfig(),A=c.rules?.["custom-fields-schema"];g={};const d=await e.loadOpenApiDefinitions(i);O=d.map(({markdocChunks:u,relativePath:m,customOutputRelativeFile:a,isVirtual:s,realRelativePath:f})=>({chunks:u,relativePath:m,realRelativePath:f,isVirtual:a!=null||s})),ee(d,e.outdir);const l={};for(const u of d||[]){const{definition:m,config:a,relativePath:s,customOutputRelativeFile:f,contentItems:D,flatItems:n,parser:h,options:C,rawOptions:j,hash:G}=u,F=f||s,o=[],b={},{definition:N}=h||{},{info:P}=N||{},R=P?.["x-metadata"];for(const t of n){const{id:_,href:I,operationDefinition:k}=t;if(x()&&k&&(b[`#${k.pointer}`]=t.href),!K({item:t}))continue;const U=I.split("#")[0]+"/",q=t?.operationDefinition?.[E];o.push({slugSuffix:U,fsPath:F,httpVerb:t?.httpVerb||"",path:s,templateId:p,[E]:q||a.rbac,getStaticData:async W=>({props:{dynamicMarkdocComponents:["openapi"],baseSlug:W.baseSlug,seo:t["x-metadata"]?.seo||{title:t.name,description:t.description},itemId:_,disableAutoScroll:!0}})})}const $={title:P?.title,description:P?.description,summary:P?.summary,...a.metadata,...R},T=!!a.openapi?.excludeFromSearch||!!a.theme?.openapi?.excludeFromSearch||!!c.openapi?.excludeFromSearch||!!c.theme?.openapi?.excludeFromSearch;o[0]={...o[0],metadata:{type:"openapi",...$},hasClientRoutes:!0,getSidebar:(t,_)=>{const I=[];return J({contentItems:D,sidebarItems:I,routeSlug:t.slug,navItem:_}),I},getNavText:()=>P?.title,getSearchDocuments:z(h,C,n,e.getSearchFacets,e.setSearchFacets,T),getAiSearchDocuments:se(h,C,n,e.getSearchFacets,T)},R?.apiId&&(l[R.apiId]={slug:o[0]?.slug||""});const V=o[0];o[0]=o[o.length-1],o[o.length-1]=V;for(const t of o)e.addRoute({...t,serverPropsGetterIds:A?[r,S]:[r]});const H=x()?s:void 0,y=`${B}${s}`;g[y]={fsPath:F,definition:m,options:j,sourcePath:H,routesMapping:b,hash:G};for(const t of o)e.addRoute({...t,sharedData:[{id:y,key:"openAPIDocsStore"}],serverPropsGetterIds:A?[r,S]:[r]})}e.setGlobalData({apiProducts:l})},afterRoutesCreated:async(e,i)=>{for(const{chunks:p,relativePath:r,isVirtual:S,realRelativePath:c}of O)await i.cache.load(r,{loader:async function(){await i.cache.load(c,"load-oas");for(const{node:d,markdown:l,pointer:u,key:m,relativePath:a}of p){const[s,...f]=u.split("#"),D=f.join("#"),n=ae(Q.relative(M.contentDir,s)),{ast:h}=await e.parseMarkdoc({content:l,relativePath:n,isVirtual:S,cacheId:n+(D?"#"+D:"")},i,{sharedDataIds:[`${B}${a}`]});d[`x-parsed-md-${m}`]={result:h,raw:l}}},name:"openapi-markdoc-inline-parser"});for(const[p,r]of Object.entries(g))await e.createSharedData(p,{...r,baseSlug:e.getRouteByFsPath(r.fsPath)?.baseSlug},r.hash)}}}export{ge as openAPIDocsPlugin};
