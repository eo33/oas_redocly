export declare function getMarkdocOptions(serverOutDir?: string, _templateId?: string): Promise<{
    nodes: {
        strong: {
            children: string[];
            render?: string | undefined;
            attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
            slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
            selfClosing?: boolean;
            inline?: boolean;
            transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
            validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
            description?: string;
        };
        em: {
            children: string[];
            render?: string | undefined;
            attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
            slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
            selfClosing?: boolean;
            inline?: boolean;
            transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
            validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
            description?: string;
        };
        s: {
            children: string[];
            render?: string | undefined;
            attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
            slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
            selfClosing?: boolean;
            inline?: boolean;
            transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
            validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
            description?: string;
        };
        link: {
            children: string[];
            render?: string | undefined;
            attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
            slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
            selfClosing?: boolean;
            inline?: boolean;
            transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
            validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
            description?: string;
        };
        document: {
            children: string[];
            render?: string | undefined;
            attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
            slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
            selfClosing?: boolean;
            inline?: boolean;
            transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
            validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
                nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
                tags: Record<string, import("@markdoc/markdoc").Schema>;
                variables: Record<string, any>;
                functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
                partials: Record<string, any>;
                validation?: {
                    parents?: import("@markdoc/markdoc").Node[];
                    validateFunctions?: boolean;
                    environment?: string;
                };
            }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
            description?: string;
        };
        item: import("@markdoc/markdoc").Schema;
        heading: import("@markdoc/markdoc").Schema;
        fence: import("@markdoc/markdoc").Schema;
        table: import("@markdoc/markdoc").Schema;
    };
    tags: any;
    functions: {
        includes: {
            transform(parameters: {
                [key: string]: unknown;
            }): boolean;
        };
        and: import("@markdoc/markdoc").ConfigFunction;
        or: import("@markdoc/markdoc").ConfigFunction;
        not: import("@markdoc/markdoc").ConfigFunction;
        equals: import("@markdoc/markdoc").ConfigFunction;
        default: import("@markdoc/markdoc").ConfigFunction;
        debug: import("@markdoc/markdoc").ConfigFunction;
    };
}>;
//# sourceMappingURL=markdoc-options.d.ts.map