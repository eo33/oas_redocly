export * from './gfm-list-item.js';
export * from './heading.js';
export * from './fence/index.js';
export * from './table.js';
export declare const strong: {
    children: string[];
    render?: string | undefined;
    attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
    slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
    selfClosing?: boolean;
    inline?: boolean;
    transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
    validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
    description?: string;
};
export declare const em: {
    children: string[];
    render?: string | undefined;
    attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
    slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
    selfClosing?: boolean;
    inline?: boolean;
    transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
    validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
    description?: string;
};
export declare const s: {
    children: string[];
    render?: string | undefined;
    attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
    slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
    selfClosing?: boolean;
    inline?: boolean;
    transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
    validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
    description?: string;
};
export declare const link: {
    children: string[];
    render?: string | undefined;
    attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
    slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
    selfClosing?: boolean;
    inline?: boolean;
    transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
    validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
    description?: string;
};
export declare const document: {
    children: string[];
    render?: string | undefined;
    attributes?: Record<string, import("@markdoc/markdoc").SchemaAttribute>;
    slots?: Record<string, import("@markdoc/markdoc").SchemaSlot>;
    selfClosing?: boolean;
    inline?: boolean;
    transform?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").RenderableTreeNodes>;
    validate?(node: import("@markdoc/markdoc").Node, config: Readonly<Partial<{
        nodes: Partial<Record<import("@markdoc/markdoc").NodeType, import("@markdoc/markdoc").Schema>>;
        tags: Record<string, import("@markdoc/markdoc").Schema>;
        variables: Record<string, any>;
        functions: Record<string, import("@markdoc/markdoc").ConfigFunction>;
        partials: Record<string, any>;
        validation?: {
            parents?: import("@markdoc/markdoc").Node[];
            validateFunctions?: boolean;
            environment?: string;
        };
    }>>): import("@markdoc/markdoc").MaybePromise<import("@markdoc/markdoc").ValidationError[]>;
    description?: string;
};
//# sourceMappingURL=index.d.ts.map