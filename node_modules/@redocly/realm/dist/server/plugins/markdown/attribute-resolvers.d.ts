import type { Node } from '@markdoc/markdoc';
import type { MarkdocResolveContext } from './types.js';
import type { BrokenLinkType } from '../../../shared/types/errors.js';
export declare class MdResolveError extends Error {
    meta: {
        rawLink: string;
        link?: string;
        title?: string;
        brokenLinkType?: BrokenLinkType;
    };
    constructor(message: string, meta: {
        rawLink: string;
        link?: string;
        title?: string;
        brokenLinkType?: BrokenLinkType;
    });
}
declare const LINK_ORIGINAL_ATTR_NAME = "redocly:::linkOriginal";
export type WithOriginalAttr<T, P = string> = T & {
    [K in `${typeof LINK_ORIGINAL_ATTR_NAME}:${string}`]?: P | null;
};
export declare function resolveCodeSnippetFromFile(node: WithOriginalAttr<Node>, attributeName: string, pageRelativePath: string, { actions: { contentDir }, context }: MarkdocResolveContext): Promise<void>;
export declare function resolveLink(node: WithOriginalAttr<Node>, attributeName: string, pageRelativePath: string, { actions, context }: MarkdocResolveContext): Promise<{
    sharedDataId?: string;
} | void>;
export declare function resolveHTMLSourceAttribute(node: WithOriginalAttr<Node>, attributeName: string, _pageRelativePath: string, { actions: { contentDir, outdir } }: MarkdocResolveContext): Promise<void>;
export declare function resolveImageSrc(node: WithOriginalAttr<Node>, attributeName: string, pageRelativePath: string, { actions: { contentDir, outdir } }: MarkdocResolveContext): Promise<void>;
export declare function resolveImageSrcSet(node: WithOriginalAttr<Node>, attributeName: string, pageRelativePath: string, { actions: { contentDir, outdir } }: MarkdocResolveContext): Promise<void>;
export declare function resolveParsedYaml(node: Node, attrName: string, relativePath: string, { context }: MarkdocResolveContext): Promise<void>;
export declare function resolveRawContent(node: Node, attrName: string, relativePath: string, { context, actions }: MarkdocResolveContext): Promise<void>;
export declare function resolveSvgContent(node: Node, attrName: string, relativePath: string, { context, actions }: MarkdocResolveContext): Promise<void>;
export declare function resolveJsonSchemaRef(node: Node, attrName: string, relativePath: string, { context, actions }: MarkdocResolveContext): Promise<{
    sharedDataId?: string;
} | undefined>;
export declare function resolveNavLinks(node: WithOriginalAttr<Node, any>, attrName: string, relativePath: string, { context, actions }: MarkdocResolveContext): Promise<void>;
export declare function resolveInlineSvgOrImageLink(node: WithOriginalAttr<Node>, attrName: string, relativePath: string, { context, actions }: MarkdocResolveContext): Promise<void>;
export declare const attributeResolvers: Record<string, typeof resolveLink | typeof resolveJsonSchemaRef>;
export {};
//# sourceMappingURL=attribute-resolvers.d.ts.map