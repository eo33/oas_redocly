import{parse as E}from"path";import{resolveFrontmatterKeys as k}from"../resolve-frontmatter-keys.js";import{REDOCLY_TEAMS_RBAC as w,REDOCLY_ROUTE_RBAC as P}from"../../../shared/constants.js";import{addLeadingSlash as L,removeTrailingSlash as M}from"../../../shared/utils.js";const b=new WeakMap;async function G(C,a,s,e,d){const t=await s.getConfig(),{ast:o,compoundHash:f}=await d.parseMarkdoc(C,s),c={...t.markdown?.editPage,...e.markdown?.editPage},u=a.fsPath!=null?await s.fs.getFileInfo(a.fsPath):null,y=!c?.hide&&c?.baseUrl?{to:M(c.baseUrl)+L(u?.realRelativePath||a.fsPath||"")}:void 0,g={...t.feedback,...e.feedback},p=e.feedback?{type:g.type||"sentiment",settings:g.settings||{},hide:e.feedback?.hide}:void 0;let h=[];e.template?.endsWith("/layouts/CodeGuide/CodeGuide")&&(h=await Promise.all(e.files.map(async n=>{const R=await s.fs.read(n.path),{base:T,ext:v}=E(n.path),S=n.name||T,A=n.lang||v.replace(".","");return{name:S,lang:A,content:R}})));let m=b.get(o),i=m?.ast;(!i||m?.compoundHash!==f)&&(i=JSON.stringify(o),b.set(o,{ast:i,compoundHash:f}));const l=e?.seo?await k(e.seo,["image"],a.fsPath||"",d,s):void 0,r=e?.seo?.title||await a.getNavText?.();return{ast:i,frontmatter:await k({...e,...p!==void 0?{feedback:p}:{},...l!==void 0?{seo:l}:{}},t.markdown?.frontMatterKeysToResolve||["image","links"],a.fsPath||"",d,s),editPage:y,props:{codeGuideFiles:h,seo:{...l,...r?{title:r}:{}}},[w]:a[w],[P]:a[P]}}export{G as markdownStaticDataLoader};
