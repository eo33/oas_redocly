import type { RedoclyConfig, ResolvedConfigLinks, ResolvedNavItem } from '@redocly/config';
import type { RawNavConfig, NavItem } from '../../shared/types/index.js';
import type { AfterRoutesCreatedActions, LifecycleContext, ResolveItemsOptions } from './types.js';
export type ResolveLinkContext = Pick<AfterRoutesCreatedActions, 'outdir' | 'getRouteByFsPath' | 'contentDir' | 'getAllRoutesForLocale' | 'getRouteBySlug'>;
export declare function resolveLinksFromConfig(rawConfig: RawNavConfig, contentDir: string, actions: ResolveLinkContext, context: LifecycleContext, options?: ResolveItemsOptions): Promise<ResolvedConfigLinks>;
export declare function normalizeItems(items: NavItem[]): NavItem[];
export declare function resolveItems(items: NavItem[] | undefined, fromDir: string, actions: ResolveLinkContext, context: LifecycleContext, options?: ResolveItemsOptions): Promise<ResolvedNavItem[] | undefined>;
export declare function resolveItem(item: NavItem, fromDir: string, actions: ResolveLinkContext, context: LifecycleContext, options?: ResolveItemsOptions): Promise<ResolvedNavItem | ResolvedNavItem[]>;
export declare function collectItemsLinkedToSidebars(navbar: RedoclyConfig['navbar'], actions: AfterRoutesCreatedActions, context: LifecycleContext): Promise<Map<string, {
    label?: string;
    link?: string;
}>>;
//# sourceMappingURL=nav-utils.d.ts.map