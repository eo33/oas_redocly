import P from"@markdoc/markdoc";import{mapObject as C}from"../shared/jsUtils.js";import{DEFAULT_LOCALE_PLACEHOLDER as u}from"../shared/constants.js";import{resolveAuthConfig as b}from"./plugins/config-parser/resolve-auth-config.js";import{logger as g,readEnvVariable as A,sha1 as M,writeEnvVariable as m,writeSharedData as _}from"./utils/index.js";import{renderComponents as E}from"./ssr/render.js";import{getPathnameForLocale as L}from"../shared/urls.js";import{readStaticData as O,writeStaticData as B}from"./utils/static-data.js";import{DEFAULT_PROVIDERS_LOGIN_URLS as D,DEFAULT_TITLE as T}from"./constants.js";import{parseAndResolveMarkdoc as k}from"./plugins/markdown/compiler.js";import{getMarkdocOptions as F}from"./plugins/markdown/markdoc/markdoc-options.js";import{normalizeRouteSlug as S,removeTrailingSlash as G}from"../shared/utils.js";import{EntitlementsProvider as I}from"./entitlements/entitlements-provider.js";import{Feature as N}from"./entitlements/entitlements.types.js";import{isL10nPath as H}from"./fs/utils/is-l10n-path.js";import{resolveMetadataGlobs as q}from"./utils/globs.js";const y={routesBySlug:"map",apiRoutesBySlug:"map",middleware:"object",routesByFsPath:"map",routesSharedData:"map",globalData:"object",config:"object",ssr:"object",searchFacets:"map"},f="markdown/partials",R="PLAN_GATES";class w{routesBySlug=new Map;lifecycleContext;newRoutes=[];_sharedDataHashes={};routesByFsPath=new Map;apiRoutesBySlug=new Map;middleware=[];routesSharedData=new Map;sharedDataDeps=new Map;sharedDataMarkdocComponents=new Map;routesDynamicComponents=new Map;ssr={preBodyTags:[],postBodyTags:[],headTags:[]};searchFacets=new Map;searchEngine;templates=new Map;browserPlugins=new Set;loginUrls={...D};apiRequestHandlers=new Map;serverPropsGetters=new Map;esbuildPlugins=[];listeners=new Map;globalData={};cliOptions={};_markdocOptions=void 0;config={configFilePath:"",redirects:{},rbac:{},directoryPermissions:{},devLogin:!1,ssoDirect:{}};ssoDirect={};_contentDir;serverMode;serverOutDir;outdir;renderMode;buildRevision=0;hasSitemap=!1;_resolveUserCodeReady;userCodeReady;_pluginsRunning=Promise.resolve();_resolvePluginsRunning;_queuedLifecycleEvents=new Map;constructor({outdir:e,renderMode:s="thread_worker",contentDir:t,serverMode:a=!1,serverOutDir:r}){this._contentDir=t,this.outdir=e,this.serverMode=a,this.renderMode=s,this.serverOutDir=r,this.userCodeReady=new Promise(n=>{this._resolveUserCodeReady=n})}on(e,s){const t=this.listeners.get(e);t?t.add(s):this.listeners.set(e,new Set([s]))}queueEvent=(e,s,...t)=>{this._queuedLifecycleEvents.set(e+String(s),[e,s,...t])};runListeners=(e,s,...t)=>{for(const a of this.listeners.get(e)||new Set)s?a(s,...t):a(...t)};startPluginsRun(){this.clear(),this._pluginsRunning=new Promise(e=>{this._resolvePluginsRunning=e})}waitForPluginsLifecycle(){return this._pluginsRunning}finishPluginsRun(){this._resolvePluginsRunning?.();for(const e of this._queuedLifecycleEvents.values())this.runListeners(...e);this._queuedLifecycleEvents.clear()}get contentDir(){if(this.serverMode)throw new Error("contentDir should not be used in server mode");return this._contentDir}loadEnvConfig(e=!0){this.ssoDirect=b(this.config.ssoDirect,e),m("REDOCLY_GLOBAL_PERMISSION",this.getGlobalConfig("rootPermission"))}addEsbuildPlugin(e){this.esbuildPlugins.push(e)}markUserCodeReady(){this._resolveUserCodeReady?.(!0)}async reloadMarkdocOptions(){this._markdocOptions=await F(this.serverOutDir)}get markdocOptions(){return{...this._markdocOptions,partials:this.getGlobalConfig(f),themeConfig:this.config.markdown}}setGlobalData=e=>{const s=this.globalData,t={...this.globalData,...e};this.globalData=t,JSON.stringify(t)!==JSON.stringify(s)&&this.queueEvent("global-data-updated",void 0,t)};getGlobalData=()=>this.globalData;parseMarkdoc=async(e,s,t)=>{const{data:{info:a,ast:r},compoundHash:n}=await k(e,this.markdocOptions,{actions:this,context:s});for(const d of a.sharedDataDeps||[]){for(const o of t?.routeSlugs||[])this.addRouteSharedData(o,d,d);for(const o of t?.sharedDataIds||[]){const i=this.sharedDataDeps.get(o)||new Set;i.add(d),this.sharedDataDeps.set(o,i)}}for(const d of a.dynamicMarkdocComponents||[]){for(const o of t?.routeSlugs||[]){const i=this.routesDynamicComponents.get(o)||new Set;i.add(d),this.routesDynamicComponents.set(o,i)}for(const o of t?.sharedDataIds||[]){const i=this.sharedDataMarkdocComponents.get(o)||new Set;i.add(d),this.sharedDataMarkdocComponents.set(o,i)}}return{info:a,ast:r,compoundHash:n}};async loadOpenApiDefinitions(e){return(await e.cache.load(".","load-oas-docs")).data}setSearchEngine(e){this.searchEngine=e}setSearchFacets=e=>{this.searchFacets=e};setCliOptions(e){this.cliOptions={...this.cliOptions,...e}}setGlobalConfig=e=>{this.config={...this.config,...e}};getConfig=()=>this.config;getGlobalConfig=e=>this.config[e];getSearchFacets=()=>this.searchFacets;addRedirect(e,s){!I.instance().canAccessFeature(N.Redirects)&&e!=="/"||(this.config.redirects||(this.config.redirects={}),this.config.redirects[S(e)]=s)}createSharedData=async(e,s,t)=>{if(t&&this._sharedDataHashes[e]===t)return e;const a=JSON.stringify(s),r=t??M(a);return this._sharedDataHashes[e]===r||(this._sharedDataHashes[e]=r,await _(e,a,this.outdir),this.queueEvent("shared-data-updated",e)),e};addRouteSharedData=(e,s,t)=>{const a=G(e),r=this.routesSharedData.get(a)||{};r[s]=t,this.routesSharedData.set(a,r),g.verbose(`Adding shared data to ${e}, ${s}, ${t}`)};addRoute=e=>{const t={...q(e.fsPath,this.config.metadataGlobs),...e.metadata||{}};this.newRoutes.push({...e,metadata:t}),g.verbose("Created route %s",e.slug)};addRouteSharedDataToAllLocales=(e,s,t)=>{const a=[u,...this.lifecycleContext?.fs.localeFolders||[]].map(r=>({code:r,name:r}));for(const r of a){const n=L(e,u,r.code,a);this.addRouteSharedData(n,s,t)}};addApiRoute=e=>{this.apiRoutesBySlug.set(e.slug,e),g.verbose("Created API route %s",e.slug)};addMiddleware=e=>{this.middleware.push(e),g.verbose("Created middleware %s",e.id)};addCustomSsoProvider=e=>{this.loginUrls[e.type]=e.loginUrl;for(const s of e.apiRoutes){const t=s.route.slug;this.createRequestHandler(t,s.handlerImportPath),this.addApiRoute({...s.route,requestHandlerId:t})}};getLoginUrls=()=>this.loginUrls;getRouteByFsPath=e=>{const s=this.routesByFsPath.get(e);return s?this.getRouteBySlug(s):void 0};getRouteBySlug=(e,s={})=>{const{followRedirect:t=!0}=s,a=this.config.redirects?.[e];return t&&a?.to?this.routesBySlug.get(S(a.to)):this.routesBySlug.get(e)};getAllRoutesForLocale=(e=u)=>{const s=Array.from(this.routesBySlug.values()),t=e.toLowerCase();return s.filter(a=>e===u?!H(a.fsPath):a.slug.startsWith(`/${t}`))};getAllRoutes=()=>Array.from(this.routesBySlug.values());getApiRouteBySlug=e=>this.apiRoutesBySlug.get(e);getAllApiRoutes=()=>Array.from(this.apiRoutesBySlug.values());getAllMiddleware=()=>this.middleware;getTemplate=e=>this.templates.get(e);getRequestHandler=e=>this.apiRequestHandlers.get(e);createTemplate=(e,s)=>(this.templates.set(e,s),e);addBrowserPlugin=e=>{this.browserPlugins.add(e)};createRequestHandler=(e,s)=>(this.apiRequestHandlers.set(e,s),e);registerServerPropsGetter=(e,s)=>(this.serverPropsGetters.set(e,s),e);async writeRouteStaticData(e,s){const t=await this.resolveRouteStaticData(e,s,!1);t&&B(e.slug,t,this.outdir)}async resolveRouteStaticData(e,s,t){if(this.serverMode)return O(e.slug,this.outdir);const a={...this,contentDir:this.contentDir,parseMarkdoc:(c,l)=>this.parseMarkdoc(c,l,{routeSlugs:[e.slug]})},r=await e.getStaticData?.(e,a)||{},n=new Set(this.routesDynamicComponents.get(e.slug)),d=this.routesSharedData.get(e.slug)||{};for(const c of Object.values(d)){const l=this.sharedDataMarkdocComponents.get(c);l&&l.forEach(h=>n.add(h));const p=this.sharedDataDeps.get(c);p&&p.forEach(h=>this.addRouteSharedData(e.slug,h,h))}const o=this.getGlobalConfig("seo"),i=r?.frontmatter||{};return{...r,frontmatter:{...i,seo:{...i?.seo,title:i?.seo?.title||await e.getNavText?.()}},props:{...r.props,dynamicMarkdocComponents:Array.from(n),metadata:e.metadata,seo:{title:T,...o,...r.props?.seo}},lastModified:t||!e.fsPath?null:await this.lifecycleContext?.fs.getLastModified(e.fsPath)}}addSsrComponents(e,s){if(!e?.length)return;const t=typeof e[0]=="string"?e.join(""):E(e);t&&(s==="head"?this.ssr.headTags.push(t):s==="preBody"?this.ssr.preBodyTags.push(t):this.ssr.postBodyTags.push(t))}clear=()=>{this.routesByFsPath.clear(),this.newRoutes=[],this.routesBySlug.clear(),this.apiRoutesBySlug.clear(),this.middleware=[],this.loginUrls={...D},this.routesSharedData.clear(),this.sharedDataDeps.clear(),this.sharedDataMarkdocComponents.clear(),this.routesDynamicComponents.clear(),this.config.redirects={},this.config.directoryPermissions={},this.ssr={preBodyTags:[],postBodyTags:[],headTags:[]}};toJson(){const e=Object.fromEntries(Object.entries(y).map(([s,t])=>{switch(t){case"map":const a=Array.from(this[s].entries());return[s,a];case"object":return[s,this[s]];default:throw new Error("Invalid format")}}));return e[R]=A("PLAN_GATES"),e}static fromJson(e,s){const t=new w(s);for(const[r,n]of Object.entries(y))switch(n){case"map":t[r]=new Map(e[r]);break;case"object":t[r]=e[r];break;default:throw new Error("Invalid format")}t.config[f]=U(t.config[f]||{});const a=e[R];return a&&m("PLAN_GATES",a),t.loadEnvConfig(),t}}function U(v){return C(v,e=>P.Ast.fromJSON(JSON.stringify(e)))}export{f as MARKDOC_PARTIALS_DATA_KEY,w as Store};
