var E=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var A=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},l=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let p of F(t))!g.call(e,p)&&p!==r&&a(e,p,{get:()=>t[p],enumerable:!(n=h(t,p))||n.enumerable});return e};var b=(e,t,r)=>(r=e!=null?E(V(e)):{},l(t||!e||!e.__esModule?a(r,"default",{value:e,enumerable:!0}):r,e)),k=e=>l(a({},"__esModule",{value:!0}),e);var C={};A(C,{ArgumentView:()=>B});module.exports=k(C);var o=b(require("react")),m=require("@redocly/theme"),c=require("./FieldRow"),u=require("./TypeView"),s=require("./styled"),y=require("../../definition/utils/is-field-expandable"),f=require("../../common/components/ViewNested");function q({argument:e,contrast:t,renderField:r,fieldExpandLevel:n=0,firstOfType:p}){const x=n+1,[d,T]=o.default.useState(!1),{useTranslate:w}=(0,m.useThemeHooks)(),{translate:i}=w();return o.default.createElement(s.FieldWrapper,{firstOfType:p,showBorder:!d,"data-testid":"arg-type"},o.default.createElement(c.FieldRow,{isArgument:!0,fieldExpandLevel:n,"data-testid":e.name+"-data",field:e}),(0,y.useIsFieldExpandable)(e,n)?o.default.createElement(s.ExpandableFieldBody,{contrast:!t},o.default.createElement(f.ViewNested,{expanded:d,level:n,expandText:i("graphql.returnTypes.show","Show return type"),collapseText:i("graphql.returnTypes.hide","Hide return type"),onClick:()=>T(!d)},o.default.createElement(u.TypeView,{type:e.type,contrast:!t,fieldExpandLevel:x,renderField:r}))):null)}const B=(0,o.memo)(q);0&&(module.exports={ArgumentView});
