var p=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var o=Object.getOwnPropertyNames;var h=Object.prototype.hasOwnProperty;var f=(i,e)=>{for(var t in e)p(i,t,{get:e[t],enumerable:!0})},g=(i,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of o(e))!h.call(i,n)&&n!==t&&p(i,n,{get:()=>e[n],enumerable:!(r=u(e,n))||r.enumerable});return i};var y=i=>g(p({},"__esModule",{value:!0}),i);var T={};f(T,{AppStore:()=>l});module.exports=y(T);var c=require("graphql"),s=require("../schema");class l{constructor(e){Object.defineProperty(this,"schema",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"referenceMap",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),this.createReferenceMap()}getQueryType(){return this.schema.getQueryType()}getQueryField(e){const t=this.getQueryType();return t&&(0,s.getTypeField)(t,e)}getMutationType(){return this.schema.getMutationType()}getMutationField(e){const t=this.getMutationType();return t&&(0,s.getTypeField)(t,e)}getSubscriptionType(){return this.schema.getSubscriptionType()}getSubscriptionField(e){const t=this.getSubscriptionType();return t&&(0,s.getTypeField)(t,e)}getDirective(e){return this.schema.getDirective(e)||void 0}getType(e){return this.schema.getType(e)||void 0}getTypeReferences(e){return this.referenceMap.get(e)}createReferenceMap(){const e=this.schema.getTypeMap();Object.values(e).forEach(t=>{!(0,s.isExcludedType)(t,this.schema)&&(0,s.isFieldsType)(t)?this.setFieldsTypeReferences(t):(0,c.isUnionType)(t)&&this.setUnionTypeReferences(t)})}setFieldsTypeReferences(e){const t=e.getFields();Object.values(t).forEach(r=>{const n=(0,c.getNamedType)(r.type),a={name:e.name,field:r.name,group:(0,s.getTypeGroup)(e)};this.setReference(n.name,a)})}setUnionTypeReferences(e){e.getTypes().forEach(t=>{const r=(0,c.getNamedType)(t),n={name:e.name,group:s.TypeGroup.unions};this.setReference(r.name,n)})}setReference(e,t){const r=this.referenceMap.get(e);r?.length?r.push(t):this.referenceMap.set(e,[t])}}0&&(module.exports={AppStore});
